Last login: Tue Dec 22 20:53:26 on ttys005 
[Wed, Dec 23 202012:43PM] PycharmProjects/raise-package git:(master*) $ cd 
[Wed, Dec 23 202012:43PM] /Users/ryedida $ cd Desktop/menzies                     
[Wed, Dec 23 202012:43PM] Desktop/menzies $ ls 
DL4SE               README.md           fastread            lit-review          yedida-gone-nuts 
Dodge               SIMPLE.drawio       intrinsic_dimension reports 
[Wed, Dec 23 202012:44PM] Desktop/menzies $ cd DL4SE                              
[Wed, Dec 23 202012:44PM] menzies/DL4SE git:(master*) $ l                                           
total 24 
drwxr-xr-x@ 13 ryedida  staff   416B Dec 22 22:06 . 
drwxr-xr-x@ 13 ryedida  staff   416B Dec 22 22:06 .. 
-rw-r--r--@  1 ryedida  staff   6.0K Dec 18 22:20 .DS_Store 
drwxr-xr-x@ 14 ryedida  staff   448B Dec 22 15:29 .git 
-rw-r--r--   1 ryedida  staff    42B Sep 30 00:10 .gitignore 
drwxr-xr-x@  2 ryedida  staff    64B Dec 19 14:01 .ipynb_checkpoints 
drwxr-xr-x@  5 ryedida  staff   160B Dec 21 09:25 defect 
drwxr-xr-x@ 11 ryedida  staff   352B Dec 18 22:21 dodge-vs-rest 
drwxr-xr-x@  8 ryedida  staff   256B Dec 22 22:06 issue_close_time 
drwxr-xr-x@ 19 ryedida  staff   608B Dec 12 09:38 lit-review 
drwxr-xr-x@  8 ryedida  staff   256B Dec 12 09:37 non-dl 
drwxr-xr-x@ 11 ryedida  staff   352B Dec 12 09:38 smell 
drwxr-xr-x@  8 ryedida  staff   256B Dec 12 09:38 text-mining 
[Wed, Dec 23 202012:44PM] menzies/DL4SE git:(master*) $ cd issue_close_time                   
[Wed, Dec 23 202012:44PM] DL4SE/issue_close_time git:(master*) $ ls 
All methods comparison.ipynb Comparison with DODGE        DASENetComparison            __pycache__ 
[Wed, Dec 23 202012:44PM] DL4SE/issue_close_time git:(master*) $ cd DASENetComparison                           
[Wed, Dec 23 202012:44PM] issue_close_time/DASENetComparison git:(master*) $ ls 
Bug-Related-Activity-Logs                              PROMISE.ipynb 
Chromium.ipynb                                         README.md 
Common bug id in DeepTriage and DASENet datasets.ipynb Reproduction 
DODGE on Bugzilla data.ipynb                           buildr.txt 
DeepTriage.ipynb                                       dimensionality.png 
Eclipse.ipynb                                          dodge-log 
Firefox.ipynb                                          eclipse.txt 
GHOST-Results                                          promise-buildr.csv 
Intrinsic dimensionality plots.ipynb 
[Wed, Dec 23 202012:44PM] issue_close_time/DASENetComparison git:(master*) $ cd GHOST-Results     
[Wed, Dec 23 202012:44PM] DASENetComparison/GHOST-Results git:(master*) $ ls 
Statistical comparsion.ipynb chromium-9class.txt          eclipse-7class.txt           firefox-5class.txt 
chromium-3class.txt          eclipse-3class.txt           eclipse-9class.txt           firefox-7class.txt 
chromium-7class.txt          eclipse-5class.txt           firefox-3class.txt           firefox-9class.txt 
[Wed, Dec 23 202012:44PM] DASENetComparison/GHOST-Results git:(master*) $ cat firefox-3class.txt         
Run # 0 
====== 
iter 0: [0.5337980686817896, array([0.62224797, 0.32169701, 0.66193182]), array([0.54842553, 0.44184446, 0.57712949])] 
iter 1: [0.5323695788812068, array([0.64387795, 0.3268749 , 0.63541667]), array([0.53904608, 0.44225989, 0.58424031])] 
iter 2: [0.5161990743386092, array([0.60254925, 0.32119592, 0.62989268]), array([0.53378956, 0.39764268, 0.58519062])] 
iter 3: [0.5335695103136964, array([0.62437234, 0.30967095, 0.67092803]), array([0.55236631, 0.43767705, 0.57352941])] 
iter 4: [0.5343123250099995, array([0.66550792, 0.27593118, 0.67124369]), array([0.53501009, 0.4505045 , 0.57527391])] 
iter 5: [0.5379121193074682, array([0.6208961 , 0.34892267, 0.64867424]), array([0.54676871, 0.45040966, 0.58857225])] 
iter 6: [0.5257985257985258, array([0.60042487, 0.32553867, 0.6540404 ]), array([0.56527273, 0.41109471, 0.5707989 ])] 
iter 7: [0.5048854351179932, array([0.64600232, 0.23584433, 0.64378157]), array([0.51021965, 0.370215  , 0.57200954])] 
iter 8: [0.5113422090166276, array([0.58246427, 0.24052113, 0.70912247]), array([0.52589364, 0.44985942, 0.52457677])] 
iter 9: [0.5323695788812068, array([0.67979915, 0.30415901, 0.62752525]), array([0.52710392, 0.44523227, 0.59052428])] 
iter 10: [0.5272841551911319, array([0.60930861, 0.3081677 , 0.66729798]), array([0.53720415, 0.4407549 , 0.56812685])] 
iter 11: [0.515970515970516, array([0.56450367, 0.26891598, 0.70975379]), array([0.53721742, 0.44364839, 0.53338868])] 
iter 12: [0.4998000114279184, array([0.74951719, 0.25288124, 0.5290404 ]), array([0.49070679, 0.37859465, 0.59932058])] 
iter 13: [0.507228158390949, array([0.56044805, 0.23417404, 0.72174874]), array([0.52572464, 0.45255003, 0.51480356])] 
iter 14: [0.5376835609393749, array([0.60814986, 0.39335226, 0.61647727]), array([0.55922571, 0.44400452, 0.59488273])] 
iter 15: [0.5124850008570939, array([0.56431054, 0.32236512, 0.64977904]), array([0.54031065, 0.38723917, 0.57912505])] 
iter 16: [0.5155705388263527, array([0.5569718 , 0.36696175, 0.62215909]), array([0.54047976, 0.41258216, 0.57631579])] 
iter 17: [0.5032283869493172, array([0.5967555 , 0.22849507, 0.6863952 ]), array([0.51871748, 0.37254902, 0.55246443])] 
iter 18: [0.5118564653448374, array([0.5623793, 0.2415233, 0.7260101]), array([0.52839775, 0.44698609, 0.52541405])] 
iter 19: [0.5177418433232387, array([0.71938973, 0.18439953, 0.66792929]), array([0.48858867, 0.45904366, 0.56638116])] 
iter 20: [0.5173418661790755, array([0.58536114, 0.34725238, 0.62247475]), array([0.53110216, 0.42307692, 0.57325581])] 
iter 21: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 22: [0.5381978172675848, array([0.62900734, 0.28895941, 0.69949495]), array([0.55109983, 0.46145639, 0.56516195])] 
iter 23: [0.5193988914919148, array([0.64812669, 0.24787039, 0.6707702 ]), array([0.51322832, 0.42680472, 0.56780227])] 
iter 24: [0.5357408148105822, array([0.66280417, 0.32403541, 0.63194444]), array([0.5353299 , 0.44938615, 0.59117083])] 
iter 25: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 26: [0.5034569453174105, array([0.64329857, 0.28394856, 0.59659091]), array([0.50226176, 0.39270039, 0.57798165])] 
iter 27: [0.5110565110565111, array([0.69679413, 0.17621513, 0.67566288]), array([0.4960132 , 0.39992418, 0.56410594])] 
iter 28: [0.5155705388263527, array([0.6208961 , 0.23500919, 0.69460227]), array([0.53762542, 0.38109426, 0.56214076])] 
iter 29: [0.5100279984000914, array([0.66048667, 0.22264907, 0.65861742]), array([0.51506024, 0.37602257, 0.57039366])] 
Run # 1 
====== 
iter 0: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 1: [0.5240271984458031, array([0.71263036, 0.23350593, 0.64441288]), array([0.50749553, 0.4445151 , 0.57628793])] 
iter 2: [0.5193417518998914, array([0.63344921, 0.30248873, 0.63099747]), array([0.54439834, 0.39097582, 0.58416131])] 
iter 3: [0.5008285240843381, array([0.7761684 , 0.22147987, 0.53977273]), array([0.47856633, 0.38016055, 0.60908281])] 
iter 4: [0.518713216387635, array([0.5023175 , 0.40454318, 0.63999369]), array([0.56877323, 0.41352228, 0.5734691 ])] 
iter 5: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 6: [0.5295125992800411, array([0.62359985, 0.33940204, 0.6322601 ]), array([0.54023758, 0.43326226, 0.58618671])] 
iter 7: [0.5233415233415234, array([0.61529548, 0.29012861, 0.66856061]), array([0.53519234, 0.42804337, 0.56555407])] 
iter 8: [0.5264270613107822, array([0.66821166, 0.28177718, 0.6417298 ]), array([0.52945677, 0.43311938, 0.57502475])] 
iter 9: [0.49431461059368037, array([0.65005794, 0.27609821, 0.57323232]), array([0.52064965, 0.37171127, 0.55122173])] 
iter 10: [0.5289983429518313, array([0.59656238, 0.26524136, 0.72301136]), array([0.55170566, 0.44732394, 0.54849138])] 
iter 11: [0.5225415690531969, array([0.71552723, 0.27092033, 0.60258838]), array([0.5062167 , 0.43920931, 0.58838034])] 
iter 12: [0.5016284783726644, array([0.57473928, 0.22999833, 0.69854798]), array([0.53699026, 0.36700426, 0.53929572])] 
iter 13: [0.5203702645563111, array([0.58516802, 0.2543845 , 0.71875   ]), array([0.53628319, 0.43701578, 0.54434616])] 
iter 14: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 15: [0.5175132849551454, array([0.5983005 , 0.24920661, 0.70501894]), array([0.5330351 , 0.42146893, 0.54816542])] 
iter 16: [0.5323695788812068, array([0.64542294, 0.27943878, 0.67897727]), array([0.53946731, 0.44684829, 0.56889712])] 
iter 17: [0.5349408605222559, array([0.71320973, 0.2882913 , 0.62231692]), array([0.52220023, 0.45006519, 0.59796785])] 
iter 18: [0.5128849780012571, array([0.66203167, 0.35393352, 0.54119318]), array([0.5380631 , 0.38513268, 0.60927505])] 
iter 19: [0.5369407462430719, array([0.61201236, 0.32587272, 0.67503157]), array([0.55851251, 0.44778517, 0.57255689])] 
iter 20: [0.5177989829152619, array([0.70162225, 0.26674461, 0.60479798]), array([0.52675076, 0.38780962, 0.59081098])] 
iter 21: [0.5299125764242043, array([0.59115489, 0.31668615, 0.6813447 ]), array([0.5588826 , 0.42664266, 0.56952507])] 
iter 22: [0.5105993943203245, array([0.60950174, 0.25254719, 0.67361111]), array([0.53491525, 0.38414634, 0.5568167 ])] 
iter 23: [0.5121993028969773, array([0.69042101, 0.24068816, 0.62310606]), array([0.51276535, 0.38663805, 0.58041752])] 
iter 24: [0.5357408148105822, array([0.60119737, 0.3128445 , 0.69286616]), array([0.5620148 , 0.44174528, 0.56850557])] 
iter 25: [0.5200274270041711, array([0.59424488, 0.2765993 , 0.68939394]), array([0.52796843, 0.42768595, 0.55992821])] 
iter 26: [0.5301982743843209, array([0.65044419, 0.2999833 , 0.64946338]), array([0.53434872, 0.43987264, 0.57835559])] 
iter 27: [0.5151134220901663, array([0.65797605, 0.25254719, 0.64646465]), array([0.52961293, 0.39262529, 0.56754884])] 
iter 28: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 29: [0.5283126678475516, array([0.68617227, 0.3116753 , 0.60400884]), array([0.52265372, 0.43294664, 0.59862349])] 
Run # 2 
====== 
iter 0: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 1: [0.5087137877835552, array([0.57821553, 0.27593118, 0.671875  ]), array([0.53473835, 0.4       , 0.54773546])] 
iter 2: [0.5155705388263527, array([0.62668984, 0.2859529 , 0.6417298 ]), array([0.53903654, 0.39086758, 0.57259541])] 
iter 3: [0.4880863950631392, array([0.65623793, 0.20477702, 0.61837121]), array([0.4860535 , 0.35546535, 0.55487891])] 
iter 4: [0.5122564424890006, array([0.64774044, 0.33439118, 0.56960227]), array([0.539315  , 0.37945413, 0.6008991 ])] 
iter 5: [0.5340837666419062, array([0.62688297, 0.30532821, 0.67440025]), array([0.55525145, 0.44347404, 0.56723749])] 
iter 6: [0.5250557111022227, array([0.60505987, 0.34257558, 0.63210227]), array([0.55333804, 0.41242711, 0.58330906])] 
iter 7: [0.5315696245928804, array([0.67670915, 0.33405712, 0.59958965]), array([0.53050719, 0.44218439, 0.59610858])] 
iter 8: [0.5177418433232387, array([0.60872924, 0.32670787, 0.6238952 ]), array([0.55444151, 0.39403707, 0.57691185])] 
iter 9: [0.4987714987714988, array([0.72190035, 0.26574244, 0.53661616]), array([0.46480975, 0.43221951, 0.58843891])] 
iter 10: [0.49351465630535396, array([0.74063345, 0.2239853 , 0.54624369]), array([0.48507463, 0.36769948, 0.58187626])] 
iter 11: [0.517056168218959, array([0.66512167, 0.31651912, 0.58554293]), array([0.51641925, 0.41666667, 0.59038829])] 
iter 12: [0.5067710416547626, array([0.53379683, 0.28912644, 0.69034091]), array([0.56477319, 0.3776178 , 0.5451826 ])] 
iter 13: [0.5266556196788755, array([0.67361916, 0.30499415, 0.61600379]), array([0.5330888 , 0.42425651, 0.58656447])] 
iter 14: [0.519627449860008, array([0.51004249, 0.36512444, 0.67345328]), array([0.58741103, 0.40088025, 0.56501589])] 
iter 15: [0.5166561910747958, array([0.6185786 , 0.28094204, 0.65609217]), array([0.54883482, 0.38604544, 0.56882868])] 
iter 16: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 17: [0.5118564653448374, array([0.63132484, 0.2613997 , 0.65088384]), array([0.53076798, 0.38508858, 0.56663919])] 
iter 18: [0.5201988457802411, array([0.65971418, 0.27158844, 0.64109848]), array([0.54076302, 0.3944687 , 0.57519116])] 
iter 19: [0.5179132620993087, array([0.63286983, 0.28378153, 0.64520202]), array([0.54237008, 0.39649942, 0.56983552])] 
iter 20: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 21: [0.5116850465687675, array([0.63035921, 0.27275764, 0.64046717]), array([0.52645161, 0.39095044, 0.56962381])] 
iter 22: [0.5229415461973601, array([0.66434917, 0.25421747, 0.66130051]), array([0.54404555, 0.39307851, 0.57350123])] 
iter 23: [0.5157419576024227, array([0.58362302, 0.24670119, 0.71448864]), array([0.5533785 , 0.38991552, 0.54859428])] 
iter 24: [0.4895148848637221, array([0.61877173, 0.27559713, 0.58601641]), array([0.49813433, 0.38363171, 0.54861111])] 
iter 25: [0.5161990743386092, array([0.6583623 , 0.28762318, 0.61600379]), array([0.51604602, 0.42466091, 0.57061404])] 
iter 26: [0.5242557568138964, array([0.63750483, 0.34942375, 0.59690657]), array([0.53259116, 0.43492723, 0.58247343])] 
iter 27: [0.5221987315010571, array([0.62437234, 0.33723067, 0.61347854]), array([0.55741379, 0.39433594, 0.59063972])] 
iter 28: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 29: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
Run # 3 
====== 
iter 0: [0.4987143591794755, array([0.60100425, 0.26123267, 0.6395202 ]), array([0.51909925, 0.38617284, 0.54345494])] 
iter 1: [0.5086566481915319, array([0.61510236, 0.31251044, 0.60700758]), array([0.52792972, 0.38729042, 0.57947868])] 
iter 2: [0.5028855493971773, array([0.67728853, 0.25004176, 0.59927399]), array([0.49625018, 0.3893368 , 0.57626347])] 
iter 3: [0.5073424375749958, array([0.63924295, 0.35059295, 0.54766414]), array([0.52439797, 0.38827229, 0.60003458])] 
iter 4: [0.5279698302954117, array([0.65372731, 0.29380324, 0.64646465]), array([0.5310637 , 0.44207087, 0.57302742])] 
iter 5: [0.5293983200959945, array([0.66512167, 0.3315517 , 0.60542929]), array([0.53090797, 0.43454466, 0.59509774])] 
iter 6: [0.5183703788354951, array([0.70876786, 0.26340404, 0.60369318]), array([0.51523235, 0.40654808, 0.58855208])] 
iter 7: [0.5129421175932803, array([0.67246041, 0.32169701, 0.56328914]), array([0.52765571, 0.38987854, 0.59862462])] 
iter 8: [0.5198560082281013, array([0.62437234, 0.31468181, 0.62831439]), array([0.55302771, 0.39192844, 0.58133762])] 
iter 9: [0.49242900405691103, array([0.52452684, 0.17805245, 0.76325758]), array([0.5448345 , 0.35904345, 0.50654656])] 
iter 10: [0.5184275184275184, array([0.57512553, 0.31852347, 0.66098485]), array([0.56529992, 0.39368291, 0.56678847])] 
iter 11: [0.516713330666819, array([0.70509849, 0.22816102, 0.63541667]), array([0.51941955, 0.38795797, 0.57919724])] 
iter 12: [0.4942003314096337, array([0.63595983, 0.19993319, 0.65640783]), array([0.49010269, 0.37312968, 0.54911539])] 
iter 13: [0.5180275412833553, array([0.6239861 , 0.3303825 , 0.60874369]), array([0.54220507, 0.3955209 , 0.58966519])] 
iter 14: [0.5261413633506656, array([0.61838548, 0.30298981, 0.66161616]), array([0.55187866, 0.40618003, 0.57956588])] 
iter 15: [0.5088280669676019, array([0.7238316 , 0.2380157 , 0.58901515]), array([0.5025476 , 0.39517471, 0.57977319])] 
iter 16: [0.515970515970516, array([0.59733488, 0.31434775, 0.63999369]), array([0.54463814, 0.39612713, 0.5734691 ])] 
iter 17: [0.5315696245928804, array([0.61896485, 0.28394856, 0.69412879]), array([0.55875174, 0.43600923, 0.55911518])] 
iter 18: [0.5341980458259528, array([0.56875241, 0.33021547, 0.69870581]), array([0.57961031, 0.44149174, 0.55741627])] 
iter 19: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 20: [0.5161990743386092, array([0.67690228, 0.31585101, 0.57417929]), array([0.52596038, 0.39552395, 0.60072655])] 
iter 21: [0.5164276327067024, array([0.52838934, 0.31234341, 0.69949495]), array([0.55711668, 0.41243935, 0.55014896])] 
iter 22: [0.5138563510656534, array([0.53418308, 0.2824453 , 0.71590909]), array([0.5700742 , 0.3851059 , 0.54928554])] 
iter 23: [0.5129421175932803, array([0.64020857, 0.32403541, 0.58743687]), array([0.52711083, 0.39608003, 0.58948369])] 
iter 24: [0.4950002856979601, array([0.59656238, 0.23484216, 0.65782828]), array([0.52516151, 0.36912575, 0.53367478])] 
iter 25: [0.5275127135592251, array([0.65546543, 0.27092033, 0.66540404]), array([0.53626165, 0.434038  , 0.56704775])] 
iter 26: [0.5252271298782927, array([0.67516416, 0.27593118, 0.63825758]), array([0.52595156, 0.42998438, 0.57672561])] 
iter 27: [0.5220844523170105, array([0.699691  , 0.31501587, 0.57260101]), array([0.51868289, 0.41578483, 0.60668896])] 
iter 28: [0.5195131706759614, array([0.59173426, 0.35326541, 0.61758207]), array([0.55698964, 0.39569691, 0.58797896])] 
iter 29: [0.5085423690074853, array([0.5826574 , 0.28528478, 0.65893308]), array([0.53932785, 0.39237308, 0.55268732])] 
Run # 4 
====== 
iter 0: [0.5298554368321811, array([0.66415604, 0.31384667, 0.62421086]), array([0.52624331, 0.44684899, 0.58497264])] 
iter 1: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 2: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 3: [0.5239129192617564, array([0.55986868, 0.34524804, 0.66335227]), array([0.59006717, 0.39371429, 0.57277187])] 
iter 4: [0.4902005599680018, array([0.74913094, 0.27509604, 0.48184975]), array([0.47612618, 0.37637112, 0.61329851])] 
iter 5: [0.507399577167019, array([0.57184241, 0.28211124, 0.66761364]), array([0.53660747, 0.38641043, 0.55570152])] 
iter 6: [0.48860065139134906, array([0.63035921, 0.30850175, 0.54292929]), array([0.49718203, 0.37655454, 0.57038634])] 
iter 7: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 8: [0.5147134449460031, array([0.65701043, 0.25037581, 0.64820076]), array([0.52834291, 0.39199791, 0.56742194])] 
iter 9: [0.5210559396605908, array([0.58883739, 0.33773175, 0.63888889]), array([0.56767827, 0.3950762 , 0.57729606])] 
iter 10: [0.4830009713730644, array([0.48416377, 0.16970102, 0.77809343]), array([0.55649279, 0.35010338, 0.48840896])] 
iter 11: [0.5111136506485344, array([0.71243723, 0.2695841 , 0.57481061]), array([0.51393146, 0.38863472, 0.59027553])] 
iter 12: [0.5163133535226558, array([0.62784859, 0.19876399, 0.72522096]), array([0.54400937, 0.38511327, 0.544754  ])] 
iter 13: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 14: [0.5317981829609737, array([0.60563924, 0.33021547, 0.66193182]), array([0.55990002, 0.43894316, 0.56706328])] 
iter 15: [0.5184846580195417, array([0.61529548, 0.26757976, 0.67645202]), array([0.54331514, 0.40029985, 0.56136215])] 
iter 16: [0.5171133078109822, array([0.68713789, 0.31267747, 0.57133838]), array([0.52193047, 0.40085653, 0.60192883])] 
iter 17: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 18: [0.5219130335409405, array([0.56334492, 0.32754301, 0.67171717]), array([0.5771666 , 0.39809176, 0.5658822 ])] 
iter 19: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 20: [0.5331123935775098, array([0.63248358, 0.33556038, 0.63857323]), array([0.55274262, 0.43778601, 0.57907543])] 
iter 21: [0.5118564653448374, array([0.72267285, 0.29797895, 0.54166667]), array([0.50973982, 0.39460296, 0.60861855])] 
iter 22: [0.5246557339580595, array([0.62591734, 0.36529146, 0.59248737]), array([0.55649038, 0.40432612, 0.59891512])] 
iter 23: [0.5230558253814068, array([0.56740054, 0.3221981 , 0.67660985]), array([0.58189741, 0.39658717, 0.56497101])] 
iter 24: [0.5233986629335466, array([0.63615295, 0.32370135, 0.61994949]), array([0.55463883, 0.39729397, 0.58767205])] 
iter 25: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 26: [0.524370035997943, array([0.61220548, 0.31184233, 0.65340909]), array([0.56496168, 0.39546706, 0.5774864 ])] 
iter 27: [0.5190560539397748, array([0.62804171, 0.30048438, 0.63652146]), array([0.54950997, 0.39296636, 0.57573162])] 
iter 28: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 29: [0.5138563510656534, array([0.61645423, 0.35844329, 0.57686237]), array([0.5438746 , 0.39463038, 0.59008718])] 
Run # 5 
====== 
iter 0: [0.5055139706302497, array([0.62939359, 0.26540838, 0.6311553 ]), array([0.53251634, 0.37662953, 0.55836359])] 
iter 1: [0.5296840180561111, array([0.63692545, 0.35226324, 0.60969066]), array([0.54136573, 0.42865854, 0.59531515])] 
iter 2: [0.5109993714644877, array([0.72865971, 0.34123935, 0.49352904]), array([0.51841165, 0.39003436, 0.62728185])] 
iter 3: [0.531683903776927, array([0.62920046, 0.28895941, 0.6813447 ]), array([0.54701142, 0.44553181, 0.56342991])] 
iter 4: [0.5236843608936632, array([0.62050985, 0.3268749 , 0.63052399]), array([0.55320248, 0.3976026 , 0.59001625])] 
iter 5: [0.5104851151362779, array([0.64870606, 0.23033239, 0.66224747]), array([0.53182394, 0.37915865, 0.55590885])] 
iter 6: [0.5129421175932803, array([0.63866358, 0.28695507, 0.62373737]), array([0.53798601, 0.38598068, 0.57250471])] 
iter 7: [0.5187703559796583, array([0.65430668, 0.31852347, 0.59722222]), array([0.54478212, 0.39206414, 0.58959177])] 
iter 8: [0.5185989372035884, array([0.55542681, 0.29246701, 0.70217803]), array([0.57439585, 0.3922491 , 0.55404732])] 
iter 9: [0.5117421861607908, array([0.51834685, 0.26306998, 0.74131944]), array([0.57118536, 0.38433382, 0.53963695])] 
iter 10: [0.5191703331238215, array([0.55870993, 0.3175213 , 0.67739899]), array([0.57332541, 0.39099136, 0.56525747])] 
iter 11: [0.5156276784183761, array([0.70876786, 0.2754301 , 0.58475379]), array([0.52458548, 0.39094358, 0.58931128])] 
iter 12: [0.5249414319181761, array([0.65063731, 0.36328712, 0.57496843]), array([0.53442259, 0.42463881, 0.59967078])] 
iter 13: [0.5141991886177932, array([0.60525299, 0.29831301, 0.64378157]), array([0.55244139, 0.38549536, 0.56692147])] 
iter 14: [0.5100279984000914, array([0.60641174, 0.31768832, 0.61300505]), array([0.5366604 , 0.38572298, 0.57806221])] 
iter 15: [0.5213987772127306, array([0.65720355, 0.29664273, 0.6227904 ]), array([0.54448   , 0.39722657, 0.5820059 ])] 
iter 16: [0.526198502942689, array([0.63402858, 0.30566227, 0.64646465]), array([0.55833333, 0.40326135, 0.57828604])] 
iter 17: [0.5208273812924976, array([0.57415991, 0.33839987, 0.64962121]), array([0.57515961, 0.38834579, 0.57849613])] 
iter 18: [0.5081995314553454, array([0.62881421, 0.26774678, 0.63683712]), array([0.52196217, 0.39135742, 0.56299707])] 
iter 19: [0.5151134220901663, array([0.65623793, 0.36946718, 0.5374053 ]), array([0.53714828, 0.39261626, 0.61451002])] 
iter 20: [0.5116279069767442, array([0.74005407, 0.29731084, 0.52746212]), array([0.50829022, 0.3892412 , 0.62015216])] 
iter 21: [0.5191703331238215, array([0.60332175, 0.24937364, 0.7053346 ]), array([0.56136568, 0.39445178, 0.54827629])] 
iter 22: [0.5148277241300497, array([0.69389726, 0.24636713, 0.62215909]), array([0.52552289, 0.39639882, 0.5677661 ])] 
iter 23: [0.5108279526884179, array([0.63035921, 0.26156673, 0.64867424]), array([0.52926869, 0.38714462, 0.56386336])] 
iter 24: [0.5142563282098166, array([0.64716107, 0.37882078, 0.53361742]), array([0.52904957, 0.40572451, 0.60623991])] 
iter 25: [0.5347123021541627, array([0.64677482, 0.31702021, 0.64883207]), array([0.5388576 , 0.44774711, 0.58336881])] 
iter 26: [0.5201988457802411, array([0.61490923, 0.32286621, 0.62926136]), array([0.52987186, 0.42718232, 0.57226927])] 
iter 27: [0.5221987315010571, array([0.599073  , 0.33789878, 0.63352273]), array([0.56297641, 0.39713388, 0.58199217])] 
iter 28: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 29: [0.5127135592251871, array([0.63904983, 0.29547353, 0.61474116]), array([0.53743706, 0.38273475, 0.57944064])] 
Run # 6 
====== 
iter 0: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 1: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 2: [0.5127135592251871, array([0.67883353, 0.23551027, 0.63888889]), array([0.51943254, 0.38875103, 0.56957929])] 
iter 3: [0.5021998742928976, array([0.45693318, 0.28261233, 0.74668561]), array([0.59209209, 0.3713784 , 0.52866242])] 
iter 4: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 5: [0.519456031083938, array([0.69157976, 0.32303324, 0.56439394]), array([0.52623071, 0.39991729, 0.61023891])] 
iter 6: [0.5298554368321811, array([0.58304365, 0.29848004, 0.70501894]), array([0.56073551, 0.43321212, 0.55893393])] 
iter 7: [0.5126564196331638, array([0.65102356, 0.2649073 , 0.63368056]), array([0.52483263, 0.39364607, 0.56958434])] 
iter 8: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 9: [0.4935717958973773, array([0.59772113, 0.25772507, 0.63131313]), array([0.50921356, 0.35892068, 0.56148231])] 
iter 10: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 11: [0.5135706531055368, array([0.62862109, 0.27125438, 0.64851641]), array([0.54367797, 0.38721984, 0.5613388 ])] 
iter 12: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 13: [0.5245985943660362, array([0.60699112, 0.32470352, 0.64614899]), array([0.56346361, 0.39836066, 0.58128638])] 
iter 14: [0.5199702874121479, array([0.67381228, 0.33004844, 0.57370581]), array([0.53635665, 0.39790576, 0.60281924])] 
iter 15: [0.5061996457345295, array([0.69177289, 0.27993987, 0.56833965]), array([0.51807926, 0.37995919, 0.58306347])] 
iter 16: [0.5174561453631221, array([0.60448049, 0.30633038, 0.64583333]), array([0.55417847, 0.38806602, 0.57415462])] 
iter 17: [0.49482886692189015, array([0.62784859, 0.22682479, 0.63936237]), array([0.51012082, 0.36872115, 0.54412357])] 
iter 18: [0.5072852979829724, array([0.71726535, 0.24636713, 0.58222854]), array([0.49526604, 0.39260048, 0.59071257])] 
iter 19: [0.5097423004399748, array([0.66994979, 0.32537164, 0.5530303 ]), array([0.52752433, 0.3921095 , 0.58821554])] 
iter 20: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 21: [0.5199131478201245, array([0.66956354, 0.29113078, 0.61379419]), array([0.53660424, 0.39767283, 0.58419709])] 
iter 22: [0.5057996685903663, array([0.75183469, 0.28762318, 0.51089015]), array([0.4945376 , 0.39225513, 0.617866  ])] 
iter 23: [0.5228844066053369, array([0.6224411 , 0.30566227, 0.6467803 ]), array([0.55559386, 0.39704925, 0.57791567])] 
iter 24: [0.5123707216730472, array([0.57898803, 0.3198597 , 0.63983586]), array([0.53259904, 0.42480035, 0.55051602])] 
iter 25: [0.5196845894520313, array([0.62765547, 0.22498747, 0.70991162]), array([0.54594322, 0.39559471, 0.55237627])] 
iter 26: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 27: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 28: [0.5146563053539798, array([0.65160294, 0.31184233, 0.59438131]), array([0.530837  , 0.39463116, 0.5871531 ])] 
iter 29: [0.5296840180561111, array([0.65527231, 0.2988141 , 0.64520202]), array([0.54296687, 0.42922265, 0.5770751 ])] 
Run # 7 
====== 
iter 0: [0.518541797611565, array([0.54596369, 0.28912644, 0.71291035]), array([0.5861497 , 0.38595318, 0.5513243 ])] 
iter 1: [0.5163133535226558, array([0.6778679 , 0.21513279, 0.66887626]), array([0.52529183, 0.39484979, 0.56080455])] 
iter 2: [0.5255699674304325, array([0.60930861, 0.30866878, 0.66208965]), array([0.56009231, 0.39956757, 0.5791799 ])] 
iter 3: [0.5174561453631221, array([0.67130166, 0.2099549 , 0.68229167]), array([0.52523421, 0.39110143, 0.563698  ])] 
iter 4: [0.5195703102679847, array([0.63924295, 0.27943878, 0.64867424]), array([0.54449745, 0.39263084, 0.57394219])] 
iter 5: [0.5273984343751785, array([0.64735419, 0.3315517 , 0.61442551]), array([0.53503591, 0.43511618, 0.58330836])] 
iter 6: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 7: [0.5104851151362779, array([0.52780997, 0.26657758, 0.72679924]), array([0.57068281, 0.3853211 , 0.53733956])] 
iter 8: [0.521455916804754, array([0.67477791, 0.25655587, 0.64646465]), array([0.53084169, 0.40114913, 0.57771509])] 
iter 9: [0.5126564196331638, array([0.77809965, 0.25221313, 0.54182449]), array([0.50031044, 0.39353662, 0.6118339 ])] 
iter 10: [0.426147077309868, array([0.95616068, 0.        , 0.39567551]), array([0.36942247, 0.        , 0.61161259])] 
iter 11: [0.5081995314553454, array([0.43955195, 0.33105061, 0.73169192]), array([0.60986066, 0.37824427, 0.54355728])] 
iter 12: [0.4965430546825896, array([0.82541522, 0.20628027, 0.50205177]), array([0.46746145, 0.38035109, 0.6223831 ])] 
iter 13: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 14: [0.5218558939489172, array([0.67207416, 0.30599633, 0.60306187]), array([0.52025714, 0.4294421 , 0.58371525])] 
iter 15: [0.5160847951545626, array([0.5600618 , 0.29163187, 0.69223485]), array([0.57109098, 0.38825884, 0.55336866])] 
iter 16: [0.526027084166619, array([0.70336037, 0.23935193, 0.65198864]), array([0.53378279, 0.40411732, 0.57922042])] 
iter 17: [0.5088280669676019, array([0.74835844, 0.2812761 , 0.52809343]), array([0.50455729, 0.38491429, 0.61439589])] 
iter 18: [0.3976344208902348, array([0.15469293, 0.        , 0.97190657]), array([0.56527876, 0.        , 0.38286496])] 
iter 19: [0.5218558939489172, array([0.58304365, 0.34942375, 0.63478535]), array([0.56408819, 0.39531368, 0.58655389])] 
iter 20: [0.5116850465687675, array([0.69679413, 0.27342576, 0.58554293]), array([0.51374057, 0.39646403, 0.58434399])] 
iter 21: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 22: [0.5221415919090338, array([0.57242178, 0.28227827, 0.70770202]), array([0.56857855, 0.39652745, 0.55868428])] 
iter 23: [0.5218558939489172, array([0.599073  , 0.30983798, 0.65909091]), array([0.55972573, 0.39619821, 0.57386286])] 
iter 24: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 25: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 26: [0.5145991657619564, array([0.66570104, 0.26741273, 0.62468434]), array([0.52924919, 0.38849794, 0.57637979])] 
iter 27: [0.5118564653448374, array([0.67168791, 0.35493569, 0.52951389]), array([0.52736922, 0.39883634, 0.60147006])] 
iter 28: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 29: [0.5245985943660362, array([0.60042487, 0.35410055, 0.62373737]), array([0.57119236, 0.39782323, 0.58730866])] 
Run # 8 
====== 
iter 0: [0.5176275641391921, array([0.62475859, 0.37781861, 0.56218434]), array([0.55280246, 0.39134948, 0.6069177 ])] 
iter 1: [0.5315124850008571, array([0.65314793, 0.34107232, 0.61205808]), array([0.54137986, 0.43669803, 0.58954089])] 
iter 2: [0.5115707673847208, array([0.75086906, 0.25822616, 0.55539773]), array([0.5048695 , 0.38746867, 0.60567986])] 
iter 3: [0.5138563510656534, array([0.74488219, 0.2602305 , 0.5647096 ]), array([0.51065802, 0.39214699, 0.59882845])] 
iter 4: [0.5223701502771271, array([0.61838548, 0.29497244, 0.65877525]), array([0.56067239, 0.39437249, 0.57084245])] 
iter 5: [0.5176847037312153, array([0.63538046, 0.28378153, 0.64251894]), array([0.5228862 , 0.42475   , 0.56471078])] 
iter 6: [0.511970744528884, array([0.5585168 , 0.29948221, 0.67471591]), array([0.5613354 , 0.38344739, 0.55714844])] 
iter 7: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 8: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 9: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 10: [0.5219701731329638, array([0.5795674 , 0.32019375, 0.66556187]), array([0.54504177, 0.41938307, 0.56802263])] 
iter 11: [0.5151134220901663, array([0.7605253 , 0.24636713, 0.56849747]), array([0.5024882 , 0.39597315, 0.60649941])] 
iter 12: [0.5131135363693503, array([0.47701815, 0.26223484, 0.77967172]), array([0.61093248, 0.3863189 , 0.52586758])] 
iter 13: [0.5184846580195417, array([0.74739282, 0.25956239, 0.57607323]), array([0.51401249, 0.40010299, 0.59954008])] 
iter 14: [0.5061996457345295, array([0.56759367, 0.26423918, 0.68465909]), array([0.54996257, 0.37684612, 0.54504335])] 
iter 15: [0.5112850694246043, array([0.54383932, 0.31668615, 0.66856061]), array([0.56140351, 0.38844499, 0.55707522])] 
iter 16: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 17: [0.5137420718816068, array([0.56682117, 0.30182061, 0.67061237]), array([0.56183002, 0.38702078, 0.55849106])] 
iter 18: [0.5076852751271356, array([0.77462341, 0.2555537 , 0.52777778]), array([0.49040225, 0.39514463, 0.61357798])] 
iter 19: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 20: [0.5163133535226558, array([0.69795288, 0.29714381, 0.57496843]), array([0.52689896, 0.38978966, 0.59937479])] 
iter 21: [0.5138563510656534, array([0.69003476, 0.28812427, 0.58317551]), array([0.52336312, 0.3892148 , 0.59195771])] 
iter 22: [0.5160276555625393, array([0.70954036, 0.31935861, 0.54371843]), array([0.51980758, 0.40508475, 0.60301068])] 
iter 23: [0.43020398834352325, array([0.36481267, 0.011692  , 0.87910354]), array([0.51220174, 0.3626943 , 0.40895742])] 
iter 24: [0.5192846123078682, array([0.64561607, 0.3151829 , 0.60890152]), array([0.53164758, 0.40131859, 0.59253571])] 
iter 25: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 26: [0.5244271755899663, array([0.64291232, 0.32436947, 0.6166351 ]), array([0.54825428, 0.40475198, 0.58920223])] 
iter 27: [0.5179132620993087, array([0.63499421, 0.35844329, 0.57291667]), array([0.55001673, 0.39189189, 0.60029767])] 
iter 28: [0.5079138334952289, array([0.62591734, 0.23601136, 0.66840278]), array([0.52528363, 0.37953263, 0.55665089])] 
iter 29: [0.5058568081823895, array([0.62688297, 0.26691164, 0.63273359]), array([0.52652068, 0.38038562, 0.56187807])] 
Run # 9 
====== 
iter 0: [0.5055139706302497, array([0.45384318, 0.30399198, 0.73816288]), array([0.60194672, 0.37611077, 0.53402603])] 
iter 1: [0.34209473744357466, array([0., 1., 0.]), array([0.        , 0.34209474, 0.        ])] 
iter 2: [0.5162562139306326, array([0.54982619, 0.38399866, 0.61379419]), array([0.55078352, 0.41408501, 0.57359882])] 
iter 3: [0.521627335580824, array([0.59038239, 0.3373977 , 0.6395202 ]), array([0.5670562 , 0.39592317, 0.57819635])] 
iter 4: [0.5211702188446374, array([0.62379297, 0.3011525 , 0.64520202]), array([0.55355613, 0.39854111, 0.57238869])] 
iter 5: [0.5262556425347124, array([0.63634608, 0.31084015, 0.63983586]), array([0.55462043, 0.40430154, 0.58272244])] 
iter 6: [0.5225415690531969, array([0.61181924, 0.31935861, 0.64157197]), array([0.55804122, 0.40075456, 0.57635049])] 
iter 7: [0.5086566481915319, array([0.70973349, 0.34224152, 0.50157828]), array([0.51818951, 0.38887835, 0.61828794])] 
iter 8: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 9: [0.5109422318724645, array([0.70104287, 0.26089861, 0.59185606]), array([0.51004637, 0.39594423, 0.58238857])] 
iter 10: [0.5159133763784927, array([0.65565856, 0.28962753, 0.6155303 ]), array([0.53022021, 0.401854  , 0.57496683])] 
iter 11: [0.525284269470316, array([0.5405562 , 0.30449307, 0.72143308]), array([0.57770898, 0.41478953, 0.55332284])] 
iter 12: [0.515970515970516, array([0.60834299, 0.2906297 , 0.65340909]), array([0.5506993 , 0.38934885, 0.56619256])] 
iter 13: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 14: [0.5156276784183761, array([0.55813055, 0.31017204, 0.67503157]), array([0.56755695, 0.39119444, 0.55820934])] 
iter 15: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 16: [0.5173418661790755, array([0.49806875, 0.38383164, 0.65924874]), array([0.59712897, 0.3866734 , 0.5770134 ])] 
iter 17: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 18: [0.48185817953259813, array([0.82618772, 0.16869885, 0.49636995]), array([0.45031579, 0.35550862, 0.60949612])] 
iter 19: [0.5245985943660362, array([0.55368868, 0.37848672, 0.63888889]), array([0.58260516, 0.39873306, 0.58692185])] 
iter 20: [0.5173418661790755, array([0.70471224, 0.31919158, 0.55145202]), array([0.51106443, 0.42982456, 0.59070161])] 
iter 21: [0.5144848865779098, array([0.54422557, 0.25154501, 0.73863636]), array([0.57206659, 0.38704703, 0.53892216])] 
iter 22: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 23: [0.5119136049368608, array([0.66975666, 0.2730917 , 0.60858586]), array([0.51792115, 0.38891532, 0.58415392])] 
iter 24: [0.5169418890349123, array([0.65430668, 0.28277936, 0.62594697]), array([0.53446916, 0.38750286, 0.5838363 ])] 
iter 25: [0.5102565567681847, array([0.69312476, 0.2520461 , 0.60479798]), array([0.49764282, 0.39941768, 0.58854247])] 
iter 26: [0.5137420718816068, array([0.52085747, 0.36595958, 0.64756944]), array([0.58490566, 0.38351129, 0.57168733])] 
iter 27: [0.5219701731329638, array([0.6239861 , 0.28077501, 0.66650884]), array([0.55880318, 0.39156767, 0.56867762])] 
iter 28: [0.3620364550597109, array([0., 0., 1.]), array([0.        , 0.        , 0.36203646])] 
iter 29: [0.502828409805154, array([0.74565469, 0.16235176, 0.6261048 ]), array([0.48389522, 0.37850467, 0.57046304])] 
{0: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 1: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 2: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 3: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 4: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 5: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 6: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 7: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 8: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 9: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 10: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 11: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 12: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 13: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 14: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 15: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 16: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 17: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 18: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 19: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 20: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 21: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 22: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 23: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 24: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 25: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 26: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 27: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 28: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 29: [0.5337980686817896, 0.3620364550597109, 0.3620364550597109, 0.4987143591794755, 0.5298554368321811, 0.5055139706302497, 0.3620364550597109, 0.518541797611565, 0.5176275641391921, 0.5055139706302497], 'settings': {0: ['standardizeN|rf', 'normalizeQ|rf', 'normalizeu|rf', 'normalizex|rf', 'robustq|rf', 'robusto|rf', 'maxabsT|rf', 'maxabsx|rf', 'standardizeR|rf', 'maxabst|rf'], 1: ['maxabsU|rf', 'normalizep|rf', 'standardizem|rf', 'minmaxv|rf', 'maxabsL|rf', 'standardizen|rf', 'minmaxi|rf', 'minmaxY|rf', 'robusta|rf', 'robustg|rf'], 2: ['normalizes|rf', 'maxabsm|rf', 'robustO|rf', 'normalizer|rf', 'robustz|rf', 'maxabsh|rf', 'normalizej|rf', 'robusty|rf', 'robustX|rf', 'normalizem|rf'], 3: ['standardizeG|rf', 'minmaxY|rf', 'minmaxM|rf', 'standardizeR|rf', 'maxabsX|rf', 'standardizeg|rf', 'normalizey|rf', 'standardizeu|rf', 'normalizeQ|rf', 'robustF|rf'], 4: ['robustu|rf', 'normalizek|rf', 'standardizeZ|rf', 'standardizeh|rf', 'minmaxP|rf', 'normalizeX|rf', 'standardizef|rf', 'maxabsu|rf', 'maxabsT|rf', 'robustO|rf'], 5: ['normalizeP|rf', 'normalizeU|rf', 'normalizeT|rf', 'standardizef|rf', 'minmaxH|rf', 'standardizex|rf', 'robustA|rf', 'robustn|rf', 'robustx|rf', 'standardizeX|rf'], 6: ['robustw|rf', 'maxabsK|rf', 'robustr|rf', 'robusta|rf', 'minmaxa|rf', 'minmaxU|rf', 'normalizeG|rf', 'normalizem|rf', 'standardizeb|rf', 'maxabsm|rf'], 7: ['maxabse|rf', 'normalizeH|rf', 'normalizeZ|rf', 'minmaxG|rf', 'minmaxj|rf', 'maxabsj|rf', 'maxabsE|rf', 'normalizet|rf', 'normalizeJ|rf', 'robusty|rf'], 8: ['minmaxa|rf', 'robuste|rf', 'standardizeS|rf', 'minmaxX|rf', 'standardizea|rf', 'maxabsb|rf', 'standardizeX|rf', 'normalizej|rf', 'normalizey|rf', 'standardizee|rf'], 9: ['robustq|rf', 'robusth|rf', 'minmaxD|rf', 'normalizef|rf', 'minmaxB|rf', 'normalizeC|rf', 'standardizek|rf', 'maxabsI|rf', 'maxabss|rf', 'maxabss|rf'], 10: ['minmaxv|rf', 'minmaxa|rf', 'minmaxh|rf', 'robustX|rf', 'maxabsw|rf', 'maxabsK|rf', 'normalizeS|rf', 'maxabsb|rf', 'standardizeB|rf', 'robuste|rf'], 11: ['maxabsI|rf', 'minmaxv|rf', 'normalizeX|rf', 'robuste|rf', 'standardizeX|rf', 'standardized|rf', 'normalizez|rf', 'minmaxk|rf', 'standardizev|rf', 'standardizec|rf'], 12: ['maxabsJ|rf', 'minmaxp|rf', 'standardizeA|rf', 'maxabsN|rf', 'maxabsC|rf', 'minmaxJ|rf', 'minmaxq|rf', 'maxabsL|rf', 'normalizeY|rf', 'standardizeq|rf'], 13: ['maxabsF|rf', 'minmaxh|rf', 'standardizei|rf', 'robustR|rf', 'standardizeh|rf', 'minmaxT|rf', 'robustI|rf', 'normalizeZ|rf', 'maxabsD|rf', 'minmaxb|rf'], 14: ['robustX|rf', 'maxabsz|rf', 'standardizeX|rf', 'standardizeO|rf', 'standardizez|rf', 'normalizeN|rf', 'standardizeK|rf', 'maxabsX|rf', 'normalizes|rf', 'standardizep|rf'], 15: ['normalizeW|rf', 'maxabsn|rf', 'robustG|rf', 'minmaxx|rf', 'minmaxc|rf', 'standardizee|rf', 'minmaxk|rf', 'normalizeF|rf', 'minmaxa|rf', 'robustT|rf'], 16: ['robusts|rf', 'standardizeo|rf', 'maxabsR|rf', 'maxabsc|rf', 'maxabsp|rf', 'maxabsP|rf', 'minmaxp|rf', 'standardizeO|rf', 'minmaxn|rf', 'normalizeZ|rf'], 17: ['minmaxF|rf', 'normalizeI|rf', 'standardizeL|rf', 'robusth|rf', 'minmaxM|rf', 'normalizeJ|rf', 'normalizeJ|rf', 'minmaxr|rf', 'normalizeW|rf', 'standardizef|rf'], 18: ['minmaxs|rf', 'standardizeA|rf', 'maxabsY|rf', 'normalizeM|rf', 'standardizeu|rf', 'normalizes|rf', 'normalizeg|rf', 'minmaxv|rf', 'minmaxl|rf', 'maxabsf|rf'], 19: ['minmaxk|rf', 'robustT|rf', 'minmaxQ|rf', 'minmaxn|rf', 'normalizee|rf', 'maxabsq|rf', 'normalizeO|rf', 'standardizeD|rf', 'standardizen|rf', 'robustC|rf'], 20: ['robustI|rf', 'normalizeK|rf', 'standardizeQ|rf', 'maxabsA|rf', 'normalizen|rf', 'standardizeu|rf', 'robustM|rf', 'robustd|rf', 'robustm|rf', 'maxabsK|rf'], 21: ['maxabsd|rf', 'standardizeq|rf', 'maxabsH|rf', 'minmaxR|rf', 'maxabsS|rf', 'standardizeP|rf', 'maxabsb|rf', 'robustf|rf', 'maxabsn|rf', 'maxabsh|rf'], 22: ['maxabsV|rf', 'standardizeJ|rf', 'maxabsc|rf', 'normalizeY|rf', 'normalizeC|rf', 'minmaxx|rf', 'robustE|rf', 'maxabsQ|rf', 'normalizeX|rf', 'standardizea|rf'], 23: ['normalizeg|rf', 'maxabsE|rf', 'normalizeS|rf', 'normalizeR|rf', 'maxabsm|rf', 'maxabsE|rf', 'robustS|rf', 'maxabsJ|rf', 'standardizeE|rf', 'robustt|rf'], 24: ['maxabsL|rf', 'standardizeF|rf', 'minmaxU|rf', 'normalizeb|rf', 'normalizeV|rf', 'minmaxH|rf', 'minmaxC|rf', 'maxabsf|rf', 'robustJ|rf', 'minmaxM|rf'], 25: ['minmaxE|rf', 'minmaxQ|rf', 'normalizev|rf', 'standardizez|rf', 'standardizeZ|rf', 'robustG|rf', 'normalizeA|rf', 'maxabsv|rf', 'standardizeP|rf', 'standardizei|rf'], 26: ['robustP|rf', 'robustq|rf', 'robustd|rf', 'standardizeS|rf', 'standardizeM|rf', 'minmaxd|rf', 'normalizeM|rf', 'minmaxH|rf', 'maxabsS|rf', 'robustL|rf'], 27: ['normalizew|rf', 'minmaxL|rf', 'robustI|rf', 'maxabsl|rf', 'standardizeI|rf', 'normalizeK|rf', 'minmaxQ|rf', 'minmaxX|rf', 'robusts|rf', 'standardizeU|rf'], 28: ['maxabsi|rf', 'standardizeG|rf', 'minmaxA|rf', 'maxabsi|rf', 'robustf|rf', 'maxabsr|rf', 'minmaxU|rf', 'minmaxD|rf', 'robustc|rf', 'minmaxF|rf'], 29: ['standardized|rf', 'minmaxg|rf', 'minmaxd|rf', 'robusto|rf', 'standardizei|rf', 'maxabsp|rf', 'robustQ|rf', 'standardizez|rf', 'minmaxX|rf', 'robustV|rf']}} 
[Wed, Dec 23 202012:45PM] DASENetComparison/GHOST-Results git:(master*) $  
                                                                                                                                                             
[Wed, Dec 23 202012:50PM] DASENetComparison/GHOST-Results git:(master*) $  
                                                                                                                                                             
 
[Wed, Dec 23 202012:50PM] DASENetComparison/GHOST-Results git:(master*) $  
                                                                                                                                                             
[Wed, Dec 23 202012:50PM] DASENetComparison/GHOST-Results git:(master*) $  
[Wed, Dec 23 202012:50PM] DASENetComparison/GHOST-Results git:(master*) $ cat eclipse-3class.txt  
Run # 0 
====== 
iter 0: [0.5620250271413062] 
iter 1: [0.5604822581566767] 
iter 2: [0.5624250042854694] 
iter 3: [0.5567110450831381] 
iter 4: [0.5614536312210731] 
iter 5: [0.5573967201874178] 
iter 6: [0.5371693046111651] 
iter 7: [0.5615679104051197] 
iter 8: [0.5589966287640706] 
iter 9: [0.557053882635278] 
iter 10: [0.5627678418376093] 
iter 11: [0.5574538597794412] 
iter 12: [0.562539283469516] 
iter 13: [0.5639106336780756] 
iter 14: [0.5631678189817725] 
iter 15: [0.5615107708130964] 
iter 16: [0.5624250042854694] 
iter 17: [0.561625049997143] 
iter 18: [0.5608250957088167] 
iter 19: [0.5612822124450031] 
iter 20: [0.5628249814296326] 
iter 21: [0.5604251185646535] 
iter 22: [0.5637963544940289] 
iter 23: [0.5644820295983086] 
iter 24: [0.559625164276327] 
iter 25: [0.5641391920461688] 
iter 26: [0.5652248442946117] 
iter 27: [0.5639677732700988] 
iter 28: [0.5584252328438375] 
iter 29: [0.5597394434603737] 
Run # 1 
====== 
iter 0: [0.5457973830066853] 
iter 1: [0.55139706302497] 
iter 2: [0.5632249585737957] 
iter 3: [0.5626535626535627] 
iter 4: [0.5624250042854694] 
iter 5: [0.5633392377578424] 
iter 6: [0.5606536769327467] 
iter 7: [0.5594537455002572] 
iter 8: [0.564196331638192] 
iter 9: [0.5611679332609565] 
iter 10: [0.5615679104051197] 
iter 11: [0.5567681846751614] 
iter 12: [0.5577395577395577] 
iter 13: [0.5627678418376093] 
iter 14: [0.5615679104051197] 
iter 15: [0.5606536769327467] 
iter 16: [0.5546540197702988] 
iter 17: [0.5438546368778927] 
iter 18: [0.5535112279298325] 
iter 19: [0.5613964916290498] 
iter 20: [0.5606536769327467] 
iter 21: [0.5556253928346951] 
iter 22: [0.5424261470773099] 
iter 23: [0.5520255985372264] 
iter 24: [0.5548254385463688] 
iter 25: [0.5568253242671848] 
iter 26: [0.5607679561167933] 
iter 27: [0.5605393977487001] 
iter 28: [0.561967887549283] 
iter 29: [0.561625049997143] 
Run # 2 
====== 
iter 0: [0.5606536769327467] 
iter 1: [0.5615107708130964] 
iter 2: [0.5595680246843038] 
iter 3: [0.5587109308039541] 
iter 4: [0.557968116107651] 
iter 5: [0.5622535855093994] 
iter 6: [0.46105936803611225] 
iter 7: [0.5580823952916976] 
iter 8: [0.5609393748928633] 
iter 9: [0.5617393291811896] 
iter 10: [0.46105936803611225] 
iter 11: [0.5580252556996743] 
iter 12: [0.5574538597794412] 
iter 13: [0.552139877721273] 
iter 14: [0.5609965144848866] 
iter 15: [0.5614536312210731] 
iter 16: [0.5585966516199075] 
iter 17: [0.5508256671047369] 
iter 18: [0.5545968801782756] 
iter 19: [0.5525969944574596] 
iter 20: [0.5615107708130964] 
iter 21: [0.5612822124450031] 
iter 22: [0.5577395577395577] 
iter 23: [0.5582538140677675] 
iter 24: [0.559796583052397] 
iter 25: [0.5615107708130964] 
iter 26: [0.561967887549283] 
iter 27: [0.5631678189817725] 
iter 28: [0.5613964916290498] 
iter 29: [0.5622535855093994] 
Run # 3 
====== 
iter 0: [0.5542540426261356] 
iter 1: [0.5619107479572596] 
iter 2: [0.5316267641849037] 
iter 3: [0.5607679561167933] 
iter 4: [0.5583109536597909] 
iter 5: [0.5615679104051197] 
iter 6: [0.5576252785555111] 
iter 7: [0.5616821895891664] 
iter 8: [0.5553968344666019] 
iter 9: [0.5601965601965602] 
iter 10: [0.5604251185646535] 
iter 11: [0.5608822353008399] 
iter 12: [0.46105936803611225] 
iter 13: [0.5615679104051197] 
iter 14: [0.5584252328438375] 
iter 15: [0.5573967201874178] 
iter 16: [0.5514542026169933] 
iter 17: [0.5605965373407233] 
iter 18: [0.5392263299240043] 
iter 19: [0.5559682303868351] 
iter 20: [0.5593394663162105] 
iter 21: [0.5615107708130964] 
iter 22: [0.5607108165247701] 
iter 23: [0.46105936803611225] 
iter 24: [0.5547111593623222] 
iter 25: [0.557968116107651] 
iter 26: [0.5604822581566767] 
iter 27: [0.5589394891720473] 
iter 28: [0.5609393748928633] 
iter 29: [0.46105936803611225] 
Run # 4 
====== 
iter 0: [0.5620250271413062] 
iter 1: [0.5551682760985086] 
iter 2: [0.5624250042854694] 
iter 3: [0.46105936803611225] 
iter 4: [0.5604251185646535] 
iter 5: [0.557053882635278] 
iter 6: [0.5621964459173762] 
iter 7: [0.5608250957088167] 
iter 8: [0.5544826009942289] 
iter 9: [0.5621964459173762] 
iter 10: [0.5553968344666019] 
iter 11: [0.5612822124450031] 
iter 12: [0.46105936803611225] 
iter 13: [0.561625049997143] 
iter 14: [0.5579109765156277] 
iter 15: [0.5588252099880007] 
iter 16: [0.5405405405405406] 
iter 17: [0.5546540197702988] 
iter 18: [0.5577966973315811] 
iter 19: [0.5588252099880007] 
iter 20: [0.5575109993714645] 
iter 21: [0.5563110679389749] 
iter 22: [0.46105936803611225] 
iter 23: [0.5622535855093994] 
iter 24: [0.5497971544483172] 
iter 25: [0.5494543168961774] 
iter 26: [0.5508828066967602] 
iter 27: [0.5445974515741958] 
iter 28: [0.5590537683560939] 
iter 29: [0.5559110907948117] 
Run # 5 
====== 
iter 0: [0.5472830123992914] 
iter 1: [0.557053882635278] 
iter 2: [0.46105936803611225] 
iter 3: [0.46105936803611225] 
iter 4: [0.5581395348837209] 
iter 5: [0.559968001828467] 
iter 6: [0.5560825095708817] 
iter 7: [0.5491686189360608] 
iter 8: [0.5575681389634878] 
iter 9: [0.5577395577395577] 
iter 10: [0.5522541569053196] 
iter 11: [0.5599108622364436] 
iter 12: [0.5486543626078509] 
iter 13: [0.46105936803611225] 
iter 14: [0.5594537455002572] 
iter 15: [0.5491686189360608] 
iter 16: [0.5396834466601909] 
iter 17: [0.5552825552825553] 
iter 18: [0.559968001828467] 
iter 19: [0.5588252099880007] 
iter 20: [0.5593394663162105] 
iter 21: [0.46105936803611225] 
iter 22: [0.46105936803611225] 
iter 23: [0.46105936803611225] 
iter 24: [0.46105936803611225] 
iter 25: [0.5591109079481172] 
iter 26: [0.5553396948745786] 
iter 27: [0.5588252099880007] 
iter 28: [0.5513399234329467] 
iter 29: [0.46105936803611225] 
Run # 6 
====== 
iter 0: [0.5555111136506485] 
iter 1: [0.561967887549283] 
iter 2: [0.46105936803611225] 
iter 3: [0.46105936803611225] 
iter 4: [0.46105936803611225] 
iter 5: [0.5516827609850866] 
iter 6: [0.46105936803611225] 
iter 7: [0.5529398320095994] 
iter 8: [0.5583680932518141] 
iter 9: [0.491686189360608] 
iter 10: [0.5493400377121307] 
iter 11: [0.5366550482829553] 
iter 12: [0.46105936803611225] 
iter 13: [0.5544254614022056] 
iter 14: [0.46105936803611225] 
iter 15: [0.5387120735957945] 
iter 16: [0.5604251185646535] 
iter 17: [0.5591680475401406] 
iter 18: [0.5535683675218559] 
iter 19: [0.5533969487457859] 
iter 20: [0.5558539512027885] 
iter 21: [0.5576824181475344] 
iter 22: [0.46105936803611225] 
iter 23: [0.46105936803611225] 
iter 24: [0.5555111136506485] 
iter 25: [0.5581395348837209] 
iter 26: [0.46105936803611225] 
iter 27: [0.46105936803611225] 
iter 28: [0.46105936803611225] 
iter 29: [0.46105936803611225] 
Run # 7 
====== 
iter 0: [0.46105936803611225] 
iter 1: [0.5573395805953946] 
iter 2: [0.557968116107651] 
iter 3: [0.46105936803611225] 
iter 4: [0.5352265584823724] 
iter 5: [0.5624821438774927] 
iter 6: [0.5586537912119307] 
iter 7: [0.5529398320095994] 
iter 8: [0.545911662190732] 
iter 9: [0.5534540883378093] 
iter 10: [0.5569967430432546] 
iter 11: [0.46105936803611225] 
iter 12: [0.5485972230158277] 
iter 13: [0.5601965601965602] 
iter 14: [0.46105936803611225] 
iter 15: [0.47928689789154905] 
iter 16: [0.5592823267241872] 
iter 17: [0.5534540883378093] 
iter 18: [0.5600822810125136] 
iter 19: [0.5544826009942289] 
iter 20: [0.46105936803611225] 
iter 21: [0.555053996914462] 
iter 22: [0.46105936803611225] 
iter 23: [0.46105936803611225] 
iter 24: [0.5583680932518141] 
iter 25: [0.5617393291811896] 
iter 26: [0.5531112507856694] 
iter 27: [0.46105936803611225] 
iter 28: [0.5585966516199075] 
iter 29: [0.5573395805953946] 
Run # 8 
====== 
iter 0: [0.5191703331238215] 
iter 1: [0.5567110450831381] 
iter 2: [0.5534540883378093] 
iter 3: [0.46105936803611225] 
iter 4: [0.5536255071138793] 
iter 5: [0.5614536312210731] 
iter 6: [0.46105936803611225] 
iter 7: [0.5400262842123307] 
iter 8: [0.46105936803611225] 
iter 9: [0.46105936803611225] 
iter 10: [0.5273412947831553] 
iter 11: [0.46105936803611225] 
iter 12: [0.5381978172675848] 
iter 13: [0.5565396263070682] 
iter 14: [0.5571110222273012] 
iter 15: [0.46105936803611225] 
iter 16: [0.5567110450831381] 
iter 17: [0.5592251871321638] 
iter 18: [0.46105936803611225] 
iter 19: [0.46105936803611225] 
iter 20: [0.5375692817553283] 
iter 21: [0.46105936803611225] 
iter 22: [0.46105936803611225] 
iter 23: [0.5096851608479516] 
iter 24: [0.5377978401234215] 
iter 25: [0.5506542483286669] 
iter 26: [0.46105936803611225] 
iter 27: [0.46105936803611225] 
iter 28: [0.46105936803611225] 
iter 29: [0.46105936803611225] 
Run # 9 
====== 
iter 0: [0.46105936803611225] 
iter 1: [0.5543683218101823] 
iter 2: [0.46105936803611225] 
iter 3: [0.46105936803611225] 
iter 4: [0.5591109079481172] 
iter 5: [0.5518541797611565] 
iter 6: [0.5492257585280841] 
iter 7: [0.46105936803611225] 
iter 8: [0.5581966744757443] 
iter 9: [0.5626535626535627] 
iter 10: [0.46105936803611225] 
iter 11: [0.46105936803611225] 
iter 12: [0.46105936803611225] 
iter 13: [0.5533969487457859] 
iter 14: [0.46105936803611225] 
iter 15: [0.46105936803611225] 
iter 16: [0.46105936803611225] 
iter 17: [0.46105936803611225] 
iter 18: [0.5263127821267356] 
iter 19: [0.5555682532426719] 
iter 20: [0.46105936803611225] 
iter 21: [0.5560825095708817] 
iter 22: [0.5367693274670019] 
iter 23: [0.46105936803611225] 
iter 24: [0.5625964230615393] 
iter 25: [0.5544254614022056] 
iter 26: [0.5580823952916976] 
iter 27: [0.5539683446660191] 
iter 28: [0.5525969944574596] 
iter 29: [0.46105936803611225] 
{0: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 1: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 2: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 3: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 4: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 5: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 6: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 7: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 8: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 9: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 10: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 11: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 12: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 13: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 14: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 15: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 16: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 17: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 18: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 19: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 20: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 21: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 22: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 23: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 24: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 25: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 26: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 27: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 28: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 29: [0.5620250271413062, 0.5457973830066853, 0.5606536769327467, 0.5542540426261356, 0.5620250271413062, 0.5472830123992914, 0.5555111136506485, 0.46105936803611225, 0.5191703331238215, 0.46105936803611225], 'settings': {0: ['robustx|rf', 'maxabsi|rf', 'maxabst|rf', 'standardizeT|rf', 'standardizeF|rf', 'minmaxC|rf', 'standardized|rf', 'normalizej|rf', 'robustV|rf', 'minmaxm|rf'], 1: ['normalizeP|rf', 'robusta|rf', 'standardizeX|rf', 'standardizeb|rf', 'minmaxE|rf', 'robustE|rf', 'robustM|rf', 'standardizeG|rf', 'standardizeR|rf', 'maxabsf|rf'], 2: ['robuste|rf', 'maxabsx|rf', 'normalizeW|rf', 'minmaxK|rf', 'robustl|rf', 'minmaxV|rf', 'standardizeF|rf', 'normalizeD|rf', 'minmaxd|rf', 'standardizem|rf'], 3: ['standardizep|rf', 'normalizeq|rf', 'maxabsS|rf', 'robusto|rf', 'normalizep|rf', 'robustP|rf', 'standardizeg|rf', 'maxabsw|rf', 'maxabsJ|rf', 'robustf|rf'], 4: ['standardizeX|rf', 'maxabse|rf', 'maxabsi|rf', 'maxabsD|rf', 'maxabsG|rf', 'normalizeJ|rf', 'standardizeH|rf', 'robustx|rf', 'robustl|rf', 'robustT|rf'], 5: ['minmaxq|rf', 'standardizef|rf', 'standardizeK|rf', 'maxabsZ|rf', 'maxabsp|rf', 'maxabsn|rf', 'robustR|rf', 'normalizeU|rf', 'standardizer|rf', 'robustX|rf'], 6: ['maxabsx|rf', 'maxabsX|rf', 'maxabsw|rf', 'normalizeu|rf', 'maxabsh|rf', 'robustB|rf', 'maxabsT|rf', 'normalizeX|rf', 'normalizeV|rf', 'minmaxN|rf'], 7: ['robustt|rf', 'normalizes|rf', 'normalizes|rf', 'normalizeL|rf', 'standardizeM|rf', 'maxabsQ|rf', 'minmaxe|rf', 'minmaxS|rf', 'maxabsj|rf', 'standardizef|rf'], 8: ['normalizep|rf', 'standardizer|rf', 'normalizeM|rf', 'standardizeV|rf', 'minmaxO|rf', 'robustD|rf', 'standardizeB|rf', 'robustr|rf', 'minmaxF|rf', 'normalizes|rf'], 9: ['maxabsY|rf', 'robustD|rf', 'normalized|rf', 'standardizeD|rf', 'standardizeb|rf', 'robustz|rf', 'robustD|rf', 'robustZ|rf', 'normalizeS|rf', 'standardizek|rf'], 10: ['standardizeU|rf', 'maxabsD|rf', 'robustP|rf', 'standardizeo|rf', 'standardizeQ|rf', 'robustr|rf', 'minmaxf|rf', 'normalizev|rf', 'normalizet|rf', 'minmaxt|rf'], 11: ['standardizeC|rf', 'normalizeP|rf', 'standardizeO|rf', 'minmaxn|rf', 'normalizet|rf', 'maxabsN|rf', 'maxabsS|rf', 'minmaxf|rf', 'maxabsD|rf', 'minmaxH|rf'], 12: ['maxabsn|rf', 'minmaxD|rf', 'normalizeF|rf', 'robustx|rf', 'normalizec|rf', 'minmaxy|rf', 'normalizeb|rf', 'maxabsu|rf', 'minmaxH|rf', 'normalizeC|rf'], 13: ['normalizeM|rf', 'normalizer|rf', 'robustb|rf', 'robustR|rf', 'standardizeh|rf', 'normalizea|rf', 'standardizeS|rf', 'standardizeW|rf', 'standardizeg|rf', 'normalizer|rf'], 14: ['maxabsp|rf', 'maxabsg|rf', 'normalizek|rf', 'minmaxa|rf', 'normalizey|rf', 'standardizeB|rf', 'normalizeY|rf', 'maxabsQ|rf', 'normalizeC|rf', 'minmaxg|rf'], 15: ['minmaxV|rf', 'minmaxV|rf', 'robustL|rf', 'robustn|rf', 'minmaxn|rf', 'normalizec|rf', 'robustP|rf', 'minmaxC|rf', 'robusta|rf', 'normalizeU|rf'], 16: ['standardizej|rf', 'normalized|rf', 'minmaxx|rf', 'robusts|rf', 'normalizeC|rf', 'normalizes|rf', 'normalizev|rf', 'robustR|rf', 'maxabsu|rf', 'standardizer|rf'], 17: ['minmaxM|rf', 'normalizel|rf', 'maxabsb|rf', 'minmaxj|rf', 'minmaxa|rf', 'minmaxv|rf', 'standardizeJ|rf', 'normalizeI|rf', 'normalizel|rf', 'maxabsh|rf'], 18: ['maxabsB|rf', 'robustX|rf', 'normalizet|rf', 'maxabsX|rf', 'robustW|rf', 'robusti|rf', 'maxabsq|rf', 'robustp|rf', 'robustE|rf', 'standardizeB|rf'], 19: ['normalizev|rf', 'normalizeU|rf', 'minmaxj|rf', 'maxabsk|rf', 'robustG|rf', 'maxabsJ|rf', 'normalizem|rf', 'robusts|rf', 'minmaxp|rf', 'robustu|rf'], 20: ['robustZ|rf', 'maxabsn|rf', 'robustT|rf', 'standardizeA|rf', 'robustu|rf', 'standardizeD|rf', 'standardizeE|rf', 'minmaxr|rf', 'normalizeR|rf', 'maxabsV|rf'], 21: ['robustp|rf', 'minmaxk|rf', 'maxabss|rf', 'minmaxL|rf', 'minmaxU|rf', 'minmaxl|rf', 'minmaxi|rf', 'standardizer|rf', 'maxabsw|rf', 'normalizez|rf'], 22: ['maxabsE|rf', 'normalizea|rf', 'normalizew|rf', 'normalizeW|rf', 'standardizeY|rf', 'robustc|rf', 'maxabsb|rf', 'minmaxi|rf', 'robustD|rf', 'maxabsR|rf'], 23: ['normalizeE|rf', 'maxabsl|rf', 'robusts|rf', 'normalizep|rf', 'normalizei|rf', 'minmaxD|rf', 'standardizeu|rf', 'standardizeQ|rf', 'robustF|rf', 'normalizep|rf'], 24: ['standardizeT|rf', 'maxabsa|rf', 'maxabsp|rf', 'minmaxw|rf', 'robustF|rf', 'maxabsb|rf', 'robustw|rf', 'maxabsE|rf', 'maxabsl|rf', 'maxabsc|rf'], 25: ['maxabsq|rf', 'standardizey|rf', 'standardizes|rf', 'maxabsh|rf', 'minmaxy|rf', 'robustH|rf', 'normalizeT|rf', 'standardizeR|rf', 'maxabsH|rf', 'maxabsW|rf'], 26: ['maxabsl|rf', 'maxabsw|rf', 'normalizex|rf', 'standardizeP|rf', 'maxabsF|rf', 'minmaxt|rf', 'normalizek|rf', 'robustJ|rf', 'robusty|rf', 'standardizeT|rf'], 27: ['standardizeQ|rf', 'maxabsV|rf', 'maxabsW|rf', 'maxabsT|rf', 'maxabsb|rf', 'standardizeP|rf', 'minmaxE|rf', 'minmaxd|rf', 'normalizeQ|rf', 'normalizeR|rf'], 28: ['maxabsk|rf', 'standardizeI|rf', 'normalizea|rf', 'maxabsI|rf', 'standardizeS|rf', 'minmaxz|rf', 'minmaxI|rf', 'standardizey|rf', 'minmaxI|rf', 'robustt|rf'], 29: ['minmaxl|rf', 'minmaxq|rf', 'robustH|rf', 'maxabsL|rf', 'maxabsm|rf', 'maxabsC|rf', 'minmaxu|rf', 'normalizet|rf', 'robustJ|rf', 'robustb|rf']}} 
[Wed, Dec 23 202012:50PM] DASENetComparison/GHOST-Results git:(master*) $ cat chromium-3class.txt  
Run # 0 
====== 
iter 0: [0.5467687560710817, array([0.72531567, 0.00100644, 0.78680862]), array([0.51093613, 0.29411765, 0.57029927])] 
iter 1: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 2: [0.5233986629335466, array([0.70689298, 0.00161031, 0.74487146]), array([0.46710436, 0.16326531, 0.5657233 ])] 
iter 3: [0.5504256899605737, array([0.72448768, 0.03059581, 0.77655155]), array([0.51928783, 0.39895013, 0.57620424])] 
iter 4: [0.5276841323352951, array([0.79900642, 0.        , 0.69787068]), array([0.46111576, 0.        , 0.58871851])] 
iter 5: [0.5500828524084338, array([0.70813496, 0.04549114, 0.77642171]), array([0.51849045, 0.41697417, 0.57716437])] 
iter 6: [0.5283698074395748, array([0.72531567, 0.01650564, 0.7350039 ]), array([0.47281069, 0.32931727, 0.57524642])] 
iter 7: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 8: [0.5520827381292498, array([0.68888429, 0.03542673, 0.79953259]), array([0.5317993 , 0.42105263, 0.56886836])] 
iter 9: [0.5500828524084338, array([0.69654316, 0.03119968, 0.79291093]), array([0.52611007, 0.41114058, 0.56925802])] 
iter 10: [0.533512370721673, array([0.77230387, 0.00623994, 0.72383796]), array([0.47383795, 0.36904762, 0.58419784])] 
iter 11: [0.5266556196788755, array([0.68577934, 0.03824477, 0.74188522]), array([0.47979725, 0.34798535, 0.56855721])] 
iter 12: [0.5408262385006571, array([0.72614366, 0.00503221, 0.77018956]), array([0.49744753, 0.27777778, 0.57264215])] 
iter 13: [0.5500828524084338, array([0.71703581, 0.01791465, 0.78862633]), array([0.51980792, 0.43203883, 0.57134794])] 
iter 14: [0.5293411805039712, array([0.72490168, 0.01429147, 0.73889899]), array([0.47685185, 0.3317757 , 0.57236247])] 
iter 15: [0.5233415233415234, array([0.70772097, 0.01912238, 0.73292651]), array([0.4689343 , 0.3220339 , 0.56933938])] 
iter 16: [0.5384835152277013, array([0.62450838, 0.        , 0.83186185]), array([0.52772433, 0.        , 0.54370333])] 
iter 17: [0.5284269470315982, array([0.63568619, 0.03059581, 0.78226435]), array([0.49049673, 0.39175258, 0.5551972 ])] 
iter 18: [0.5498542940403406, array([0.69840613, 0.04227053, 0.78408206]), array([0.52562704, 0.39106145, 0.57268848])] 
iter 19: [0.5381406776755614, array([0.71807079, 0.        , 0.77239678]), array([0.49415954, 0.        , 0.56759851])] 
iter 20: [0.38969201759899436, array([0.4765059 , 0.00201288, 0.58530252]), array([0.30726108, 0.16393443, 0.45315641])] 
iter 21: [0.5471687332152448, array([0.67749948, 0.04166667, 0.79148273]), array([0.52151052, 0.414     , 0.56839161])] 
iter 22: [0.34569453174104336, array([0.16601118, 0.        , 0.68138146]), array([0.17291936, 0.        , 0.40811883])] 
iter 23: [0.520541683332381, array([0.7236597 , 0.        , 0.72890158]), array([0.45969757, 0.        , 0.56729992])] 
iter 24: [0.5474544311753614, array([0.68536535, 0.        , 0.81407427]), array([0.52840728, 0.        , 0.55807744])] 
iter 25: [0.5464830581109651, array([0.64914096, 0.        , 0.83458842]), array([0.54284231, 0.        , 0.54827704])] 
iter 26: [0.5403119821724472, array([0.65555786, 0.00301932, 0.81459361]), array([0.52020368, 0.34090909, 0.55185153])] 
iter 27: [0.5445403119821725, array([0.65472987, 0.        , 0.8266684 ]), array([0.53213324, 0.        , 0.55092152])] 
iter 28: [0.5279698302954117, array([0.6412751 , 0.        , 0.79745521]), array([0.49307656, 0.        , 0.54751293])] 
iter 29: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
Run # 1 
====== 
iter 0: [0.5476829895434546, array([0.71020493, 0.03925121, 0.77369514]), array([0.51277836, 0.41666667, 0.57619416])] 
iter 1: [0.5408833780926804, array([0.68101842, 0.        , 0.80186964]), array([0.51246106, 0.        , 0.55735042])] 
iter 2: [0.5240271984458031, array([0.56303043, 0.        , 0.83757466]), array([0.51311073, 0.        , 0.52877049])] 
iter 3: [0.5465973372950117, array([0.73235355, 0.        , 0.78265386]), array([0.50767685, 0.        , 0.57235093])] 
iter 4: [0.547740129135478, array([0.68101842, 0.02375201, 0.80212932]), array([0.52800514, 0.3180593 , 0.56684099])] 
iter 5: [0.5487686417918977, array([0.71724281, 0.00161031, 0.79602701]), array([0.51995798, 0.47058824, 0.56663586])] 
iter 6: [0.540254842580424, array([0.66797764, 0.        , 0.80862114]), array([0.51656795, 0.        , 0.55340323])] 
iter 7: [0.5477972687275013, array([0.6882633 , 0.        , 0.81303558]), array([0.52610759, 0.        , 0.56005724])] 
iter 8: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 9: [0.544826009942289, array([0.70854895, 0.        , 0.79356011]), array([0.51021017, 0.        , 0.56634544])] 
iter 10: [0.5373978629792583, array([0.57710619, 0.        , 0.8591275 ]), array([0.55383393, 0.        , 0.53076121])] 
iter 11: [0.5395691674761443, array([0.61871248, 0.0547504 , 0.80264866]), array([0.52475421, 0.35931308, 0.55955829])] 
iter 12: [0.5313982058168105, array([0.63403022, 0.0291868 , 0.79096339]), array([0.50336894, 0.3280543 , 0.55513031])] 
iter 13: [0.5339694874578595, array([0.73256055, 0.        , 0.75383017]), array([0.4803203 , 0.        , 0.57297937])] 
iter 14: [0.5454545454545454, array([0.69178224, 0.03200483, 0.78486108]), array([0.5189441 , 0.35022026, 0.56990667])] 
iter 15: [0.5272841551911319, array([0.73359553, 0.        , 0.73799013]), array([0.4732274 , 0.        , 0.56771874])] 
iter 16: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 17: [0.540997657276727, array([0.67915545, 0.        , 0.80329784]), array([0.51531333, 0.        , 0.55568529])] 
iter 18: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 19: [0.5452259870864522, array([0.70813496, 0.        , 0.79472864]), array([0.51052082, 0.        , 0.56675926])] 
iter 20: [0.5403691217644706, array([0.69923411, 0.        , 0.78927551]), array([0.50327771, 0.        , 0.56344425])] 
iter 21: [0.536426489914862, array([0.66031877, 0.        , 0.80472605]), array([0.5050665, 0.       , 0.554135 ])] 
iter 22: [0.5457973830066853, array([0.71931277, 0.        , 0.78901584]), array([0.51178203, 0.        , 0.56736066])] 
iter 23: [0.5399120050282841, array([0.66797764, 0.        , 0.80784212]), array([0.51246625, 0.        , 0.55533738])] 
iter 24: [0.5343694646020227, array([0.61043262, 0.        , 0.83134251]), array([0.51700561, 0.        , 0.54276511])] 
iter 25: [0.5448831495343123, array([0.70503001, 0.        , 0.79589717]), array([0.5119495 , 0.        , 0.56508112])] 
iter 26: [0.5343694646020227, array([0.63278824, 0.01247987, 0.80927032]), array([0.50604205, 0.4025974 , 0.55130019])] 
iter 27: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 28: [0.550311410776527, array([0.71620782, 0.        , 0.80122046]), array([0.52131987, 0.        , 0.56802283])] 
iter 29: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
Run # 2 
====== 
iter 0: [0.544997428718359, array([0.65659284, 0.        , 0.82653856]), array([0.53185781, 0.        , 0.55178989])] 
iter 1: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 2: [0.5464259185189417, array([0.71455185, 0.00825282, 0.78810699]), array([0.51042437, 0.36936937, 0.5711866 ])] 
iter 3: [0.540997657276727, array([0.69302422, 0.        , 0.79459881]), array([0.50827387, 0.        , 0.56074766])] 
iter 4: [0.5464259185189417, array([0.7352515 , 0.        , 0.78044664]), array([0.50547887, 0.        , 0.57389727])] 
iter 5: [0.5332838123535798, array([0.67149658, 0.03703704, 0.76668398]), array([0.49549412, 0.35521236, 0.56582982])] 
iter 6: [0.5295125992800411, array([0.58331608, 0.        , 0.83731498]), array([0.51868213, 0.        , 0.53438847])] 
iter 7: [0.5447688703502657, array([0.70461602, 0.        , 0.79589717]), array([0.51103438, 0.        , 0.56549815])] 
iter 8: [0.533512370721673, array([0.7468433 , 0.        , 0.74383277]), array([0.47927736, 0.        , 0.57445102])] 
iter 9: [0.5375692817553283, array([0.63754916, 0.        , 0.82160478]), array([0.51878053, 0.        , 0.5472155 ])] 
iter 10: [0.5419690303411233, array([0.73173256, 0.        , 0.77252662]), array([0.4957229 , 0.        , 0.57377049])] 
iter 11: [0.5444260327981258, array([0.68515835, 0.        , 0.80732277]), array([0.51840251, 0.        , 0.55937388])] 
iter 12: [0.5465401977029885, array([0.68909129, 0.        , 0.80965983]), array([0.522278  , 0.        , 0.56043857])] 
iter 13: [0.5483115250557111, array([0.68391637, 0.        , 0.81693067]), array([0.53025197, 0.        , 0.55829636])] 
iter 14: [0.5467116164790583, array([0.70213206, 0.        , 0.80186964]), array([0.51809989, 0.        , 0.56381231])] 
iter 15: [0.5377978401234215, array([0.71041192, 0.        , 0.77642171]), array([0.4945245 , 0.        , 0.56623426])] 
iter 16: [0.5485400834238043, array([0.74912026, 0.        , 0.77655155]), array([0.50679177, 0.        , 0.5773166 ])] 
iter 17: [0.5365979086909319, array([0.68122542, 0.        , 0.79200208]), array([0.50290342, 0.        , 0.55672173])] 
iter 18: [0.5463116393348951, array([0.7002691 , 0.        , 0.80212932]), array([0.51886503, 0.        , 0.56260814])] 
iter 19: [0.5423118678932632, array([0.69012627, 0.        , 0.79940275]), array([0.51569992, 0.        , 0.55790141])] 
iter 20: [0.5480258270955946, array([0.74249638, 0.        , 0.77953778]), array([0.50792976, 0.        , 0.57515088])] 
iter 21: [0.5461402205588252, array([0.68060443, 0.        , 0.81407427]), array([0.5265012 , 0.        , 0.55703625])] 
iter 22: [0.5365407690989087, array([0.73794245, 0.        , 0.75629707]), array([0.48325878, 0.        , 0.57536547])] 
iter 23: [0.5481972458716645, array([0.72096874, 0.00241546, 0.79187224]), array([0.51258278, 0.42857143, 0.57117438])] 
iter 24: [0.5445403119821725, array([0.6706686 , 0.        , 0.81667099]), array([0.52915238, 0.        , 0.55282123])] 
iter 25: [0.541169076052797, array([0.72842062, 0.        , 0.77278629]), array([0.49865382, 0.        , 0.56989659])] 
iter 26: [0.545911662190732, array([0.74642931, 0.        , 0.77226694]), array([0.50173925, 0.        , 0.57669188])] 
iter 27: [0.5499114336323638, array([0.7296626 , 0.        , 0.79187224]), array([0.51633221, 0.        , 0.57138842])] 
iter 28: [0.5425975658533798, array([0.71144691, 0.        , 0.78667878]), array([0.50573867, 0.        , 0.5659972 ])] 
iter 29: [0.5436832181018227, array([0.72655765, 0.        , 0.77966762]), array([0.50300946, 0.        , 0.57065476])] 
Run # 3 
====== 
iter 0: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 1: [0.5413404948288669, array([0.62181743, 0.        , 0.84004155]), array([0.54214041, 0.        , 0.5409699 ])] 
iter 2: [0.5481401062796412, array([0.70916994, 0.        , 0.80070112]), array([0.51893366, 0.        , 0.56583173])] 
iter 3: [0.5433403805496829, array([0.71889878, 0.        , 0.78369255]), array([0.50043228, 0.        , 0.57153679])] 
iter 4: [0.549568596080224, array([0.70523701, 0.00543478, 0.80290834]), array([0.52278656, 0.28723404, 0.56786042])] 
iter 5: [0.5425404262613565, array([0.69343821, 0.        , 0.79784472]), array([0.51137231, 0.        , 0.56118721])] 
iter 6: [0.545911662190732, array([0.706065  , 0.        , 0.79758504]), array([0.51177794, 0.        , 0.56690661])] 
iter 7: [0.5403691217644706, array([0.70440903, 0.        , 0.7860296 ]), array([0.50422285, 0.        , 0.56305804])] 
iter 8: [0.5356265356265356, array([0.63589319, 0.        , 0.81822903]), array([0.51543624, 0.        , 0.5460532 ])] 
iter 9: [0.5483115250557111, array([0.71579383, 0.06320451, 0.75616723]), array([0.51374239, 0.39054726, 0.58438692])] 
iter 10: [0.5473401519913148, array([0.67398054, 0.04267311, 0.79343028]), array([0.53081187, 0.3557047 , 0.56735679])] 
iter 11: [0.5407690989086338, array([0.67335955, 0.00805153, 0.80122046]), array([0.51758154, 0.33898305, 0.55604613])] 
iter 12: [0.5453974058625222, array([0.68722832, 0.        , 0.80823163]), array([0.5210295 , 0.        , 0.55934945])] 
iter 13: [0.5352265584823724, array([0.66880563, 0.04166667, 0.76980005]), array([0.50334943, 0.3556701 , 0.56466667])] 
iter 14: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 15: [0.5493400377121307, array([0.66901263, 0.01670692, 0.81783952]), array([0.54028753, 0.35930736, 0.55802622])] 
iter 16: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 17: [0.5460259413747786, array([0.7176568 , 0.        , 0.79057388]), array([0.51340145, 0.        , 0.566524  ])] 
iter 18: [0.5407690989086338, array([0.7118609 , 0.        , 0.78226435]), array([0.50255736, 0.        , 0.56530306])] 
iter 19: [0.5395120278841209, array([0.66176775, 0.        , 0.81082836]), array([0.51975289, 0.        , 0.55022026])] 
iter 20: [0.5441403348380093, array([0.66756365, 0.06280193, 0.77720073]), array([0.52209811, 0.36923077, 0.57123771])] 
iter 21: [0.5437403576938461, array([0.70627199, 0.        , 0.79252142]), array([0.50887397, 0.        , 0.56539459])] 
iter 22: [0.5390549111479344, array([0.72800662, 0.        , 0.76824202]), array([0.49971583, 0.        , 0.56551658])] 
iter 23: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 24: [0.5127706988172105, array([0.42682674, 0.        , 0.89742924]), array([0.55519655, 0.        , 0.50134184])] 
iter 25: [0.543911776469916, array([0.6236804 , 0.        , 0.84471566]), array([0.54583333, 0.        , 0.54302646])] 
iter 26: [0.5467687560710817, array([0.65845581, 0.        , 0.82939496]), array([0.5349815 , 0.        , 0.55283427])] 
iter 27: [0.5432832409576596, array([0.7412544 , 0.        , 0.76954038]), array([0.49763758, 0.        , 0.57515769])] 
iter 28: [0.5463116393348951, array([0.67522252, 0.        , 0.81783952]), array([0.52860152, 0.        , 0.55595763])] 
iter 29: [0.5436832181018227, array([0.66839164, 0.        , 0.81615165]), array([0.52316915, 0.        , 0.55485921])] 
Run # 4 
====== 
iter 0: [0.5448831495343123, array([0.6882633 , 0.        , 0.80641392]), array([0.5213233 , 0.        , 0.55839252])] 
iter 1: [0.5414547740129135, array([0.74498034, 0.        , 0.76304856]), array([0.49436813, 0.        , 0.57499266])] 
iter 2: [0.5455688246385921, array([0.66300973, 0.        , 0.823812  ]), array([0.53153004, 0.        , 0.55294118])] 
iter 3: [0.5385977944117479, array([0.69157524, 0.        , 0.79005453]), array([0.50339009, 0.        , 0.56010677])] 
iter 4: [0.550482829552597, array([0.6940592 , 0.08937198, 0.7578551 ]), array([0.52587829, 0.39153439, 0.5842258 ])] 
iter 5: [0.5415119136049369, array([0.66156075, 0.        , 0.81550247]), array([0.52522597, 0.        , 0.55019271])] 
iter 6: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 7: [0.5436260785097995, array([0.65141793, 0.        , 0.8266684 ]), array([0.53456769, 0.        , 0.54821767])] 
iter 8: [0.5481972458716645, array([0.74601532, 0.        , 0.77772007]), array([0.5094713 , 0.        , 0.57447013])] 
iter 9: [0.5437974972858693, array([0.63692817, 0.00623994, 0.83212153]), array([0.53887916, 0.30392157, 0.54829327])] 
iter 10: [0.5451688474944288, array([0.7236597 , 0.        , 0.78486108]), array([0.50858307, 0.        , 0.5688341 ])] 
iter 11: [0.536426489914862, array([0.6644587 , 0.        , 0.80212932]), array([0.507109  , 0.        , 0.55303912])] 
iter 12: [0.5444260327981258, array([0.67439454, 0.        , 0.81407427]), array([0.52078005, 0.        , 0.55758115])] 
iter 13: [0.5460830809668019, array([0.68619333, 0.        , 0.81043885]), array([0.52535658, 0.        , 0.55776964])] 
iter 14: [0.545911662190732, array([0.74767129, 0.04126409, 0.74487146]), array([0.49910184, 0.40755467, 0.58774716])] 
iter 15: [0.5445403119821725, array([0.60877665, 0.        , 0.85549208]), array([0.55417373, 0.        , 0.54034771])] 
iter 16: [0.5488829209759443, array([0.66756365, 0.        , 0.82848611]), array([0.54065381, 0.        , 0.553138  ])] 
iter 17: [0.5461402205588252, array([0.72738563, 0.        , 0.78473124]), array([0.51083006, 0.        , 0.56900772])] 
iter 18: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 19: [0.5399120050282841, array([0.67832747, 0.        , 0.8013503 ]), array([0.508614  , 0.        , 0.55814795])] 
iter 20: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 21: [0.5372264442031884, array([0.74270337, 0.        , 0.75486887]), array([0.48538961, 0.        , 0.57513107])] 
iter 22: [0.5480258270955946, array([0.66735665, 0.        , 0.8266684 ]), array([0.53760213, 0.        , 0.55345967])] 
iter 23: [0.5491686189360608, array([0.69757814, 0.        , 0.81030901]), array([0.52846166, 0.        , 0.56103919])] 
iter 24: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 25: [0.547568710359408, array([0.72200373, 0.        , 0.7913529 ]), array([0.51294118, 0.        , 0.56957294])] 
iter 26: [0.5454545454545454, array([0.70482302, 0.        , 0.79732537]), array([0.51481705, 0.        , 0.56406724])] 
iter 27: [0.5453974058625222, array([0.69364521, 0.        , 0.8042067 ]), array([0.52212527, 0.        , 0.55887395])] 
iter 28: [0.5469401748471516, array([0.69737114, 0.0376409 , 0.78109582]), array([0.51934639, 0.3747495 , 0.57213505])] 
iter 29: [0.5370550254271185, array([0.7590561 , 0.        , 0.74422228]), array([0.48537392, 0.        , 0.57631209])] 
Run # 5 
====== 
iter 0: [0.5460259413747786, array([0.68971227, 0.        , 0.80810179]), array([0.52225705, 0.        , 0.5596619 ])] 
iter 1: [0.5476829895434546, array([0.67812047, 0.        , 0.81913789]), array([0.52992559, 0.        , 0.55738139])] 
iter 2: [0.5424832866693332, array([0.6646657 , 0.        , 0.81576214]), array([0.52160494, 0.        , 0.55381225])] 
iter 3: [0.5463116393348951, array([0.73111157, 0.        , 0.78278369]), array([0.50893372, 0.        , 0.57087397])] 
iter 4: [0.5295697388720645, array([0.69944111, 0.        , 0.7646066 ]), array([0.48044931, 0.        , 0.56257165])] 
iter 5: [0.547568710359408, array([0.69136825, 0.        , 0.81056868]), array([0.52747947, 0.        , 0.55895783])] 
iter 6: [0.5423118678932632, array([0.77271786, 0.        , 0.74759803]), array([0.48822914, 0.        , 0.58427194])] 
iter 7: [0.5369407462430719, array([0.73628648, 0.        , 0.75824461]), array([0.48606177, 0.        , 0.57350486])] 
iter 8: [0.5445974515741958, array([0.73607949, 0.        , 0.77577253]), array([0.50525718, 0.        , 0.57105993])] 
iter 9: [0.5405976801325638, array([0.64976195, 0.        , 0.82082576]), array([0.52500418, 0.        , 0.54868946])] 
iter 10: [0.5422547283012399, array([0.74394535, 0.        , 0.76551545]), array([0.49709544, 0.        , 0.57404342])] 
iter 11: [0.5425975658533798, array([0.69757814, 0.00986312, 0.78901584]), array([0.51138088, 0.33561644, 0.56451463])] 
iter 12: [0.5396834466601909, array([0.78637963, 0.        , 0.73305635]), array([0.48015672, 0.        , 0.58879967])] 
iter 13: [0.5281412490714816, array([0.62802732, 0.        , 0.80615425]), array([0.50140473, 0.        , 0.54227074])] 
iter 14: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 15: [0.5451688474944288, array([0.7232457 , 0.        , 0.78512075]), array([0.50593687, 0.        , 0.57074092])] 
iter 16: [0.5466544768870351, array([0.75036224, 0.        , 0.77148793]), array([0.5038221 , 0.        , 0.57655735])] 
iter 17: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 18: [0.5423118678932632, array([0.69343821, 0.        , 0.79732537]), array([0.51090438, 0.        , 0.56112939])] 
iter 19: [0.5431118221815896, array([0.69012627, 0.        , 0.80122046]), array([0.51746081, 0.        , 0.55805751])] 
iter 20: [0.5259699445745958, array([0.66031877, 0.        , 0.78096598]), array([0.48554033, 0.        , 0.55026987])] 
iter 21: [0.537512142163305, array([0.75615815, 0.        , 0.74707868]), array([0.48590051, 0.        , 0.57637985])] 
iter 22: [0.5393406091080509, array([0.72904161, 0.        , 0.76824202]), array([0.4909395 , 0.        , 0.57296407])] 
iter 23: [0.538426375635678, array([0.63734217, 0.        , 0.82368216]), array([0.52722603, 0.        , 0.54403567])] 
iter 24: [0.5472830123992914, array([0.66673567, 0.        , 0.82537003]), array([0.53558364, 0.        , 0.5534082 ])] 
iter 25: [0.5347694417461859, array([0.54315877, 0.        , 0.8744482 ]), array([0.56981542, 0.        , 0.52225496])] 
iter 26: [0.543168961773613, array([0.64458704, 0.        , 0.82991431]), array([0.53615702, 0.        , 0.54665184])] 
iter 27: [0.5442546140220559, array([0.69509418, 0.        , 0.80070112]), array([0.51685393, 0.        , 0.56043257])] 
iter 28: [0.5457973830066853, array([0.66528669, 0.        , 0.82290314]), array([0.53115188, 0.        , 0.55353712])] 
iter 29: [0.5462544997428719, array([0.70627199, 0.        , 0.79823422]), array([0.51681309, 0.        , 0.56408845])] 
Run # 6 
====== 
iter 0: [0.5459688017827553, array([0.71475885, 0.        , 0.79226175]), array([0.51072327, 0.        , 0.56815642])] 
iter 1: [0.5491686189360608, array([0.72531567, 0.        , 0.79291093]), array([0.5149155 , 0.        , 0.57096111])] 
iter 2: [0.5430546825895664, array([0.59200994, 0.        , 0.86263308]), array([0.56155508, 0.        , 0.53546099])] 
iter 3: [0.5488257813839209, array([0.69095425, 0.        , 0.81368476]), array([0.53076801, 0.        , 0.55895469])] 
iter 4: [0.5389406319638878, array([0.6942662 , 0.        , 0.78914568]), array([0.50550113, 0.        , 0.55935947])] 
iter 5: [0.5489400605679675, array([0.69716415, 0.        , 0.81004934]), array([0.5257571 , 0.        , 0.56232537])] 
iter 6: [0.5443688932061025, array([0.70875595, 0.        , 0.79239159]), array([0.50733442, 0.        , 0.56761533])] 
iter 7: [0.547397291583338, array([0.65535086, 0.        , 0.83277071]), array([0.54147426, 0.        , 0.55036897])] 
iter 8: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 9: [0.5412833552368436, array([0.65824881, 0.        , 0.8170605 ]), array([0.52718833, 0.        , 0.54869649])] 
iter 10: [0.5452831266784756, array([0.68391637, 0.        , 0.81004934]), array([0.52552887, 0.        , 0.55635812])] 
iter 11: [0.5401977029884006, array([0.58580004, 0.        , 0.86003635]), array([0.55479318, 0.        , 0.53419355])] 
iter 12: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 13: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 14: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 15: [0.5434546597337295, array([0.66735665, 0.        , 0.81628149]), array([0.52151407, 0.        , 0.55543776])] 
iter 16: [0.544997428718359, array([0.74456634, 0.        , 0.77135809]), array([0.50279564, 0.        , 0.57417609])] 
iter 17: [0.5376264213473516, array([0.59511488, 0.        , 0.84835108]), array([0.54419837, 0.        , 0.53478474])] 
iter 18: [0.5480829666876178, array([0.67211757, 0.        , 0.823812  ]), array([0.53229508, 0.        , 0.55653013])] 
iter 19: [0.5330552539854866, array([0.66176775, 0.        , 0.79615684]), array([0.50046963, 0.        , 0.5517862 ])] 
iter 20: [0.5395691674761443, array([0.76278203, 0.        , 0.74759803]), array([0.48416765, 0.        , 0.58220425])] 
iter 21: [0.5415690531969601, array([0.73897744, 0.        , 0.76707349]), array([0.4966611 , 0.        , 0.57286919])] 
iter 22: [0.5490543397520141, array([0.70689298, 0.        , 0.8042067 ]), array([0.52587003, 0.        , 0.56273281])] 
iter 23: [0.5465401977029885, array([0.7704409 , 0.        , 0.75863412]), array([0.49383044, 0.        , 0.58641108])] 
iter 24: [0.5459688017827553, array([0.63713517, 0.        , 0.8409504 ]), array([0.54314452, 0.        , 0.54732128])] 
iter 25: [0.547740129135478, array([0.72055475, 0.        , 0.79265126]), array([0.51327042, 0.        , 0.5695494 ])] 
iter 26: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 27: [0.5367693274670019, array([0.54564272, 0.        , 0.87743443]), array([0.56493785, 0.        , 0.52652902])] 
iter 28: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 29: [0.5476829895434546, array([0.68557235, 0.        , 0.81446378]), array([0.52848253, 0.        , 0.55839416])] 
Run # 7 
====== 
iter 0: [0.5477972687275013, array([0.68412337, 0.        , 0.8156323 ]), array([0.52947773, 0.        , 0.55795364])] 
iter 1: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 2: [0.5034569453174105, array([0.81929207, 0.        , 0.63009608]), array([0.42191664, 0.        , 0.5976601 ])] 
iter 3: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 4: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 5: [0.5344837437860693, array([0.70854895, 0.        , 0.77005972]), array([0.49138674, 0.        , 0.56298054])] 
iter 6: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 7: [0.5480829666876178, array([0.67998344, 0.        , 0.81887821]), array([0.530952  , 0.        , 0.55745095])] 
iter 8: [0.544826009942289, array([0.66238874, 0.        , 0.82251363]), array([0.53235734, 0.        , 0.551349  ])] 
iter 9: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 10: [0.5502542711845038, array([0.66549369, 0.        , 0.83290055]), array([0.54151929, 0.        , 0.55473884])] 
iter 11: [0.5414547740129135, array([0.67542952, 0.04186795, 0.77966762]), array([0.51369647, 0.35254237, 0.56870916])] 
iter 12: [0.5357979544026056, array([0.55951149, 0.        , 0.86652817]), array([0.55997514, 0.        , 0.52658987])] 
iter 13: [0.5471115936232215, array([0.77209687, 0.        , 0.75889379]), array([0.4986631 , 0.        , 0.58327512])] 
iter 14: [0.5417976115650535, array([0.70420203, 0.        , 0.78940535]), array([0.50437361, 0.        , 0.5652659 ])] 
iter 15: [0.5440831952459859, array([0.77685779, 0.        , 0.74902623]), array([0.49142333, 0.        , 0.58485401])] 
iter 16: [0.5472258728072682, array([0.67418754, 0.        , 0.82056609]), array([0.53349713, 0.        , 0.55458055])] 
iter 17: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 18: [0.5443117536140792, array([0.71310288, 0.        , 0.78953519]), array([0.50991711, 0.        , 0.56593765])] 
iter 19: [0.5472830123992914, array([0.74311737, 0.        , 0.7774604 ]), array([0.50634697, 0.        , 0.57516089])] 
iter 20: [0.5462544997428719, array([0.69840613, 0.        , 0.80316801]), array([0.51535054, 0.        , 0.56472521])] 
iter 21: [0.5393977487000743, array([0.66590768, 0.        , 0.80797196]), array([0.51720257, 0.        , 0.55163549])] 
iter 22: [0.5421404491171933, array([0.61022563, 0.        , 0.8491301 ]), array([0.54866927, 0.        , 0.53924802])] 
iter 23: [0.5489400605679675, array([0.69447319, 0.        , 0.81173721]), array([0.52693576, 0.        , 0.56152326])] 
iter 24: [0.5424261470773099, array([0.71330987, 0.        , 0.78512075]), array([0.50476051, 0.        , 0.56651677])] 
iter 25: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 26: [0.5443688932061025, array([0.61726351, 0.        , 0.84977928]), array([0.55120148, 0.        , 0.54131172])] 
iter 27: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 28: [0.5456831038226387, array([0.72158973, 0.        , 0.78732797]), array([0.50786713, 0.        , 0.57008555])] 
iter 29: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
Run # 8 
====== 
iter 0: [0.547397291583338, array([0.73856344, 0.        , 0.78057647]), array([0.50797267, 0.        , 0.57382839])] 
iter 1: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 2: [0.5468830352551283, array([0.70254606, 0.        , 0.80199948]), array([0.51959584, 0.        , 0.56313246])] 
iter 3: [0.5468830352551283, array([0.70337404, 0.        , 0.80148014]), array([0.51949243, 0.        , 0.56322993])] 
iter 4: [0.5363122107308154, array([0.73939143, 0.        , 0.75486887]), array([0.48704663, 0.        , 0.5718501 ])] 
iter 5: [0.5264842009028056, array([0.65555786, 0.        , 0.78512075]), array([0.49024768, 0.        , 0.5476859 ])] 
iter 6: [0.5425404262613565, array([0.63175326, 0.01751208, 0.8252402 ]), array([0.53496933, 0.35080645, 0.55039834])] 
iter 7: [0.5425404262613565, array([0.75760712, 0.        , 0.75759543]), array([0.49153908, 0.        , 0.5803083 ])] 
iter 8: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 9: [0.5480258270955946, array([0.68536535, 0.        , 0.81537263]), array([0.52790179, 0.        , 0.55926619])] 
iter 10: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 11: [0.5447688703502657, array([0.6998551 , 0.        , 0.79888341]), array([0.51445526, 0.        , 0.56299753])] 
iter 12: [0.5324267184732301, array([0.73235355, 0.        , 0.75045443]), array([0.48181942, 0.        , 0.56900965])] 
iter 13: [0.5487115021998743, array([0.70979093, 0.0239533 , 0.78615944]), array([0.51641566, 0.39799331, 0.57328158])] 
iter 14: [0.5483686646477344, array([0.69550818, 0.        , 0.80978967]), array([0.52524621, 0.        , 0.56168948])] 
iter 15: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 16: [0.4989429175475687, array([0.3703167 , 0.        , 0.90145417]), array([0.52664115, 0.        , 0.4922717 ])] 
iter 17: [0.5501399920004572, array([0.71641482, 0.        , 0.80070112]), array([0.52296766, 0.        , 0.5666636 ])] 
iter 18: [0.5453402662704988, array([0.73835645, 0.        , 0.7760322 ]), array([0.50374241, 0.        , 0.57360845])] 
iter 19: [0.547397291583338, array([0.66507969, 0.        , 0.8266684 ]), array([0.53389831, 0.        , 0.55447183])] 
iter 20: [0.5491114793440375, array([0.69136825, 0.        , 0.81407427]), array([0.5302429 , 0.        , 0.55972148])] 
iter 21: [0.5421404491171933, array([0.59656386, 0.        , 0.8576993 ]), array([0.55583414, 0.        , 0.53637545])] 
iter 22: [0.5471115936232215, array([0.65038294, 0.        , 0.8352376 ]), array([0.54069867, 0.        , 0.5502994 ])] 
iter 23: [0.5411119364607737, array([0.69468019, 0.        , 0.79381979]), array([0.50840782, 0.        , 0.56091743])] 
iter 24: [0.5483115250557111, array([0.64479404, 0.        , 0.84146975]), array([0.54957657, 0.        , 0.54770557])] 
iter 25: [0.5357979544026056, array([0.5646864 , 0.        , 0.86328226]), array([0.55787321, 0.        , 0.52723813])] 
iter 26: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 27: [0.5456831038226387, array([0.71206789, 0.        , 0.79330044]), array([0.51312649, 0.        , 0.56589793])] 
iter 28: [0.5439689160619393, array([0.77354585, 0.        , 0.75084394]), array([0.48677869, 0.        , 0.58866042])] 
iter 29: [0.5329409748014399, array([0.70979093, 0.        , 0.76577512]), array([0.49154243, 0.        , 0.56038005])] 
Run # 9 
====== 
iter 0: [0.5482543854636878, array([0.73318154, 0.        , 0.78589977]), array([0.51363109, 0.        , 0.57076851])] 
iter 1: [0.5460830809668019, array([0.71393086, 0.        , 0.79304077]), array([0.51309134, 0.        , 0.56665739])] 
iter 2: [0.5433403805496829, array([0.71558684, 0.        , 0.78576993]), array([0.50592712, 0.        , 0.56730409])] 
iter 3: [0.5481401062796412, array([0.70109708, 0.        , 0.80576474]), array([0.52430341, 0.        , 0.56208677])] 
iter 4: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 5: [0.5507685275127135, array([0.72241772, 0.        , 0.79836406]), array([0.51965456, 0.        , 0.57014372])] 
iter 6: [0.5462544997428719, array([0.76029807, 0.        , 0.76434692]), array([0.49837178, 0.        , 0.58108775])] 
iter 7: [0.5497971544483172, array([0.7000621 , 0.01610306, 0.79979226]), array([0.52434109, 0.3960396 , 0.56779427])] 
iter 8: [0.5487115021998743, array([0.68205341, 0.        , 0.81900805]), array([0.5343821, 0.       , 0.5565064])] 
iter 9: [0.5468830352551283, array([0.74291037, 0.        , 0.77668138]), array([0.50713579, 0.        , 0.573868  ])] 
iter 10: [0.5155133992343295, array([0.83667978, 0.        , 0.6465853 ]), array([0.43123866, 0.        , 0.61269685])] 
iter 11: [0.544826009942289, array([0.67253157, 0.        , 0.81615165]), array([0.52462458, 0.        , 0.55588964])] 
iter 12: [0.5253414090623393, array([0.80066239, 0.        , 0.6915087 ]), array([0.45505882, 0.        , 0.59171203])] 
iter 13: [0.5467116164790583, array([0.74084041, 0.        , 0.77759024]), array([0.50665345, 0.        , 0.5738239 ])] 
iter 14: [0.5481972458716645, array([0.69923411, 0.        , 0.8070631 ]), array([0.52649626, 0.        , 0.56075778])] 
iter 15: [0.5432832409576596, array([0.79051956, 0.        , 0.73863931]), array([0.48507557, 0.        , 0.59088076])] 
iter 16: [0.5478544083195246, array([0.73566549, 0.        , 0.78343287]), array([0.5083679 , 0.        , 0.57411989])] 
iter 17: [0.5471687332152448, array([0.70689298, 0.        , 0.7999221 ]), array([0.51586103, 0.        , 0.56621634])] 
iter 18: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 19: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 20: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 21: [0.5469973144391749, array([0.70503001, 0.        , 0.80070112]), array([0.51739329, 0.        , 0.56484704])] 
iter 22: [0.5459688017827553, array([0.75947009, 0.        , 0.76421709]), array([0.5      , 0.       , 0.5791597])] 
iter 23: [0.5158562367864693, array([0.46284413, 0.        , 0.88184887]), array([0.53659707, 0.        , 0.50937453])] 
iter 24: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 25: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
iter 26: [0.5452259870864522, array([0.69095425, 0.        , 0.80550506]), array([0.51832298, 0.        , 0.56088961])] 
iter 27: [0.5468830352551283, array([0.74208238, 0.        , 0.77720073]), array([0.50607002, 0.        , 0.57463761])] 
iter 28: [0.542997542997543, array([0.73856344, 0.        , 0.77057907]), array([0.49721293, 0.        , 0.5748184 ])] 
iter 29: [0.44008913776355635, array([0., 0., 1.]), array([0.        , 0.        , 0.44008914])] 
{0: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 1: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 2: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 3: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 4: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 5: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 6: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 7: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 8: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 9: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 10: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 11: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 12: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 13: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 14: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 15: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 16: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 17: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 18: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 19: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 20: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 21: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 22: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 23: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 24: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 25: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 26: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 27: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 28: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 29: [0.5467687560710817, 0.5476829895434546, 0.544997428718359, 0.44008913776355635, 0.5448831495343123, 0.5460259413747786, 0.5459688017827553, 0.5477972687275013, 0.547397291583338, 0.5482543854636878], 'settings': {0: ['standardizeI|rf', 'standardizeU|rf', 'minmaxK|rf', 'robustb|rf', 'normalizep|rf', 'normalizeL|rf', 'robustq|rf', 'standardizeg|rf', 'maxabsW|rf', 'normalizeO|rf'], 1: ['minmaxR|rf', 'robustI|rf', 'standardizeC|rf', 'maxabsi|rf', 'normalizeg|rf', 'normalized|rf', 'maxabsi|rf', 'minmaxO|rf', 'normalizeU|rf', 'maxabso|rf'], 2: ['maxabsO|rf', 'minmaxp|rf', 'maxabsJ|rf', 'normalizeV|rf', 'robustp|rf', 'normalizeD|rf', 'maxabsc|rf', 'robustK|rf', 'maxabsD|rf', 'minmaxy|rf'], 3: ['robustl|rf', 'standardizeu|rf', 'standardizes|rf', 'robustT|rf', 'normalizeQ|rf', 'minmaxl|rf', 'maxabsC|rf', 'maxabse|rf', 'minmaxl|rf', 'minmaxl|rf'], 4: ['minmaxs|rf', 'standardizea|rf', 'normalizef|rf', 'standardizeQ|rf', 'normalizeo|rf', 'minmaxy|rf', 'robustt|rf', 'robustG|rf', 'minmaxE|rf', 'robustM|rf'], 5: ['standardizeR|rf', 'normalizeb|rf', 'minmaxq|rf', 'maxabsB|rf', 'standardizeN|rf', 'minmaxV|rf', 'normalizeK|rf', 'standardizeX|rf', 'maxabsk|rf', 'normalizen|rf'], 6: ['minmaxv|rf', 'minmaxr|rf', 'maxabsB|rf', 'standardizeD|rf', 'normalizeI|rf', 'normalizec|rf', 'maxabsr|rf', 'robustm|rf', 'minmaxN|rf', 'standardizeo|rf'], 7: ['robustV|rf', 'maxabsx|rf', 'minmaxP|rf', 'robustH|rf', 'robustG|rf', 'minmaxo|rf', 'normalizeN|rf', 'maxabsx|rf', 'normalizeb|rf', 'standardizeL|rf'], 8: ['robustF|rf', 'maxabsI|rf', 'robustL|rf', 'standardizel|rf', 'standardizeQ|rf', 'standardizeh|rf', 'maxabsp|rf', 'robustA|rf', 'standardizeu|rf', 'standardizey|rf'], 9: ['standardizeY|rf', 'normalizeo|rf', 'minmaxF|rf', 'normalizeg|rf', 'maxabsG|rf', 'normalizeW|rf', 'minmaxf|rf', 'normalizey|rf', 'maxabsp|rf', 'minmaxv|rf'], 10: ['maxabsT|rf', 'minmaxX|rf', 'standardizeY|rf', 'robustl|rf', 'standardizea|rf', 'minmaxR|rf', 'maxabsV|rf', 'maxabsE|rf', 'normalizeM|rf', 'minmaxZ|rf'], 11: ['robustr|rf', 'robustR|rf', 'normalizeT|rf', 'minmaxr|rf', 'normalizeu|rf', 'minmaxE|rf', 'normalizei|rf', 'maxabsu|rf', 'minmaxH|rf', 'robustL|rf'], 12: ['maxabsU|rf', 'maxabsX|rf', 'standardizeS|rf', 'standardizej|rf', 'robustv|rf', 'normalizej|rf', 'normalizea|rf', 'standardizeI|rf', 'maxabsn|rf', 'standardizet|rf'], 13: ['robusti|rf', 'robustt|rf', 'normalizeP|rf', 'robustC|rf', 'maxabsi|rf', 'maxabsB|rf', 'maxabsz|rf', 'normalizes|rf', 'standardizem|rf', 'standardizeR|rf'], 14: ['minmaxl|rf', 'standardizeg|rf', 'maxabsa|rf', 'minmaxH|rf', 'maxabsu|rf', 'maxabsK|rf', 'robustC|rf', 'minmaxN|rf', 'robustd|rf', 'standardizeX|rf'], 15: ['normalizeq|rf', 'robustr|rf', 'normalizem|rf', 'standardizeK|rf', 'maxabsB|rf', 'robustH|rf', 'standardizeU|rf', 'robusty|rf', 'standardizeX|rf', 'standardizeV|rf'], 16: ['maxabsb|rf', 'robustQ|rf', 'maxabsw|rf', 'standardizeM|rf', 'standardizeu|rf', 'standardizeg|rf', 'standardizeJ|rf', 'standardizek|rf', 'normalizeI|rf', 'standardizer|rf'], 17: ['normalizex|rf', 'robustN|rf', 'robustO|rf', 'maxabsk|rf', 'normalizef|rf', 'normalizeT|rf', 'minmaxb|rf', 'minmaxE|rf', 'maxabst|rf', 'robustJ|rf'], 18: ['robustJ|rf', 'robustV|rf', 'maxabsO|rf', 'standardizee|rf', 'normalizeh|rf', 'minmaxq|rf', 'minmaxx|rf', 'robustU|rf', 'robustJ|rf', 'minmaxq|rf'], 19: ['standardizea|rf', 'normalized|rf', 'minmaxe|rf', 'robustZ|rf', 'robustl|rf', 'normalizeE|rf', 'normalizeA|rf', 'maxabsQ|rf', 'standardizeH|rf', 'standardizep|rf'], 20: ['robustU|rf dodge.py  
', 'standardizeN|rf', 'minmaxV|rf', 'robustw|rf', 'normalizeX|rf', 'maxabsA|rf', 'normalizem|rf', 'minmaxP|rf', 'standardizer|rf', 'minmaxE|rf'], 21: ['standardizeo|rf', 'minmaxw|rf', 'robustw|rf', 'normalizey|rf', 'robustt|rf', 'normalizeS|rf', 'standardizeT|rf', 'minmaxm|rf', 'maxabsr|rf', 'maxabsx|rf'], 22: ['robusto|rf', 'standardizee|rf', 'normalizeh|rf', 'robusto|rf', 'maxabsR|rf', 'robustt|rf', 'maxabsY|rf', 'robustY|rf', 'normalizeN|rf', 'robustH|rf'], 23: ['minmaxM|rf', 'maxabsD|rf', 'maxabsn|rf', 'normalizev|rf', 'normalizen|rf', 'minmaxu|rf', 'standardizeR|rf', 'normalizeH|rf', 'normalizep|rf', 'maxabsO|rf'], 24: ['robustD|rf', 'minmaxi|rf', 'normalizeD|rf', 'minmaxE|rf', 'robustO|rf', 'normalizep|rf', 'robusti|rf', 'normalizev|rf', 'standardizex|rf', 'normalizec|rf'], 25: ['normalizej|rf', 'robuste|rf', 'standardizeo|rf', 'normalizes|rf', 'standardizec|rf', 'standardizeQ|rf', 'standardizeB|rf', 'standardized|rf', 'standardizen|rf', 'robustq|rf'], 26: ['minmaxS|rf', 'normalizeY|rf', 'standardizev|rf', 'normalizeo|rf', 'normalizeJ|rf', 'minmaxv|rf', 'minmaxo|rf', 'maxabsN|rf', 'normalizeq|rf', 'minmaxb|rf'], 27: ['normalizeF|rf', 'robusth|rf', 'maxabsl|rf', 'maxabsT|rf', 'robustH|rf', 'robustz|rf', 'maxabsF|rf', 'normalizef|rf', 'minmaxX|rf', 'maxabsc|rf'], 28: ['minmaxk|rf', 'standardizeS|rf', 'robusth|rf', 'robustJ|rf', 'standardizeq|rf', 'maxabsL|rf', 'maxabsn|rf', 'maxabsj|rf', 'standardizeC|rf', 'robustU|rf'], 29: ['maxabsa|rf', 'maxabsb|rf', 'minmaxl|rf', 'standardizeT|rf', 'standardizex|rf', 'maxabsl|rf', 'normalizeG|rf', 'standardizew|rf', 'maxabsL|rf', 'normalizeN|rf']}} 
[Wed, Dec 23 202012:54PM] DASENetComparison/GHOST-Results git:(master*) $      
                                                                                                                                                             
 
[Wed, Dec 23 2020 1:30PM] DASENetComparison/GHOST-Results git:(master*) $  
                                                                                                                                                             
[Wed, Dec 23 2020 1:30PM] DASENetComparison/GHOST-Results git:(master*) $  
[Wed, Dec 23 2020 1:30PM] DASENetComparison/GHOST-Results git:(master*) $ cat firefox-3class.txt 
[Wed, Dec 23 2020 1:30PM] DASENetComparison/GHOST-Results git:(master*) $ cd ..                   
ls                                                                                                                                                           
[Wed, Dec 23 2020 4:35PM] issue_close_time/DASENetComparison git:(master*) $ ls 
Bug-Related-Activity-Logs                              PROMISE.ipynb 
Chromium.ipynb                                         README.md 
Common bug id in DeepTriage and DASENet datasets.ipynb Reproduction 
DODGE on Bugzilla data.ipynb                           buildr.txt 
DeepTriage.ipynb                                       dimensionality.png 
Eclipse.ipynb                                          dodge-log 
Firefox.ipynb                                          eclipse.txt 
GHOST-Results                                          promise-buildr.csv 
Intrinsic dimensionality plots.ipynb 
[Wed, Dec 23 2020 4:35PM] issue_close_time/DASENetComparison git:(master*) $ rm -rf dodge-log    
[Wed, Dec 23 2020 4:35PM] issue_close_time/DASENetComparison git:(master*) $ ls 
Bug-Related-Activity-Logs                              Intrinsic dimensionality plots.ipynb 
Chromium.ipynb                                         PROMISE.ipynb 
Common bug id in DeepTriage and DASENet datasets.ipynb README.md 
DODGE on Bugzilla data.ipynb                           Reproduction 
DeepTriage.ipynb                                       buildr.txt 
Eclipse.ipynb                                          dimensionality.png 
Firefox.ipynb                                          eclipse.txt 
GHOST-Results                                          promise-buildr.csv 
[Wed, Dec 23 2020 4:35PM] issue_close_time/DASENetComparison git:(master*) $ cd    
[Wed, Dec 23 2020 4:35PM] /Users/ryedida $ vim dodge.py  
[Wed, Dec 23 2020 4:37PM] /Users/ryedida $ gcloud compute scp dodge.py dl-cpu-vm:~/                          
dodge.py                                                                                                                   100% 5137    71.2KB/s   00:00     
 
 
Updates are available for some Cloud SDK components.  To install them, 
please run: 
  $ gcloud components update 
 
 
 
To take a quick anonymous survey, run: 
  $ gcloud survey 
 
[Wed, Dec 23 2020 4:38PM] /Users/ryedida $ gcloud compute ssh dl-cpu-vm             
====================================== 
Welcome to the Google Deep Learning VM 
====================================== 
 
Version: tf2-cpu.2-1.m49 
Based on: Debian GNU/Linux 9.12 (stretch) (GNU/Linux 4.9.0-12-amd64 x86_64\n) 
 
Resources: 
 * Google Deep Learning Platform StackOverflow: https://stackoverflow.com/questions/tagged/google-dl-platform 
 * Google Cloud Documentation: https://cloud.google.com/deep-learning-vm 
 * Google Group: https://groups.google.com/forum/#!forum/google-dl-platform 
 
To reinstall Nvidia driver (if needed) run: 
sudo /opt/deeplearning/install-driver.sh 
TensorFlow comes pre-installed with this image. To install TensorFlow binaries in a virtualenv (or conda env), 
please use the binaries that are pre-built for this image. You can find the binaries at 
/opt/deeplearning/binaries/tensorflow/ 
If you need to install a different version of Tensorflow manually, use the common Deep Learning image with the 
right version of CUDA 
 
Linux dl-cpu-vm 4.9.0-12-amd64 #1 SMP Debian 4.9.210-1+deb9u1 (2020-06-07) x86_64 
 
The programs included with the Debian GNU/Linux system are free software; 
the exact distribution terms for each program are described in the 
individual files in /usr/share/doc/*/copyright. 
 
Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent 
permitted by applicable law. 
ryedida@dl-cpu-vm:~$ ls 
dodge.py  ghost-dl  ghost-log-defect  ghost.py  hyperopt-log  hyperopt_.py  hyperopt-sklearn  interp.py  issue_close_time  issue_close_time.tar.gz  raise 
ryedida@dl-cpu-vm:~$ vim dodge.py  
ryedida@dl-cpu-vm:~$ git clone https://github.com/mkris0714/Bug-Related-Activity-Logs.git 
Cloning into 'Bug-Related-Activity-Logs'... 
remote: Enumerating objects: 5, done. 
remote: Counting objects: 100% (5/5), done. 
remote: Compressing objects: 100% (5/5), done. 
remote: Total 5 (delta 0), reused 5 (delta 0), pack-reused 0 
Unpacking objects: 100% (5/5), done. 
ryedida@dl-cpu-vm:~$ python3 dodge.py  
2020-12-23 21:39:16.869195: W tensorflow/stream_executor/platform/default/dso_loader.cc:60] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory 
2020-12-23 21:39:16.869228: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.
Running: firefox 
============================== 
2 classes 
============================== 
Traceback (most recent call last): 
  File "dodge.py", line 131, in <module> 
    run(file, n_class) 
  File "dodge.py", line 117, in run 
    dodge = DODGE(config) 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/hyperparams/dodge.py", line 32, in __init__ 
    self.config['log_path'], self.config['name'] + '.txt'), 'w') 
FileNotFoundError: [Errno 2] No such file or directory: './dodge-log/firefox-2.txt' 
Exception ignored in: <function DODGE.__del__ at 0x7f26c262d440> 
Traceback (most recent call last): 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/hyperparams/dodge.py", line 36, in __del__ 
    self.file.close() 
AttributeError: 'DODGE' object has no attribute 'file' 
^C 
ryedida@dl-cpu-vm:~$ mkdir dodge-log 
ryedida@dl-cpu-vm:~$ python3 dodge.py  
2020-12-23 21:39:39.958718: W tensorflow/stream_executor/platform/default/dso_loader.cc:60] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory 
2020-12-23 21:39:39.958756: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.
Running: firefox 
============================== 
2 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=40), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=72), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=40), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=39), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=95), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=63), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=38), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=90), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=30), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=16), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=86), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=64), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=50), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=19), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=55), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=90), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=67), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=87), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=58), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=56), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=89), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=64), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=58), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=80), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=26), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=12), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=24), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=30), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=48), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=26), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=20), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=33), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=77), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=15), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=69), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=24), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
            data.y_train < 6, 4, np.where(data.y_train < 8, 5, np.where(data.y_train < 11, 6, np.where(data.y_train < 21, 7, 8)))))))) 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=89), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: maxabsa|rf 
Top-1 Accuracy = 0.6565910519398892 
Traceback (most recent call last): 
  File "dodge.py", line 131, in <module> 
    run(file, n_class) 
  File "dodge.py", line 118, in run 
    dodge.optimize() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/hyperparams/dodge.py", line 84, in optimize 
    hook.call(model, data.x_test, data.y_test) 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/hooks/hooks.py", line 26, in call 
    self.function(*args, **kwargs) 
  File "dodge.py", line 94, in hook 
    t2 = get_top2(model, x_test, y_test) 
TypeError: get_top2() takes 2 positional arguments but 3 were given 
^C 
ryedida@dl-cpu-vm:~$ vim dodge.py  
ryedida@dl-cpu-vm:~$ python3 dodge.py  
2020-12-23 21:41:15.450004: W tensorflow/stream_executor/platform/default/dso_loader.cc:60] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory 
2020-12-23 21:41:15.450042: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.
Running: firefox 
============================== 
3 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=39), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=17), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=77), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=21), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=97), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=33), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=26), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=83), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=54), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=35), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=29), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=56), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=32), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=16), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=30), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=87), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=95), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=71), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=44), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=84), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=44), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=87), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=94), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=94), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=41), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=67), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=74), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=58), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=40), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=92), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=41), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=18), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=52), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=45), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=18), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=13), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=65), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=83), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=21), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=15), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: maxabsW|rf 
Top-1 Accuracy = 0.3996914462030741 
Top-2 Accuracy = 0.0 
iter 0: [0.3996914462030741] 
setting: normalized|rf 
Top-1 Accuracy = 0.3996914462030741 
Top-2 Accuracy = 0.0 
iter 1: [0.3996914462030741] 
setting: normalizev|rf 
^CTraceback (most recent call last): 
  File "dodge.py", line 131, in <module> 
    run(file, n_class) 
  File "dodge.py", line 118, in run 
    dodge.optimize() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/hyperparams/dodge.py", line 79, in optimize 
    model.fit() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/learners/learner.py", line 103, in fit 
    self.learner.fit(self.x_train, self.y_train) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/ensemble/_forest.py", line 392, in fit 
    for i, t in enumerate(trees)) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 1032, in __call__ 
    while self.dispatch_one_batch(iterator): 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 847, in dispatch_one_batch 
    self._dispatch(tasks) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 765, in _dispatch 
    job = self._backend.apply_async(batch, callback=cb) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/_parallel_backends.py", line 206, in apply_async 
    result = ImmediateResult(func) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/_parallel_backends.py", line 570, in __init__ 
    self.results = batch() 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 253, in __call__ 
    for func, args, kwargs in self.items] 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 253, in <listcomp> 
    for func, args, kwargs in self.items] 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/ensemble/_forest.py", line 168, in _parallel_build_trees 
    tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/tree/_classes.py", line 894, in fit 
    X_idx_sorted=X_idx_sorted) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/tree/_classes.py", line 375, in fit 
    builder.build(self.tree_, X, y, sample_weight, X_idx_sorted) 
KeyboardInterrupt 
 
^C 
ryedida@dl-cpu-vm:~$ rm dodge-log/firefox-3.txt  
ryedida@dl-cpu-vm:~$ python3 dodge.py  
2020-12-23 21:41:39.841704: W tensorflow/stream_executor/platform/default/dso_loader.cc:60] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory 
2020-12-23 21:41:39.841741: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.
Running: firefox 
============================== 
3 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=89), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=18), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=68), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=55), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=85), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=41), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=91), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=64), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=29), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=63), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=96), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=33), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=89), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=65), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=69), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=74), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=81), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=16), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=18), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=21), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=39), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=52), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=28), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=21), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=21), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=19), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=97), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=54), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=83), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=24), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=24), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=39), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=42), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=40), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=32), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=48), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=93), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=98), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=13), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=65), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=68), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=89), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: maxabsL|rf 
Top-1 Accuracy = 0.4212330723958631 
Top-2 Accuracy = 0.0 
iter 0: [0.4212330723958631] 
setting: normalizem|rf 
Top-1 Accuracy = 0.4094623164390606 
Top-2 Accuracy = 0.0 
iter 1: [0.4094623164390606] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.3974630021141649 
Top-2 Accuracy = 0.0 
iter 2: [0.3974630021141649] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.4263756356779613 
Top-2 Accuracy = 0.0 
iter 3: [0.4263756356779613] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.3974630021141649 
Top-2 Accuracy = 0.0 
iter 4: [0.3974630021141649] 
setting: robusta|rf 
Top-1 Accuracy = 0.3974630021141649 
Top-2 Accuracy = 0.0 
iter 5: [0.3974630021141649] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.3974630021141649 
Top-2 Accuracy = 0.0 
iter 6: [0.3974630021141649] 
setting: standardizer|rf 
Top-1 Accuracy = 0.40071995885949374 
Top-2 Accuracy = 0.0 
iter 7: [0.40071995885949374] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.42329009770870235 
Top-2 Accuracy = 0.0 
iter 8: [0.42329009770870235] 
                                np.where(data.y_train < 6, 1, 2)) 
setting: maxabsj|rf 
Top-1 Accuracy = 0.3974630021141649 
Top-2 Accuracy = 0.0 
iter 9: [0.3974630021141649] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.42191874750014285 
Top-2 Accuracy = 0.0 
iter 10: [0.42191874750014285] 
setting: standardizev|rf 
Top-1 Accuracy = 0.40763384949431464 
Top-2 Accuracy = 0.0 
iter 11: [0.40763384949431464] 
setting: normalizep|rf 
Top-1 Accuracy = 0.40900519970287413 
Top-2 Accuracy = 0.0 
iter 12: [0.40900519970287413] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.404776869893149 
Top-2 Accuracy = 0.0 
iter 13: [0.404776869893149] 
setting: normalizeJ|rf 
^CTraceback (most recent call last): 
  File "dodge.py", line 131, in <module> 
    run(file, n_class) 
  File "dodge.py", line 118, in run 
    dodge.optimize() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/hyperparams/dodge.py", line 79, in optimize 
    model.fit() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/learners/learner.py", line 103, in fit 
    self.learner.fit(self.x_train, self.y_train) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/tree/_classes.py", line 894, in fit 
    X_idx_sorted=X_idx_sorted) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/tree/_classes.py", line 375, in fit 
    builder.build(self.tree_, X, y, sample_weight, X_idx_sorted) 
KeyboardInterrupt 
^C 
 
 
 
^C 
ryedida@dl-cpu-vm:~$ rm dodge-log/* 
ryedida@dl-cpu-vm:~$ vim dodge.py  
ryedida@dl-cpu-vm:~$ python3 dodge.py  
2020-12-23 21:42:54.250504: W tensorflow/stream_executor/platform/default/dso_loader.cc:60] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory 
2020-12-23 21:42:54.250543: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.
Running: firefox 
============================== 
2 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=80), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=16), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=70), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=77), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=68), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=67), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=91), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=97), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=18), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=50), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=88), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=50), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=40), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=18), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=96), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=76), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=95), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=94), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=67), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=84), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=57), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=66), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=17), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=69), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=42), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=38), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=86), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=39), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=31), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=29), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=48), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=40), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=32), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=55), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=99), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=27), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=36), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=82), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=45), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=15), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=24), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=15), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=33), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=94), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=23), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: normalizeV|rf 
Top-1 Accuracy = 0.6115650534255186 
[ True False  True ...  True False False] 
[[0.21792364 0.78207636] 
 [0.06565568 0.93434432] 
 [0.27421945 0.72578055] 
 ... 
 [0.40937907 0.59062093] 
 [0.41165962 0.58834038] 
 [0.99886304 0.00113696]] 
Top-2 Accuracy = 0.0 
iter 0: [0.6115650534255186] 
setting: robustZ|rf 
Top-1 Accuracy = 0.6420775955659677 
[ True False  True ...  True False False] 
[[1.   0.  ] 
 [0.   1.  ] 
 [0.   1.  ] 
 ... 
 [0.   1.  ] 
 [0.   1.  ] 
 [0.75 0.25]] 
Top-2 Accuracy = 0.0 
iter 1: [0.6420775955659677] 
setting: robustK|rf 
Top-1 Accuracy = 0.6115650534255186 
[ True False  True ...  True False False] 
[[0.21792363 0.78207637] 
 [0.06565567 0.93434433] 
 [0.27421943 0.72578057] 
 ... 
 [0.40937905 0.59062095] 
 [0.41165961 0.58834039] 
 [0.99886304 0.00113696]] 
Top-2 Accuracy = 0.0 
iter 2: [0.6115650534255186] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.6884749442888978 
[ True False  True ...  True False False] 
[[0.1146682  0.8853318 ] 
 [0.5063326  0.4936674 ] 
 [0.3706498  0.6293502 ] 
 ... 
 [0.31204829 0.68795171] 
 [0.2863677  0.7136323 ] 
 [0.73635454 0.26364546]] 
Top-2 Accuracy = 0.0 
iter 3: [0.6884749442888978] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.6115650534255186 
[ True False  True ...  True False False] 
[[0.21792361 0.78207639] 
 [0.06565566 0.93434434] 
 [0.27421942 0.72578058] 
 ... 
 [0.40937904 0.59062096] 
 [0.41165959 0.58834041] 
 [0.99886305 0.00113695]] 
Top-2 Accuracy = 0.0 
iter 4: [0.6115650534255186] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.6884749442888978 
[ True False  True ...  True False False] 
[[0.11470318 0.88529682] 
 [0.50637276 0.49362724] 
 [0.37069454 0.62930546] 
 ... 
 [0.3119765  0.6880235 ] 
 [0.28643603 0.71356397] 
 [0.73634203 0.26365797]] 
Top-2 Accuracy = 0.0 
iter 5: [0.6884749442888978] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.6884178046968744 
[ True False  True ...  True False False] 
[[0.11474365 0.88525635] 
            data.y_test < 6, 2, np.where(data.y_test < 21, 3, 4)))) 
 [0.5062628  0.4937372 ] 
 [0.37065622 0.62934378] 
 ... 
 [0.3120525  0.6879475 ] 
 [0.28641923 0.71358077] 
 [0.73627403 0.26372597]] 
Top-2 Accuracy = 0.0 
iter 6: [0.6884178046968744] 
setting: normalizey|rf 
^CTraceback (most recent call last): 
  File "dodge.py", line 133, in <module> 
    run(file, n_class) 
  File "dodge.py", line 120, in run 
    dodge.optimize() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/hyperparams/dodge.py", line 79, in optimize 
    model.fit() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/learners/learner.py", line 103, in fit 
    self.learner.fit(self.x_train, self.y_train) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/ensemble/_forest.py", line 392, in fit 
    for i, t in enumerate(trees)) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 1032, in __call__ 
    while self.dispatch_one_batch(iterator): 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 847, in dispatch_one_batch 
    self._dispatch(tasks) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 765, in _dispatch 
    job = self._backend.apply_async(batch, callback=cb) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/_parallel_backends.py", line 206, in apply_async 
    result = ImmediateResult(func) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/_parallel_backends.py", line 570, in __init__ 
    self.results = batch() 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 253, in __call__ 
    for func, args, kwargs in self.items] 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 253, in <listcomp> 
    for func, args, kwargs in self.items] 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/ensemble/_forest.py", line 168, in _parallel_build_trees 
    tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/tree/_classes.py", line 894, in fit 
    X_idx_sorted=X_idx_sorted) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/tree/_classes.py", line 375, in fit 
    builder.build(self.tree_, X, y, sample_weight, X_idx_sorted) 
KeyboardInterrupt 
^[[Aryedida@dl-cpu-vm:~$ vim dodge.py  
ryedida@dl-cpu-vm:~$ python3 dodge.py  
2020-12-23 21:43:38.046217: W tensorflow/stream_executor/platform/default/dso_loader.cc:60] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory 
2020-12-23 21:43:38.046257: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.
Running: firefox 
============================== 
3 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=20), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=60), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=66), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=64), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=90), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=64), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=39), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=85), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=74), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=70), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=16), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=63), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=10), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=31), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=65), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=71), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=79), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=79), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=96), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=13), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=19), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=61), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=74), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=76), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=99), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=53), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=36), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=42), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=84), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=95), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=44), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=44), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=57), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=71), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=24), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=85), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=30), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=79), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=33), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=94), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: maxabsF|rf 
Top-1 Accuracy = 0.40249128621221647 
Top-2 Accuracy = 0.0 
iter 0: [0.40249128621221647] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.40191989029198333 
Top-2 Accuracy = 0.0 
iter 1: [0.40191989029198333] 
setting: standardizew|rf 
Top-1 Accuracy = 0.40191989029198333 
Top-2 Accuracy = 0.0 
iter 2: [0.40191989029198333] 
setting: normalizek|rf 
Top-1 Accuracy = 0.40654819724587166 
Top-2 Accuracy = 0.0 
iter 3: [0.40654819724587166] 
setting: robustZ|rf 
Top-1 Accuracy = 0.4071767327581281 
Top-2 Accuracy = 0.0 
iter 4: [0.4071767327581281] 
setting: normalized|rf 
Top-1 Accuracy = 0.4010056568196103 
Top-2 Accuracy = 0.0 
iter 5: [0.4010056568196103] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.40643391806182505 
Top-2 Accuracy = 0.0 
iter 6: [0.40643391806182505] 
setting: normalizea|rf 
Top-1 Accuracy = 0.40043426089937717 
Top-2 Accuracy = 0.0 
                                np.where(data.y_train < 6, 1, 2)) 
iter 7: [0.40043426089937717] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.4067767556139649 
Top-2 Accuracy = 0.0 
iter 8: [0.4067767556139649] 
setting: robustx|rf 
^CTraceback (most recent call last): 
  File "dodge.py", line 131, in <module> 
    run(file, n_class) 
  File "dodge.py", line 118, in run 
    dodge.optimize() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/hyperparams/dodge.py", line 79, in optimize 
    model.fit() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/learners/learner.py", line 103, in fit 
    self.learner.fit(self.x_train, self.y_train) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/ensemble/_forest.py", line 392, in fit 
    for i, t in enumerate(trees)) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 1032, in __call__ 
    while self.dispatch_one_batch(iterator): 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 847, in dispatch_one_batch 
    self._dispatch(tasks) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 765, in _dispatch 
    job = self._backend.apply_async(batch, callback=cb) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/_parallel_backends.py", line 206, in apply_async 
    result = ImmediateResult(func) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/_parallel_backends.py", line 570, in __init__ 
    self.results = batch() 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 253, in __call__ 
    for func, args, kwargs in self.items] 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 253, in <listcomp> 
    for func, args, kwargs in self.items] 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/ensemble/_forest.py", line 168, in _parallel_build_trees 
    tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/tree/_classes.py", line 894, in fit 
    X_idx_sorted=X_idx_sorted) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/tree/_classes.py", line 375, in fit 
    builder.build(self.tree_, X, y, sample_weight, X_idx_sorted) 
KeyboardInterrupt 
 
^C 
ryedida@dl-cpu-vm:~$ rm dodge-log/firefox-3.txt  
ryedida@dl-cpu-vm:~$ vim dodge.py  
ryedida@dl-cpu-vm:~$ python3 dodge.py  
2020-12-23 21:44:47.142949: W tensorflow/stream_executor/platform/default/dso_loader.cc:60] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory 
2020-12-23 21:44:47.142987: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.
Running: firefox 
============================== 
3 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=68), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=14), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=21), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=16), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=92), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=39), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=18), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=66), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=55), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=70), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=97), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=14), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=95), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=82), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=19), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=10), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=36), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=56), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=24), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=40), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=24), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=42), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=65), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=50), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=23), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=21), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=19), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=87), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=57), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=90), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=91), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=32), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=48), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=81), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=14), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=38), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=57), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=69), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=78), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=24), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=50), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=36), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: robustg|rf 
Top-1 Accuracy = 0.4013484943717502 
[2 1 1 ... 2 1 1] 
[[0.04761905 0.95238095] 
 [0.         1.        ] 
 [1.         0.        ] 
 ... 
 [0.         1.        ] 
 [1.         0.        ] 
    top1 = [] 
 [1.         0.        ]] 
    #    data.y_test = to_categorical(data.y_test, num_classes=n_classes) 
Top-2 Accuracy = 0.0 
iter 0: [0.4013484943717502] 
setting: standardizeR|rf 
^CTraceback (most recent call last): 
  File "dodge.py", line 133, in <module> 
    run(file, n_class) 
  File "dodge.py", line 120, in run 
    dodge.optimize() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/hyperparams/dodge.py", line 84, in optimize 
    hook.call(model, data.x_test, data.y_test) 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/hooks/hooks.py", line 26, in call 
    self.function(*args, **kwargs) 
  File "dodge.py", line 91, in hook 
    m = ClassificationMetrics(y_test, model.predict(x_test)) 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/learners/learner.py", line 117, in predict 
    return self.learner.predict(x_test) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/ensemble/_forest.py", line 629, in predict 
    proba = self.predict_proba(X) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/ensemble/_forest.py", line 686, in predict_proba 
    for e in self.estimators_) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 1032, in __call__ 
    while self.dispatch_one_batch(iterator): 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 847, in dispatch_one_batch 
    self._dispatch(tasks) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 765, in _dispatch 
    job = self._backend.apply_async(batch, callback=cb) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/_parallel_backends.py", line 206, in apply_async 
    result = ImmediateResult(func) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/_parallel_backends.py", line 570, in __init__ 
    self.results = batch() 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 253, in __call__ 
    for func, args, kwargs in self.items] 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 253, in <listcomp> 
    for func, args, kwargs in self.items] 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/ensemble/_forest.py", line 466, in _accumulate_prediction 
    prediction = predict(X, check_input=False) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/tree/_classes.py", line 923, in predict_proba 
    proba = self.tree_.predict(X) 
KeyboardInterrupt 
ryedida@dl-cpu-vm:~$ rm dodge-log/firefox-3.txt  
ryedida@dl-cpu-vm:~$ vim dodge.py  
ryedida@dl-cpu-vm:~$ vim dodge.py  
ryedida@dl-cpu-vm:~$ rm -rf raise 
ryedida@dl-cpu-vm:~$ git clone https://github.com/yrahul3910/raise.git 
Cloning into 'raise'... 
remote: Enumerating objects: 35, done. 
remote: Counting objects: 100% (35/35), done. 
remote: Compressing objects: 100% (26/26), done. 
remote: Total 1253 (delta 9), reused 22 (delta 6), pack-reused 1218 
Receiving objects: 100% (1253/1253), 6.97 MiB | 0 bytes/s, done. 
Resolving deltas: 100% (725/725), done. 
ryedida@dl-cpu-vm:~$ cd raise 
ryedida@dl-cpu-vm:~/raise$ ls 
CHANGES.md          dist  __init__.py       LICENSE  promise      README.md   requirements.txt  sphinx-docs 
CODE_OF_CONDUCT.md  docs  issue_close_time  pits     raise_utils  release.sh  setup.py          tests 
ryedida@dl-cpu-vm:~/raise$ python3 -m pip install . 
Processing /home/ryedida/raise 
Collecting scikit-learn~=0.23.2 
  Downloading scikit_learn-0.23.2-cp37-cp37m-manylinux1_x86_64.whl (6.8 MB) 
     |████████████████████████████████| 6.8 MB 9.9 MB/s  
Requirement already satisfied: tensorflow~=2.4.0 in /opt/conda/lib/python3.7/site-packages (from raise-utils==1.3.2) (2.4.0) 
Requirement already satisfied: numpy>=1.19.2 in /opt/conda/lib/python3.7/site-packages (from raise-utils==1.3.2) (1.19.4) 
Requirement already satisfied: pandas in /opt/conda/lib/python3.7/site-packages (from raise-utils==1.3.2) (1.0.4) 
Requirement already satisfied: cvxopt in /opt/conda/lib/python3.7/site-packages (from raise-utils==1.3.2) (1.2.5) 
Requirement already satisfied: imblearn in /opt/conda/lib/python3.7/site-packages (from raise-utils==1.3.2) (0.0) 
Requirement already satisfied: joblib>=0.11 in /opt/conda/lib/python3.7/site-packages (from scikit-learn~=0.23.2->raise-utils==1.3.2) (0.15.1) 
Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.7/site-packages (from scikit-learn~=0.23.2->raise-utils==1.3.2) (2.1.0) 
Requirement already satisfied: scipy>=0.19.1 in /opt/conda/lib/python3.7/site-packages (from scikit-learn~=0.23.2->raise-utils==1.3.2) (1.4.1) 
Requirement already satisfied: six~=1.15.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.15.0) 
Requirement already satisfied: typing-extensions~=3.7.4 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (3.7.4.2) 
Requirement already satisfied: absl-py~=0.10 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (0.11.0) 
Requirement already satisfied: google-pasta~=0.2 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (0.2.0) 
Requirement already satisfied: wrapt~=1.12.1 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.12.1) 
Requirement already satisfied: grpcio~=1.32.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.32.0) 
Requirement already satisfied: tensorflow-estimator<2.5.0,>=2.4.0rc0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (2.4.0) 
Requirement already satisfied: protobuf>=3.9.2 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (3.12.2) 
Requirement already satisfied: wheel~=0.35 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (0.36.2) 
Requirement already satisfied: gast==0.3.3 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (0.3.3) 
Requirement already satisfied: opt-einsum~=3.3.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (3.3.0) 
Requirement already satisfied: termcolor~=1.1.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.1.0) 
Requirement already satisfied: astunparse~=1.6.3 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.6.3) 
Requirement already satisfied: h5py~=2.10.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (2.10.0) 
Requirement already satisfied: tensorboard~=2.4 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (2.4.0) 
Requirement already satisfied: flatbuffers~=1.12.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.12) 
Requirement already satisfied: keras-preprocessing~=1.1.2 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.1.2) 
Requirement already satisfied: python-dateutil>=2.6.1 in /opt/conda/lib/python3.7/site-packages (from pandas->raise-utils==1.3.2) (2.8.1) 
Requirement already satisfied: pytz>=2017.2 in /opt/conda/lib/python3.7/site-packages (from pandas->raise-utils==1.3.2) (2020.1) 
Requirement already satisfied: imbalanced-learn in /opt/conda/lib/python3.7/site-packages (from imblearn->raise-utils==1.3.2) (0.7.0) 
Requirement already satisfied: setuptools in /opt/conda/lib/python3.7/site-packages (from protobuf>=3.9.2->tensorflow~=2.4.0->raise-utils==1.3.2) (47.1.1.post20200529) 
Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (0.4.1) 
Requirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (2.23.0) 
Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (1.7.0) 
Requirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (3.2.2) 
Requirement already satisfied: google-auth<2,>=1.6.3 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (1.17.1) 
Requirement already satisfied: werkzeug>=0.11.15 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (1.0.1) 
Requirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.7/site-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (1.3.0) 
Requirement already satisfied: idna<3,>=2.5 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (2.9) 
Requirement already satisfied: chardet<4,>=3.0.2 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (3.0.4) 
Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (1.25.9) 
Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (2020.4.5.2) 
Requirement already satisfied: importlib-metadata; python_version < "3.8" in /opt/conda/lib/python3.7/site-packages (from markdown>=2.6.8->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (1.6.1) 
Requirement already satisfied: cachetools<5.0,>=2.0.0 in /opt/conda/lib/python3.7/site-packages (from google-auth<2,>=1.6.3->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (4.1.0) 
Requirement already satisfied: rsa<5,>=3.1.4; python_version >= "3" in /opt/conda/lib/python3.7/site-packages (from google-auth<2,>=1.6.3->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (4.2) 
Requirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.7/site-packages (from google-auth<2,>=1.6.3->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (0.2.8) 
Requirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.7/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (3.1.0) 
Requirement already satisfied: zipp>=0.5 in /opt/conda/lib/python3.7/site-packages (from importlib-metadata; python_version < "3.8"->markdown>=2.6.8->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (3.1.0) 
Requirement already satisfied: pyasn1>=0.1.3 in /opt/conda/lib/python3.7/site-packages (from rsa<5,>=3.1.4; python_version >= "3"->google-auth<2,>=1.6.3->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (0.4.8) 
Building wheels for collected packages: raise-utils 
  Building wheel for raise-utils (setup.py) ... done 
  Created wheel for raise-utils: filename=raise_utils-1.3.2-py3-none-any.whl size=49543 sha256=1fde7b0280cd71d9ea59be58d55dfce625b3ea69dc908e5e08492df51cde7f3c 
  Stored in directory: /tmp/pip-ephem-wheel-cache-4prghgjz/wheels/12/07/fe/47412e8e62e1881047fb1780ba26cf6da89e1c424cd02ee20a 
Successfully built raise-utils 
Installing collected packages: scikit-learn, raise-utils 
  Attempting uninstall: scikit-learn 
    Found existing installation: scikit-learn 0.23.1 
    Uninstalling scikit-learn-0.23.1: 
      Successfully uninstalled scikit-learn-0.23.1 
  Attempting uninstall: raise-utils 
    Found existing installation: raise-utils 1.3.1 
    Uninstalling raise-utils-1.3.1: 
      Successfully uninstalled raise-utils-1.3.1 
Successfully installed raise-utils-1.3.2 scikit-learn-0.23.2 
ryedida@dl-cpu-vm:~/raise$ cd .. 
ryedida@dl-cpu-vm:~$ python3 dodge.py  
2020-12-23 21:48:40.279130: W tensorflow/stream_executor/platform/default/dso_loader.cc:60] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory 
2020-12-23 21:48:40.279167: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.
Running: firefox 
============================== 
3 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=46), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=59), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=58), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=82), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=85), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=41), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=60), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=72), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=44), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=10), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=18), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=15), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=36), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=71), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=12), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=19), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=58), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=64), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=56), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=38), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=34), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=16), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=55), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=17), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=32), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=70), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=85), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=85), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=34), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=57), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=55), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=15), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=19), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=71), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=31), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=50), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=27), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=13), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=78), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=69), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=38), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=72), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: standardizec|rf 
Top-1 Accuracy = 0.3974058625221416 
Top-2 Accuracy = 0.0 
iter 0: [0.3974058625221416] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.4035769384606594 
Top-2 Accuracy = 0.0 
iter 1: [0.4035769384606594] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.4165476258499514 
Top-2 Accuracy = 0.0 
iter 2: [0.4165476258499514] 
setting: standardizeM|rf 
^CTraceback (most recent call last): 
  File "dodge.py", line 131, in <module> 
    run(file, n_class) 
  File "dodge.py", line 118, in run 
    dodge.optimize() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/hyperparams/dodge.py", line 80, in optimize 
    model.fit() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/learners/learner.py", line 103, in fit 
    self.learner.fit(self.x_train, self.y_train) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/tree/_classes.py", line 894, in fit 
    X_idx_sorted=X_idx_sorted) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/tree/_classes.py", line 375, in fit 
    builder.build(self.tree_, X, y, sample_weight, X_idx_sorted) 
KeyboardInterrupt 
^C 
ryedida@dl-cpu-vm:~$ rm dodge-log/firefox-3.txt  
ryedida@dl-cpu-vm:~$ vim dodge.py  
ryedida@dl-cpu-vm:~$ cd raise 
ryedida@dl-cpu-vm:~/raise$ ls 
CHANGES.md          dist  __init__.py       LICENSE  promise      README.md   requirements.txt  sphinx-docs 
CODE_OF_CONDUCT.md  docs  issue_close_time  pits     raise_utils  release.sh  setup.py          tests 
ryedida@dl-cpu-vm:~/raise$ cd raise_utils/ 
ryedida@dl-cpu-vm:~/raise/raise_utils$ cd learners/ 
ryedida@dl-cpu-vm:~/raise/raise_utils/learners$ vim learner.py  
ryedida@dl-cpu-vm:~/raise/raise_utils/learners$ cd ../ 
ryedida@dl-cpu-vm:~/raise/raise_utils$ cd .. 
ryedida@dl-cpu-vm:~/raise$ python3 -m pip install . 
Processing /home/ryedida/raise 
Requirement already satisfied: scikit-learn~=0.23.2 in /opt/conda/lib/python3.7/site-packages (from raise-utils==1.3.2) (0.23.2) 
Requirement already satisfied: tensorflow~=2.4.0 in /opt/conda/lib/python3.7/site-packages (from raise-utils==1.3.2) (2.4.0) 
Requirement already satisfied: numpy>=1.19.2 in /opt/conda/lib/python3.7/site-packages (from raise-utils==1.3.2) (1.19.4) 
Requirement already satisfied: pandas in /opt/conda/lib/python3.7/site-packages (from raise-utils==1.3.2) (1.0.4) 
Requirement already satisfied: cvxopt in /opt/conda/lib/python3.7/site-packages (from raise-utils==1.3.2) (1.2.5) 
Requirement already satisfied: imblearn in /opt/conda/lib/python3.7/site-packages (from raise-utils==1.3.2) (0.0) 
Requirement already satisfied: scipy>=0.19.1 in /opt/conda/lib/python3.7/site-packages (from scikit-learn~=0.23.2->raise-utils==1.3.2) (1.4.1) 
Requirement already satisfied: joblib>=0.11 in /opt/conda/lib/python3.7/site-packages (from scikit-learn~=0.23.2->raise-utils==1.3.2) (0.15.1) 
Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.7/site-packages (from scikit-learn~=0.23.2->raise-utils==1.3.2) (2.1.0) 
Requirement already satisfied: wrapt~=1.12.1 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.12.1) 
Requirement already satisfied: keras-preprocessing~=1.1.2 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.1.2) 
Requirement already satisfied: typing-extensions~=3.7.4 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (3.7.4.2) 
Requirement already satisfied: protobuf>=3.9.2 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (3.12.2) 
Requirement already satisfied: gast==0.3.3 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (0.3.3) 
Requirement already satisfied: astunparse~=1.6.3 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.6.3) 
Requirement already satisfied: h5py~=2.10.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (2.10.0) 
Requirement already satisfied: flatbuffers~=1.12.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.12) 
Requirement already satisfied: google-pasta~=0.2 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (0.2.0) 
Requirement already satisfied: tensorboard~=2.4 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (2.4.0) 
Requirement already satisfied: wheel~=0.35 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (0.36.2) 
Requirement already satisfied: six~=1.15.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.15.0) 
Requirement already satisfied: opt-einsum~=3.3.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (3.3.0) 
Requirement already satisfied: absl-py~=0.10 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (0.11.0) 
Requirement already satisfied: grpcio~=1.32.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.32.0) 
Requirement already satisfied: termcolor~=1.1.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.1.0) 
Requirement already satisfied: tensorflow-estimator<2.5.0,>=2.4.0rc0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (2.4.0) 
Requirement already satisfied: pytz>=2017.2 in /opt/conda/lib/python3.7/site-packages (from pandas->raise-utils==1.3.2) (2020.1) 
Requirement already satisfied: python-dateutil>=2.6.1 in /opt/conda/lib/python3.7/site-packages (from pandas->raise-utils==1.3.2) (2.8.1) 
Requirement already satisfied: imbalanced-learn in /opt/conda/lib/python3.7/site-packages (from imblearn->raise-utils==1.3.2) (0.7.0) 
Requirement already satisfied: setuptools in /opt/conda/lib/python3.7/site-packages (from protobuf>=3.9.2->tensorflow~=2.4.0->raise-utils==1.3.2) (47.1.1.post20200529) 
Requirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (3.2.2) 
Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (1.7.0) 
Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (0.4.1) 
Requirement already satisfied: werkzeug>=0.11.15 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (1.0.1) 
Requirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (2.23.0) 
Requirement already satisfied: google-auth<2,>=1.6.3 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (1.17.1) 
Requirement already satisfied: importlib-metadata; python_version < "3.8" in /opt/conda/lib/python3.7/site-packages (from markdown>=2.6.8->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (1.6.1) 
Requirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.7/site-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (1.3.0) 
Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (1.25.9) 
Requirement already satisfied: idna<3,>=2.5 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (2.9) 
Requirement already satisfied: chardet<4,>=3.0.2 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (3.0.4) 
Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (2020.4.5.2) 
Requirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.7/site-packages (from google-auth<2,>=1.6.3->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (0.2.8) 
Requirement already satisfied: rsa<5,>=3.1.4; python_version >= "3" in /opt/conda/lib/python3.7/site-packages (from google-auth<2,>=1.6.3->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (4.2) 
Requirement already satisfied: cachetools<5.0,>=2.0.0 in /opt/conda/lib/python3.7/site-packages (from google-auth<2,>=1.6.3->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (4.1.0) 
Requirement already satisfied: zipp>=0.5 in /opt/conda/lib/python3.7/site-packages (from importlib-metadata; python_version < "3.8"->markdown>=2.6.8->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (3.1.0) 
Requirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.7/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (3.1.0) 
Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /opt/conda/lib/python3.7/site-packages (from pyasn1-modules>=0.2.1->google-auth<2,>=1.6.3->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (0.4.8) 
Building wheels for collected packages: raise-utils 
  Building wheel for raise-utils (setup.py) ... done 
  Created wheel for raise-utils: filename=raise_utils-1.3.2-py3-none-any.whl size=49503 sha256=516bfaac477d3adde2440367e1c53c898623bab59842c36bc4ccc32a42876505 
  Stored in directory: /tmp/pip-ephem-wheel-cache-qjnpad5u/wheels/12/07/fe/47412e8e62e1881047fb1780ba26cf6da89e1c424cd02ee20a 
Successfully built raise-utils 
Installing collected packages: raise-utils 
  Attempting uninstall: raise-utils 
    Found existing installation: raise-utils 1.3.2 
    Uninstalling raise-utils-1.3.2: 
      Successfully uninstalled raise-utils-1.3.2 
Successfully installed raise-utils-1.3.2 
ryedida@dl-cpu-vm:~/raise$ cd ../ 
ryedida@dl-cpu-vm:~$ ls dodge-log/ 
firefox-2.txt 
ryedida@dl-cpu-vm:~$ python3 dodge.py  
2020-12-23 21:50:38.896724: W tensorflow/stream_executor/platform/default/dso_loader.cc:60] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory 
2020-12-23 21:50:38.896758: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.
Running: firefox 
============================== 
3 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=87), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=60), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=23), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=27), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=66), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=67), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=34), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=86), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=14), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=55), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=20), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=62), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=77), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=66), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=16), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=20), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=17), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=33), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=94), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=54), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=84), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=34), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=92), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=76), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=97), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=29), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=20), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=86), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=88), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=74), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=91), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=56), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=66), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=15), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=83), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=34), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=83), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=24), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=33), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=61), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=19), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=45), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: robustt|rf 
Traceback (most recent call last): 
  File "dodge.py", line 131, in <module> 
    run(file, n_class) 
  File "dodge.py", line 118, in run 
    dodge.optimize() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/hyperparams/dodge.py", line 80, in optimize 
        if isinstance(self.random, bool) and self.random: 
    model.fit() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/learners/learner.py", line 94, in fit 
    self._check_data() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/learners/learner.py", line 86, in _check_data 
    self.y_train, self.y_test)) 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/utils/data_utils.py", line 17, in _check_data 
    raise AssertionError("Train/test data is None.") 
AssertionError: Train/test data is None. 
^C 
ryedida@dl-cpu-vm:~$ cd raise/ 
ryedida@dl-cpu-vm:~/raise$ ls 
CHANGES.md          dist  __init__.py       LICENSE  promise      README.md   requirements.txt  sphinx-docs 
CODE_OF_CONDUCT.md  docs  issue_close_time  pits     raise_utils  release.sh  setup.py          tests 
ryedida@dl-cpu-vm:~/raise$ cd raise_utils/ 
ryedida@dl-cpu-vm:~/raise/raise_utils$ ls 
data  examples  experiments  hooks  hyperparams  __init__.py  interpret  learners  metrics  transform  utils 
ryedida@dl-cpu-vm:~/raise/raise_utils$ cd hyperparams/ 
ryedida@dl-cpu-vm:~/raise/raise_utils/hyperparams$ vim dodge.py  
ryedida@dl-cpu-vm:~/raise/raise_utils/hyperparams$ cd ../learners/ 
ryedida@dl-cpu-vm:~/raise/raise_utils/learners$ vim l 
ryedida@dl-cpu-vm:~/raise/raise_utils/learners$ vim learner.py  
ryedida@dl-cpu-vm:~/raise/raise_utils/learners$ cd ../utils/ 
ryedida@dl-cpu-vm:~/raise/raise_utils/utils$ vim  
data_utils.py  __init__.py     
ryedida@dl-cpu-vm:~/raise/raise_utils/utils$ vim data_utils.py  
ryedida@dl-cpu-vm:~/raise/raise_utils/utils$ cd ../../ 
ryedida@dl-cpu-vm:~/raise$ ls 
CHANGES.md          dist  __init__.py       LICENSE  promise      README.md   requirements.txt  sphinx-docs 
CODE_OF_CONDUCT.md  docs  issue_close_time  pits     raise_utils  release.sh  setup.py          tests 
ryedida@dl-cpu-vm:~/raise$ cd .. 
ryedida@dl-cpu-vm:~$ ls 
Bug-Related-Activity-Logs  dodge.py  ghost-log-defect  hyperopt-log  hyperopt-sklearn  issue_close_time         raise 
dodge-log                  ghost-dl  ghost.py          hyperopt_.py  interp.py         issue_close_time.tar.gz 
ryedida@dl-cpu-vm:~$ vim dodge.py  
ryedida@dl-cpu-vm:~$ cd raise 
ryedida@dl-cpu-vm:~/raise$ ls 
CHANGES.md          dist  __init__.py       LICENSE  promise      README.md   requirements.txt  sphinx-docs 
CODE_OF_CONDUCT.md  docs  issue_close_time  pits     raise_utils  release.sh  setup.py          tests 
ryedida@dl-cpu-vm:~/raise$ cd raise_utils/data/ 
ryedida@dl-cpu-vm:~/raise/raise_utils/data$ vim data.py  
ryedida@dl-cpu-vm:~/raise/raise_utils/data$ cd ../learners/ 
ryedida@dl-cpu-vm:~/raise/raise_utils/learners$ vim learner.py  
ryedida@dl-cpu-vm:~/raise/raise_utils/learners$ cd ../../ 
ryedida@dl-cpu-vm:~/raise$ pytho3n -m pip i n^C 
ryedida@dl-cpu-vm:~/raise$ python3 -m pip install . 
Processing /home/ryedida/raise 
Requirement already satisfied: scikit-learn~=0.23.2 in /opt/conda/lib/python3.7/site-packages (from raise-utils==1.3.2) (0.23.2) 
Requirement already satisfied: tensorflow~=2.4.0 in /opt/conda/lib/python3.7/site-packages (from raise-utils==1.3.2) (2.4.0) 
Requirement already satisfied: numpy>=1.19.2 in /opt/conda/lib/python3.7/site-packages (from raise-utils==1.3.2) (1.19.4) 
Requirement already satisfied: pandas in /opt/conda/lib/python3.7/site-packages (from raise-utils==1.3.2) (1.0.4) 
Requirement already satisfied: cvxopt in /opt/conda/lib/python3.7/site-packages (from raise-utils==1.3.2) (1.2.5) 
Requirement already satisfied: imblearn in /opt/conda/lib/python3.7/site-packages (from raise-utils==1.3.2) (0.0) 
Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.7/site-packages (from scikit-learn~=0.23.2->raise-utils==1.3.2) (2.1.0) 
Requirement already satisfied: joblib>=0.11 in /opt/conda/lib/python3.7/site-packages (from scikit-learn~=0.23.2->raise-utils==1.3.2) (0.15.1) 
Requirement already satisfied: scipy>=0.19.1 in /opt/conda/lib/python3.7/site-packages (from scikit-learn~=0.23.2->raise-utils==1.3.2) (1.4.1) 
Requirement already satisfied: gast==0.3.3 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (0.3.3) 
Requirement already satisfied: wheel~=0.35 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (0.36.2) 
Requirement already satisfied: termcolor~=1.1.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.1.0) 
Requirement already satisfied: h5py~=2.10.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (2.10.0) 
Requirement already satisfied: tensorboard~=2.4 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (2.4.0) 
Requirement already satisfied: grpcio~=1.32.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.32.0) 
Requirement already satisfied: opt-einsum~=3.3.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (3.3.0) 
Requirement already satisfied: tensorflow-estimator<2.5.0,>=2.4.0rc0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (2.4.0) 
Requirement already satisfied: google-pasta~=0.2 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (0.2.0) 
Requirement already satisfied: keras-preprocessing~=1.1.2 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.1.2) 
Requirement already satisfied: absl-py~=0.10 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (0.11.0) 
Requirement already satisfied: protobuf>=3.9.2 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (3.12.2) 
Requirement already satisfied: typing-extensions~=3.7.4 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (3.7.4.2) 
Requirement already satisfied: wrapt~=1.12.1 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.12.1) 
Requirement already satisfied: six~=1.15.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.15.0) 
Requirement already satisfied: flatbuffers~=1.12.0 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.12) 
Requirement already satisfied: astunparse~=1.6.3 in /opt/conda/lib/python3.7/site-packages (from tensorflow~=2.4.0->raise-utils==1.3.2) (1.6.3) 
Requirement already satisfied: python-dateutil>=2.6.1 in /opt/conda/lib/python3.7/site-packages (from pandas->raise-utils==1.3.2) (2.8.1) 
Requirement already satisfied: pytz>=2017.2 in /opt/conda/lib/python3.7/site-packages (from pandas->raise-utils==1.3.2) (2020.1) 
Requirement already satisfied: imbalanced-learn in /opt/conda/lib/python3.7/site-packages (from imblearn->raise-utils==1.3.2) (0.7.0) 
Requirement already satisfied: google-auth<2,>=1.6.3 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (1.17.1) 
Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (1.7.0) 
Requirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (3.2.2) 
Requirement already satisfied: werkzeug>=0.11.15 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (1.0.1) 
Requirement already satisfied: setuptools>=41.0.0 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (47.1.1.post20200529) 
Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (0.4.1) 
Requirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.7/site-packages (from tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (2.23.0) 
Requirement already satisfied: rsa<5,>=3.1.4; python_version >= "3" in /opt/conda/lib/python3.7/site-packages (from google-auth<2,>=1.6.3->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (4.2) 
Requirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.7/site-packages (from google-auth<2,>=1.6.3->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (0.2.8) 
Requirement already satisfied: cachetools<5.0,>=2.0.0 in /opt/conda/lib/python3.7/site-packages (from google-auth<2,>=1.6.3->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (4.1.0) 
Requirement already satisfied: importlib-metadata; python_version < "3.8" in /opt/conda/lib/python3.7/site-packages (from markdown>=2.6.8->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (1.6.1) 
Requirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.7/site-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (1.3.0) 
Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (1.25.9) 
Requirement already satisfied: chardet<4,>=3.0.2 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (3.0.4) 
Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (2020.4.5.2) 
Requirement already satisfied: idna<3,>=2.5 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.21.0->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (2.9) 
Requirement already satisfied: pyasn1>=0.1.3 in /opt/conda/lib/python3.7/site-packages (from rsa<5,>=3.1.4; python_version >= "3"->google-auth<2,>=1.6.3->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (0.4.8) 
Requirement already satisfied: zipp>=0.5 in /opt/conda/lib/python3.7/site-packages (from importlib-metadata; python_version < "3.8"->markdown>=2.6.8->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (3.1.0) 
Requirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.7/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard~=2.4->tensorflow~=2.4.0->raise-utils==1.3.2) (3.1.0) 
Building wheels for collected packages: raise-utils 
  Building wheel for raise-utils (setup.py) ... done 
  Created wheel for raise-utils: filename=raise_utils-1.3.2-py3-none-any.whl size=49517 sha256=251c4e8f3bb23d629fbe00d8fc8a8b64e7a857e30bdb2cdb07b3b65d9885a5ec 
  Stored in directory: /tmp/pip-ephem-wheel-cache-9eqvy93u/wheels/12/07/fe/47412e8e62e1881047fb1780ba26cf6da89e1c424cd02ee20a 
Successfully built raise-utils 
Installing collected packages: raise-utils 
  Attempting uninstall: raise-utils 
    Found existing installation: raise-utils 1.3.2 
    Uninstalling raise-utils-1.3.2: 
      Successfully uninstalled raise-utils-1.3.2 
Successfully installed raise-utils-1.3.2 
ryedida@dl-cpu-vm:~/raise$ cd ../ 
ryedida@dl-cpu-vm:~$ ls dodge-log/ 
firefox-2.txt  firefox-3.txt 
ryedida@dl-cpu-vm:~$ rm dodge-log/firefox-3.txt  
ryedida@dl-cpu-vm:~$ python3 dodge.py  
\2020-12-23 21:57:04.079798: W tensorflow/stream_executor/platform/default/dso_loader.cc:60] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory 
2020-12-23 21:57:04.079836: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.
Running: firefox 
============================== 
3 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=44), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=77), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=85), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=15), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=34), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=13), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=56), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=77), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=96), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=94), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=60), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=13), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=32), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=88), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=34), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=74), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=14), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=54), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=30), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=91), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=76), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=12), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=83), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=40), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=24), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=94), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=85), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=79), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=56), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=30), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=10), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=10), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=46), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=57), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=61), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=57), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=28), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=71), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=90), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=70), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=76), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: maxabsy|rf 
Top-1 Accuracy = 0.4714587737843552 
Top-2 Accuracy = 0.0 
iter 0: [0.4714587737843552] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.4714587737843552 
Top-2 Accuracy = 0.0 
iter 1: [0.4714587737843552] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.471973030112565 
Top-2 Accuracy = 0.0 
iter 2: [0.471973030112565] 
setting: robustk|rf 
Top-1 Accuracy = 0.46734472315867664 
Top-2 Accuracy = 0.0 
iter 3: [0.46734472315867664] 
setting: normalizek|rf 
Top-1 Accuracy = 0.501742757556711 
        data.y_test = np.where(data.y_test < 1, 0, np.where(data.y_test < 2, 1, np.where(data.y_test < 3, 2, np.where(data.y_test < 4, 3, np.where( 
Top-2 Accuracy = 0.0 
iter 4: [0.501742757556711] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.5321981601051369 
Top-2 Accuracy = 0.0 
iter 5: [0.5321981601051369] 
setting: minmaxW|rf 
^CTraceback (most recent call last): 
  File "dodge.py", line 131, in <module> 
    run(file, n_class) 
  File "dodge.py", line 118, in run 
    dodge.optimize() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/hyperparams/dodge.py", line 80, in optimize 
    model.fit() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/learners/learner.py", line 103, in fit 
    self.learner.fit(self.x_train, self.y_train) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/ensemble/_forest.py", line 392, in fit 
    for i, t in enumerate(trees)) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 1032, in __call__ 
    while self.dispatch_one_batch(iterator): 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 847, in dispatch_one_batch 
    self._dispatch(tasks) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 765, in _dispatch 
    job = self._backend.apply_async(batch, callback=cb) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/_parallel_backends.py", line 206, in apply_async 
    result = ImmediateResult(func) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/_parallel_backends.py", line 570, in __init__ 
    self.results = batch() 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 253, in __call__ 
    for func, args, kwargs in self.items] 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 253, in <listcomp> 
    for func, args, kwargs in self.items] 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/ensemble/_forest.py", line 168, in _parallel_build_trees 
    tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/tree/_classes.py", line 894, in fit 
    X_idx_sorted=X_idx_sorted) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/tree/_classes.py", line 375, in fit 
    builder.build(self.tree_, X, y, sample_weight, X_idx_sorted) 
KeyboardInterrupt 
^C 
ryedida@dl-cpu-vm:~$ rm dodge-log/firefox-3.txt  
ryedida@dl-cpu-vm:~$ vim dodge.py  
ryedida@dl-cpu-vm:~$ python3 dodge.py  
2020-12-23 21:58:20.429098: W tensorflow/stream_executor/platform/default/dso_loader.cc:60] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory 
2020-12-23 21:58:20.429132: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.
Running: firefox 
============================== 
3 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=58), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=61), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=95), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=18), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=93), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=60), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=70), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=55), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=98), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=50), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=76), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=38), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=59), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=62), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=42), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=99), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=32), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=13), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=85), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=69), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=87), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=72), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=31), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=61), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=83), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=50), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=77), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=63), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=14), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=57), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=64), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=64), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=12), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=33), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=16), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=92), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=10), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=30), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=39), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=86), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=35), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: normalizep|rf 
Top-1 Accuracy = 0.5107136735043711 
[2 1 1 ... 0 0 1] [[0.         0.08510638 0.91489362] 
 [0.         0.16843972 0.83156028] 
 [0.0212766  0.06241135 0.91631206] 
 ... 
 [0.78723404 0.08510638 0.12765957] 
 [0.34042553 0.53191489 0.12765957] 
 [0.         0.35994788 0.64005212]] 
Top-2 Accuracy = 0.0 
iter 0: [0.5107136735043711] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.43037540711959316 
[2 1 1 ... 0 0 1] [[0.01456197 0.64963598 0.33580206] 
 [0.03718277 0.58725769 0.37555954] 
 [0.05322788 0.68829208 0.25848004] 
 ... 
 [0.43549149 0.33149004 0.23301847] 
 [0.02906739 0.73643267 0.23449994] 
 [0.06201936 0.7048226  0.23315804]] 
Top-2 Accuracy = 0.0 
iter 1: [0.43037540711959316] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.4698588652077024 
[2 1 1 ... 0 0 1] [[0.         0.         1.        ] 
 [0.         0.         1.        ] 
            data.y_train < 6, 2, np.where(data.y_train < 21, 3, 4)))) 
 [0.         0.         1.        ] 
 ... 
 [1.         0.         0.        ] 
 [0.         1.         0.        ] 
 [0.         0.33333333 0.66666667]] 
Top-2 Accuracy = 0.0 
iter 2: [0.4698588652077024] 
setting: normalizeP|rf 
^CTraceback (most recent call last): 
  File "dodge.py", line 132, in <module> 
    run(file, n_class) 
  File "dodge.py", line 119, in run 
    dodge.optimize() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/hyperparams/dodge.py", line 80, in optimize 
    model.fit() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/learners/learner.py", line 103, in fit 
    self.learner.fit(self.x_train, self.y_train) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/ensemble/_forest.py", line 392, in fit 
    for i, t in enumerate(trees)) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 1032, in __call__ 
    while self.dispatch_one_batch(iterator): 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 847, in dispatch_one_batch 
    self._dispatch(tasks) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 765, in _dispatch 
    job = self._backend.apply_async(batch, callback=cb) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/_parallel_backends.py", line 206, in apply_async 
    result = ImmediateResult(func) 
  File "/opt/conda/lib/python3.7/site-packages/joblib/_parallel_backends.py", line 570, in __init__ 
    self.results = batch() 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 253, in __call__ 
    for func, args, kwargs in self.items] 
  File "/opt/conda/lib/python3.7/site-packages/joblib/parallel.py", line 253, in <listcomp> 
    for func, args, kwargs in self.items] 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/ensemble/_forest.py", line 168, in _parallel_build_trees 
    tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/tree/_classes.py", line 894, in fit 
    X_idx_sorted=X_idx_sorted) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/tree/_classes.py", line 375, in fit 
    builder.build(self.tree_, X, y, sample_weight, X_idx_sorted) 
KeyboardInterrupt 
ryedida@dl-cpu-vm:~$ rm dodge-log/firefox-3.txt  
ryedida@dl-cpu-vm:~$ vim dodge.py  
ryedida@dl-cpu-vm:~$ python3 dodge.py  
2020-12-23 22:00:02.787849: W tensorflow/stream_executor/platform/default/dso_loader.cc:60] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory 
2020-12-23 22:00:02.787898: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.
Running: firefox 
============================== 
3 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=26), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=72), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=71), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=79), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=93), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=35), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=18), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=27), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=62), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=32), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=15), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=89), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=10), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=86), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=32), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=55), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=60), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=52), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=90), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=21), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=17), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=83), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=44), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=29), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=65), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=96), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=86), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=83), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=62), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=34), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=91), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=57), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=34), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=17), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=67), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=50), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=38), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=21), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=77), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=61), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=18), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=71), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=98), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=61), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: minmaxd|rf 
Top-1 Accuracy = 0.5179704016913319 
[1 0 2 ... 1 2 2] [[0.1120648  0.34513718 0.54279802] 
 [0.31835754 0.4340486  0.24759386] 
 [0.22405682 0.33979621 0.43614697] 
 ... 
 [0.16166193 0.26064142 0.57769665] 
 [0.33608996 0.30135697 0.36255308] 
 [0.09082737 0.27795487 0.63121776]] 
[[1 2] 
        data.y_train = np.where(data.y_train < 1, 0, np.where(data.y_train < 3, 1, np.where( 
 [0 1] 
 
 [1 2] 
 ... 
 [1 2] 
 [0 2] 
 [1 2]] 
Top-2 Accuracy = 0.0 
iter 0: [0.5179704016913319] 
setting: normalizen|rf 
Top-1 Accuracy = 0.4808296668761785 
[1 0 2 ... 1 2 2] [[0.19539637 0.41620736 0.38839626] 
 [0.28957342 0.39215286 0.31827372] 
 [0.38639872 0.35907684 0.25452444] 
 ... 
 [0.30567502 0.30066453 0.39366045] 
 [0.44327656 0.31724153 0.23948191] 
 [0.25545021 0.31972483 0.42482496]] 
[[2 1] 
 [2 1] 
 [1 0] 
 ... 
 [0 2] 
 [1 0] 
 [1 2]] 
Top-2 Accuracy = 0.0 
iter 1: [0.4808296668761785] 
setting: maxabst|rf 
^CTraceback (most recent call last): 
  File "dodge.py", line 133, in <module> 
    run(file, n_class) 
  File "dodge.py", line 120, in run 
    dodge.optimize() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/hyperparams/dodge.py", line 80, in optimize 
    model.fit() 
  File "/opt/conda/lib/python3.7/site-packages/raise_utils/learners/learner.py", line 103, in fit 
    self.learner.fit(self.x_train, self.y_train) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/linear_model/_logistic.py", line 1360, in fit 
    sample_weight=sample_weight) 
  File "/opt/conda/lib/python3.7/site-packages/sklearn/svm/_base.py", line 969, in _fit_liblinear 
    epsilon, sample_weight) 
KeyboardInterrupt 
ryedida@dl-cpu-vm:~$ vim dodge.py  
ryedida@dl-cpu-vm:~$ vim dodge.py  
ryedida@dl-cpu-vm:~$ rm dodge-log/firefox-3.txt  
ryedida@dl-cpu-vm:~$ python3 dodge.py  
2020-12-23 22:01:34.269488: W tensorflow/stream_executor/platform/default/dso_loader.cc:60] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory 
2020-12-23 22:01:34.269528: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.
Running: firefox 
============================== 
3 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=99), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=77), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=72), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=69), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=93), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=23), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=95), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=91), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=63), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=10), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=91), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=53), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=23), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=64), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=61), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=77), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=89), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=88), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=21), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=66), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=74), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=96), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=81), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=93), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=36), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=95), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=62), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=95), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=27), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=35), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=86), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=99), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=29), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=78), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=57), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=32), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=15), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=82), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=55), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=54), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=62), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=20), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: minmaxF|rf 
Top-1 Accuracy = 0.4952859836580767 
Top-2 Accuracy = 0.826 
iter 0: [0.4952859836580767] 
setting: robustx|rf 
Top-1 Accuracy = 0.5251699902862693 
Top-2 Accuracy = 0.848 
iter 1: [0.5251699902862693] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.4952859836580767 
Top-2 Accuracy = 0.826 
iter 2: [0.4952859836580767] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.47077309868007544 
Top-2 Accuracy = 0.767 
iter 3: [0.47077309868007544] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.470144563167819 
Top-2 Accuracy = 0.764 
iter 4: [0.470144563167819] 
setting: robustC|rf 
Top-1 Accuracy = 0.5251128506942461 
Top-2 Accuracy = 0.848 
iter 5: [0.5251128506942461] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.4952859836580767 
Top-2 Accuracy = 0.826 
iter 6: [0.4952859836580767] 
setting: normalizec|rf 
Top-1 Accuracy = 0.4658019541740472 
Top-2 Accuracy = 0.761 
iter 7: [0.4658019541740472] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.4688874921433061 
Top-2 Accuracy = 0.759 
iter 8: [0.4688874921433061] 
setting: normalizes|rf 
Top-1 Accuracy = 0.4700874235757957 
Top-2 Accuracy = 0.764 
iter 9: [0.4700874235757957] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.4666590480543969 
Top-2 Accuracy = 0.761 
iter 10: [0.4666590480543969] 
setting: robustR|rf 
Top-1 Accuracy = 0.46614479172618706 
Top-2 Accuracy = 0.762 
iter 11: [0.46614479172618706] 
setting: robustz|rf 
Top-1 Accuracy = 0.5022570138849208 
Top-2 Accuracy = 0.831 
iter 12: [0.5022570138849208] 
setting: normalizet|rf 
Top-1 Accuracy = 0.49248614364893434 
Top-2 Accuracy = 0.823 
iter 13: [0.49248614364893434] 
setting: standardizew|rf 
Top-1 Accuracy = 0.5113422090166276 
Top-2 Accuracy = 0.835 
iter 14: [0.5113422090166276] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.46945888806353925 
Top-2 Accuracy = 0.762 
iter 15: [0.46945888806353925] 
setting: robustQ|rf 
Top-1 Accuracy = 0.5049425747100166 
Top-2 Accuracy = 0.835 
iter 16: [0.5049425747100166] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.5107708130963945 
Top-2 Accuracy = 0.836 
iter 17: [0.5107708130963945] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.4679732586709331 
Top-2 Accuracy = 0.762 
iter 18: [0.4679732586709331] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.5096851608479516 
Top-2 Accuracy = 0.835 
iter 19: [0.5096851608479516] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.49945717387577854 
Top-2 Accuracy = 0.829 
iter 20: [0.49945717387577854] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.463573510085138 
Top-2 Accuracy = 0.76 
iter 21: [0.463573510085138] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.46243071824467175 
Top-2 Accuracy = 0.759 
iter 22: [0.46243071824467175] 
setting: standardizek|rf 
Top-1 Accuracy = 0.509570881663905 
Top-2 Accuracy = 0.835 
iter 23: [0.509570881663905] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.5180846808753785 
Top-2 Accuracy = 0.841 
iter 24: [0.5180846808753785] 
setting: robustq|rf 
Top-1 Accuracy = 0.4573452945545969 
Top-2 Accuracy = 0.784 
iter 25: [0.4573452945545969] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.46117364722015886 
Top-2 Accuracy = 0.759 
iter 26: [0.46117364722015886] 
setting: robustI|rf 
Top-1 Accuracy = 0.4573452945545969 
Top-2 Accuracy = 0.784 
iter 27: [0.4573452945545969] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.5209416604765442 
Top-2 Accuracy = 0.843 
iter 28: [0.5209416604765442] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.4642020455973944 
Top-2 Accuracy = 0.763 
iter 29: [0.4642020455973944] 
Run # 1 
====== 
setting: minmaxM|rf 
Top-1 Accuracy = 0.507399577167019 
Top-2 Accuracy = 0.833 
iter 0: [0.507399577167019] 
setting: robusti|rf 
Top-1 Accuracy = 0.5073424375749958 
Top-2 Accuracy = 0.835 
iter 1: [0.5073424375749958] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.4573452945545969 
Top-2 Accuracy = 0.784 
iter 2: [0.4573452945545969] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.4596308782355294 
Top-2 Accuracy = 0.76 
iter 3: [0.4596308782355294] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.521627335580824 
Top-2 Accuracy = 0.847 
iter 4: [0.521627335580824] 
setting: robusto|rf 
Top-1 Accuracy = 0.4656876749900006 
Top-2 Accuracy = 0.762 
iter 5: [0.4656876749900006] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.4987714987714988 
Top-2 Accuracy = 0.826 
iter 6: [0.4987714987714988] 
setting: robusth|rf 
Top-1 Accuracy = 0.4536883606651049 
Top-2 Accuracy = 0.784 
iter 7: [0.4536883606651049] 
setting: standardizev|rf 
Top-1 Accuracy = 0.4536883606651049 
Top-2 Accuracy = 0.784 
iter 8: [0.4536883606651049] 
setting: normalizew|rf 
Top-1 Accuracy = 0.501742757556711 
Top-2 Accuracy = 0.831 
iter 9: [0.501742757556711] 
setting: normalizev|rf 
Top-1 Accuracy = 0.46260213702074165 
Top-2 Accuracy = 0.76 
iter 10: [0.46260213702074165] 
setting: standardizef|rf 
Top-1 Accuracy = 0.5071710187989258 
Top-2 Accuracy = 0.836 
iter 11: [0.5071710187989258] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.5227129878292669 
Top-2 Accuracy = 0.847 
iter 12: [0.5227129878292669] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.45997371578766927 
Top-2 Accuracy = 0.758 
iter 13: [0.45997371578766927] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.4614593451802754 
Top-2 Accuracy = 0.757 
iter 14: [0.4614593451802754] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.5213987772127306 
Top-2 Accuracy = 0.845 
iter 15: [0.5213987772127306] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.45625964230615396 
Top-2 Accuracy = 0.784 
iter 16: [0.45625964230615396] 
setting: robustZ|rf 
Top-1 Accuracy = 0.521627335580824 
Top-2 Accuracy = 0.845 
iter 17: [0.521627335580824] 
setting: robustH|rf 
Top-1 Accuracy = 0.45625964230615396 
Top-2 Accuracy = 0.784 
iter 18: [0.45625964230615396] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.46477344151762756 
Top-2 Accuracy = 0.76 
iter 19: [0.46477344151762756] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.4622592994686018 
Top-2 Accuracy = 0.759 
iter 20: [0.4622592994686018] 
setting: normalizee|rf 
Top-1 Accuracy = 0.4976287069310325 
Top-2 Accuracy = 0.828 
iter 21: [0.4976287069310325] 
setting: normalizen|rf 
Top-1 Accuracy = 0.5016856179646877 
Top-2 Accuracy = 0.831 
iter 22: [0.5016856179646877] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.45677389863436374 
Top-2 Accuracy = 0.781 
iter 23: [0.45677389863436374] 
setting: robustx|rf 
Top-1 Accuracy = 0.45677389863436374 
Top-2 Accuracy = 0.781 
iter 24: [0.45677389863436374] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.5056282498142963 
Top-2 Accuracy = 0.834 
iter 25: [0.5056282498142963] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.46603051254214045 
Top-2 Accuracy = 0.763 
iter 26: [0.46603051254214045] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.45677389863436374 
Top-2 Accuracy = 0.781 
iter 27: [0.45677389863436374] 
setting: robustG|rf 
Top-1 Accuracy = 0.5020855951088509 
Top-2 Accuracy = 0.833 
iter 28: [0.5020855951088509] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.5219701731329638 
Top-2 Accuracy = 0.845 
iter 29: [0.5219701731329638] 
Run # 2 
====== 
setting: normalized|rf 
Top-1 Accuracy = 0.46014513456373923 
Top-2 Accuracy = 0.783 
iter 0: [0.46014513456373923] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.46014513456373923 
Top-2 Accuracy = 0.783 
iter 1: [0.46014513456373923] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.46345923090109137 
Top-2 Accuracy = 0.756 
iter 2: [0.46345923090109137] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.4677447003028398 
Top-2 Accuracy = 0.762 
iter 3: [0.4677447003028398] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.464487743557511 
Top-2 Accuracy = 0.762 
iter 4: [0.464487743557511] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.502828409805154 
Top-2 Accuracy = 0.834 
iter 5: [0.502828409805154] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.4604879721158791 
Top-2 Accuracy = 0.758 
iter 6: [0.4604879721158791] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.45894520313124965 
Top-2 Accuracy = 0.783 
iter 7: [0.45894520313124965] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.5225987086452203 
Top-2 Accuracy = 0.846 
iter 8: [0.5225987086452203] 
setting: robusti|rf 
Top-1 Accuracy = 0.5011713616364779 
Top-2 Accuracy = 0.833 
iter 9: [0.5011713616364779] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.4614022055882521 
Top-2 Accuracy = 0.759 
iter 10: [0.4614022055882521] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.516541911890749 
Top-2 Accuracy = 0.839 
iter 11: [0.516541911890749] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.4607165304839723 
Top-2 Accuracy = 0.756 
iter 12: [0.4607165304839723] 
setting: normalizej|rf 
Top-1 Accuracy = 0.4595737386435061 
Top-2 Accuracy = 0.755 
iter 13: [0.4595737386435061] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.5042568996057368 
Top-2 Accuracy = 0.831 
iter 14: [0.5042568996057368] 
setting: normalizet|rf 
Top-1 Accuracy = 0.4631735329409748 
Top-2 Accuracy = 0.758 
iter 15: [0.4631735329409748] 
setting: robustp|rf 
Top-1 Accuracy = 0.4985429404034055 
Top-2 Accuracy = 0.828 
iter 16: [0.4985429404034055] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.5136277926975601 
Top-2 Accuracy = 0.838 
iter 17: [0.5136277926975601] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.4640877664133478 
Top-2 Accuracy = 0.76 
iter 18: [0.4640877664133478] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.4654591166219073 
Top-2 Accuracy = 0.762 
iter 19: [0.4654591166219073] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.5135135135135135 
Top-2 Accuracy = 0.838 
iter 20: [0.5135135135135135] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.46237357865264844 
Top-2 Accuracy = 0.76 
iter 21: [0.46237357865264844] 
setting: robustV|rf 
Top-1 Accuracy = 0.49608593794640304 
Top-2 Accuracy = 0.825 
iter 22: [0.49608593794640304] 
setting: standardizes|rf 
Top-1 Accuracy = 0.5045425975658534 
Top-2 Accuracy = 0.834 
iter 23: [0.5045425975658534] 
setting: robustS|rf 
Top-1 Accuracy = 0.5136277926975601 
Top-2 Accuracy = 0.838 
iter 24: [0.5136277926975601] 
setting: standardizev|rf 
Top-1 Accuracy = 0.49608593794640304 
Top-2 Accuracy = 0.824 
iter 25: [0.49608593794640304] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.4980286840751957 
Top-2 Accuracy = 0.831 
iter 26: [0.4980286840751957] 
setting: normalizek|rf 
Top-1 Accuracy = 0.5105422547283013 
Top-2 Accuracy = 0.836 
iter 27: [0.5105422547283013] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.5159133763784927 
Top-2 Accuracy = 0.839 
iter 28: [0.5159133763784927] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.5161419347465859 
Top-2 Accuracy = 0.839 
iter 29: [0.5161419347465859] 
Run # 3 
====== 
setting: robustR|rf 
Top-1 Accuracy = 0.46111650762813555 
Top-2 Accuracy = 0.757 
iter 0: [0.46111650762813555] 
setting: standardizei|rf 
Top-1 Accuracy = 0.5160276555625393 
Top-2 Accuracy = 0.84 
iter 1: [0.5160276555625393] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.5027712702131307 
Top-2 Accuracy = 0.832 
iter 2: [0.5027712702131307] 
setting: standardizep|rf 
Top-1 Accuracy = 0.515970515970516 
Top-2 Accuracy = 0.839 
iter 3: [0.515970515970516] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.4644306039654877 
Top-2 Accuracy = 0.761 
iter 4: [0.4644306039654877] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.515799097194446 
Top-2 Accuracy = 0.839 
iter 5: [0.515799097194446] 
setting: maxabst|rf 
Top-1 Accuracy = 0.4614593451802754 
Top-2 Accuracy = 0.793 
iter 6: [0.4614593451802754] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.46614479172618706 
Top-2 Accuracy = 0.762 
iter 7: [0.46614479172618706] 
setting: normalizes|rf 
Top-1 Accuracy = 0.4975144277469859 
Top-2 Accuracy = 0.823 
iter 8: [0.4975144277469859] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.4621450202845552 
Top-2 Accuracy = 0.757 
iter 9: [0.4621450202845552] 
setting: robustH|rf 
Top-1 Accuracy = 0.5163133535226558 
Top-2 Accuracy = 0.84 
iter 10: [0.5163133535226558] 
setting: robustS|rf 
Top-1 Accuracy = 0.5161419347465859 
Top-2 Accuracy = 0.84 
iter 11: [0.5161419347465859] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.5121993028969773 
Top-2 Accuracy = 0.838 
iter 12: [0.5121993028969773] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.512142163304954 
Top-2 Accuracy = 0.838 
iter 13: [0.512142163304954] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.5156848180103994 
Top-2 Accuracy = 0.839 
iter 14: [0.5156848180103994] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.4614022055882521 
Top-2 Accuracy = 0.793 
iter 15: [0.4614022055882521] 
setting: minmaxw|rf 
Top-1 Accuracy = 0.4621450202845552 
Top-2 Accuracy = 0.757 
iter 16: [0.4621450202845552] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.4614022055882521 
Top-2 Accuracy = 0.793 
iter 17: [0.4614022055882521] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.4614022055882521 
Top-2 Accuracy = 0.793 
iter 18: [0.4614022055882521] 
setting: robustl|rf 
Top-1 Accuracy = 0.500257128164105 
Top-2 Accuracy = 0.832 
iter 19: [0.500257128164105] 
setting: standardizec|rf 
Top-1 Accuracy = 0.5013999200045711 
Top-2 Accuracy = 0.832 
iter 20: [0.5013999200045711] 
setting: robustB|rf 
Top-1 Accuracy = 0.5015141991886178 
Top-2 Accuracy = 0.829 
iter 21: [0.5015141991886178] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.5137992114736301 
Top-2 Accuracy = 0.838 
iter 22: [0.5137992114736301] 
setting: standardizex|rf 
Top-1 Accuracy = 0.5163133535226558 
Top-2 Accuracy = 0.84 
iter 23: [0.5163133535226558] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.5043711787897834 
Top-2 Accuracy = 0.833 
iter 24: [0.5043711787897834] 
setting: normalized|rf 
Top-1 Accuracy = 0.460659390891949 
Top-2 Accuracy = 0.786 
iter 25: [0.460659390891949] 
setting: normalizex|rf 
Top-1 Accuracy = 0.46385920804525455 
Top-2 Accuracy = 0.759 
iter 26: [0.46385920804525455] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.5180846808753785 
Top-2 Accuracy = 0.84 
iter 27: [0.5180846808753785] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.4558025255699674 
Top-2 Accuracy = 0.784 
iter 28: [0.4558025255699674] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.5049425747100166 
Top-2 Accuracy = 0.836 
iter 29: [0.5049425747100166] 
Run # 4 
====== 
setting: robustm|rf 
Top-1 Accuracy = 0.4570595965944803 
Top-2 Accuracy = 0.755 
iter 0: [0.4570595965944803] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.5226558482372435 
Top-2 Accuracy = 0.844 
iter 1: [0.5226558482372435] 
setting: robustY|rf 
Top-1 Accuracy = 0.5221415919090338 
Top-2 Accuracy = 0.844 
iter 2: [0.5221415919090338] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.5205988229244043 
Top-2 Accuracy = 0.843 
iter 3: [0.5205988229244043] 
setting: standardizet|rf 
Top-1 Accuracy = 0.5215701959888006 
Top-2 Accuracy = 0.843 
iter 4: [0.5215701959888006] 
setting: robustH|rf 
Top-1 Accuracy = 0.4963716359065196 
Top-2 Accuracy = 0.824 
iter 5: [0.4963716359065196] 
setting: robusty|rf 
Top-1 Accuracy = 0.45545968801782755 
Top-2 Accuracy = 0.784 
iter 6: [0.45545968801782755] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.4642591851894177 
Top-2 Accuracy = 0.76 
iter 7: [0.4642591851894177] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.5122564424890006 
Top-2 Accuracy = 0.834 
iter 8: [0.5122564424890006] 
setting: robustG|rf 
Top-1 Accuracy = 0.521455916804754 
Top-2 Accuracy = 0.844 
iter 9: [0.521455916804754] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.45551682760985085 
Top-2 Accuracy = 0.785 
iter 10: [0.45551682760985085] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.46157362436432203 
Top-2 Accuracy = 0.756 
iter 11: [0.46157362436432203] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.45551682760985085 
Top-2 Accuracy = 0.785 
iter 12: [0.45551682760985085] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.45551682760985085 
Top-2 Accuracy = 0.785 
iter 13: [0.45551682760985085] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.4656876749900006 
Top-2 Accuracy = 0.757 
iter 14: [0.4656876749900006] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.4643734643734644 
Top-2 Accuracy = 0.758 
iter 15: [0.4643734643734644] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.49585737957830983 
Top-2 Accuracy = 0.822 
iter 16: [0.49585737957830983] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.5039712016456203 
Top-2 Accuracy = 0.829 
iter 17: [0.5039712016456203] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.4644306039654877 
Top-2 Accuracy = 0.758 
iter 18: [0.4644306039654877] 
setting: robustq|rf 
Top-1 Accuracy = 0.5073424375749958 
Top-2 Accuracy = 0.834 
iter 19: [0.5073424375749958] 
setting: normalized|rf 
Top-1 Accuracy = 0.45774527169876006 
Top-2 Accuracy = 0.784 
iter 20: [0.45774527169876006] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.46603051254214045 
Top-2 Accuracy = 0.764 
iter 21: [0.46603051254214045] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.4975715673390092 
Top-2 Accuracy = 0.821 
iter 22: [0.4975715673390092] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.45774527169876006 
Top-2 Accuracy = 0.784 
iter 23: [0.45774527169876006] 
setting: robustc|rf 
Top-1 Accuracy = 0.46128792640420546 
Top-2 Accuracy = 0.756 
iter 24: [0.46128792640420546] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.506485343694646 
Top-2 Accuracy = 0.835 
iter 25: [0.506485343694646] 
setting: robustr|rf 
Top-1 Accuracy = 0.5106565339123479 
Top-2 Accuracy = 0.836 
iter 26: [0.5106565339123479] 
setting: robustN|rf 
Top-1 Accuracy = 0.5106565339123479 
Top-2 Accuracy = 0.836 
iter 27: [0.5106565339123479] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.4619736015084852 
Top-2 Accuracy = 0.759 
iter 28: [0.4619736015084852] 
setting: standardizes|rf 
Top-1 Accuracy = 0.4666019084623736 
Top-2 Accuracy = 0.766 
iter 29: [0.4666019084623736] 
Run # 5 
====== 
setting: normalizeP|rf 
Top-1 Accuracy = 0.5166561910747958 
Top-2 Accuracy = 0.84 
iter 0: [0.5166561910747958] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.516713330666819 
Top-2 Accuracy = 0.84 
iter 1: [0.516713330666819] 
setting: robustr|rf 
Top-1 Accuracy = 0.5166561910747958 
Top-2 Accuracy = 0.84 
iter 2: [0.5166561910747958] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.5169990286269356 
Top-2 Accuracy = 0.84 
iter 3: [0.5169990286269356] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.516884749442889 
Top-2 Accuracy = 0.84 
iter 4: [0.516884749442889] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.4559739443460374 
Top-2 Accuracy = 0.785 
iter 5: [0.4559739443460374] 
setting: robusti|rf 
Top-1 Accuracy = 0.4559739443460374 
Top-2 Accuracy = 0.785 
iter 6: [0.4559739443460374] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.45654534026627047 
Top-2 Accuracy = 0.784 
iter 7: [0.45654534026627047] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.45654534026627047 
Top-2 Accuracy = 0.784 
iter 8: [0.45654534026627047] 
setting: standardizei|rf 
Top-1 Accuracy = 0.5202559853722645 
Top-2 Accuracy = 0.843 
iter 9: [0.5202559853722645] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.4574595737386435 
Top-2 Accuracy = 0.756 
iter 10: [0.4574595737386435] 
setting: normalizey|rf 
Top-1 Accuracy = 0.5144848865779098 
Top-2 Accuracy = 0.833 
iter 11: [0.5144848865779098] 
setting: robustB|rf 
Top-1 Accuracy = 0.46203074110050857 
Top-2 Accuracy = 0.759 
iter 12: [0.46203074110050857] 
setting: robustb|rf 
Top-1 Accuracy = 0.5200845665961945 
Top-2 Accuracy = 0.844 
iter 13: [0.5200845665961945] 
setting: normalizec|rf 
Top-1 Accuracy = 0.5017998971487344 
Top-2 Accuracy = 0.826 
iter 14: [0.5017998971487344] 
setting: robusth|rf 
Top-1 Accuracy = 0.46037369293183245 
Top-2 Accuracy = 0.757 
iter 15: [0.46037369293183245] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.46843037540711957 
Top-2 Accuracy = 0.794 
iter 16: [0.46843037540711957] 
setting: standardizep|rf 
Top-1 Accuracy = 0.460830809668019 
Top-2 Accuracy = 0.757 
iter 17: [0.460830809668019] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.46951602765556255 
Top-2 Accuracy = 0.763 
iter 18: [0.46951602765556255] 
setting: standardizec|rf 
Top-1 Accuracy = 0.4569453174104337 
Top-2 Accuracy = 0.753 
iter 19: [0.4569453174104337] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.5029998285812239 
Top-2 Accuracy = 0.835 
iter 20: [0.5029998285812239] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.46843037540711957 
Top-2 Accuracy = 0.794 
iter 21: [0.46843037540711957] 
setting: robustT|rf 
Top-1 Accuracy = 0.46843037540711957 
Top-2 Accuracy = 0.794 
iter 22: [0.46843037540711957] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.4967144734586595 
Top-2 Accuracy = 0.831 
iter 23: [0.4967144734586595] 
setting: normalizel|rf 
Top-1 Accuracy = 0.46380206845323124 
Top-2 Accuracy = 0.79 
iter 24: [0.46380206845323124] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.47191589052054167 
Top-2 Accuracy = 0.79 
iter 25: [0.47191589052054167] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.5056853894063197 
Top-2 Accuracy = 0.831 
iter 26: [0.5056853894063197] 
setting: robustf|rf 
Top-1 Accuracy = 0.47191589052054167 
Top-2 Accuracy = 0.79 
iter 27: [0.47191589052054167] 
setting: maxabst|rf 
Top-1 Accuracy = 0.46465916233358096 
Top-2 Accuracy = 0.763 
iter 28: [0.46465916233358096] 
setting: robusto|rf 
Top-1 Accuracy = 0.47191589052054167 
Top-2 Accuracy = 0.79 
iter 29: [0.47191589052054167] 
Run # 6 
====== 
setting: maxabsI|rf 
Top-1 Accuracy = 0.5056282498142963 
Top-2 Accuracy = 0.831 
iter 0: [0.5056282498142963] 
setting: robustS|rf 
Top-1 Accuracy = 0.4641449060053711 
Top-2 Accuracy = 0.763 
iter 1: [0.4641449060053711] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.5045997371578766 
Top-2 Accuracy = 0.836 
iter 2: [0.5045997371578766] 
setting: standardizea|rf 
Top-1 Accuracy = 0.5056853894063197 
Top-2 Accuracy = 0.831 
iter 3: [0.5056853894063197] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.47191589052054167 
Top-2 Accuracy = 0.79 
iter 4: [0.47191589052054167] 
setting: robustR|rf 
Top-1 Accuracy = 0.4604879721158791 
Top-2 Accuracy = 0.759 
iter 5: [0.4604879721158791] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.5025998514370608 
Top-2 Accuracy = 0.832 
iter 6: [0.5025998514370608] 
setting: normalized|rf 
Top-1 Accuracy = 0.5057425289983429 
Top-2 Accuracy = 0.831 
iter 7: [0.5057425289983429] 
setting: robustb|rf 
Top-1 Accuracy = 0.5021427347008742 
Top-2 Accuracy = 0.831 
iter 8: [0.5021427347008742] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.5219701731329638 
Top-2 Accuracy = 0.846 
iter 9: [0.5219701731329638] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.5218558939489172 
Top-2 Accuracy = 0.846 
iter 10: [0.5218558939489172] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.5219130335409405 
Top-2 Accuracy = 0.846 
iter 11: [0.5219130335409405] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.5196845894520313 
Top-2 Accuracy = 0.84 
iter 12: [0.5196845894520313] 
setting: normalizev|rf 
Top-1 Accuracy = 0.5207702417004743 
Top-2 Accuracy = 0.844 
iter 13: [0.5207702417004743] 
setting: standardizez|rf 
Top-1 Accuracy = 0.5207131021084509 
Top-2 Accuracy = 0.845 
iter 14: [0.5207131021084509] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.5215701959888006 
Top-2 Accuracy = 0.844 
iter 15: [0.5215701959888006] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.45414547740129135 
Top-2 Accuracy = 0.784 
iter 16: [0.45414547740129135] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.4595165990514828 
Top-2 Accuracy = 0.757 
iter 17: [0.4595165990514828] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.5045425975658534 
Top-2 Accuracy = 0.836 
iter 18: [0.5045425975658534] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.5091137649277184 
Top-2 Accuracy = 0.836 
iter 19: [0.5091137649277184] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.5202559853722645 
Top-2 Accuracy = 0.848 
iter 20: [0.5202559853722645] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.4979144048911491 
Top-2 Accuracy = 0.825 
iter 21: [0.4979144048911491] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.5213987772127306 
Top-2 Accuracy = 0.849 
iter 22: [0.5213987772127306] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.5219130335409405 
Top-2 Accuracy = 0.848 
iter 23: [0.5219130335409405] 
setting: standardizei|rf 
Top-1 Accuracy = 0.4622021598765785 
Top-2 Accuracy = 0.757 
iter 24: [0.4622021598765785] 
setting: robustA|rf 
Top-1 Accuracy = 0.4631735329409748 
Top-2 Accuracy = 0.785 
iter 25: [0.4631735329409748] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.4652876978458374 
Top-2 Accuracy = 0.763 
iter 26: [0.4652876978458374] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.5217416147648706 
Top-2 Accuracy = 0.848 
iter 27: [0.5217416147648706] 
setting: robustf|rf 
Top-1 Accuracy = 0.5090566253356951 
Top-2 Accuracy = 0.833 
iter 28: [0.5090566253356951] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.46248785783669505 
Top-2 Accuracy = 0.758 
iter 29: [0.46248785783669505] 
Run # 7 
====== 
setting: standardizer|rf 
Top-1 Accuracy = 0.5079138334952289 
Top-2 Accuracy = 0.836 
iter 0: [0.5079138334952289] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.4610022284440889 
Top-2 Accuracy = 0.758 
iter 1: [0.4610022284440889] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.5031141077652705 
Top-2 Accuracy = 0.837 
iter 2: [0.5031141077652705] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.46460202274155765 
Top-2 Accuracy = 0.785 
iter 3: [0.46460202274155765] 
setting: standardizec|rf 
Top-1 Accuracy = 0.4656305353979773 
Top-2 Accuracy = 0.764 
iter 4: [0.4656305353979773] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.46460202274155765 
Top-2 Accuracy = 0.785 
iter 5: [0.46460202274155765] 
setting: robustc|rf 
Top-1 Accuracy = 0.46460202274155765 
Top-2 Accuracy = 0.785 
iter 6: [0.46460202274155765] 
setting: normalizel|rf 
Top-1 Accuracy = 0.5049997143020399 
Top-2 Accuracy = 0.834 
iter 7: [0.5049997143020399] 
setting: normalizex|rf 
Top-1 Accuracy = 0.46265927661276496 
Top-2 Accuracy = 0.787 
iter 8: [0.46265927661276496] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.5219701731329638 
Top-2 Accuracy = 0.843 
iter 9: [0.5219701731329638] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.5219701731329638 
Top-2 Accuracy = 0.843 
iter 10: [0.5219701731329638] 
setting: standardizei|rf 
Top-1 Accuracy = 0.5218558939489172 
Top-2 Accuracy = 0.843 
iter 11: [0.5218558939489172] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.46265927661276496 
Top-2 Accuracy = 0.787 
iter 12: [0.46265927661276496] 
setting: robuste|rf 
Top-1 Accuracy = 0.5218558939489172 
Top-2 Accuracy = 0.843 
iter 13: [0.5218558939489172] 
setting: robustP|rf 
Top-1 Accuracy = 0.45894520313124965 
Top-2 Accuracy = 0.755 
iter 14: [0.45894520313124965] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.46265927661276496 
Top-2 Accuracy = 0.787 
iter 15: [0.46265927661276496] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.5218558939489172 
Top-2 Accuracy = 0.843 
iter 16: [0.5218558939489172] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.4614022055882521 
Top-2 Accuracy = 0.759 
iter 17: [0.4614022055882521] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.4583738072110165 
Top-2 Accuracy = 0.756 
iter 18: [0.4583738072110165] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.5060853665504829 
Top-2 Accuracy = 0.833 
iter 19: [0.5060853665504829] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.4987143591794755 
Top-2 Accuracy = 0.823 
iter 20: [0.4987143591794755] 
setting: robusti|rf 
Top-1 Accuracy = 0.501914176332781 
Top-2 Accuracy = 0.835 
iter 21: [0.501914176332781] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.4591737614993429 
Top-2 Accuracy = 0.785 
iter 22: [0.4591737614993429] 
setting: normalized|rf 
Top-1 Accuracy = 0.49945717387577854 
Top-2 Accuracy = 0.828 
iter 23: [0.49945717387577854] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.46014513456373923 
Top-2 Accuracy = 0.757 
iter 24: [0.46014513456373923] 
setting: maxabss|rf 
Top-1 Accuracy = 0.4552311296497343 
Top-2 Accuracy = 0.785 
iter 25: [0.4552311296497343] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.515056282498143 
Top-2 Accuracy = 0.841 
iter 26: [0.515056282498143] 
setting: robusto|rf 
Top-1 Accuracy = 0.5072852979829724 
Top-2 Accuracy = 0.834 
iter 27: [0.5072852979829724] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.4552311296497343 
Top-2 Accuracy = 0.785 
iter 28: [0.4552311296497343] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.5001428489800582 
Top-2 Accuracy = 0.833 
iter 29: [0.5001428489800582] 
Run # 8 
====== 
setting: normalizeD|rf 
Top-1 Accuracy = 0.46128792640420546 
Top-2 Accuracy = 0.758 
iter 0: [0.46128792640420546] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.515056282498143 
Top-2 Accuracy = 0.84 
iter 1: [0.515056282498143] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.5145420261699332 
Top-2 Accuracy = 0.84 
iter 2: [0.5145420261699332] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.5053425518541798 
Top-2 Accuracy = 0.831 
iter 3: [0.5053425518541798] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.45414547740129135 
Top-2 Accuracy = 0.783 
iter 4: [0.45414547740129135] 
setting: normalized|rf 
Top-1 Accuracy = 0.4539169190331981 
Top-2 Accuracy = 0.782 
iter 5: [0.4539169190331981] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.46717330438260674 
Top-2 Accuracy = 0.762 
iter 6: [0.46717330438260674] 
setting: robustk|rf 
Top-1 Accuracy = 0.5003714073481516 
Top-2 Accuracy = 0.826 
iter 7: [0.5003714073481516] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.46037369293183245 
Top-2 Accuracy = 0.757 
iter 8: [0.46037369293183245] 
setting: normalizec|rf 
Top-1 Accuracy = 0.5186560767956117 
Top-2 Accuracy = 0.844 
iter 9: [0.5186560767956117] 
setting: robustd|rf 
Top-1 Accuracy = 0.4614593451802754 
Top-2 Accuracy = 0.757 
iter 10: [0.4614593451802754] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.45505971087366437 
Top-2 Accuracy = 0.784 
iter 11: [0.45505971087366437] 
setting: normalizer|rf 
Top-1 Accuracy = 0.4568881778184104 
Top-2 Accuracy = 0.783 
iter 12: [0.4568881778184104] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.46488772070167417 
Top-2 Accuracy = 0.761 
iter 13: [0.46488772070167417] 
setting: normalizea|rf 
Top-1 Accuracy = 0.4538597794411748 
Top-2 Accuracy = 0.782 
iter 14: [0.4538597794411748] 
setting: robuste|rf 
Top-1 Accuracy = 0.4538597794411748 
Top-2 Accuracy = 0.782 
iter 15: [0.4538597794411748] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.5153991200502829 
Top-2 Accuracy = 0.839 
iter 16: [0.5153991200502829] 
setting: robustu|rf 
Top-1 Accuracy = 0.5155133992343295 
Top-2 Accuracy = 0.84 
iter 17: [0.5155133992343295] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.4965430546825896 
Top-2 Accuracy = 0.817 
iter 18: [0.4965430546825896] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.45648820067424717 
Top-2 Accuracy = 0.785 
iter 19: [0.45648820067424717] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.45648820067424717 
Top-2 Accuracy = 0.785 
iter 20: [0.45648820067424717] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.5047711559339466 
Top-2 Accuracy = 0.834 
iter 21: [0.5047711559339466] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.5050568538940632 
Top-2 Accuracy = 0.835 
iter 22: [0.5050568538940632] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.45648820067424717 
Top-2 Accuracy = 0.785 
iter 23: [0.45648820067424717] 
setting: robustG|rf 
Top-1 Accuracy = 0.45648820067424717 
Top-2 Accuracy = 0.785 
iter 24: [0.45648820067424717] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.516884749442889 
Top-2 Accuracy = 0.842 
iter 25: [0.516884749442889] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.5171133078109822 
Top-2 Accuracy = 0.842 
iter 26: [0.5171133078109822] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.5183132392434718 
Top-2 Accuracy = 0.842 
iter 27: [0.5183132392434718] 
setting: standardizee|rf 
Top-1 Accuracy = 0.5024855722530142 
Top-2 Accuracy = 0.827 
iter 28: [0.5024855722530142] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.46351637049311467 
Top-2 Accuracy = 0.788 
iter 29: [0.46351637049311467] 
Run # 9 
====== 
setting: normalized|rf 
Top-1 Accuracy = 0.5045997371578766 
Top-2 Accuracy = 0.833 
iter 0: [0.5045997371578766] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.5195703102679847 
Top-2 Accuracy = 0.843 
iter 1: [0.5195703102679847] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.5207702417004743 
Top-2 Accuracy = 0.845 
iter 2: [0.5207702417004743] 
setting: robustT|rf 
Top-1 Accuracy = 0.5040283412376436 
Top-2 Accuracy = 0.833 
iter 3: [0.5040283412376436] 
setting: robustL|rf 
Top-1 Accuracy = 0.46037369293183245 
Top-2 Accuracy = 0.787 
iter 4: [0.46037369293183245] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.46608765213416375 
Top-2 Accuracy = 0.762 
iter 5: [0.46608765213416375] 
setting: robustl|rf 
Top-1 Accuracy = 0.5053425518541798 
Top-2 Accuracy = 0.834 
iter 6: [0.5053425518541798] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.46037369293183245 
Top-2 Accuracy = 0.787 
iter 7: [0.46037369293183245] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.46037369293183245 
Top-2 Accuracy = 0.787 
iter 8: [0.46037369293183245] 
setting: robusto|rf 
Top-1 Accuracy = 0.45854522598708647 
Top-2 Accuracy = 0.758 
iter 9: [0.45854522598708647] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.4614022055882521 
Top-2 Accuracy = 0.757 
iter 10: [0.4614022055882521] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.4643163247814411 
Top-2 Accuracy = 0.788 
iter 11: [0.4643163247814411] 
setting: minmaxw|rf 
Top-1 Accuracy = 0.45803096965887663 
Top-2 Accuracy = 0.755 
iter 12: [0.45803096965887663] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.5193988914919148 
Top-2 Accuracy = 0.842 
iter 13: [0.5193988914919148] 
setting: robustg|rf 
Top-1 Accuracy = 0.45763099251471345 
Top-2 Accuracy = 0.756 
iter 14: [0.45763099251471345] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.4643163247814411 
Top-2 Accuracy = 0.788 
iter 15: [0.4643163247814411] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.45665961945031713 
Top-2 Accuracy = 0.757 
iter 16: [0.45665961945031713] 
setting: standardizek|rf 
Top-1 Accuracy = 0.46157362436432203 
Top-2 Accuracy = 0.789 
iter 17: [0.46157362436432203] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.5175704245471687 
Top-2 Accuracy = 0.842 
iter 18: [0.5175704245471687] 
setting: standardizee|rf 
Top-1 Accuracy = 0.45991657619564597 
Top-2 Accuracy = 0.756 
iter 19: [0.45991657619564597] 
setting: standardizev|rf 
Top-1 Accuracy = 0.5189989143477516 
Top-2 Accuracy = 0.844 
iter 20: [0.5189989143477516] 
setting: robustj|rf 
Top-1 Accuracy = 0.5033998057253871 
Top-2 Accuracy = 0.833 
iter 21: [0.5033998057253871] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.45774527169876006 
Top-2 Accuracy = 0.758 
iter 22: [0.45774527169876006] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.4618593223244386 
Top-2 Accuracy = 0.788 
iter 23: [0.4618593223244386] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.5184846580195417 
Top-2 Accuracy = 0.844 
iter 24: [0.5184846580195417] 
setting: maxabsK|rf 
Top-1 Accuracy = 0.4618593223244386 
Top-2 Accuracy = 0.788 
iter 25: [0.4618593223244386] 
setting: robustK|rf 
Top-1 Accuracy = 0.518713216387635 
Top-2 Accuracy = 0.844 
iter 26: [0.518713216387635] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.4618593223244386 
Top-2 Accuracy = 0.788 
iter 27: [0.4618593223244386] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.5046568767499 
Top-2 Accuracy = 0.827 
iter 28: [0.5046568767499] 
setting: robustt|rf 
Top-1 Accuracy = 0.4604308325238558 
Top-2 Accuracy = 0.754 
iter 29: [0.4604308325238558] 
Run # 10 
======= 
setting: standardizeC|rf 
Top-1 Accuracy = 0.45814524884292324 
Top-2 Accuracy = 0.786 
iter 0: [0.45814524884292324] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.46168790354836864 
Top-2 Accuracy = 0.758 
iter 1: [0.46168790354836864] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.5029426889892006 
Top-2 Accuracy = 0.829 
iter 2: [0.5029426889892006] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.49957145305982514 
Top-2 Accuracy = 0.821 
iter 3: [0.49957145305982514] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.4583166676189932 
Top-2 Accuracy = 0.785 
iter 4: [0.4583166676189932] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.5032283869493172 
Top-2 Accuracy = 0.832 
iter 5: [0.5032283869493172] 
setting: robustK|rf 
Top-1 Accuracy = 0.4583166676189932 
Top-2 Accuracy = 0.785 
iter 6: [0.4583166676189932] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.4562025027141306 
Top-2 Accuracy = 0.781 
iter 7: [0.4562025027141306] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.4595165990514828 
Top-2 Accuracy = 0.761 
iter 8: [0.4595165990514828] 
setting: robustE|rf 
Top-1 Accuracy = 0.4595737386435061 
Top-2 Accuracy = 0.756 
iter 9: [0.4595737386435061] 
setting: robustU|rf 
Top-1 Accuracy = 0.5152848408662362 
Top-2 Accuracy = 0.842 
iter 10: [0.5152848408662362] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.5056282498142963 
Top-2 Accuracy = 0.836 
iter 11: [0.5056282498142963] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.45311696474487173 
Top-2 Accuracy = 0.78 
iter 12: [0.45311696474487173] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.5013427804125479 
Top-2 Accuracy = 0.83 
iter 13: [0.5013427804125479] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.46020227415576254 
Top-2 Accuracy = 0.761 
iter 14: [0.46020227415576254] 
setting: robustF|rf 
Top-1 Accuracy = 0.5172275869950289 
Top-2 Accuracy = 0.841 
iter 15: [0.5172275869950289] 
setting: normalizex|rf 
Top-1 Accuracy = 0.5046568767499 
Top-2 Accuracy = 0.835 
iter 16: [0.5046568767499] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.5056282498142963 
Top-2 Accuracy = 0.835 
iter 17: [0.5056282498142963] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.49562882121021656 
Top-2 Accuracy = 0.819 
iter 18: [0.49562882121021656] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.5109422318724645 
Top-2 Accuracy = 0.837 
iter 19: [0.5109422318724645] 
setting: standardizew|rf 
Top-1 Accuracy = 0.4607736700759957 
Top-2 Accuracy = 0.787 
iter 20: [0.4607736700759957] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.4622021598765785 
Top-2 Accuracy = 0.759 
iter 21: [0.4622021598765785] 
setting: robustO|rf 
Top-1 Accuracy = 0.5108850922804411 
Top-2 Accuracy = 0.837 
iter 22: [0.5108850922804411] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.4607736700759957 
Top-2 Accuracy = 0.787 
iter 23: [0.4607736700759957] 
setting: robustn|rf 
Top-1 Accuracy = 0.4607736700759957 
Top-2 Accuracy = 0.787 
iter 24: [0.4607736700759957] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.4607736700759957 
Top-2 Accuracy = 0.787 
iter 25: [0.4607736700759957] 
setting: robustz|rf 
Top-1 Accuracy = 0.5109422318724645 
Top-2 Accuracy = 0.837 
iter 26: [0.5109422318724645] 
setting: robustM|rf 
Top-1 Accuracy = 0.5043711787897834 
Top-2 Accuracy = 0.835 
iter 27: [0.5043711787897834] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.5104279755442546 
Top-2 Accuracy = 0.835 
iter 28: [0.5104279755442546] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.5111136506485344 
Top-2 Accuracy = 0.837 
iter 29: [0.5111136506485344] 
Run # 11 
======= 
setting: standardizeV|rf 
Top-1 Accuracy = 0.511227929832581 
Top-2 Accuracy = 0.837 
iter 0: [0.511227929832581] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.4609450888520656 
Top-2 Accuracy = 0.787 
iter 1: [0.4609450888520656] 
setting: robustJ|rf 
Top-1 Accuracy = 0.5052282726701331 
Top-2 Accuracy = 0.834 
iter 2: [0.5052282726701331] 
setting: robustK|rf 
Top-1 Accuracy = 0.4609450888520656 
Top-2 Accuracy = 0.787 
iter 3: [0.4609450888520656] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.460659390891949 
Top-2 Accuracy = 0.758 
iter 4: [0.460659390891949] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.45180275412833554 
Top-2 Accuracy = 0.751 
iter 5: [0.45180275412833554] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.45460259413747783 
Top-2 Accuracy = 0.784 
iter 6: [0.45460259413747783] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.49831438203531225 
Top-2 Accuracy = 0.829 
iter 7: [0.49831438203531225] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.5065424832866693 
Top-2 Accuracy = 0.829 
iter 8: [0.5065424832866693] 
setting: normalizef|rf 
Top-1 Accuracy = 0.4534598022970116 
Top-2 Accuracy = 0.784 
iter 9: [0.4534598022970116] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.4623164390606251 
Top-2 Accuracy = 0.758 
iter 10: [0.4623164390606251] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.5148277241300497 
Top-2 Accuracy = 0.838 
iter 11: [0.5148277241300497] 
setting: robustr|rf 
Top-1 Accuracy = 0.4572881549625736 
Top-2 Accuracy = 0.757 
iter 12: [0.4572881549625736] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.5007713844923147 
Top-2 Accuracy = 0.833 
iter 13: [0.5007713844923147] 
setting: standardizen|rf 
Top-1 Accuracy = 0.46477344151762756 
Top-2 Accuracy = 0.759 
iter 14: [0.46477344151762756] 
setting: robustT|rf 
Top-1 Accuracy = 0.4534598022970116 
Top-2 Accuracy = 0.784 
iter 15: [0.4534598022970116] 
setting: normalizec|rf 
Top-1 Accuracy = 0.5118564653448374 
Top-2 Accuracy = 0.837 
iter 16: [0.5118564653448374] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.5055139706302497 
Top-2 Accuracy = 0.834 
iter 17: [0.5055139706302497] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.4571738757785269 
Top-2 Accuracy = 0.786 
iter 18: [0.4571738757785269] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.4643163247814411 
Top-2 Accuracy = 0.761 
iter 19: [0.4643163247814411] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.5121993028969773 
Top-2 Accuracy = 0.839 
iter 20: [0.5121993028969773] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.5058568081823895 
Top-2 Accuracy = 0.835 
iter 21: [0.5058568081823895] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.4619164619164619 
Top-2 Accuracy = 0.759 
iter 22: [0.4619164619164619] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.5123707216730472 
Top-2 Accuracy = 0.838 
iter 23: [0.5123707216730472] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.5121993028969773 
Top-2 Accuracy = 0.839 
iter 24: [0.5121993028969773] 
setting: standardizec|rf 
Top-1 Accuracy = 0.5124850008570939 
Top-2 Accuracy = 0.839 
iter 25: [0.5124850008570939] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.49808582366721904 
Top-2 Accuracy = 0.827 
iter 26: [0.49808582366721904] 
setting: robustN|rf 
Top-1 Accuracy = 0.4571738757785269 
Top-2 Accuracy = 0.786 
iter 27: [0.4571738757785269] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.4571738757785269 
Top-2 Accuracy = 0.786 
iter 28: [0.4571738757785269] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.5137992114736301 
Top-2 Accuracy = 0.837 
iter 29: [0.5137992114736301] 
Run # 12 
======= 
setting: minmaxn|rf 
Top-1 Accuracy = 0.46117364722015886 
Top-2 Accuracy = 0.785 
iter 0: [0.46117364722015886] 
setting: robustj|rf 
Top-1 Accuracy = 0.5135706531055368 
Top-2 Accuracy = 0.837 
iter 1: [0.5135706531055368] 
setting: robustr|rf 
Top-1 Accuracy = 0.4980286840751957 
Top-2 Accuracy = 0.824 
iter 2: [0.4980286840751957] 
setting: robustS|rf 
Top-1 Accuracy = 0.5137420718816068 
Top-2 Accuracy = 0.837 
iter 3: [0.5137420718816068] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.5140849094337466 
Top-2 Accuracy = 0.838 
iter 4: [0.5140849094337466] 
setting: robustf|rf 
Top-1 Accuracy = 0.4524884292326153 
Top-2 Accuracy = 0.781 
iter 5: [0.4524884292326153] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.4618021827324153 
Top-2 Accuracy = 0.759 
iter 6: [0.4618021827324153] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.49551454202616996 
Top-2 Accuracy = 0.82 
iter 7: [0.49551454202616996] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.4618021827324153 
Top-2 Accuracy = 0.757 
iter 8: [0.4618021827324153] 
setting: robustt|rf 
Top-1 Accuracy = 0.4627164162047883 
Top-2 Accuracy = 0.761 
iter 9: [0.4627164162047883] 
setting: robusto|rf 
Top-1 Accuracy = 0.50448545797383 
Top-2 Accuracy = 0.832 
iter 10: [0.50448545797383] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.5012285012285013 
Top-2 Accuracy = 0.828 
iter 11: [0.5012285012285013] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.46031655333980914 
Top-2 Accuracy = 0.757 
iter 12: [0.46031655333980914] 
setting: standardizes|rf 
Top-1 Accuracy = 0.4631163933489515 
Top-2 Accuracy = 0.759 
iter 13: [0.4631163933489515] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.4524884292326153 
Top-2 Accuracy = 0.781 
iter 14: [0.4524884292326153] 
setting: normalizen|rf 
Top-1 Accuracy = 0.455173990057711 
Top-2 Accuracy = 0.78 
iter 15: [0.455173990057711] 
setting: maxabso|rf 
Top-1 Accuracy = 0.455173990057711 
Top-2 Accuracy = 0.78 
iter 16: [0.455173990057711] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.455173990057711 
Top-2 Accuracy = 0.78 
iter 17: [0.455173990057711] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.5110565110565111 
Top-2 Accuracy = 0.836 
iter 18: [0.5110565110565111] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.4605451117079024 
Top-2 Accuracy = 0.759 
iter 19: [0.4605451117079024] 
setting: standardizew|rf 
Top-1 Accuracy = 0.4662590709102337 
Top-2 Accuracy = 0.761 
iter 20: [0.4662590709102337] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.5109993714644877 
Top-2 Accuracy = 0.837 
iter 21: [0.5109993714644877] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.5109422318724645 
Top-2 Accuracy = 0.837 
iter 22: [0.5109422318724645] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.455173990057711 
Top-2 Accuracy = 0.78 
iter 23: [0.455173990057711] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.4657448145820239 
Top-2 Accuracy = 0.759 
iter 24: [0.4657448145820239] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.5109422318724645 
Top-2 Accuracy = 0.837 
iter 25: [0.5109422318724645] 
setting: robustO|rf 
Top-1 Accuracy = 0.455173990057711 
Top-2 Accuracy = 0.78 
iter 26: [0.455173990057711] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.5015141991886178 
Top-2 Accuracy = 0.833 
iter 27: [0.5015141991886178] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.5036855036855037 
Top-2 Accuracy = 0.831 
iter 28: [0.5036855036855037] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.4657448145820239 
Top-2 Accuracy = 0.761 
iter 29: [0.4657448145820239] 
Run # 13 
======= 
setting: normalizeS|rf 
Top-1 Accuracy = 0.455173990057711 
Top-2 Accuracy = 0.78 
iter 0: [0.455173990057711] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.496257356722473 
Top-2 Accuracy = 0.825 
iter 1: [0.496257356722473] 
setting: robustP|rf 
Top-1 Accuracy = 0.5125992800411405 
Top-2 Accuracy = 0.838 
iter 2: [0.5125992800411405] 
setting: robustr|rf 
Top-1 Accuracy = 0.5043140391977601 
Top-2 Accuracy = 0.835 
iter 3: [0.5043140391977601] 
setting: robustv|rf 
Top-1 Accuracy = 0.5040854808296669 
Top-2 Accuracy = 0.834 
iter 4: [0.5040854808296669] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.5124850008570939 
Top-2 Accuracy = 0.838 
iter 5: [0.5124850008570939] 
setting: robustM|rf 
Top-1 Accuracy = 0.4579738300668533 
Top-2 Accuracy = 0.753 
iter 6: [0.4579738300668533] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.46134506599622876 
Top-2 Accuracy = 0.757 
iter 7: [0.46134506599622876] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.4512313582081024 
Top-2 Accuracy = 0.781 
iter 8: [0.4512313582081024] 
setting: normalizey|rf 
Top-1 Accuracy = 0.49957145305982514 
Top-2 Accuracy = 0.825 
iter 9: [0.49957145305982514] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.45180275412833554 
Top-2 Accuracy = 0.783 
iter 10: [0.45180275412833554] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.46208788069253187 
Top-2 Accuracy = 0.758 
iter 11: [0.46208788069253187] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.4999714302039883 
Top-2 Accuracy = 0.826 
iter 12: [0.4999714302039883] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.5060282269584595 
Top-2 Accuracy = 0.837 
iter 13: [0.5060282269584595] 
setting: robustl|rf 
Top-1 Accuracy = 0.45677389863436374 
Top-2 Accuracy = 0.782 
iter 14: [0.45677389863436374] 
setting: standardizes|rf 
Top-1 Accuracy = 0.5125421404491172 
Top-2 Accuracy = 0.839 
iter 15: [0.5125421404491172] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.45677389863436374 
Top-2 Accuracy = 0.782 
iter 16: [0.45677389863436374] 
setting: maxabse|rf 
Top-1 Accuracy = 0.459745157419576 
Top-2 Accuracy = 0.756 
iter 17: [0.459745157419576] 
setting: normalizen|rf 
Top-1 Accuracy = 0.4595737386435061 
Top-2 Accuracy = 0.758 
iter 18: [0.4595737386435061] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.4578595508828067 
Top-2 Accuracy = 0.782 
iter 19: [0.4578595508828067] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.5125992800411405 
Top-2 Accuracy = 0.839 
iter 20: [0.5125992800411405] 
setting: robustY|rf 
Top-1 Accuracy = 0.5035140849094337 
Top-2 Accuracy = 0.832 
iter 21: [0.5035140849094337] 
setting: standardized|rf 
Top-1 Accuracy = 0.5017998971487344 
Top-2 Accuracy = 0.832 
iter 22: [0.5017998971487344] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.5125421404491172 
Top-2 Accuracy = 0.839 
iter 23: [0.5125421404491172] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.5056853894063197 
Top-2 Accuracy = 0.834 
iter 24: [0.5056853894063197] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.45780241129078336 
Top-2 Accuracy = 0.782 
iter 25: [0.45780241129078336] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.5128849780012571 
Top-2 Accuracy = 0.839 
iter 26: [0.5128849780012571] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.4628306953888349 
Top-2 Accuracy = 0.759 
iter 27: [0.4628306953888349] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.5040283412376436 
Top-2 Accuracy = 0.829 
iter 28: [0.5040283412376436] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.45900234272327295 
Top-2 Accuracy = 0.783 
iter 29: [0.45900234272327295] 
Run # 14 
======= 
setting: robustp|rf 
Top-1 Accuracy = 0.5033998057253871 
Top-2 Accuracy = 0.834 
iter 0: [0.5033998057253871] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.49700017141877606 
Top-2 Accuracy = 0.822 
iter 1: [0.49700017141877606] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.5132278155533969 
Top-2 Accuracy = 0.838 
iter 2: [0.5132278155533969] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.4622021598765785 
Top-2 Accuracy = 0.786 
iter 3: [0.4622021598765785] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.5135706531055368 
Top-2 Accuracy = 0.84 
iter 4: [0.5135706531055368] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.5031141077652705 
Top-2 Accuracy = 0.831 
iter 5: [0.5031141077652705] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.46254499742871835 
Top-2 Accuracy = 0.759 
iter 6: [0.46254499742871835] 
setting: normalizej|rf 
Top-1 Accuracy = 0.46340209130906806 
Top-2 Accuracy = 0.787 
iter 7: [0.46340209130906806] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.5063139249185761 
Top-2 Accuracy = 0.835 
iter 8: [0.5063139249185761] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.4628878349808582 
Top-2 Accuracy = 0.759 
iter 9: [0.4628878349808582] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.5129421175932803 
Top-2 Accuracy = 0.84 
iter 10: [0.5129421175932803] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.5127706988172105 
Top-2 Accuracy = 0.84 
iter 11: [0.5127706988172105] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.4619736015084852 
Top-2 Accuracy = 0.76 
iter 12: [0.4619736015084852] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.460830809668019 
Top-2 Accuracy = 0.756 
iter 13: [0.460830809668019] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.5128849780012571 
Top-2 Accuracy = 0.84 
iter 14: [0.5128849780012571] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.5125421404491172 
Top-2 Accuracy = 0.84 
iter 15: [0.5125421404491172] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.5127706988172105 
Top-2 Accuracy = 0.84 
iter 16: [0.5127706988172105] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.5127706988172105 
Top-2 Accuracy = 0.84 
iter 17: [0.5127706988172105] 
setting: robustb|rf 
Top-1 Accuracy = 0.5012856408205245 
Top-2 Accuracy = 0.833 
iter 18: [0.5012856408205245] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.46340209130906806 
Top-2 Accuracy = 0.787 
iter 19: [0.46340209130906806] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.46340209130906806 
Top-2 Accuracy = 0.787 
iter 20: [0.46340209130906806] 
setting: robustP|rf 
Top-1 Accuracy = 0.46340209130906806 
Top-2 Accuracy = 0.787 
iter 21: [0.46340209130906806] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.5147134449460031 
Top-2 Accuracy = 0.839 
iter 22: [0.5147134449460031] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.5031712473572939 
Top-2 Accuracy = 0.823 
iter 23: [0.5031712473572939] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.4591737614993429 
Top-2 Accuracy = 0.786 
iter 24: [0.4591737614993429] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.5160847951545626 
Top-2 Accuracy = 0.84 
iter 25: [0.5160847951545626] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.4548882920975944 
Top-2 Accuracy = 0.757 
iter 26: [0.4548882920975944] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.4591737614993429 
Top-2 Accuracy = 0.786 
iter 27: [0.4591737614993429] 
setting: robusth|rf 
Top-1 Accuracy = 0.4975715673390092 
Top-2 Accuracy = 0.823 
iter 28: [0.4975715673390092] 
setting: maxabse|rf 
Top-1 Accuracy = 0.4591737614993429 
Top-2 Accuracy = 0.786 
iter 29: [0.4591737614993429] 
Run # 15 
======= 
setting: standardizeU|rf 
Top-1 Accuracy = 0.5154562596423061 
Top-2 Accuracy = 0.84 
iter 0: [0.5154562596423061] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.5149420033140963 
Top-2 Accuracy = 0.839 
iter 1: [0.5149420033140963] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.5030569681732472 
Top-2 Accuracy = 0.833 
iter 2: [0.5030569681732472] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.4511742186160791 
Top-2 Accuracy = 0.78 
iter 3: [0.4511742186160791] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.45763099251471345 
Top-2 Accuracy = 0.756 
iter 4: [0.45763099251471345] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.45551682760985085 
Top-2 Accuracy = 0.755 
iter 5: [0.45551682760985085] 
setting: standardizel|rf 
Top-1 Accuracy = 0.4526027084166619 
Top-2 Accuracy = 0.78 
iter 6: [0.4526027084166619] 
setting: robustS|rf 
Top-1 Accuracy = 0.46123078681218216 
Top-2 Accuracy = 0.756 
iter 7: [0.46123078681218216] 
setting: robustT|rf 
Top-1 Accuracy = 0.459745157419576 
Top-2 Accuracy = 0.757 
iter 8: [0.459745157419576] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.4596880178275527 
Top-2 Accuracy = 0.754 
iter 9: [0.4596880178275527] 
setting: robustv|rf 
Top-1 Accuracy = 0.4526027084166619 
Top-2 Accuracy = 0.78 
iter 10: [0.4526027084166619] 
setting: normalizez|rf 
Top-1 Accuracy = 0.4649448602936975 
Top-2 Accuracy = 0.76 
iter 11: [0.4649448602936975] 
setting: robustL|rf 
Top-1 Accuracy = 0.4523170104565453 
Top-2 Accuracy = 0.783 
iter 12: [0.4523170104565453] 
setting: standardizet|rf 
Top-1 Accuracy = 0.5108279526884179 
Top-2 Accuracy = 0.838 
iter 13: [0.5108279526884179] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.5006571053082681 
Top-2 Accuracy = 0.826 
iter 14: [0.5006571053082681] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.4523170104565453 
Top-2 Accuracy = 0.783 
iter 15: [0.4523170104565453] 
setting: normalizek|rf 
Top-1 Accuracy = 0.45848808639506317 
Top-2 Accuracy = 0.757 
iter 16: [0.45848808639506317] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.5051711330781098 
Top-2 Accuracy = 0.832 
iter 17: [0.5051711330781098] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.5058568081823895 
Top-2 Accuracy = 0.835 
iter 18: [0.5058568081823895] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.4619736015084852 
Top-2 Accuracy = 0.757 
iter 19: [0.4619736015084852] 
setting: minmaxw|rf 
Top-1 Accuracy = 0.5056282498142963 
Top-2 Accuracy = 0.829 
iter 20: [0.5056282498142963] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.5094566024798582 
Top-2 Accuracy = 0.838 
iter 21: [0.5094566024798582] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.4596880178275527 
Top-2 Accuracy = 0.758 
iter 22: [0.4596880178275527] 
setting: normalizea|rf 
Top-1 Accuracy = 0.5121993028969773 
Top-2 Accuracy = 0.836 
iter 23: [0.5121993028969773] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.4508313810639392 
Top-2 Accuracy = 0.782 
iter 24: [0.4508313810639392] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.5152848408662362 
Top-2 Accuracy = 0.839 
iter 25: [0.5152848408662362] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.5151134220901663 
Top-2 Accuracy = 0.84 
iter 26: [0.5151134220901663] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.4508313810639392 
Top-2 Accuracy = 0.782 
iter 27: [0.4508313810639392] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.5039140620535969 
Top-2 Accuracy = 0.835 
iter 28: [0.5039140620535969] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.5053425518541798 
Top-2 Accuracy = 0.833 
iter 29: [0.5053425518541798] 
Run # 16 
======= 
setting: robustk|rf 
Top-1 Accuracy = 0.4508313810639392 
Top-2 Accuracy = 0.782 
iter 0: [0.4508313810639392] 
setting: robustm|rf 
Top-1 Accuracy = 0.4605451117079024 
Top-2 Accuracy = 0.757 
iter 1: [0.4605451117079024] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.4537455002571282 
Top-2 Accuracy = 0.756 
iter 2: [0.4537455002571282] 
setting: robustB|rf 
Top-1 Accuracy = 0.4508313810639392 
Top-2 Accuracy = 0.782 
iter 3: [0.4508313810639392] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.4547168733215245 
Top-2 Accuracy = 0.755 
iter 4: [0.4547168733215245] 
setting: robustp|rf 
Top-1 Accuracy = 0.5151134220901663 
Top-2 Accuracy = 0.84 
iter 5: [0.5151134220901663] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.49574310039426317 
Top-2 Accuracy = 0.825 
iter 6: [0.49574310039426317] 
setting: robustZ|rf 
Top-1 Accuracy = 0.4988286383635221 
Top-2 Accuracy = 0.832 
iter 7: [0.4988286383635221] 
setting: standardizep|rf 
Top-1 Accuracy = 0.46031655333980914 
Top-2 Accuracy = 0.757 
iter 8: [0.46031655333980914] 
setting: normalizey|rf 
Top-1 Accuracy = 0.5032283869493172 
Top-2 Accuracy = 0.833 
iter 9: [0.5032283869493172] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.45140277698417236 
Top-2 Accuracy = 0.782 
iter 10: [0.45140277698417236] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.4574024341466202 
Top-2 Accuracy = 0.754 
iter 11: [0.4574024341466202] 
setting: standardizet|rf 
Top-1 Accuracy = 0.45140277698417236 
Top-2 Accuracy = 0.782 
iter 12: [0.45140277698417236] 
setting: robustl|rf 
Top-1 Accuracy = 0.45140277698417236 
Top-2 Accuracy = 0.782 
iter 13: [0.45140277698417236] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.45140277698417236 
Top-2 Accuracy = 0.782 
iter 14: [0.45140277698417236] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.5095137420718816 
Top-2 Accuracy = 0.835 
iter 15: [0.5095137420718816] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.5027141306211074 
Top-2 Accuracy = 0.834 
iter 16: [0.5027141306211074] 
setting: normalizea|rf 
Top-1 Accuracy = 0.4512313582081024 
Top-2 Accuracy = 0.782 
iter 17: [0.4512313582081024] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.46203074110050857 
Top-2 Accuracy = 0.757 
iter 18: [0.46203074110050857] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.4512313582081024 
Top-2 Accuracy = 0.782 
iter 19: [0.4512313582081024] 
setting: normalizej|rf 
Top-1 Accuracy = 0.5051711330781098 
Top-2 Accuracy = 0.836 
iter 20: [0.5051711330781098] 
setting: robustT|rf 
Top-1 Accuracy = 0.5108850922804411 
Top-2 Accuracy = 0.838 
iter 21: [0.5108850922804411] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.4639734872293012 
Top-2 Accuracy = 0.761 
iter 22: [0.4639734872293012] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.451345637392149 
Top-2 Accuracy = 0.781 
iter 23: [0.451345637392149] 
setting: robustL|rf 
Top-1 Accuracy = 0.5029998285812239 
Top-2 Accuracy = 0.825 
iter 24: [0.5029998285812239] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.5041426204216902 
Top-2 Accuracy = 0.832 
iter 25: [0.5041426204216902] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.451345637392149 
Top-2 Accuracy = 0.781 
iter 26: [0.451345637392149] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.451345637392149 
Top-2 Accuracy = 0.781 
iter 27: [0.451345637392149] 
setting: normalizet|rf 
Top-1 Accuracy = 0.5040283412376436 
Top-2 Accuracy = 0.83 
iter 28: [0.5040283412376436] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.4587166447631564 
Top-2 Accuracy = 0.759 
iter 29: [0.4587166447631564] 
Run # 17 
======= 
setting: normalizeI|rf 
Top-1 Accuracy = 0.4538597794411748 
Top-2 Accuracy = 0.783 
iter 0: [0.4538597794411748] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.5125992800411405 
Top-2 Accuracy = 0.837 
iter 1: [0.5125992800411405] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.45551682760985085 
Top-2 Accuracy = 0.755 
iter 2: [0.45551682760985085] 
setting: robustw|rf 
Top-1 Accuracy = 0.5003142677561282 
Top-2 Accuracy = 0.831 
iter 3: [0.5003142677561282] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.4609450888520656 
Top-2 Accuracy = 0.758 
iter 4: [0.4609450888520656] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.5011713616364779 
Top-2 Accuracy = 0.833 
iter 5: [0.5011713616364779] 
setting: robustl|rf 
Top-1 Accuracy = 0.4654591166219073 
Top-2 Accuracy = 0.761 
iter 6: [0.4654591166219073] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.5014570595965945 
Top-2 Accuracy = 0.833 
iter 7: [0.5014570595965945] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.5088852065596252 
Top-2 Accuracy = 0.832 
iter 8: [0.5088852065596252] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.45420261699331466 
Top-2 Accuracy = 0.784 
iter 9: [0.45420261699331466] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.46380206845323124 
Top-2 Accuracy = 0.763 
iter 10: [0.46380206845323124] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.460659390891949 
Top-2 Accuracy = 0.757 
iter 11: [0.460659390891949] 
setting: standardizet|rf 
Top-1 Accuracy = 0.4587737843551797 
Top-2 Accuracy = 0.755 
iter 12: [0.4587737843551797] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.45420261699331466 
Top-2 Accuracy = 0.784 
iter 13: [0.45420261699331466] 
setting: maxabss|rf 
Top-1 Accuracy = 0.45420261699331466 
Top-2 Accuracy = 0.784 
iter 14: [0.45420261699331466] 
setting: standardizee|rf 
Top-1 Accuracy = 0.45420261699331466 
Top-2 Accuracy = 0.784 
iter 15: [0.45420261699331466] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.4639734872293012 
Top-2 Accuracy = 0.761 
iter 16: [0.4639734872293012] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.4596308782355294 
Top-2 Accuracy = 0.754 
iter 17: [0.4596308782355294] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.49568596080223987 
Top-2 Accuracy = 0.821 
iter 18: [0.49568596080223987] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.46505913947774413 
Top-2 Accuracy = 0.761 
iter 19: [0.46505913947774413] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.5088280669676019 
Top-2 Accuracy = 0.834 
iter 20: [0.5088280669676019] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.5101422775841381 
Top-2 Accuracy = 0.835 
iter 21: [0.5101422775841381] 
setting: robustD|rf 
Top-1 Accuracy = 0.45425975658533796 
Top-2 Accuracy = 0.784 
iter 22: [0.45425975658533796] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.4546597337295012 
Top-2 Accuracy = 0.78 
iter 23: [0.4546597337295012] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.5092851837037884 
Top-2 Accuracy = 0.833 
iter 24: [0.5092851837037884] 
setting: robustk|rf 
Top-1 Accuracy = 0.5118564653448374 
Top-2 Accuracy = 0.837 
iter 25: [0.5118564653448374] 
setting: standardizew|rf 
Top-1 Accuracy = 0.4546597337295012 
Top-2 Accuracy = 0.78 
iter 26: [0.4546597337295012] 
setting: normalizen|rf 
Top-1 Accuracy = 0.5114564882006742 
Top-2 Accuracy = 0.837 
iter 27: [0.5114564882006742] 
setting: standardizea|rf 
Top-1 Accuracy = 0.5115136277926976 
Top-2 Accuracy = 0.837 
iter 28: [0.5115136277926976] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.5039140620535969 
Top-2 Accuracy = 0.833 
iter 29: [0.5039140620535969] 
Run # 18 
======= 
setting: minmaxm|rf 
Top-1 Accuracy = 0.45888806353922634 
Top-2 Accuracy = 0.759 
iter 0: [0.45888806353922634] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.45557396720187415 
Top-2 Accuracy = 0.755 
iter 1: [0.45557396720187415] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.45271698760070855 
Top-2 Accuracy = 0.751 
iter 2: [0.45271698760070855] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.45905948231529625 
Top-2 Accuracy = 0.753 
iter 3: [0.45905948231529625] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.45151705616821897 
Top-2 Accuracy = 0.779 
iter 4: [0.45151705616821897] 
setting: robustf|rf 
Top-1 Accuracy = 0.46128792640420546 
Top-2 Accuracy = 0.755 
iter 5: [0.46128792640420546] 
setting: normalizet|rf 
Top-1 Accuracy = 0.5149991429061197 
Top-2 Accuracy = 0.835 
iter 6: [0.5149991429061197] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.45157419576024227 
Top-2 Accuracy = 0.778 
iter 7: [0.45157419576024227] 
setting: normalizee|rf 
Top-1 Accuracy = 0.4631163933489515 
Top-2 Accuracy = 0.756 
iter 8: [0.4631163933489515] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.5028855493971773 
Top-2 Accuracy = 0.831 
iter 9: [0.5028855493971773] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.4512313582081024 
Top-2 Accuracy = 0.779 
iter 10: [0.4512313582081024] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.44974572881549624 
Top-2 Accuracy = 0.778 
iter 11: [0.44974572881549624] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.5141991886177932 
Top-2 Accuracy = 0.836 
iter 12: [0.5141991886177932] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.44974572881549624 
Top-2 Accuracy = 0.778 
iter 13: [0.44974572881549624] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.44974572881549624 
Top-2 Accuracy = 0.778 
iter 14: [0.44974572881549624] 
setting: normalizen|rf 
Top-1 Accuracy = 0.49591451917033313 
Top-2 Accuracy = 0.823 
iter 15: [0.49591451917033313] 
setting: robustj|rf 
Top-1 Accuracy = 0.4503171247357294 
Top-2 Accuracy = 0.779 
iter 16: [0.4503171247357294] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.45145991657619566 
Top-2 Accuracy = 0.783 
iter 17: [0.45145991657619566] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.45540254842580424 
Top-2 Accuracy = 0.756 
iter 18: [0.45540254842580424] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.4653448374378607 
Top-2 Accuracy = 0.761 
iter 19: [0.4653448374378607] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.45145991657619566 
Top-2 Accuracy = 0.783 
iter 20: [0.45145991657619566] 
setting: standardizez|rf 
Top-1 Accuracy = 0.5087709273755785 
Top-2 Accuracy = 0.833 
iter 21: [0.5087709273755785] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.46340209130906806 
Top-2 Accuracy = 0.76 
iter 22: [0.46340209130906806] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.45145991657619566 
Top-2 Accuracy = 0.783 
iter 23: [0.45145991657619566] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.45145991657619566 
Top-2 Accuracy = 0.783 
iter 24: [0.45145991657619566] 
setting: robustK|rf 
Top-1 Accuracy = 0.45980229701159936 
Top-2 Accuracy = 0.76 
iter 25: [0.45980229701159936] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.5087709273755785 
Top-2 Accuracy = 0.833 
iter 26: [0.5087709273755785] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.4627164162047883 
Top-2 Accuracy = 0.758 
iter 27: [0.4627164162047883] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.5089994857436718 
Top-2 Accuracy = 0.833 
iter 28: [0.5089994857436718] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.49568596080223987 
Top-2 Accuracy = 0.827 
iter 29: [0.49568596080223987] 
Run # 19 
======= 
setting: minmaxN|rf 
Top-1 Accuracy = 0.5017998971487344 
Top-2 Accuracy = 0.834 
iter 0: [0.5017998971487344] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.5085423690074853 
Top-2 Accuracy = 0.831 
iter 1: [0.5085423690074853] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.5053425518541798 
Top-2 Accuracy = 0.834 
iter 2: [0.5053425518541798] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.46243071824467175 
Top-2 Accuracy = 0.762 
iter 3: [0.46243071824467175] 
setting: maxabso|rf 
Top-1 Accuracy = 0.46203074110050857 
Top-2 Accuracy = 0.759 
iter 4: [0.46203074110050857] 
setting: standardizek|rf 
Top-1 Accuracy = 0.44808868064682017 
Top-2 Accuracy = 0.78 
iter 5: [0.44808868064682017] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.4477458430946803 
Top-2 Accuracy = 0.776 
iter 6: [0.4477458430946803] 
setting: robustX|rf 
Top-1 Accuracy = 0.4477458430946803 
Top-2 Accuracy = 0.776 
iter 7: [0.4477458430946803] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.4570595965944803 
Top-2 Accuracy = 0.758 
iter 8: [0.4570595965944803] 
setting: normalizex|rf 
Top-1 Accuracy = 0.5033998057253871 
Top-2 Accuracy = 0.827 
iter 9: [0.5033998057253871] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.46168790354836864 
Top-2 Accuracy = 0.76 
iter 10: [0.46168790354836864] 
setting: robustl|rf 
Top-1 Accuracy = 0.4632878121250214 
Top-2 Accuracy = 0.76 
iter 11: [0.4632878121250214] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.46134506599622876 
Top-2 Accuracy = 0.761 
iter 12: [0.46134506599622876] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.4583166676189932 
Top-2 Accuracy = 0.757 
iter 13: [0.4583166676189932] 
setting: standardizex|rf 
Top-1 Accuracy = 0.5063710645105994 
Top-2 Accuracy = 0.836 
iter 14: [0.5063710645105994] 
setting: robustJ|rf 
Top-1 Accuracy = 0.5110565110565111 
Top-2 Accuracy = 0.834 
iter 15: [0.5110565110565111] 
setting: normalizek|rf 
Top-1 Accuracy = 0.5004856865321982 
Top-2 Accuracy = 0.834 
iter 16: [0.5004856865321982] 
setting: robustL|rf 
Top-1 Accuracy = 0.45997371578766927 
Top-2 Accuracy = 0.757 
iter 17: [0.45997371578766927] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.45185989372035884 
Top-2 Accuracy = 0.78 
iter 18: [0.45185989372035884] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.49517170447403 
Top-2 Accuracy = 0.825 
iter 19: [0.49517170447403] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.5069996000228558 
Top-2 Accuracy = 0.832 
iter 20: [0.5069996000228558] 
setting: normalizel|rf 
Top-1 Accuracy = 0.4618593223244386 
Top-2 Accuracy = 0.762 
iter 21: [0.4618593223244386] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.5041426204216902 
Top-2 Accuracy = 0.835 
iter 22: [0.5041426204216902] 
setting: robustk|rf 
Top-1 Accuracy = 0.46511627906976744 
Top-2 Accuracy = 0.762 
iter 23: [0.46511627906976744] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.4490600537112165 
Top-2 Accuracy = 0.779 
iter 24: [0.4490600537112165] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.46157362436432203 
Top-2 Accuracy = 0.76 
iter 25: [0.46157362436432203] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.45780241129078336 
Top-2 Accuracy = 0.757 
iter 26: [0.45780241129078336] 
setting: standardizee|rf 
Top-1 Accuracy = 0.4619164619164619 
Top-2 Accuracy = 0.757 
iter 27: [0.4619164619164619] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.5036855036855037 
Top-2 Accuracy = 0.835 
iter 28: [0.5036855036855037] 
setting: robustO|rf 
Top-1 Accuracy = 0.5089994857436718 
Top-2 Accuracy = 0.833 
iter 29: [0.5089994857436718] 
 
Median top-1 = 0.4678589794868865 
Median top-2 = 0.788 
5 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=30), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=69), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=92), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=84), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=84), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=29), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=87), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=98), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=16), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=42), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=54), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=27), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=77), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=86), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=85), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=58), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=94), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=17), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=14), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=26), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=34), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=31), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=45), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=84), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=78), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=14), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=10), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=34), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=44), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=42), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=55), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=66), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=79), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=85), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=27), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=78), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=70), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=80), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=44), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=35), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=93), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=26), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: robustj|rf 
Top-1 Accuracy = 0.31746757328152675 
Top-2 Accuracy = 0.443 
iter 0: [0.31746757328152675] 
setting: standardized|rf 
Top-1 Accuracy = 0.2891263356379635 
Top-2 Accuracy = 0.591 
iter 1: [0.2891263356379635] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.390720530255414 
Top-2 Accuracy = 0.653 
iter 2: [0.390720530255414] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.3157533855208274 
Top-2 Accuracy = 0.442 
iter 3: [0.3157533855208274] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.390720530255414 
Top-2 Accuracy = 0.653 
iter 4: [0.390720530255414] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.2891263356379635 
Top-2 Accuracy = 0.591 
iter 5: [0.2891263356379635] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.3462087880692532 
Top-2 Accuracy = 0.614 
iter 6: [0.3462087880692532] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.2891263356379635 
Top-2 Accuracy = 0.591 
iter 7: [0.2891263356379635] 
setting: robustg|rf 
Top-1 Accuracy = 0.2891263356379635 
Top-2 Accuracy = 0.591 
iter 8: [0.2891263356379635] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.3153534083766642 
Top-2 Accuracy = 0.443 
iter 9: [0.3153534083766642] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.2891263356379635 
Top-2 Accuracy = 0.591 
iter 10: [0.2891263356379635] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.3471801611336495 
Top-2 Accuracy = 0.616 
iter 11: [0.3471801611336495] 
setting: standardizej|rf 
Top-1 Accuracy = 0.2891263356379635 
Top-2 Accuracy = 0.591 
iter 12: [0.2891263356379635] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.34558025255699676 
Top-2 Accuracy = 0.614 
iter 13: [0.34558025255699676] 
setting: robustD|rf 
Top-1 Accuracy = 0.3907776698474373 
Top-2 Accuracy = 0.654 
iter 14: [0.3907776698474373] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.31489629164047767 
Top-2 Accuracy = 0.442 
iter 15: [0.31489629164047767] 
setting: standardizec|rf 
Top-1 Accuracy = 0.3472373007256728 
Top-2 Accuracy = 0.617 
iter 16: [0.3472373007256728] 
setting: robustZ|rf 
Top-1 Accuracy = 0.3463230672532998 
Top-2 Accuracy = 0.615 
iter 17: [0.3463230672532998] 
setting: robustc|rf 
Top-1 Accuracy = 0.3907776698474373 
Top-2 Accuracy = 0.654 
iter 18: [0.3907776698474373] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.3333523798640078 
Top-2 Accuracy = 0.617 
iter 19: [0.3333523798640078] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.34478029826867035 
Top-2 Accuracy = 0.618 
iter 20: [0.34478029826867035] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.3333523798640078 
Top-2 Accuracy = 0.617 
iter 21: [0.3333523798640078] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.346723044397463 
Top-2 Accuracy = 0.62 
iter 22: [0.346723044397463] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.3400948517227587 
Top-2 Accuracy = 0.617 
iter 23: [0.3400948517227587] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.3141534769441746 
Top-2 Accuracy = 0.44 
iter 24: [0.3141534769441746] 
setting: standardizek|rf 
Top-1 Accuracy = 0.38963487800697105 
Top-2 Accuracy = 0.652 
iter 25: [0.38963487800697105] 
setting: standardizex|rf 
Top-1 Accuracy = 0.3118678932632421 
Top-2 Accuracy = 0.437 
iter 26: [0.3118678932632421] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.38894920290269125 
Top-2 Accuracy = 0.653 
iter 27: [0.38894920290269125] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.34255185417976114 
Top-2 Accuracy = 0.614 
iter 28: [0.34255185417976114] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.3175247128735501 
Top-2 Accuracy = 0.443 
iter 29: [0.3175247128735501] 
Run # 1 
====== 
setting: standardizeb|rf 
Top-1 Accuracy = 0.3400948517227587 
Top-2 Accuracy = 0.617 
iter 0: [0.3400948517227587] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.3400948517227587 
Top-2 Accuracy = 0.617 
iter 1: [0.3400948517227587] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.34809439460602254 
Top-2 Accuracy = 0.627 
iter 2: [0.34809439460602254] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.38529226901319924 
Top-2 Accuracy = 0.648 
iter 3: [0.38529226901319924] 
setting: robustk|rf 
Top-1 Accuracy = 0.3150105708245243 
Top-2 Accuracy = 0.442 
iter 4: [0.3150105708245243] 
setting: normalizea|rf 
Top-1 Accuracy = 0.3131821038797783 
Top-2 Accuracy = 0.439 
iter 5: [0.3131821038797783] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.3108965201988458 
Top-2 Accuracy = 0.437 
iter 6: [0.3108965201988458] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.34592309010913663 
Top-2 Accuracy = 0.628 
iter 7: [0.34592309010913663] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.34592309010913663 
Top-2 Accuracy = 0.628 
iter 8: [0.34592309010913663] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.3083252385577967 
Top-2 Accuracy = 0.432 
iter 9: [0.3083252385577967] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.3867778984058054 
Top-2 Accuracy = 0.649 
iter 10: [0.3867778984058054] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.3382663847780127 
Top-2 Accuracy = 0.62 
iter 11: [0.3382663847780127] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.3382663847780127 
Top-2 Accuracy = 0.62 
iter 12: [0.3382663847780127] 
setting: standardizeh|rf 
Top-1 Accuracy = 0.3087252157019599 
Top-2 Accuracy = 0.433 
iter 13: [0.3087252157019599] 
setting: robustF|rf 
Top-1 Accuracy = 0.348551511342209 
Top-2 Accuracy = 0.622 
iter 14: [0.348551511342209] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.26981315353408375 
Top-2 Accuracy = 0.552 
iter 15: [0.26981315353408375] 
setting: robustN|rf 
Top-1 Accuracy = 0.26981315353408375 
Top-2 Accuracy = 0.552 
iter 16: [0.26981315353408375] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.30906805325409975 
Top-2 Accuracy = 0.433 
iter 17: [0.30906805325409975] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.26981315353408375 
Top-2 Accuracy = 0.552 
iter 18: [0.26981315353408375] 
setting: robustC|rf 
Top-1 Accuracy = 0.34558025255699676 
Top-2 Accuracy = 0.617 
iter 19: [0.34558025255699676] 
setting: robustq|rf 
Top-1 Accuracy = 0.3724930003999771 
Top-2 Accuracy = 0.631 
iter 20: [0.3724930003999771] 
setting: robustW|rf 
Top-1 Accuracy = 0.3722644420318839 
Top-2 Accuracy = 0.631 
iter 21: [0.3722644420318839] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.3417518998914348 
Top-2 Accuracy = 0.613 
iter 22: [0.3417518998914348] 
setting: maxabse|rf 
Top-1 Accuracy = 0.29586880749671446 
Top-2 Accuracy = 0.598 
iter 23: [0.29586880749671446] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.29586880749671446 
Top-2 Accuracy = 0.598 
iter 24: [0.29586880749671446] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.31489629164047767 
Top-2 Accuracy = 0.61 
iter 25: [0.31489629164047767] 
setting: robustb|rf 
Top-1 Accuracy = 0.31489629164047767 
Top-2 Accuracy = 0.61 
iter 26: [0.31489629164047767] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.3793497514427747 
Top-2 Accuracy = 0.644 
iter 27: [0.3793497514427747] 
setting: normalizek|rf 
Top-1 Accuracy = 0.3130678246957317 
Top-2 Accuracy = 0.44 
iter 28: [0.3130678246957317] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.3130678246957317 
Top-2 Accuracy = 0.606 
iter 29: [0.3130678246957317] 
Run # 2 
====== 
setting: minmaxL|rf 
Top-1 Accuracy = 0.3130678246957317 
Top-2 Accuracy = 0.606 
iter 0: [0.3130678246957317] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.33289526312782125 
Top-2 Accuracy = 0.594 
iter 1: [0.33289526312782125] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.34215187703559796 
Top-2 Accuracy = 0.609 
iter 2: [0.34215187703559796] 
setting: minmaxw|rf 
Top-1 Accuracy = 0.38397805839666305 
Top-2 Accuracy = 0.648 
iter 3: [0.38397805839666305] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.3108965201988458 
Top-2 Accuracy = 0.434 
iter 4: [0.3108965201988458] 
setting: robustG|rf 
Top-1 Accuracy = 0.3121535912233587 
Top-2 Accuracy = 0.439 
iter 5: [0.3121535912233587] 
setting: maxabsK|rf 
Top-1 Accuracy = 0.31729615450545684 
Top-2 Accuracy = 0.607 
iter 6: [0.31729615450545684] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.3072967259013771 
Top-2 Accuracy = 0.434 
iter 7: [0.3072967259013771] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.3191817610422262 
Top-2 Accuracy = 0.612 
iter 8: [0.3191817610422262] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.3074110050854237 
Top-2 Accuracy = 0.434 
iter 9: [0.3074110050854237] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.30855379692588997 
Top-2 Accuracy = 0.436 
iter 10: [0.30855379692588997] 
setting: maxabss|rf 
Top-1 Accuracy = 0.3110107993828924 
Top-2 Accuracy = 0.437 
iter 11: [0.3110107993828924] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.3343808925204274 
Top-2 Accuracy = 0.588 
iter 12: [0.3343808925204274] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.3842637563567796 
Top-2 Accuracy = 0.649 
iter 13: [0.3842637563567796] 
setting: robustX|rf 
Top-1 Accuracy = 0.34700874235757956 
Top-2 Accuracy = 0.619 
iter 14: [0.34700874235757956] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.3096394491743329 
Top-2 Accuracy = 0.435 
iter 15: [0.3096394491743329] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.38746357351008515 
Top-2 Accuracy = 0.654 
iter 16: [0.38746357351008515] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.3136392206159648 
Top-2 Accuracy = 0.439 
iter 17: [0.3136392206159648] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.3107822410147992 
Top-2 Accuracy = 0.438 
iter 18: [0.3107822410147992] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.34586595051711333 
Top-2 Accuracy = 0.618 
iter 19: [0.34586595051711333] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.39020627392720414 
Top-2 Accuracy = 0.655 
iter 20: [0.39020627392720414] 
setting: maxabso|rf 
Top-1 Accuracy = 0.39106336780755385 
Top-2 Accuracy = 0.655 
iter 21: [0.39106336780755385] 
setting: standardizen|rf 
Top-1 Accuracy = 0.34478029826867035 
Top-2 Accuracy = 0.615 
iter 22: [0.34478029826867035] 
setting: normalizej|rf 
Top-1 Accuracy = 0.3918061825038569 
Top-2 Accuracy = 0.655 
iter 23: [0.3918061825038569] 
setting: robustF|rf 
Top-1 Accuracy = 0.31341066224787156 
Top-2 Accuracy = 0.439 
iter 24: [0.31341066224787156] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.3486657905262556 
Top-2 Accuracy = 0.619 
iter 25: [0.3486657905262556] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.3498085823667219 
Top-2 Accuracy = 0.621 
iter 26: [0.3498085823667219] 
setting: robustc|rf 
Top-1 Accuracy = 0.391634763727787 
Top-2 Accuracy = 0.655 
iter 27: [0.391634763727787] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.3436375064282041 
Top-2 Accuracy = 0.614 
iter 28: [0.3436375064282041] 
setting: normalizea|rf 
Top-1 Accuracy = 0.381235357979544 
Top-2 Accuracy = 0.647 
iter 29: [0.381235357979544] 
Run # 3 
====== 
setting: normalizej|rf 
Top-1 Accuracy = 0.38129249757156736 
Top-2 Accuracy = 0.648 
iter 0: [0.38129249757156736] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.3465516256213931 
Top-2 Accuracy = 0.621 
iter 1: [0.3465516256213931] 
setting: robustF|rf 
Top-1 Accuracy = 0.3497514427746986 
Top-2 Accuracy = 0.621 
iter 2: [0.3497514427746986] 
setting: standardizej|rf 
Top-1 Accuracy = 0.3843780355408262 
Top-2 Accuracy = 0.648 
iter 3: [0.3843780355408262] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.3246671618764642 
Top-2 Accuracy = 0.613 
iter 4: [0.3246671618764642] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.3246671618764642 
Top-2 Accuracy = 0.613 
iter 5: [0.3246671618764642] 
setting: robustx|rf 
Top-1 Accuracy = 0.3246671618764642 
Top-2 Accuracy = 0.613 
iter 6: [0.3246671618764642] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.3246671618764642 
Top-2 Accuracy = 0.613 
iter 7: [0.3246671618764642] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.38169247471573053 
Top-2 Accuracy = 0.647 
iter 8: [0.38169247471573053] 
setting: normalizew|rf 
Top-1 Accuracy = 0.3285526541340495 
Top-2 Accuracy = 0.612 
iter 9: [0.3285526541340495] 
setting: standardizea|rf 
Top-1 Accuracy = 0.3477515570538826 
Top-2 Accuracy = 0.613 
iter 10: [0.3477515570538826] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.32198160105136847 
Top-2 Accuracy = 0.612 
iter 11: [0.32198160105136847] 
setting: standardizen|rf 
Top-1 Accuracy = 0.34483743786069365 
Top-2 Accuracy = 0.62 
iter 12: [0.34483743786069365] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.32198160105136847 
Top-2 Accuracy = 0.612 
iter 13: [0.32198160105136847] 
setting: normalizek|rf 
Top-1 Accuracy = 0.3212387863550654 
Top-2 Accuracy = 0.612 
iter 14: [0.3212387863550654] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.3878635506542483 
Top-2 Accuracy = 0.65 
iter 15: [0.3878635506542483] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.3415804811153648 
Top-2 Accuracy = 0.607 
iter 16: [0.3415804811153648] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.3212387863550654 
Top-2 Accuracy = 0.612 
iter 17: [0.3212387863550654] 
setting: maxabss|rf 
Top-1 Accuracy = 0.34340894806011085 
Top-2 Accuracy = 0.617 
iter 18: [0.34340894806011085] 
setting: robustO|rf 
Top-1 Accuracy = 0.3436375064282041 
Top-2 Accuracy = 0.614 
iter 19: [0.3436375064282041] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.30998228672647277 
Top-2 Accuracy = 0.435 
iter 20: [0.30998228672647277] 
setting: robustP|rf 
Top-1 Accuracy = 0.3212387863550654 
Top-2 Accuracy = 0.612 
iter 21: [0.3212387863550654] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.3876921318781784 
Top-2 Accuracy = 0.65 
iter 22: [0.3876921318781784] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.3212387863550654 
Top-2 Accuracy = 0.612 
iter 23: [0.3212387863550654] 
setting: robustL|rf 
Top-1 Accuracy = 0.3212387863550654 
Top-2 Accuracy = 0.612 
iter 24: [0.3212387863550654] 
setting: robuste|rf 
Top-1 Accuracy = 0.31255356836752185 
Top-2 Accuracy = 0.439 
iter 25: [0.31255356836752185] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.384149477172733 
Top-2 Accuracy = 0.651 
iter 26: [0.384149477172733] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.3083252385577967 
Top-2 Accuracy = 0.435 
iter 27: [0.3083252385577967] 
setting: normalizey|rf 
Top-1 Accuracy = 0.38266384778012685 
Top-2 Accuracy = 0.648 
iter 28: [0.38266384778012685] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.31112507856693905 
Top-2 Accuracy = 0.605 
iter 29: [0.31112507856693905] 
Run # 4 
====== 
setting: minmaxb|rf 
Top-1 Accuracy = 0.3489514884863722 
Top-2 Accuracy = 0.62 
iter 0: [0.3489514884863722] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.31112507856693905 
Top-2 Accuracy = 0.605 
iter 1: [0.31112507856693905] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.38169247471573053 
Top-2 Accuracy = 0.651 
iter 2: [0.38169247471573053] 
setting: standardizey|rf 
Top-1 Accuracy = 0.31135363693503226 
Top-2 Accuracy = 0.438 
iter 3: [0.31135363693503226] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.34729444031769613 
Top-2 Accuracy = 0.618 
iter 4: [0.34729444031769613] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.3114679161190789 
Top-2 Accuracy = 0.603 
iter 5: [0.3114679161190789] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.33638077824124335 
Top-2 Accuracy = 0.597 
iter 6: [0.33638077824124335] 
setting: standardizen|rf 
Top-1 Accuracy = 0.3092394720301697 
Top-2 Accuracy = 0.603 
iter 7: [0.3092394720301697] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.34598022970115994 
Top-2 Accuracy = 0.622 
iter 8: [0.34598022970115994] 
setting: robustT|rf 
Top-1 Accuracy = 0.34923718644648877 
Top-2 Accuracy = 0.62 
iter 9: [0.34923718644648877] 
setting: robustj|rf 
Top-1 Accuracy = 0.3406662476429918 
Top-2 Accuracy = 0.611 
iter 10: [0.3406662476429918] 
setting: robustq|rf 
Top-1 Accuracy = 0.38163533512370723 
Top-2 Accuracy = 0.648 
iter 11: [0.38163533512370723] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.3092394720301697 
Top-2 Accuracy = 0.603 
iter 12: [0.3092394720301697] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.38706359636592197 
Top-2 Accuracy = 0.649 
iter 13: [0.38706359636592197] 
setting: robustw|rf 
Top-1 Accuracy = 0.31838180675389977 
Top-2 Accuracy = 0.61 
iter 14: [0.31838180675389977] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.38706359636592197 
Top-2 Accuracy = 0.649 
iter 15: [0.38706359636592197] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.3872921547340152 
Top-2 Accuracy = 0.648 
iter 16: [0.3872921547340152] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.3471230215416262 
Top-2 Accuracy = 0.623 
iter 17: [0.3471230215416262] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.3180961087937832 
Top-2 Accuracy = 0.611 
iter 18: [0.3180961087937832] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.3180961087937832 
Top-2 Accuracy = 0.611 
iter 19: [0.3180961087937832] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.3430089709159477 
Top-2 Accuracy = 0.608 
iter 20: [0.3430089709159477] 
setting: robustU|rf 
Top-1 Accuracy = 0.3178104108336666 
Top-2 Accuracy = 0.611 
iter 21: [0.3178104108336666] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.3178104108336666 
Top-2 Accuracy = 0.611 
iter 22: [0.3178104108336666] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.3178104108336666 
Top-2 Accuracy = 0.611 
iter 23: [0.3178104108336666] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.3871207359579453 
Top-2 Accuracy = 0.647 
iter 24: [0.3871207359579453] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.3178104108336666 
Top-2 Accuracy = 0.611 
iter 25: [0.3178104108336666] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.31826752756985316 
Top-2 Accuracy = 0.444 
iter 26: [0.31826752756985316] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.3396377349865722 
Top-2 Accuracy = 0.612 
iter 27: [0.3396377349865722] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.3844351751328495 
Top-2 Accuracy = 0.648 
iter 28: [0.3844351751328495] 
setting: normalizel|rf 
Top-1 Accuracy = 0.34729444031769613 
Top-2 Accuracy = 0.622 
iter 29: [0.34729444031769613] 
Run # 5 
====== 
setting: maxabss|rf 
Top-1 Accuracy = 0.344894577452717 
Top-2 Accuracy = 0.619 
iter 0: [0.344894577452717] 
setting: normalizes|rf 
Top-1 Accuracy = 0.34689446317353295 
Top-2 Accuracy = 0.623 
iter 1: [0.34689446317353295] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.3162676418490372 
Top-2 Accuracy = 0.61 
iter 2: [0.3162676418490372] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.3162676418490372 
Top-2 Accuracy = 0.61 
iter 3: [0.3162676418490372] 
setting: robustK|rf 
Top-1 Accuracy = 0.3114679161190789 
Top-2 Accuracy = 0.438 
iter 4: [0.3114679161190789] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.34706588194960286 
Top-2 Accuracy = 0.618 
iter 5: [0.34706588194960286] 
setting: robustG|rf 
Top-1 Accuracy = 0.38752071310210845 
Top-2 Accuracy = 0.647 
iter 6: [0.38752071310210845] 
setting: normalizew|rf 
Top-1 Accuracy = 0.3432375292840409 
Top-2 Accuracy = 0.617 
iter 7: [0.3432375292840409] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.3127821267356151 
Top-2 Accuracy = 0.436 
iter 8: [0.3127821267356151] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.34472315867664705 
Top-2 Accuracy = 0.611 
iter 9: [0.34472315867664705] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.3212959259470887 
Top-2 Accuracy = 0.614 
iter 10: [0.3212959259470887] 
setting: normalizec|rf 
Top-1 Accuracy = 0.386892177589852 
Top-2 Accuracy = 0.648 
iter 11: [0.386892177589852] 
setting: standardizee|rf 
Top-1 Accuracy = 0.3876921318781784 
Top-2 Accuracy = 0.649 
iter 12: [0.3876921318781784] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.31963887777841266 
Top-2 Accuracy = 0.613 
iter 13: [0.31963887777841266] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.31472487286440776 
Top-2 Accuracy = 0.44 
iter 14: [0.31472487286440776] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.31969601737043596 
Top-2 Accuracy = 0.61 
iter 15: [0.31969601737043596] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.31969601737043596 
Top-2 Accuracy = 0.61 
iter 16: [0.31969601737043596] 
setting: robustf|rf 
Top-1 Accuracy = 0.31969601737043596 
Top-2 Accuracy = 0.61 
iter 17: [0.31969601737043596] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.3466659048054397 
Top-2 Accuracy = 0.61 
iter 18: [0.3466659048054397] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.3121535912233587 
Top-2 Accuracy = 0.438 
iter 19: [0.3121535912233587] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.32203874064339183 
Top-2 Accuracy = 0.611 
iter 20: [0.32203874064339183] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.3521513056396777 
Top-2 Accuracy = 0.622 
iter 21: [0.3521513056396777] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.32443860350837095 
Top-2 Accuracy = 0.61 
iter 22: [0.32443860350837095] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.3476944174618593 
Top-2 Accuracy = 0.613 
iter 23: [0.3476944174618593] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.3869493171818753 
Top-2 Accuracy = 0.649 
iter 24: [0.3869493171818753] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.34598022970115994 
Top-2 Accuracy = 0.62 
iter 25: [0.34598022970115994] 
setting: robustc|rf 
Top-1 Accuracy = 0.32443860350837095 
Top-2 Accuracy = 0.61 
iter 26: [0.32443860350837095] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.3856922461573624 
Top-2 Accuracy = 0.651 
iter 27: [0.3856922461573624] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.38666361922175874 
Top-2 Accuracy = 0.649 
iter 28: [0.38666361922175874] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.346723044397463 
Top-2 Accuracy = 0.614 
iter 29: [0.346723044397463] 
Run # 6 
====== 
setting: standardizeM|rf 
Top-1 Accuracy = 0.32438146391634765 
Top-2 Accuracy = 0.61 
iter 0: [0.32438146391634765] 
setting: standardizec|rf 
Top-1 Accuracy = 0.3130106851037084 
Top-2 Accuracy = 0.439 
iter 1: [0.3130106851037084] 
setting: normalizel|rf 
Top-1 Accuracy = 0.312953545511685 
Top-2 Accuracy = 0.438 
iter 2: [0.312953545511685] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.38512085023712933 
Top-2 Accuracy = 0.646 
iter 3: [0.38512085023712933] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.38757785269413175 
Top-2 Accuracy = 0.649 
iter 4: [0.38757785269413175] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.32432432432432434 
Top-2 Accuracy = 0.611 
iter 5: [0.32432432432432434] 
setting: robusta|rf 
Top-1 Accuracy = 0.3879206902462716 
Top-2 Accuracy = 0.649 
iter 6: [0.3879206902462716] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.338323524370036 
Top-2 Accuracy = 0.586 
iter 7: [0.338323524370036] 
setting: standardizea|rf 
Top-1 Accuracy = 0.39192046168790357 
Top-2 Accuracy = 0.655 
iter 8: [0.39192046168790357] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.3223815781955317 
Top-2 Accuracy = 0.615 
iter 9: [0.3223815781955317] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.35083709502314153 
Top-2 Accuracy = 0.619 
iter 10: [0.35083709502314153] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.38832066739043486 
Top-2 Accuracy = 0.653 
iter 11: [0.38832066739043486] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.35169418890349124 
Top-2 Accuracy = 0.625 
iter 12: [0.35169418890349124] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.3490086280783955 
Top-2 Accuracy = 0.625 
iter 13: [0.3490086280783955] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.31123935775098566 
Top-2 Accuracy = 0.437 
iter 14: [0.31123935775098566] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.38889206331066795 
Top-2 Accuracy = 0.651 
iter 15: [0.38889206331066795] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.31821038797782986 
Top-2 Accuracy = 0.442 
iter 16: [0.31821038797782986] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.3228386949317182 
Top-2 Accuracy = 0.61 
iter 17: [0.3228386949317182] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.31466773327238445 
Top-2 Accuracy = 0.44 
iter 18: [0.31466773327238445] 
setting: robustc|rf 
Top-1 Accuracy = 0.3228386949317182 
Top-2 Accuracy = 0.61 
iter 19: [0.3228386949317182] 
setting: robustQ|rf 
Top-1 Accuracy = 0.31346780183989487 
Top-2 Accuracy = 0.439 
iter 20: [0.31346780183989487] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.34820867379006915 
Top-2 Accuracy = 0.618 
iter 21: [0.34820867379006915] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.3496943031826753 
Top-2 Accuracy = 0.625 
iter 22: [0.3496943031826753] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.3241529055482544 
Top-2 Accuracy = 0.611 
iter 23: [0.3241529055482544] 
setting: robustl|rf 
Top-1 Accuracy = 0.38654934003771213 
Top-2 Accuracy = 0.65 
iter 24: [0.38654934003771213] 
setting: robuste|rf 
Top-1 Accuracy = 0.34872293011827893 
Top-2 Accuracy = 0.619 
iter 25: [0.34872293011827893] 
setting: standardizes|rf 
Top-1 Accuracy = 0.38654934003771213 
Top-2 Accuracy = 0.65 
iter 26: [0.38654934003771213] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.38660647962973543 
Top-2 Accuracy = 0.65 
iter 27: [0.38660647962973543] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.31375349980001144 
Top-2 Accuracy = 0.438 
iter 28: [0.31375349980001144] 
setting: maxabst|rf 
Top-1 Accuracy = 0.38654934003771213 
Top-2 Accuracy = 0.65 
iter 29: [0.38654934003771213] 
Run # 7 
====== 
setting: normalizer|rf 
Top-1 Accuracy = 0.34923718644648877 
Top-2 Accuracy = 0.624 
iter 0: [0.34923718644648877] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.3106108222387292 
Top-2 Accuracy = 0.437 
iter 1: [0.3106108222387292] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.3108393806068225 
Top-2 Accuracy = 0.439 
iter 2: [0.3108393806068225] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.3860350837095023 
Top-2 Accuracy = 0.648 
iter 3: [0.3860350837095023] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.38746357351008515 
Top-2 Accuracy = 0.649 
iter 4: [0.38746357351008515] 
setting: robustR|rf 
Top-1 Accuracy = 0.3226672761556483 
Top-2 Accuracy = 0.607 
iter 5: [0.3226672761556483] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.3226672761556483 
Top-2 Accuracy = 0.607 
iter 6: [0.3226672761556483] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.3477515570538826 
Top-2 Accuracy = 0.623 
iter 7: [0.3477515570538826] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.3226672761556483 
Top-2 Accuracy = 0.607 
iter 8: [0.3226672761556483] 
setting: maxabst|rf 
Top-1 Accuracy = 0.3436375064282041 
Top-2 Accuracy = 0.62 
iter 9: [0.3436375064282041] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.31123935775098566 
Top-2 Accuracy = 0.438 
iter 10: [0.31123935775098566] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.3226672761556483 
Top-2 Accuracy = 0.607 
iter 11: [0.3226672761556483] 
setting: robustF|rf 
Top-1 Accuracy = 0.3871778755499686 
Top-2 Accuracy = 0.649 
iter 12: [0.3871778755499686] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.3872350151419919 
Top-2 Accuracy = 0.649 
iter 13: [0.3872350151419919] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.3139820581681047 
Top-2 Accuracy = 0.442 
iter 14: [0.3139820581681047] 
setting: robustL|rf 
Top-1 Accuracy = 0.3872350151419919 
Top-2 Accuracy = 0.649 
iter 15: [0.3872350151419919] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.3130678246957317 
Top-2 Accuracy = 0.439 
iter 16: [0.3130678246957317] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.3872350151419919 
Top-2 Accuracy = 0.649 
iter 17: [0.3872350151419919] 
setting: robustb|rf 
Top-1 Accuracy = 0.3493514656305354 
Top-2 Accuracy = 0.624 
iter 18: [0.3493514656305354] 
setting: standardizev|rf 
Top-1 Accuracy = 0.3136392206159648 
Top-2 Accuracy = 0.44 
iter 19: [0.3136392206159648] 
setting: robustk|rf 
Top-1 Accuracy = 0.3226672761556483 
Top-2 Accuracy = 0.607 
iter 20: [0.3226672761556483] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.31369636020798813 
Top-2 Accuracy = 0.44 
iter 21: [0.31369636020798813] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.3872350151419919 
Top-2 Accuracy = 0.649 
iter 22: [0.3872350151419919] 
setting: robustc|rf 
Top-1 Accuracy = 0.3450088566367636 
Top-2 Accuracy = 0.613 
iter 23: [0.3450088566367636] 
setting: standardizes|rf 
Top-1 Accuracy = 0.38740643391806184 
Top-2 Accuracy = 0.649 
iter 24: [0.38740643391806184] 
setting: normalizea|rf 
Top-1 Accuracy = 0.322438717787555 
Top-2 Accuracy = 0.608 
iter 25: [0.322438717787555] 
setting: robustC|rf 
Top-1 Accuracy = 0.35163704931146794 
Top-2 Accuracy = 0.625 
iter 26: [0.35163704931146794] 
setting: normalizes|rf 
Top-1 Accuracy = 0.34198045825952805 
Top-2 Accuracy = 0.619 
iter 27: [0.34198045825952805] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.3489514884863722 
Top-2 Accuracy = 0.625 
iter 28: [0.3489514884863722] 
setting: robusti|rf 
Top-1 Accuracy = 0.34809439460602254 
Top-2 Accuracy = 0.619 
iter 29: [0.34809439460602254] 
Run # 8 
====== 
setting: robustv|rf 
Top-1 Accuracy = 0.3180389692017599 
Top-2 Accuracy = 0.444 
iter 0: [0.3180389692017599] 
setting: maxabst|rf 
Top-1 Accuracy = 0.32489572024455743 
Top-2 Accuracy = 0.607 
iter 1: [0.32489572024455743] 
setting: normalizee|rf 
Top-1 Accuracy = 0.34472315867664705 
Top-2 Accuracy = 0.62 
iter 2: [0.34472315867664705] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.3162676418490372 
Top-2 Accuracy = 0.442 
iter 3: [0.3162676418490372] 
setting: robustC|rf 
Top-1 Accuracy = 0.3867778984058054 
Top-2 Accuracy = 0.648 
iter 4: [0.3867778984058054] 
setting: robusth|rf 
Top-1 Accuracy = 0.38654934003771213 
Top-2 Accuracy = 0.648 
iter 5: [0.38654934003771213] 
setting: normalizey|rf 
Top-1 Accuracy = 0.3193531798182961 
Top-2 Accuracy = 0.606 
iter 6: [0.3193531798182961] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.3193531798182961 
Top-2 Accuracy = 0.606 
iter 7: [0.3193531798182961] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.3857493857493858 
Top-2 Accuracy = 0.648 
iter 8: [0.3857493857493858] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.3855208273812925 
Top-2 Accuracy = 0.648 
iter 9: [0.3855208273812925] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.3857493857493858 
Top-2 Accuracy = 0.648 
iter 10: [0.3857493857493858] 
setting: standardizez|rf 
Top-1 Accuracy = 0.31021084509456603 
Top-2 Accuracy = 0.438 
iter 11: [0.31021084509456603] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.3869493171818753 
Top-2 Accuracy = 0.651 
iter 12: [0.3869493171818753] 
setting: normalizek|rf 
Top-1 Accuracy = 0.3140963373521513 
Top-2 Accuracy = 0.436 
iter 13: [0.3140963373521513] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.38706359636592197 
Top-2 Accuracy = 0.651 
iter 14: [0.38706359636592197] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.38632078166961886 
Top-2 Accuracy = 0.65 
iter 15: [0.38632078166961886] 
setting: robustd|rf 
Top-1 Accuracy = 0.31169647448717214 
Top-2 Accuracy = 0.436 
iter 16: [0.31169647448717214] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.34438032112450717 
Top-2 Accuracy = 0.615 
iter 17: [0.34438032112450717] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.3869493171818753 
Top-2 Accuracy = 0.651 
iter 18: [0.3869493171818753] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.3869493171818753 
Top-2 Accuracy = 0.651 
iter 19: [0.3869493171818753] 
setting: standardizet|rf 
Top-1 Accuracy = 0.3869493171818753 
Top-2 Accuracy = 0.651 
iter 20: [0.3869493171818753] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.31969601737043596 
Top-2 Accuracy = 0.605 
iter 21: [0.31969601737043596] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.3871207359579453 
Top-2 Accuracy = 0.652 
iter 22: [0.3871207359579453] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.34220901662762127 
Top-2 Accuracy = 0.607 
iter 23: [0.34220901662762127] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.3156391063367808 
Top-2 Accuracy = 0.439 
iter 24: [0.3156391063367808] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.3214673447231587 
Top-2 Accuracy = 0.609 
iter 25: [0.3214673447231587] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.3404948288669219 
Top-2 Accuracy = 0.601 
iter 26: [0.3404948288669219] 
setting: robustf|rf 
Top-1 Accuracy = 0.3214673447231587 
Top-2 Accuracy = 0.609 
iter 27: [0.3214673447231587] 
setting: maxabsK|rf 
Top-1 Accuracy = 0.314953431232501 
Top-2 Accuracy = 0.44 
iter 28: [0.314953431232501] 
setting: robustk|rf 
Top-1 Accuracy = 0.3123250099994286 
Top-2 Accuracy = 0.437 
iter 29: [0.3123250099994286] 
Run # 9 
====== 
setting: minmaxM|rf 
Top-1 Accuracy = 0.31489629164047767 
Top-2 Accuracy = 0.44 
iter 0: [0.31489629164047767] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.34615164847722985 
Top-2 Accuracy = 0.617 
iter 1: [0.34615164847722985] 
setting: robustz|rf 
Top-1 Accuracy = 0.34683732358150965 
Top-2 Accuracy = 0.619 
iter 2: [0.34683732358150965] 
setting: standardizep|rf 
Top-1 Accuracy = 0.3214673447231587 
Top-2 Accuracy = 0.609 
iter 3: [0.3214673447231587] 
setting: robustS|rf 
Top-1 Accuracy = 0.3214673447231587 
Top-2 Accuracy = 0.609 
iter 4: [0.3214673447231587] 
setting: robusty|rf 
Top-1 Accuracy = 0.3867207588137821 
Top-2 Accuracy = 0.652 
iter 5: [0.3867207588137821] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.31038226387063594 
Top-2 Accuracy = 0.434 
iter 6: [0.31038226387063594] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.34832295297411575 
Top-2 Accuracy = 0.615 
iter 7: [0.34832295297411575] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.3072967259013771 
Top-2 Accuracy = 0.433 
iter 8: [0.3072967259013771] 
setting: standardizea|rf 
Top-1 Accuracy = 0.32003885492257583 
Top-2 Accuracy = 0.609 
iter 9: [0.32003885492257583] 
setting: standardizet|rf 
Top-1 Accuracy = 0.3868350379978287 
Top-2 Accuracy = 0.655 
iter 10: [0.3868350379978287] 
setting: robustP|rf 
Top-1 Accuracy = 0.3466087652134164 
Top-2 Accuracy = 0.615 
iter 11: [0.3466087652134164] 
setting: standardizey|rf 
Top-1 Accuracy = 0.32003885492257583 
Top-2 Accuracy = 0.609 
iter 12: [0.32003885492257583] 
setting: robusta|rf 
Top-1 Accuracy = 0.3094108908062396 
Top-2 Accuracy = 0.435 
iter 13: [0.3094108908062396] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.3475801382778127 
Top-2 Accuracy = 0.618 
iter 14: [0.3475801382778127] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.38403519798868635 
Top-2 Accuracy = 0.651 
iter 15: [0.38403519798868635] 
setting: standardizez|rf 
Top-1 Accuracy = 0.3868350379978287 
Top-2 Accuracy = 0.655 
iter 16: [0.3868350379978287] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.3110107993828924 
Top-2 Accuracy = 0.435 
iter 17: [0.3110107993828924] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.30895377407005314 
Top-2 Accuracy = 0.436 
iter 18: [0.30895377407005314] 
setting: robustp|rf 
Top-1 Accuracy = 0.32003885492257583 
Top-2 Accuracy = 0.609 
iter 19: [0.32003885492257583] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.32003885492257583 
Top-2 Accuracy = 0.609 
iter 20: [0.32003885492257583] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.3454088337809268 
Top-2 Accuracy = 0.61 
iter 21: [0.3454088337809268] 
setting: robusti|rf 
Top-1 Accuracy = 0.31129649734300896 
Top-2 Accuracy = 0.439 
iter 22: [0.31129649734300896] 
setting: normalizey|rf 
Top-1 Accuracy = 0.3092394720301697 
Top-2 Accuracy = 0.436 
iter 23: [0.3092394720301697] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.38666361922175874 
Top-2 Accuracy = 0.655 
iter 24: [0.38666361922175874] 
setting: robustV|rf 
Top-1 Accuracy = 0.38666361922175874 
Top-2 Accuracy = 0.655 
iter 25: [0.38666361922175874] 
setting: normalizev|rf 
Top-1 Accuracy = 0.34592309010913663 
Top-2 Accuracy = 0.623 
iter 26: [0.34592309010913663] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.339237757842409 
Top-2 Accuracy = 0.6 
iter 27: [0.339237757842409] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.3119250328552654 
Top-2 Accuracy = 0.439 
iter 28: [0.3119250328552654] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.31826752756985316 
Top-2 Accuracy = 0.61 
iter 29: [0.31826752756985316] 
Run # 10 
======= 
setting: maxabsv|rf 
Top-1 Accuracy = 0.31112507856693905 
Top-2 Accuracy = 0.438 
iter 0: [0.31112507856693905] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.34689446317353295 
Top-2 Accuracy = 0.621 
iter 1: [0.34689446317353295] 
setting: maxabse|rf 
Top-1 Accuracy = 0.3441517627564139 
Top-2 Accuracy = 0.615 
iter 2: [0.3441517627564139] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.3846065939089195 
Top-2 Accuracy = 0.652 
iter 3: [0.3846065939089195] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.34683732358150965 
Top-2 Accuracy = 0.614 
iter 4: [0.34683732358150965] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.3130678246957317 
Top-2 Accuracy = 0.439 
iter 5: [0.3130678246957317] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.34592309010913663 
Top-2 Accuracy = 0.62 
iter 6: [0.34592309010913663] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.38660647962973543 
Top-2 Accuracy = 0.653 
iter 7: [0.38660647962973543] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.3860350837095023 
Top-2 Accuracy = 0.652 
iter 8: [0.3860350837095023] 
setting: robustq|rf 
Top-1 Accuracy = 0.31026798468658934 
Top-2 Accuracy = 0.436 
iter 9: [0.31026798468658934] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.3858065253414091 
Top-2 Accuracy = 0.652 
iter 10: [0.3858065253414091] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.3118107536712188 
Top-2 Accuracy = 0.438 
iter 11: [0.3118107536712188] 
setting: normalizek|rf 
Top-1 Accuracy = 0.34580881092508997 
Top-2 Accuracy = 0.619 
iter 12: [0.34580881092508997] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.31129649734300896 
Top-2 Accuracy = 0.439 
iter 13: [0.31129649734300896] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.309468030398263 
Top-2 Accuracy = 0.437 
iter 14: [0.309468030398263] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.38506371064510597 
Top-2 Accuracy = 0.652 
iter 15: [0.38506371064510597] 
setting: robustL|rf 
Top-1 Accuracy = 0.32169590309125196 
Top-2 Accuracy = 0.608 
iter 16: [0.32169590309125196] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.3854636877892692 
Top-2 Accuracy = 0.651 
iter 17: [0.3854636877892692] 
setting: robuste|rf 
Top-1 Accuracy = 0.3128392663276384 
Top-2 Accuracy = 0.438 
iter 18: [0.3128392663276384] 
setting: maxabst|rf 
Top-1 Accuracy = 0.30912519284612305 
Top-2 Accuracy = 0.437 
iter 19: [0.30912519284612305] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.34472315867664705 
Top-2 Accuracy = 0.622 
iter 20: [0.34472315867664705] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.3858636649334324 
Top-2 Accuracy = 0.652 
iter 21: [0.3858636649334324] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.309468030398263 
Top-2 Accuracy = 0.435 
iter 22: [0.309468030398263] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.3335237986400777 
Top-2 Accuracy = 0.614 
iter 23: [0.3335237986400777] 
setting: robustw|rf 
Top-1 Accuracy = 0.3335237986400777 
Top-2 Accuracy = 0.614 
iter 24: [0.3335237986400777] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.3857493857493858 
Top-2 Accuracy = 0.649 
iter 25: [0.3857493857493858] 
setting: standardizem|rf 
Top-1 Accuracy = 0.3860350837095023 
Top-2 Accuracy = 0.65 
iter 26: [0.3860350837095023] 
setting: standardizev|rf 
Top-1 Accuracy = 0.3335237986400777 
Top-2 Accuracy = 0.614 
iter 27: [0.3335237986400777] 
setting: standardizee|rf 
Top-1 Accuracy = 0.3444374607165305 
Top-2 Accuracy = 0.619 
iter 28: [0.3444374607165305] 
setting: robustC|rf 
Top-1 Accuracy = 0.3464373464373464 
Top-2 Accuracy = 0.617 
iter 29: [0.3464373464373464] 
Run # 11 
======= 
setting: standardizeI|rf 
Top-1 Accuracy = 0.3335237986400777 
Top-2 Accuracy = 0.614 
iter 0: [0.3335237986400777] 
setting: robustF|rf 
Top-1 Accuracy = 0.3093537512142163 
Top-2 Accuracy = 0.436 
iter 1: [0.3093537512142163] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.34563739214902006 
Top-2 Accuracy = 0.616 
iter 2: [0.34563739214902006] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.3820924518598937 
Top-2 Accuracy = 0.646 
iter 3: [0.3820924518598937] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.35077995543111823 
Top-2 Accuracy = 0.622 
iter 4: [0.35077995543111823] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.3493514656305354 
Top-2 Accuracy = 0.621 
iter 5: [0.3493514656305354] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.34466601908462374 
Top-2 Accuracy = 0.614 
iter 6: [0.34466601908462374] 
setting: standardizem|rf 
Top-1 Accuracy = 0.3474658590937661 
Top-2 Accuracy = 0.62 
iter 7: [0.3474658590937661] 
setting: standardizer|rf 
Top-1 Accuracy = 0.3877492714702017 
Top-2 Accuracy = 0.652 
iter 8: [0.3877492714702017] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.3277526998457231 
Top-2 Accuracy = 0.609 
iter 9: [0.3277526998457231] 
setting: robustB|rf 
Top-1 Accuracy = 0.3163819210330838 
Top-2 Accuracy = 0.443 
iter 10: [0.3163819210330838] 
setting: robustE|rf 
Top-1 Accuracy = 0.3877492714702017 
Top-2 Accuracy = 0.652 
iter 11: [0.3877492714702017] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.3277526998457231 
Top-2 Accuracy = 0.609 
iter 12: [0.3277526998457231] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.312953545511685 
Top-2 Accuracy = 0.44 
iter 13: [0.312953545511685] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.38397805839666305 
Top-2 Accuracy = 0.648 
iter 14: [0.38397805839666305] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.38397805839666305 
Top-2 Accuracy = 0.648 
iter 15: [0.38397805839666305] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.3277526998457231 
Top-2 Accuracy = 0.609 
iter 16: [0.3277526998457231] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.3140963373521513 
Top-2 Accuracy = 0.439 
iter 17: [0.3140963373521513] 
setting: robustI|rf 
Top-1 Accuracy = 0.305639677732701 
Top-2 Accuracy = 0.43 
iter 18: [0.305639677732701] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.3497514427746986 
Top-2 Accuracy = 0.622 
iter 19: [0.3497514427746986] 
setting: normalizer|rf 
Top-1 Accuracy = 0.3454659733729501 
Top-2 Accuracy = 0.615 
iter 20: [0.3454659733729501] 
setting: maxabse|rf 
Top-1 Accuracy = 0.32695274555739673 
Top-2 Accuracy = 0.611 
iter 21: [0.32695274555739673] 
setting: standardizep|rf 
Top-1 Accuracy = 0.3083252385577967 
Top-2 Accuracy = 0.436 
iter 22: [0.3083252385577967] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.31741043368950345 
Top-2 Accuracy = 0.444 
iter 23: [0.31741043368950345] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.34249471458773784 
Top-2 Accuracy = 0.6 
iter 24: [0.34249471458773784] 
setting: normalizep|rf 
Top-1 Accuracy = 0.32655276841323355 
Top-2 Accuracy = 0.61 
iter 25: [0.32655276841323355] 
setting: robustv|rf 
Top-1 Accuracy = 0.3452945545968802 
Top-2 Accuracy = 0.624 
iter 26: [0.3452945545968802] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.32655276841323355 
Top-2 Accuracy = 0.61 
iter 27: [0.32655276841323355] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.32655276841323355 
Top-2 Accuracy = 0.61 
iter 28: [0.32655276841323355] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.32655276841323355 
Top-2 Accuracy = 0.61 
iter 29: [0.32655276841323355] 
Run # 12 
======= 
setting: maxabsE|rf 
Top-1 Accuracy = 0.3871778755499686 
Top-2 Accuracy = 0.651 
iter 0: [0.3871778755499686] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.38540654819724585 
Top-2 Accuracy = 0.648 
iter 1: [0.38540654819724585] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.38500657105308267 
Top-2 Accuracy = 0.648 
iter 2: [0.38500657105308267] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.338323524370036 
Top-2 Accuracy = 0.596 
iter 3: [0.338323524370036] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.3858636649334324 
Top-2 Accuracy = 0.651 
iter 4: [0.3858636649334324] 
setting: standardizel|rf 
Top-1 Accuracy = 0.3119250328552654 
Top-2 Accuracy = 0.44 
iter 5: [0.3119250328552654] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.3444946003085538 
Top-2 Accuracy = 0.616 
iter 6: [0.3444946003085538] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.3452374150048569 
Top-2 Accuracy = 0.616 
iter 7: [0.3452374150048569] 
setting: robustB|rf 
Top-1 Accuracy = 0.38529226901319924 
Top-2 Accuracy = 0.65 
iter 8: [0.38529226901319924] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.3449517170447403 
Top-2 Accuracy = 0.607 
iter 9: [0.3449517170447403] 
setting: robustc|rf 
Top-1 Accuracy = 0.3143248957202446 
Top-2 Accuracy = 0.441 
iter 10: [0.3143248957202446] 
setting: robusts|rf 
Top-1 Accuracy = 0.321353065539112 
Top-2 Accuracy = 0.607 
iter 11: [0.321353065539112] 
setting: maxabso|rf 
Top-1 Accuracy = 0.33872350151419917 
Top-2 Accuracy = 0.599 
iter 12: [0.33872350151419917] 
setting: robustA|rf 
Top-1 Accuracy = 0.3855779669733158 
Top-2 Accuracy = 0.65 
iter 13: [0.3855779669733158] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.3486086509342323 
Top-2 Accuracy = 0.615 
iter 14: [0.3486086509342323] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.3237529284040912 
Top-2 Accuracy = 0.61 
iter 15: [0.3237529284040912] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.3856351065653391 
Top-2 Accuracy = 0.654 
iter 16: [0.3856351065653391] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.38980629678304096 
Top-2 Accuracy = 0.653 
iter 17: [0.38980629678304096] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.3237529284040912 
Top-2 Accuracy = 0.61 
iter 18: [0.3237529284040912] 
setting: maxabss|rf 
Top-1 Accuracy = 0.3237529284040912 
Top-2 Accuracy = 0.61 
iter 19: [0.3237529284040912] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.3810067996114508 
Top-2 Accuracy = 0.645 
iter 20: [0.3810067996114508] 
setting: robustN|rf 
Top-1 Accuracy = 0.30889663447802984 
Top-2 Accuracy = 0.435 
iter 21: [0.30889663447802984] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.38386377921261644 
Top-2 Accuracy = 0.648 
iter 22: [0.38386377921261644] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.3263242100451403 
Top-2 Accuracy = 0.611 
iter 23: [0.3263242100451403] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.3263242100451403 
Top-2 Accuracy = 0.611 
iter 24: [0.3263242100451403] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.34940860522255873 
Top-2 Accuracy = 0.626 
iter 25: [0.34940860522255873] 
setting: robustC|rf 
Top-1 Accuracy = 0.34906576767041886 
Top-2 Accuracy = 0.623 
iter 26: [0.34906576767041886] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.38706359636592197 
Top-2 Accuracy = 0.654 
iter 27: [0.38706359636592197] 
setting: normalizei|rf 
Top-1 Accuracy = 0.385977944117479 
Top-2 Accuracy = 0.652 
iter 28: [0.385977944117479] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.31169647448717214 
Top-2 Accuracy = 0.438 
iter 29: [0.31169647448717214] 
Run # 13 
======= 
setting: maxabso|rf 
Top-1 Accuracy = 0.313124964287755 
Top-2 Accuracy = 0.438 
iter 0: [0.313124964287755] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.31386777898405804 
Top-2 Accuracy = 0.44 
iter 1: [0.31386777898405804] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.344894577452717 
Top-2 Accuracy = 0.619 
iter 2: [0.344894577452717] 
setting: robustH|rf 
Top-1 Accuracy = 0.32329581166790466 
Top-2 Accuracy = 0.607 
iter 3: [0.32329581166790466] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.3859208045254557 
Top-2 Accuracy = 0.651 
iter 4: [0.3859208045254557] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.32329581166790466 
Top-2 Accuracy = 0.607 
iter 5: [0.32329581166790466] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.3858636649334324 
Top-2 Accuracy = 0.652 
iter 6: [0.3858636649334324] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.32329581166790466 
Top-2 Accuracy = 0.607 
iter 7: [0.32329581166790466] 
setting: normalizek|rf 
Top-1 Accuracy = 0.38534940860522254 
Top-2 Accuracy = 0.652 
iter 8: [0.38534940860522254] 
setting: robustP|rf 
Top-1 Accuracy = 0.31238214959145194 
Top-2 Accuracy = 0.439 
iter 9: [0.31238214959145194] 
setting: robusto|rf 
Top-1 Accuracy = 0.347637277869836 
Top-2 Accuracy = 0.62 
iter 10: [0.347637277869836] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.3136392206159648 
Top-2 Accuracy = 0.44 
iter 11: [0.3136392206159648] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.34432318153248387 
Top-2 Accuracy = 0.619 
iter 12: [0.34432318153248387] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.33135249414319184 
Top-2 Accuracy = 0.61 
iter 13: [0.33135249414319184] 
setting: normalizev|rf 
Top-1 Accuracy = 0.35043711787897835 
Top-2 Accuracy = 0.621 
iter 14: [0.35043711787897835] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.3087252157019599 
Top-2 Accuracy = 0.436 
iter 15: [0.3087252157019599] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.30643963202102736 
Top-2 Accuracy = 0.433 
iter 16: [0.30643963202102736] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.3163247814410605 
Top-2 Accuracy = 0.441 
iter 17: [0.3163247814410605] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.33015256271070226 
Top-2 Accuracy = 0.615 
iter 18: [0.33015256271070226] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.3476944174618593 
Top-2 Accuracy = 0.609 
iter 19: [0.3476944174618593] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.34255185417976114 
Top-2 Accuracy = 0.602 
iter 20: [0.34255185417976114] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.3856351065653391 
Top-2 Accuracy = 0.65 
iter 21: [0.3856351065653391] 
setting: robustf|rf 
Top-1 Accuracy = 0.3501514199188618 
Top-2 Accuracy = 0.625 
iter 22: [0.3501514199188618] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.3084966573338666 
Top-2 Accuracy = 0.435 
iter 23: [0.3084966573338666] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.34735157990971943 
Top-2 Accuracy = 0.616 
iter 24: [0.34735157990971943] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.38534940860522254 
Top-2 Accuracy = 0.65 
iter 25: [0.38534940860522254] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.385977944117479 
Top-2 Accuracy = 0.651 
iter 26: [0.385977944117479] 
setting: normalizer|rf 
Top-1 Accuracy = 0.31112507856693905 
Top-2 Accuracy = 0.437 
iter 27: [0.31112507856693905] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.329924004342609 
Top-2 Accuracy = 0.614 
iter 28: [0.329924004342609] 
setting: robustV|rf 
Top-1 Accuracy = 0.38506371064510597 
Top-2 Accuracy = 0.65 
iter 29: [0.38506371064510597] 
Run # 14 
======= 
setting: normalizeG|rf 
Top-1 Accuracy = 0.3264384892291869 
Top-2 Accuracy = 0.612 
iter 0: [0.3264384892291869] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.3128392663276384 
Top-2 Accuracy = 0.44 
iter 1: [0.3128392663276384] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.34472315867664705 
Top-2 Accuracy = 0.612 
iter 2: [0.34472315867664705] 
setting: normalizel|rf 
Top-1 Accuracy = 0.34426604194046057 
Top-2 Accuracy = 0.621 
iter 3: [0.34426604194046057] 
setting: standardizee|rf 
Top-1 Accuracy = 0.3225529969716016 
Top-2 Accuracy = 0.612 
iter 4: [0.3225529969716016] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.3078681218216102 
Top-2 Accuracy = 0.434 
iter 5: [0.3078681218216102] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.31346780183989487 
Top-2 Accuracy = 0.441 
iter 6: [0.31346780183989487] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.3489514884863722 
Top-2 Accuracy = 0.622 
iter 7: [0.3489514884863722] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.386892177589852 
Top-2 Accuracy = 0.652 
iter 8: [0.386892177589852] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.32489572024455743 
Top-2 Accuracy = 0.612 
iter 9: [0.32489572024455743] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.30912519284612305 
Top-2 Accuracy = 0.434 
iter 10: [0.30912519284612305] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.34780869664590597 
Top-2 Accuracy = 0.622 
iter 11: [0.34780869664590597] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.386892177589852 
Top-2 Accuracy = 0.652 
iter 12: [0.386892177589852] 
setting: robustZ|rf 
Top-1 Accuracy = 0.3502085595108851 
Top-2 Accuracy = 0.622 
iter 13: [0.3502085595108851] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.3440946231643906 
Top-2 Accuracy = 0.618 
iter 14: [0.3440946231643906] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.34575167133306667 
Top-2 Accuracy = 0.62 
iter 15: [0.34575167133306667] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.38666361922175874 
Top-2 Accuracy = 0.653 
iter 16: [0.38666361922175874] 
setting: robusty|rf 
Top-1 Accuracy = 0.3867207588137821 
Top-2 Accuracy = 0.652 
iter 17: [0.3867207588137821] 
setting: standardizew|rf 
Top-1 Accuracy = 0.3238672075881378 
Top-2 Accuracy = 0.607 
iter 18: [0.3238672075881378] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.3479801154219759 
Top-2 Accuracy = 0.623 
iter 19: [0.3479801154219759] 
setting: standardizer|rf 
Top-1 Accuracy = 0.30809668018970343 
Top-2 Accuracy = 0.436 
iter 20: [0.30809668018970343] 
setting: robusts|rf 
Top-1 Accuracy = 0.3114679161190789 
Top-2 Accuracy = 0.438 
iter 21: [0.3114679161190789] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.3228386949317182 
Top-2 Accuracy = 0.607 
iter 22: [0.3228386949317182] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.3155248271527341 
Top-2 Accuracy = 0.441 
iter 23: [0.3155248271527341] 
setting: robustV|rf 
Top-1 Accuracy = 0.3488943488943489 
Top-2 Accuracy = 0.624 
iter 24: [0.3488943488943489] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.3108393806068225 
Top-2 Accuracy = 0.438 
iter 25: [0.3108393806068225] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.3515227701274213 
Top-2 Accuracy = 0.624 
iter 26: [0.3515227701274213] 
setting: robustw|rf 
Top-1 Accuracy = 0.3228386949317182 
Top-2 Accuracy = 0.607 
iter 27: [0.3228386949317182] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.3122678704074053 
Top-2 Accuracy = 0.438 
iter 28: [0.3122678704074053] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.3869493171818753 
Top-2 Accuracy = 0.652 
iter 29: [0.3869493171818753] 
Run # 15 
======= 
setting: maxabsB|rf 
Top-1 Accuracy = 0.34952288440660534 
Top-2 Accuracy = 0.625 
iter 0: [0.34952288440660534] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.31152505571110223 
Top-2 Accuracy = 0.437 
iter 1: [0.31152505571110223] 
setting: robustb|rf 
Top-1 Accuracy = 0.38740643391806184 
Top-2 Accuracy = 0.653 
iter 2: [0.38740643391806184] 
setting: normalizei|rf 
Top-1 Accuracy = 0.3859208045254557 
Top-2 Accuracy = 0.653 
iter 3: [0.3859208045254557] 
setting: robustJ|rf 
Top-1 Accuracy = 0.30815381978172673 
Top-2 Accuracy = 0.433 
iter 4: [0.30815381978172673] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.38614936289354895 
Top-2 Accuracy = 0.653 
iter 5: [0.38614936289354895] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.3511799325752814 
Top-2 Accuracy = 0.622 
iter 6: [0.3511799325752814] 
setting: standardizep|rf 
Top-1 Accuracy = 0.3454659733729501 
Top-2 Accuracy = 0.618 
iter 7: [0.3454659733729501] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.32580995371693044 
Top-2 Accuracy = 0.606 
iter 8: [0.32580995371693044] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.3436375064282041 
Top-2 Accuracy = 0.599 
iter 9: [0.3436375064282041] 
setting: robustN|rf 
Top-1 Accuracy = 0.3864350608536655 
Top-2 Accuracy = 0.653 
iter 10: [0.3864350608536655] 
setting: standardizes|rf 
Top-1 Accuracy = 0.38620650248557226 
Top-2 Accuracy = 0.653 
iter 11: [0.38620650248557226] 
setting: robustW|rf 
Top-1 Accuracy = 0.38620650248557226 
Top-2 Accuracy = 0.653 
iter 12: [0.38620650248557226] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.38626364207759556 
Top-2 Accuracy = 0.652 
iter 13: [0.38626364207759556] 
setting: standardizet|rf 
Top-1 Accuracy = 0.3860350837095023 
Top-2 Accuracy = 0.653 
iter 14: [0.3860350837095023] 
setting: robustU|rf 
Top-1 Accuracy = 0.32580995371693044 
Top-2 Accuracy = 0.606 
iter 15: [0.32580995371693044] 
setting: maxabse|rf 
Top-1 Accuracy = 0.3415233415233415 
Top-2 Accuracy = 0.603 
iter 16: [0.3415233415233415] 
setting: robustw|rf 
Top-1 Accuracy = 0.32580995371693044 
Top-2 Accuracy = 0.606 
iter 17: [0.32580995371693044] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.3475229986857894 
Top-2 Accuracy = 0.617 
iter 18: [0.3475229986857894] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.32580995371693044 
Top-2 Accuracy = 0.606 
iter 19: [0.32580995371693044] 
setting: robustQ|rf 
Top-1 Accuracy = 0.34386606479629733 
Top-2 Accuracy = 0.614 
iter 20: [0.34386606479629733] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.3860350837095023 
Top-2 Accuracy = 0.653 
iter 21: [0.3860350837095023] 
setting: standardizey|rf 
Top-1 Accuracy = 0.31255356836752185 
Top-2 Accuracy = 0.439 
iter 22: [0.31255356836752185] 
setting: robustz|rf 
Top-1 Accuracy = 0.38609222330152565 
Top-2 Accuracy = 0.653 
iter 23: [0.38609222330152565] 
setting: robusti|rf 
Top-1 Accuracy = 0.3451231358208102 
Top-2 Accuracy = 0.622 
iter 24: [0.3451231358208102] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.38477801268498946 
Top-2 Accuracy = 0.649 
iter 25: [0.38477801268498946] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.38500657105308267 
Top-2 Accuracy = 0.651 
iter 26: [0.38500657105308267] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.3297525855665391 
Top-2 Accuracy = 0.608 
iter 27: [0.3297525855665391] 
setting: robustq|rf 
Top-1 Accuracy = 0.3297525855665391 
Top-2 Accuracy = 0.608 
iter 28: [0.3297525855665391] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.309468030398263 
Top-2 Accuracy = 0.438 
iter 29: [0.309468030398263] 
Run # 16 
======= 
setting: normalizeq|rf 
Top-1 Accuracy = 0.3330095423118679 
Top-2 Accuracy = 0.612 
iter 0: [0.3330095423118679] 
setting: normalizex|rf 
Top-1 Accuracy = 0.34780869664590597 
Top-2 Accuracy = 0.616 
iter 1: [0.34780869664590597] 
setting: robustZ|rf 
Top-1 Accuracy = 0.38797782983829493 
Top-2 Accuracy = 0.651 
iter 2: [0.38797782983829493] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.3108965201988458 
Top-2 Accuracy = 0.437 
iter 3: [0.3108965201988458] 
setting: normalizey|rf 
Top-1 Accuracy = 0.38506371064510597 
Top-2 Accuracy = 0.646 
iter 4: [0.38506371064510597] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.31203931203931207 
Top-2 Accuracy = 0.439 
iter 5: [0.31203931203931207] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.33186675047140163 
Top-2 Accuracy = 0.612 
iter 6: [0.33186675047140163] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.33015256271070226 
Top-2 Accuracy = 0.611 
iter 7: [0.33015256271070226] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.34929432603851207 
Top-2 Accuracy = 0.617 
iter 8: [0.34929432603851207] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.30889663447802984 
Top-2 Accuracy = 0.434 
iter 9: [0.30889663447802984] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.3475229986857894 
Top-2 Accuracy = 0.619 
iter 10: [0.3475229986857894] 
setting: robustz|rf 
Top-1 Accuracy = 0.3846065939089195 
Top-2 Accuracy = 0.651 
iter 11: [0.3846065939089195] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.33015256271070226 
Top-2 Accuracy = 0.611 
iter 12: [0.33015256271070226] 
setting: robustm|rf 
Top-1 Accuracy = 0.33015256271070226 
Top-2 Accuracy = 0.611 
iter 13: [0.33015256271070226] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.3426661333638078 
Top-2 Accuracy = 0.61 
iter 14: [0.3426661333638078] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.33152391291926175 
Top-2 Accuracy = 0.61 
iter 15: [0.33152391291926175] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.33152391291926175 
Top-2 Accuracy = 0.61 
iter 16: [0.33152391291926175] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.33152391291926175 
Top-2 Accuracy = 0.61 
iter 17: [0.33152391291926175] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.3499228615507685 
Top-2 Accuracy = 0.626 
iter 18: [0.3499228615507685] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.34872293011827893 
Top-2 Accuracy = 0.622 
iter 19: [0.34872293011827893] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.33152391291926175 
Top-2 Accuracy = 0.61 
iter 20: [0.33152391291926175] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.33152391291926175 
Top-2 Accuracy = 0.61 
iter 21: [0.33152391291926175] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.312953545511685 
Top-2 Accuracy = 0.439 
iter 22: [0.312953545511685] 
setting: normalizez|rf 
Top-1 Accuracy = 0.3119250328552654 
Top-2 Accuracy = 0.437 
iter 23: [0.3119250328552654] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.3084395177418433 
Top-2 Accuracy = 0.437 
iter 24: [0.3084395177418433] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.3858636649334324 
Top-2 Accuracy = 0.652 
iter 25: [0.3858636649334324] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.3854636877892692 
Top-2 Accuracy = 0.652 
iter 26: [0.3854636877892692] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.3307810982229587 
Top-2 Accuracy = 0.611 
iter 27: [0.3307810982229587] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.3130106851037084 
Top-2 Accuracy = 0.438 
iter 28: [0.3130106851037084] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.3123250099994286 
Top-2 Accuracy = 0.438 
iter 29: [0.3123250099994286] 
Run # 17 
======= 
setting: standardizew|rf 
Top-1 Accuracy = 0.312953545511685 
Top-2 Accuracy = 0.439 
iter 0: [0.312953545511685] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.3855208273812925 
Top-2 Accuracy = 0.652 
iter 1: [0.3855208273812925] 
setting: robustu|rf 
Top-1 Accuracy = 0.3475229986857894 
Top-2 Accuracy = 0.622 
iter 2: [0.3475229986857894] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.3307810982229587 
Top-2 Accuracy = 0.611 
iter 3: [0.3307810982229587] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.3307810982229587 
Top-2 Accuracy = 0.611 
iter 4: [0.3307810982229587] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.3472373007256728 
Top-2 Accuracy = 0.622 
iter 5: [0.3472373007256728] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.34615164847722985 
Top-2 Accuracy = 0.617 
iter 6: [0.34615164847722985] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.3307810982229587 
Top-2 Accuracy = 0.611 
iter 7: [0.3307810982229587] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.3858065253414091 
Top-2 Accuracy = 0.652 
iter 8: [0.3858065253414091] 
setting: robustU|rf 
Top-1 Accuracy = 0.3307810982229587 
Top-2 Accuracy = 0.611 
iter 9: [0.3307810982229587] 
setting: robustf|rf 
Top-1 Accuracy = 0.3130106851037084 
Top-2 Accuracy = 0.438 
iter 10: [0.3130106851037084] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.3108393806068225 
Top-2 Accuracy = 0.433 
iter 11: [0.3108393806068225] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.38517798982915263 
Top-2 Accuracy = 0.65 
iter 12: [0.38517798982915263] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.3856351065653391 
Top-2 Accuracy = 0.652 
iter 13: [0.3856351065653391] 
setting: standardizet|rf 
Top-1 Accuracy = 0.3855779669733158 
Top-2 Accuracy = 0.652 
iter 14: [0.3855779669733158] 
setting: robustL|rf 
Top-1 Accuracy = 0.34598022970115994 
Top-2 Accuracy = 0.621 
iter 15: [0.34598022970115994] 
setting: standardizeh|rf 
Top-1 Accuracy = 0.38534940860522254 
Top-2 Accuracy = 0.652 
iter 16: [0.38534940860522254] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.3297525855665391 
Top-2 Accuracy = 0.609 
iter 17: [0.3297525855665391] 
setting: robustX|rf 
Top-1 Accuracy = 0.3297525855665391 
Top-2 Accuracy = 0.609 
iter 18: [0.3297525855665391] 
setting: maxabsK|rf 
Top-1 Accuracy = 0.3297525855665391 
Top-2 Accuracy = 0.609 
iter 19: [0.3297525855665391] 
setting: standardizel|rf 
Top-1 Accuracy = 0.3297525855665391 
Top-2 Accuracy = 0.609 
iter 20: [0.3297525855665391] 
setting: robusty|rf 
Top-1 Accuracy = 0.31558196674475747 
Top-2 Accuracy = 0.441 
iter 21: [0.31558196674475747] 
setting: normalizei|rf 
Top-1 Accuracy = 0.34569453174104336 
Top-2 Accuracy = 0.616 
iter 22: [0.34569453174104336] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.31203931203931207 
Top-2 Accuracy = 0.601 
iter 23: [0.31203931203931207] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.31243928918347524 
Top-2 Accuracy = 0.438 
iter 24: [0.31243928918347524] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.34809439460602254 
Top-2 Accuracy = 0.618 
iter 25: [0.34809439460602254] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.31386777898405804 
Top-2 Accuracy = 0.44 
iter 26: [0.31386777898405804] 
setting: robusts|rf 
Top-1 Accuracy = 0.31203931203931207 
Top-2 Accuracy = 0.601 
iter 27: [0.31203931203931207] 
setting: standardizee|rf 
Top-1 Accuracy = 0.31203931203931207 
Top-2 Accuracy = 0.601 
iter 28: [0.31203931203931207] 
setting: normalizex|rf 
Top-1 Accuracy = 0.31832466716187646 
Top-2 Accuracy = 0.605 
iter 29: [0.31832466716187646] 
Run # 18 
======= 
setting: normalizey|rf 
Top-1 Accuracy = 0.3475229986857894 
Top-2 Accuracy = 0.621 
iter 0: [0.3475229986857894] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.3857493857493858 
Top-2 Accuracy = 0.652 
iter 1: [0.3857493857493858] 
setting: robustR|rf 
Top-1 Accuracy = 0.3854636877892692 
Top-2 Accuracy = 0.652 
iter 2: [0.3854636877892692] 
setting: robustQ|rf 
Top-1 Accuracy = 0.3857493857493858 
Top-2 Accuracy = 0.653 
iter 3: [0.3857493857493858] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.3464944860293698 
Top-2 Accuracy = 0.616 
iter 4: [0.3464944860293698] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.31169647448717214 
Top-2 Accuracy = 0.438 
iter 5: [0.31169647448717214] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.31238214959145194 
Top-2 Accuracy = 0.437 
iter 6: [0.31238214959145194] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.3084966573338666 
Top-2 Accuracy = 0.435 
iter 7: [0.3084966573338666] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.386892177589852 
Top-2 Accuracy = 0.651 
iter 8: [0.386892177589852] 
setting: maxabse|rf 
Top-1 Accuracy = 0.3878635506542483 
Top-2 Accuracy = 0.652 
iter 9: [0.3878635506542483] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.3466659048054397 
Top-2 Accuracy = 0.617 
iter 10: [0.3466659048054397] 
setting: normalizew|rf 
Top-1 Accuracy = 0.3476944174618593 
Top-2 Accuracy = 0.62 
iter 11: [0.3476944174618593] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.30655391120507397 
Top-2 Accuracy = 0.434 
iter 12: [0.30655391120507397] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.3846065939089195 
Top-2 Accuracy = 0.649 
iter 13: [0.3846065939089195] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.32786697902976975 
Top-2 Accuracy = 0.609 
iter 14: [0.32786697902976975] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.3415233415233415 
Top-2 Accuracy = 0.613 
iter 15: [0.3415233415233415] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.32786697902976975 
Top-2 Accuracy = 0.61 
iter 16: [0.32786697902976975] 
setting: robustE|rf 
Top-1 Accuracy = 0.30986800754242616 
Top-2 Accuracy = 0.437 
iter 17: [0.30986800754242616] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.32786697902976975 
Top-2 Accuracy = 0.61 
iter 18: [0.32786697902976975] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.32786697902976975 
Top-2 Accuracy = 0.61 
iter 19: [0.32786697902976975] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.32786697902976975 
Top-2 Accuracy = 0.61 
iter 20: [0.32786697902976975] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.38477801268498946 
Top-2 Accuracy = 0.651 
iter 21: [0.38477801268498946] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.32786697902976975 
Top-2 Accuracy = 0.61 
iter 22: [0.32786697902976975] 
setting: normalizet|rf 
Top-1 Accuracy = 0.3083252385577967 
Top-2 Accuracy = 0.436 
iter 23: [0.3083252385577967] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.3092394720301697 
Top-2 Accuracy = 0.435 
iter 24: [0.3092394720301697] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.32438146391634765 
Top-2 Accuracy = 0.609 
iter 25: [0.32438146391634765] 
setting: robusts|rf 
Top-1 Accuracy = 0.32438146391634765 
Top-2 Accuracy = 0.609 
iter 26: [0.32438146391634765] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.30672532998114393 
Top-2 Accuracy = 0.434 
iter 27: [0.30672532998114393] 
setting: robustn|rf 
Top-1 Accuracy = 0.34735157990971943 
Top-2 Accuracy = 0.621 
iter 28: [0.34735157990971943] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.38134963716359066 
Top-2 Accuracy = 0.643 
iter 29: [0.38134963716359066] 
Run # 19 
======= 
setting: maxabsR|rf 
Top-1 Accuracy = 0.304725444260328 
Top-2 Accuracy = 0.431 
iter 0: [0.304725444260328] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.34592309010913663 
Top-2 Accuracy = 0.614 
iter 1: [0.34592309010913663] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.3392948974344323 
Top-2 Accuracy = 0.608 
iter 2: [0.3392948974344323] 
setting: robustg|rf 
Top-1 Accuracy = 0.343066110507971 
Top-2 Accuracy = 0.607 
iter 3: [0.343066110507971] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.3073538654934004 
Top-2 Accuracy = 0.434 
iter 4: [0.3073538654934004] 
setting: normalizey|rf 
Top-1 Accuracy = 0.3309525169990286 
Top-2 Accuracy = 0.612 
iter 5: [0.3309525169990286] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.3471801611336495 
Top-2 Accuracy = 0.622 
iter 6: [0.3471801611336495] 
setting: standardizew|rf 
Top-1 Accuracy = 0.3846637335009428 
Top-2 Accuracy = 0.648 
iter 7: [0.3846637335009428] 
setting: robustK|rf 
Top-1 Accuracy = 0.3846637335009428 
Top-2 Accuracy = 0.648 
iter 8: [0.3846637335009428] 
setting: normalizef|rf 
Top-1 Accuracy = 0.3391806182503857 
Top-2 Accuracy = 0.61 
iter 9: [0.3391806182503857] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.3127821267356151 
Top-2 Accuracy = 0.44 
iter 10: [0.3127821267356151] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.3143248957202446 
Top-2 Accuracy = 0.442 
iter 11: [0.3143248957202446] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.34380892520427403 
Top-2 Accuracy = 0.612 
iter 12: [0.34380892520427403] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.30838237814982 
Top-2 Accuracy = 0.436 
iter 13: [0.30838237814982] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.3740929089766299 
Top-2 Accuracy = 0.608 
iter 14: [0.3740929089766299] 
setting: robustI|rf 
Top-1 Accuracy = 0.33032398148677217 
Top-2 Accuracy = 0.612 
iter 15: [0.33032398148677217] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.312210730815382 
Top-2 Accuracy = 0.439 
iter 16: [0.312210730815382] 
setting: robustf|rf 
Top-1 Accuracy = 0.3829495457402434 
Top-2 Accuracy = 0.648 
iter 17: [0.3829495457402434] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.3479801154219759 
Top-2 Accuracy = 0.617 
iter 18: [0.3479801154219759] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.3322667276155648 
Top-2 Accuracy = 0.613 
iter 19: [0.3322667276155648] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.3836923604365465 
Top-2 Accuracy = 0.65 
iter 20: [0.3836923604365465] 
setting: robusto|rf 
Top-1 Accuracy = 0.3322667276155648 
Top-2 Accuracy = 0.613 
iter 21: [0.3322667276155648] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.3452374150048569 
Top-2 Accuracy = 0.618 
iter 22: [0.3452374150048569] 
setting: robustJ|rf 
Top-1 Accuracy = 0.3451231358208102 
Top-2 Accuracy = 0.617 
iter 23: [0.3451231358208102] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.38392091880463974 
Top-2 Accuracy = 0.65 
iter 24: [0.38392091880463974] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.3322667276155648 
Top-2 Accuracy = 0.613 
iter 25: [0.3322667276155648] 
setting: robustk|rf 
Top-1 Accuracy = 0.38392091880463974 
Top-2 Accuracy = 0.65 
iter 26: [0.38392091880463974] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.3471801611336495 
Top-2 Accuracy = 0.618 
iter 27: [0.3471801611336495] 
setting: maxabss|rf 
Top-1 Accuracy = 0.3118678932632421 
Top-2 Accuracy = 0.439 
iter 28: [0.3118678932632421] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.3322667276155648 
Top-2 Accuracy = 0.613 
iter 29: [0.3322667276155648] 
 
Median top-1 = 0.3400948517227587 
Median top-2 = 0.613 
7 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=15), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=90), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=38), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=23), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=30), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=89), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=26), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=77), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=78), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=28), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=85), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=45), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=74), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=90), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=23), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=10), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=85), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=74), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=58), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=96), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=44), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=55), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=93), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=87), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=41), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=20), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=62), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=27), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=48), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=31), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=16), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=54), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=65), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=99), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=85), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=19), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=79), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=21), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=42), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=83), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: robustB|rf 
Top-1 Accuracy = 0.2319867436146506 
Top-2 Accuracy = 0.427 
iter 0: [0.2319867436146506] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.2319867436146506 
Top-2 Accuracy = 0.427 
iter 1: [0.2319867436146506] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.2823267241871893 
Top-2 Accuracy = 0.501 
iter 2: [0.2823267241871893] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.2319867436146506 
Top-2 Accuracy = 0.427 
iter 3: [0.2319867436146506] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.2319867436146506 
Top-2 Accuracy = 0.427 
iter 4: [0.2319867436146506] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.2398720073138678 
Top-2 Accuracy = 0.443 
iter 5: [0.2398720073138678] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.22175875664247757 
Top-2 Accuracy = 0.325 
iter 6: [0.22175875664247757] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.22398720073138678 
Top-2 Accuracy = 0.326 
iter 7: [0.22398720073138678] 
setting: robustR|rf 
Top-1 Accuracy = 0.2382149591451917 
Top-2 Accuracy = 0.44 
iter 8: [0.2382149591451917] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.2823838637792126 
Top-2 Accuracy = 0.501 
iter 9: [0.2823838637792126] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.22284440889092053 
Top-2 Accuracy = 0.326 
iter 10: [0.22284440889092053] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.220558825209988 
Top-2 Accuracy = 0.323 
iter 11: [0.220558825209988] 
setting: standardizej|rf 
Top-1 Accuracy = 0.28244100337123595 
Top-2 Accuracy = 0.501 
iter 12: [0.28244100337123595] 
setting: robustb|rf 
Top-1 Accuracy = 0.24495743100394263 
Top-2 Accuracy = 0.454 
iter 13: [0.24495743100394263] 
setting: standardizem|rf 
Top-1 Accuracy = 0.24495743100394263 
Top-2 Accuracy = 0.447 
iter 14: [0.24495743100394263] 
setting: normalizep|rf 
Top-1 Accuracy = 0.28375521398777215 
Top-2 Accuracy = 0.501 
iter 15: [0.28375521398777215] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.24284326609908005 
Top-2 Accuracy = 0.451 
iter 16: [0.24284326609908005] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.24535740814810583 
Top-2 Accuracy = 0.441 
iter 17: [0.24535740814810583] 
setting: robusta|rf 
Top-1 Accuracy = 0.22684418033255244 
Top-2 Accuracy = 0.329 
iter 18: [0.22684418033255244] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.28375521398777215 
Top-2 Accuracy = 0.501 
iter 19: [0.28375521398777215] 
setting: robustv|rf 
Top-1 Accuracy = 0.2398720073138678 
Top-2 Accuracy = 0.441 
iter 20: [0.2398720073138678] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.243928918347523 
Top-2 Accuracy = 0.451 
iter 21: [0.243928918347523] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.28386949317181875 
Top-2 Accuracy = 0.501 
iter 22: [0.28386949317181875] 
setting: robustm|rf 
Top-1 Accuracy = 0.22570138849208618 
Top-2 Accuracy = 0.328 
iter 23: [0.22570138849208618] 
setting: robustE|rf 
Top-1 Accuracy = 0.24535740814810583 
Top-2 Accuracy = 0.441 
iter 24: [0.24535740814810583] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.2244443174675733 
Top-2 Accuracy = 0.327 
iter 25: [0.2244443174675733] 
setting: robusty|rf 
Top-1 Accuracy = 0.22261585052282726 
Top-2 Accuracy = 0.324 
iter 26: [0.22261585052282726] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.28398377235586536 
Top-2 Accuracy = 0.501 
iter 27: [0.28398377235586536] 
setting: normalizex|rf 
Top-1 Accuracy = 0.22461573624364323 
Top-2 Accuracy = 0.327 
iter 28: [0.22461573624364323] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.24204331181075367 
Top-2 Accuracy = 0.452 
iter 29: [0.24204331181075367] 
Run # 1 
====== 
setting: maxabso|rf 
Top-1 Accuracy = 0.24101479915433405 
Top-2 Accuracy = 0.453 
iter 0: [0.24101479915433405] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.2421575909948003 
Top-2 Accuracy = 0.447 
iter 1: [0.2421575909948003] 
setting: standardizee|rf 
Top-1 Accuracy = 0.24627164162047882 
Top-2 Accuracy = 0.443 
iter 2: [0.24627164162047882] 
setting: robustB|rf 
Top-1 Accuracy = 0.2231872464430604 
Top-2 Accuracy = 0.326 
iter 3: [0.2231872464430604] 
setting: standardizel|rf 
Top-1 Accuracy = 0.24627164162047882 
Top-2 Accuracy = 0.443 
iter 4: [0.24627164162047882] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.2399291469058911 
Top-2 Accuracy = 0.446 
iter 5: [0.2399291469058911] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.2249585737957831 
Top-2 Accuracy = 0.327 
iter 6: [0.2249585737957831] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.2178732643848923 
Top-2 Accuracy = 0.321 
iter 7: [0.2178732643848923] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.28261242214730586 
Top-2 Accuracy = 0.502 
iter 8: [0.28261242214730586] 
setting: standardizek|rf 
Top-1 Accuracy = 0.24204331181075367 
Top-2 Accuracy = 0.45 
iter 9: [0.24204331181075367] 
setting: standardizet|rf 
Top-1 Accuracy = 0.24067196160219417 
Top-2 Accuracy = 0.442 
iter 10: [0.24067196160219417] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.2834695160276556 
Top-2 Accuracy = 0.502 
iter 11: [0.2834695160276556] 
setting: maxabse|rf 
Top-1 Accuracy = 0.28266956173932917 
Top-2 Accuracy = 0.502 
iter 12: [0.28266956173932917] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.24627164162047882 
Top-2 Accuracy = 0.443 
iter 13: [0.24627164162047882] 
setting: standardizes|rf 
Top-1 Accuracy = 0.283183818067539 
Top-2 Accuracy = 0.501 
iter 14: [0.283183818067539] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.2447860122278727 
Top-2 Accuracy = 0.452 
iter 15: [0.2447860122278727] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.24318610365121993 
Top-2 Accuracy = 0.445 
iter 16: [0.24318610365121993] 
setting: robusta|rf 
Top-1 Accuracy = 0.28501228501228504 
Top-2 Accuracy = 0.502 
iter 17: [0.28501228501228504] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.2857550997085881 
Top-2 Accuracy = 0.503 
iter 18: [0.2857550997085881] 
setting: normalizem|rf 
Top-1 Accuracy = 0.24815724815724816 
Top-2 Accuracy = 0.448 
iter 19: [0.24815724815724816] 
setting: normalizet|rf 
Top-1 Accuracy = 0.2469573167247586 
Top-2 Accuracy = 0.448 
iter 20: [0.2469573167247586] 
setting: robustS|rf 
Top-1 Accuracy = 0.2469573167247586 
Top-2 Accuracy = 0.448 
iter 21: [0.2469573167247586] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.2475287126449917 
Top-2 Accuracy = 0.456 
iter 22: [0.2475287126449917] 
setting: robustk|rf 
Top-1 Accuracy = 0.2231872464430604 
Top-2 Accuracy = 0.324 
iter 23: [0.2231872464430604] 
setting: standardized|rf 
Top-1 Accuracy = 0.24935717958973774 
Top-2 Accuracy = 0.46 
iter 24: [0.24935717958973774] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.28564082052454143 
Top-2 Accuracy = 0.5 
iter 25: [0.28564082052454143] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.2469573167247586 
Top-2 Accuracy = 0.448 
iter 26: [0.2469573167247586] 
setting: robustb|rf 
Top-1 Accuracy = 0.22375864236329351 
Top-2 Accuracy = 0.326 
iter 27: [0.22375864236329351] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.24381463916347637 
Top-2 Accuracy = 0.449 
iter 28: [0.24381463916347637] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.24867150448545797 
Top-2 Accuracy = 0.45 
iter 29: [0.24867150448545797] 
Run # 2 
====== 
setting: standardizeo|rf 
Top-1 Accuracy = 0.2855265413404948 
Top-2 Accuracy = 0.501 
iter 0: [0.2855265413404948] 
setting: maxabss|rf 
Top-1 Accuracy = 0.2834695160276556 
Top-2 Accuracy = 0.501 
iter 1: [0.2834695160276556] 
setting: robustE|rf 
Top-1 Accuracy = 0.24867150448545797 
Top-2 Accuracy = 0.45 
iter 2: [0.24867150448545797] 
setting: robustB|rf 
Top-1 Accuracy = 0.24867150448545797 
Top-2 Accuracy = 0.45 
iter 3: [0.24867150448545797] 
setting: robustj|rf 
Top-1 Accuracy = 0.22084452317010456 
Top-2 Accuracy = 0.324 
iter 4: [0.22084452317010456] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.28621221644477457 
Top-2 Accuracy = 0.502 
iter 5: [0.28621221644477457] 
setting: normalizep|rf 
Top-1 Accuracy = 0.28284098051539913 
Top-2 Accuracy = 0.502 
iter 6: [0.28284098051539913] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.24970001714187762 
Top-2 Accuracy = 0.45 
iter 7: [0.24970001714187762] 
setting: normalizex|rf 
Top-1 Accuracy = 0.22615850522827266 
Top-2 Accuracy = 0.329 
iter 8: [0.22615850522827266] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.2210159419461745 
Top-2 Accuracy = 0.325 
iter 9: [0.2210159419461745] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.25415690531969604 
Top-2 Accuracy = 0.455 
iter 10: [0.25415690531969604] 
setting: standardizen|rf 
Top-1 Accuracy = 0.25415690531969604 
Top-2 Accuracy = 0.455 
iter 11: [0.25415690531969604] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.2417576138506371 
Top-2 Accuracy = 0.443 
iter 12: [0.2417576138506371] 
setting: normalizei|rf 
Top-1 Accuracy = 0.25301411347922975 
Top-2 Accuracy = 0.453 
iter 13: [0.25301411347922975] 
setting: robustU|rf 
Top-1 Accuracy = 0.28604079766870466 
Top-2 Accuracy = 0.501 
iter 14: [0.28604079766870466] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.21827324152905547 
Top-2 Accuracy = 0.32 
iter 15: [0.21827324152905547] 
setting: robustm|rf 
Top-1 Accuracy = 0.2475287126449917 
Top-2 Accuracy = 0.46 
iter 16: [0.2475287126449917] 
setting: robustK|rf 
Top-1 Accuracy = 0.25301411347922975 
Top-2 Accuracy = 0.453 
iter 17: [0.25301411347922975] 
setting: standardizew|rf 
Top-1 Accuracy = 0.2218730358265242 
Top-2 Accuracy = 0.325 
iter 18: [0.2218730358265242] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.28501228501228504 
Top-2 Accuracy = 0.502 
iter 19: [0.28501228501228504] 
setting: robustC|rf 
Top-1 Accuracy = 0.24512884978001256 
Top-2 Accuracy = 0.451 
iter 20: [0.24512884978001256] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.24381463916347637 
Top-2 Accuracy = 0.449 
iter 21: [0.24381463916347637] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.28518370378835495 
Top-2 Accuracy = 0.502 
iter 22: [0.28518370378835495] 
setting: normalizes|rf 
Top-1 Accuracy = 0.2757556711045083 
Top-2 Accuracy = 0.484 
iter 23: [0.2757556711045083] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.2422718701788469 
Top-2 Accuracy = 0.455 
iter 24: [0.2422718701788469] 
setting: robusto|rf 
Top-1 Accuracy = 0.2558139534883721 
Top-2 Accuracy = 0.454 
iter 25: [0.2558139534883721] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.24501457059596596 
Top-2 Accuracy = 0.443 
iter 26: [0.24501457059596596] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.22033026684189475 
Top-2 Accuracy = 0.323 
iter 27: [0.22033026684189475] 
setting: robustY|rf 
Top-1 Accuracy = 0.2245585966516199 
Top-2 Accuracy = 0.327 
iter 28: [0.2245585966516199] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.28272670133135247 
Top-2 Accuracy = 0.502 
iter 29: [0.28272670133135247] 
Run # 3 
====== 
setting: maxabsN|rf 
Top-1 Accuracy = 0.24501457059596596 
Top-2 Accuracy = 0.443 
iter 0: [0.24501457059596596] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.24101479915433405 
Top-2 Accuracy = 0.443 
iter 1: [0.24101479915433405] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.24501457059596596 
Top-2 Accuracy = 0.45 
iter 2: [0.24501457059596596] 
setting: robustA|rf 
Top-1 Accuracy = 0.24501457059596596 
Top-2 Accuracy = 0.443 
iter 3: [0.24501457059596596] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.24775727101308498 
Top-2 Accuracy = 0.457 
iter 4: [0.24775727101308498] 
setting: robustH|rf 
Top-1 Accuracy = 0.28249814296325926 
Top-2 Accuracy = 0.502 
iter 5: [0.28249814296325926] 
setting: standardizef|rf 
Top-1 Accuracy = 0.22044454602594138 
Top-2 Accuracy = 0.324 
iter 6: [0.22044454602594138] 
setting: standardizew|rf 
Top-1 Accuracy = 0.24455745385977945 
Top-2 Accuracy = 0.462 
iter 7: [0.24455745385977945] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.24501457059596596 
Top-2 Accuracy = 0.443 
iter 8: [0.24501457059596596] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.24501457059596596 
Top-2 Accuracy = 0.443 
iter 9: [0.24501457059596596] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.22255871093080395 
Top-2 Accuracy = 0.327 
iter 10: [0.22255871093080395] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.24501457059596596 
Top-2 Accuracy = 0.443 
iter 11: [0.24501457059596596] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.24244328895491687 
Top-2 Accuracy = 0.445 
iter 12: [0.24244328895491687] 
setting: robustd|rf 
Top-1 Accuracy = 0.2452431289640592 
Top-2 Accuracy = 0.442 
iter 13: [0.2452431289640592] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.2452431289640592 
Top-2 Accuracy = 0.442 
iter 14: [0.2452431289640592] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.2846694474601451 
Top-2 Accuracy = 0.505 
iter 15: [0.2846694474601451] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.2844980286840752 
Top-2 Accuracy = 0.504 
iter 16: [0.2844980286840752] 
setting: standardizel|rf 
Top-1 Accuracy = 0.22078738357808125 
Top-2 Accuracy = 0.324 
iter 17: [0.22078738357808125] 
setting: normalizee|rf 
Top-1 Accuracy = 0.24821438774927146 
Top-2 Accuracy = 0.446 
iter 18: [0.24821438774927146] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.24158619507456716 
Top-2 Accuracy = 0.453 
iter 19: [0.24158619507456716] 
setting: robustO|rf 
Top-1 Accuracy = 0.21827324152905547 
Top-2 Accuracy = 0.32 
iter 20: [0.21827324152905547] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.24318610365121993 
Top-2 Accuracy = 0.453 
iter 21: [0.24318610365121993] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.25529969716016226 
Top-2 Accuracy = 0.448 
iter 22: [0.25529969716016226] 
setting: robustl|rf 
Top-1 Accuracy = 0.2184446603051254 
Top-2 Accuracy = 0.322 
iter 23: [0.2184446603051254] 
setting: normalizec|rf 
Top-1 Accuracy = 0.244843151819896 
Top-2 Accuracy = 0.456 
iter 24: [0.244843151819896] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.2857550997085881 
Top-2 Accuracy = 0.501 
iter 25: [0.2857550997085881] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.24718587509285184 
Top-2 Accuracy = 0.442 
iter 26: [0.24718587509285184] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.2231301068510371 
Top-2 Accuracy = 0.325 
iter 27: [0.2231301068510371] 
setting: robusth|rf 
Top-1 Accuracy = 0.24718587509285184 
Top-2 Accuracy = 0.442 
iter 28: [0.24718587509285184] 
setting: normalizex|rf 
Top-1 Accuracy = 0.2786697902976973 
Top-2 Accuracy = 0.496 
iter 29: [0.2786697902976973] 
Run # 4 
====== 
setting: minmaxu|rf 
Top-1 Accuracy = 0.21713044968858922 
Top-2 Accuracy = 0.32 
iter 0: [0.21713044968858922] 
setting: robusty|rf 
Top-1 Accuracy = 0.24541454774012914 
Top-2 Accuracy = 0.455 
iter 1: [0.24541454774012914] 
setting: normalized|rf 
Top-1 Accuracy = 0.24490029141191932 
Top-2 Accuracy = 0.457 
iter 2: [0.24490029141191932] 
setting: robustN|rf 
Top-1 Accuracy = 0.24724301468487514 
Top-2 Accuracy = 0.458 
iter 3: [0.24724301468487514] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.22050168561796468 
Top-2 Accuracy = 0.323 
iter 4: [0.22050168561796468] 
setting: maxabse|rf 
Top-1 Accuracy = 0.2218730358265242 
Top-2 Accuracy = 0.325 
iter 5: [0.2218730358265242] 
setting: standardizeh|rf 
Top-1 Accuracy = 0.23627221301639906 
Top-2 Accuracy = 0.435 
iter 6: [0.23627221301639906] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.23627221301639906 
Top-2 Accuracy = 0.435 
iter 7: [0.23627221301639906] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.2156448202959831 
Top-2 Accuracy = 0.32 
iter 8: [0.2156448202959831] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.24421461630763958 
Top-2 Accuracy = 0.459 
iter 9: [0.24421461630763958] 
setting: robustd|rf 
Top-1 Accuracy = 0.21987315010570824 
Top-2 Accuracy = 0.323 
iter 10: [0.21987315010570824] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.24101479915433405 
Top-2 Accuracy = 0.444 
iter 11: [0.24101479915433405] 
setting: robustO|rf 
Top-1 Accuracy = 0.24450031426775612 
Top-2 Accuracy = 0.456 
iter 12: [0.24450031426775612] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.23627221301639906 
Top-2 Accuracy = 0.435 
iter 13: [0.23627221301639906] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.278441231929604 
Top-2 Accuracy = 0.492 
iter 14: [0.278441231929604] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.24604308325238558 
Top-2 Accuracy = 0.454 
iter 15: [0.24604308325238558] 
setting: standardizec|rf 
Top-1 Accuracy = 0.2787840694817439 
Top-2 Accuracy = 0.492 
iter 16: [0.2787840694817439] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.2783840923375807 
Top-2 Accuracy = 0.492 
iter 17: [0.2783840923375807] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.2227872692988972 
Top-2 Accuracy = 0.325 
iter 18: [0.2227872692988972] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.2786697902976973 
Top-2 Accuracy = 0.492 
iter 19: [0.2786697902976973] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.23627221301639906 
Top-2 Accuracy = 0.435 
iter 20: [0.23627221301639906] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.24604308325238558 
Top-2 Accuracy = 0.455 
iter 21: [0.24604308325238558] 
setting: normalizer|rf 
Top-1 Accuracy = 0.27107022455859664 
Top-2 Accuracy = 0.479 
iter 22: [0.27107022455859664] 
setting: standardizev|rf 
Top-1 Accuracy = 0.23667219016056226 
Top-2 Accuracy = 0.434 
iter 23: [0.23667219016056226] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.23667219016056226 
Top-2 Accuracy = 0.434 
iter 24: [0.23667219016056226] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.236443631792469 
Top-2 Accuracy = 0.434 
iter 25: [0.236443631792469] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.236443631792469 
Top-2 Accuracy = 0.434 
iter 26: [0.236443631792469] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.24461459345180275 
Top-2 Accuracy = 0.457 
iter 27: [0.24461459345180275] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.2792411862179304 
Top-2 Accuracy = 0.494 
iter 28: [0.2792411862179304] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.27918404662590707 
Top-2 Accuracy = 0.495 
iter 29: [0.27918404662590707] 
Run # 5 
====== 
setting: maxabsg|rf 
Top-1 Accuracy = 0.23667219016056226 
Top-2 Accuracy = 0.434 
iter 0: [0.23667219016056226] 
setting: robustn|rf 
Top-1 Accuracy = 0.27918404662590707 
Top-2 Accuracy = 0.493 
iter 1: [0.27918404662590707] 
setting: maxabsK|rf 
Top-1 Accuracy = 0.23667219016056226 
Top-2 Accuracy = 0.434 
iter 2: [0.23667219016056226] 
setting: robustt|rf 
Top-1 Accuracy = 0.24238614936289354 
Top-2 Accuracy = 0.447 
iter 3: [0.24238614936289354] 
setting: robuste|rf 
Top-1 Accuracy = 0.27912690703388376 
Top-2 Accuracy = 0.495 
iter 4: [0.27912690703388376] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.27901262784983716 
Top-2 Accuracy = 0.495 
iter 5: [0.27901262784983716] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.21827324152905547 
Top-2 Accuracy = 0.322 
iter 6: [0.21827324152905547] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.23667219016056226 
Top-2 Accuracy = 0.434 
iter 7: [0.23667219016056226] 
setting: normalizec|rf 
Top-1 Accuracy = 0.221473058682361 
Top-2 Accuracy = 0.325 
iter 8: [0.221473058682361] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.21953031255356836 
Top-2 Accuracy = 0.324 
iter 9: [0.21953031255356836] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.2434718016113365 
Top-2 Accuracy = 0.457 
iter 10: [0.2434718016113365] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.2338152105593966 
Top-2 Accuracy = 0.432 
iter 11: [0.2338152105593966] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.2338152105593966 
Top-2 Accuracy = 0.432 
iter 12: [0.2338152105593966] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.24210045140277697 
Top-2 Accuracy = 0.452 
iter 13: [0.24210045140277697] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.2338152105593966 
Top-2 Accuracy = 0.432 
iter 14: [0.2338152105593966] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.278441231929604 
Top-2 Accuracy = 0.49 
iter 15: [0.278441231929604] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.2183875207131021 
Top-2 Accuracy = 0.323 
iter 16: [0.2183875207131021] 
setting: normalized|rf 
Top-1 Accuracy = 0.21815896234500887 
Top-2 Accuracy = 0.322 
iter 17: [0.21815896234500887] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.282269584595166 
Top-2 Accuracy = 0.5 
iter 18: [0.282269584595166] 
setting: standardizek|rf 
Top-1 Accuracy = 0.2832409576595623 
Top-2 Accuracy = 0.5 
iter 19: [0.2832409576595623] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.21901605622535855 
Top-2 Accuracy = 0.321 
iter 20: [0.21901605622535855] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.24741443346094508 
Top-2 Accuracy = 0.442 
iter 21: [0.24741443346094508] 
setting: normalizep|rf 
Top-1 Accuracy = 0.28032683846637335 
Top-2 Accuracy = 0.488 
iter 22: [0.28032683846637335] 
setting: robustS|rf 
Top-1 Accuracy = 0.28478372664419177 
Top-2 Accuracy = 0.501 
iter 23: [0.28478372664419177] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.24450031426775612 
Top-2 Accuracy = 0.452 
iter 24: [0.24450031426775612] 
setting: standardizey|rf 
Top-1 Accuracy = 0.24684303754071196 
Top-2 Accuracy = 0.456 
iter 25: [0.24684303754071196] 
setting: robustu|rf 
Top-1 Accuracy = 0.23701502771270214 
Top-2 Accuracy = 0.437 
iter 26: [0.23701502771270214] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.2840409119478887 
Top-2 Accuracy = 0.498 
iter 27: [0.2840409119478887] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.221473058682361 
Top-2 Accuracy = 0.324 
iter 28: [0.221473058682361] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.28266956173932917 
Top-2 Accuracy = 0.498 
iter 29: [0.28266956173932917] 
Run # 6 
====== 
setting: standardizew|rf 
Top-1 Accuracy = 0.28266956173932917 
Top-2 Accuracy = 0.498 
iter 0: [0.28266956173932917] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.24330038283526656 
Top-2 Accuracy = 0.445 
iter 1: [0.24330038283526656] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.24461459345180275 
Top-2 Accuracy = 0.437 
iter 2: [0.24461459345180275] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.24461459345180275 
Top-2 Accuracy = 0.437 
iter 3: [0.24461459345180275] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.2475287126449917 
Top-2 Accuracy = 0.456 
iter 4: [0.2475287126449917] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.24461459345180275 
Top-2 Accuracy = 0.437 
iter 5: [0.24461459345180275] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.2447860122278727 
Top-2 Accuracy = 0.454 
iter 6: [0.2447860122278727] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.28295525969944574 
Top-2 Accuracy = 0.499 
iter 7: [0.28295525969944574] 
setting: standardizek|rf 
Top-1 Accuracy = 0.24512884978001256 
Top-2 Accuracy = 0.455 
iter 8: [0.24512884978001256] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.21810182275298554 
Top-2 Accuracy = 0.322 
iter 9: [0.21810182275298554] 
setting: robustV|rf 
Top-1 Accuracy = 0.2522141591909034 
Top-2 Accuracy = 0.443 
iter 10: [0.2522141591909034] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.2823838637792126 
Top-2 Accuracy = 0.495 
iter 11: [0.2823838637792126] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.2823838637792126 
Top-2 Accuracy = 0.501 
iter 12: [0.2823838637792126] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.22238729215473402 
Top-2 Accuracy = 0.325 
iter 13: [0.22238729215473402] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.2595280269698874 
Top-2 Accuracy = 0.46 
iter 14: [0.2595280269698874] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.24490029141191932 
Top-2 Accuracy = 0.443 
iter 15: [0.24490029141191932] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.2405005428261242 
Top-2 Accuracy = 0.439 
iter 16: [0.2405005428261242] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.24490029141191932 
Top-2 Accuracy = 0.443 
iter 17: [0.24490029141191932] 
setting: robustt|rf 
Top-1 Accuracy = 0.2135877949831438 
Top-2 Accuracy = 0.315 
iter 18: [0.2135877949831438] 
setting: maxabsK|rf 
Top-1 Accuracy = 0.24490029141191932 
Top-2 Accuracy = 0.443 
iter 19: [0.24490029141191932] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.24490029141191932 
Top-2 Accuracy = 0.443 
iter 20: [0.24490029141191932] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.22353008399520027 
Top-2 Accuracy = 0.327 
iter 21: [0.22353008399520027] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.24992857550997086 
Top-2 Accuracy = 0.444 
iter 22: [0.24992857550997086] 
setting: standardizes|rf 
Top-1 Accuracy = 0.22027312724987144 
Top-2 Accuracy = 0.323 
iter 23: [0.22027312724987144] 
setting: normalizet|rf 
Top-1 Accuracy = 0.2153019827438432 
Top-2 Accuracy = 0.317 
iter 24: [0.2153019827438432] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.22512999257185304 
Top-2 Accuracy = 0.327 
iter 25: [0.22512999257185304] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.2227301297068739 
Top-2 Accuracy = 0.324 
iter 26: [0.2227301297068739] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.28621221644477457 
Top-2 Accuracy = 0.502 
iter 27: [0.28621221644477457] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.2862693560367979 
Top-2 Accuracy = 0.502 
iter 28: [0.2862693560367979] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.22301582766699046 
Top-2 Accuracy = 0.326 
iter 29: [0.22301582766699046] 
Run # 7 
====== 
setting: minmaxn|rf 
Top-1 Accuracy = 0.2502142734700874 
Top-2 Accuracy = 0.449 
iter 0: [0.2502142734700874] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.2502142734700874 
Top-2 Accuracy = 0.449 
iter 1: [0.2502142734700874] 
setting: normalizek|rf 
Top-1 Accuracy = 0.2857550997085881 
Top-2 Accuracy = 0.5 
iter 2: [0.2857550997085881] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.2452431289640592 
Top-2 Accuracy = 0.46 
iter 3: [0.2452431289640592] 
setting: normalizem|rf 
Top-1 Accuracy = 0.28609793726072796 
Top-2 Accuracy = 0.502 
iter 4: [0.28609793726072796] 
setting: robustf|rf 
Top-1 Accuracy = 0.24364322038740643 
Top-2 Accuracy = 0.437 
iter 5: [0.24364322038740643] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.24935717958973774 
Top-2 Accuracy = 0.448 
iter 6: [0.24935717958973774] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.24238614936289354 
Top-2 Accuracy = 0.445 
iter 7: [0.24238614936289354] 
setting: normalizel|rf 
Top-1 Accuracy = 0.28598365807668136 
Top-2 Accuracy = 0.5 
iter 8: [0.28598365807668136] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.28604079766870466 
Top-2 Accuracy = 0.5 
iter 9: [0.28604079766870466] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.24444317467573282 
Top-2 Accuracy = 0.454 
iter 10: [0.24444317467573282] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.2575281412490715 
Top-2 Accuracy = 0.45 
iter 11: [0.2575281412490715] 
setting: maxabsK|rf 
Top-1 Accuracy = 0.24598594366036228 
Top-2 Accuracy = 0.457 
iter 12: [0.24598594366036228] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.2866121935889378 
Top-2 Accuracy = 0.501 
iter 13: [0.2866121935889378] 
setting: normalizes|rf 
Top-1 Accuracy = 0.28501228501228504 
Top-2 Accuracy = 0.498 
iter 14: [0.28501228501228504] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.2178732643848923 
Top-2 Accuracy = 0.322 
iter 15: [0.2178732643848923] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.25781383920918804 
Top-2 Accuracy = 0.451 
iter 16: [0.25781383920918804] 
setting: maxabse|rf 
Top-1 Accuracy = 0.25781383920918804 
Top-2 Accuracy = 0.451 
iter 17: [0.25781383920918804] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.28518370378835495 
Top-2 Accuracy = 0.498 
iter 18: [0.28518370378835495] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.24101479915433405 
Top-2 Accuracy = 0.448 
iter 19: [0.24101479915433405] 
setting: robustO|rf 
Top-1 Accuracy = 0.24301468487515 
Top-2 Accuracy = 0.445 
iter 20: [0.24301468487515] 
setting: robusta|rf 
Top-1 Accuracy = 0.2458145248842923 
Top-2 Accuracy = 0.457 
iter 21: [0.2458145248842923] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.28472658705216847 
Top-2 Accuracy = 0.502 
iter 22: [0.28472658705216847] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.24004342608993773 
Top-2 Accuracy = 0.442 
iter 23: [0.24004342608993773] 
setting: robustz|rf 
Top-1 Accuracy = 0.24295754528312669 
Top-2 Accuracy = 0.44 
iter 24: [0.24295754528312669] 
setting: robustv|rf 
Top-1 Accuracy = 0.25421404491171934 
Top-2 Accuracy = 0.455 
iter 25: [0.25421404491171934] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.2846694474601451 
Top-2 Accuracy = 0.502 
iter 26: [0.2846694474601451] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.2848408662362151 
Top-2 Accuracy = 0.502 
iter 27: [0.2848408662362151] 
setting: robuste|rf 
Top-1 Accuracy = 0.2846123078681218 
Top-2 Accuracy = 0.502 
iter 28: [0.2846123078681218] 
setting: robustx|rf 
Top-1 Accuracy = 0.2846123078681218 
Top-2 Accuracy = 0.502 
iter 29: [0.2846123078681218] 
Run # 8 
====== 
setting: standardizeC|rf 
Top-1 Accuracy = 0.21890177704131192 
Top-2 Accuracy = 0.322 
iter 0: [0.21890177704131192] 
setting: minmaxw|rf 
Top-1 Accuracy = 0.28501228501228504 
Top-2 Accuracy = 0.502 
iter 1: [0.28501228501228504] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.28244100337123595 
Top-2 Accuracy = 0.493 
iter 2: [0.28244100337123595] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.2518713216387635 
Top-2 Accuracy = 0.455 
iter 3: [0.2518713216387635] 
setting: standardizey|rf 
Top-1 Accuracy = 0.28272670133135247 
Top-2 Accuracy = 0.495 
iter 4: [0.28272670133135247] 
setting: robustI|rf 
Top-1 Accuracy = 0.2518713216387635 
Top-2 Accuracy = 0.455 
iter 5: [0.2518713216387635] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.2518713216387635 
Top-2 Accuracy = 0.455 
iter 6: [0.2518713216387635] 
setting: standardizeh|rf 
Top-1 Accuracy = 0.24450031426775612 
Top-2 Accuracy = 0.45 
iter 7: [0.24450031426775612] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.24587166447631564 
Top-2 Accuracy = 0.459 
iter 8: [0.24587166447631564] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.23758642363293525 
Top-2 Accuracy = 0.443 
iter 9: [0.23758642363293525] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.2434146620193132 
Top-2 Accuracy = 0.456 
iter 10: [0.2434146620193132] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.23901491343351808 
Top-2 Accuracy = 0.439 
iter 11: [0.23901491343351808] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.2832409576595623 
Top-2 Accuracy = 0.493 
iter 12: [0.2832409576595623] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.24238614936289354 
Top-2 Accuracy = 0.456 
iter 13: [0.24238614936289354] 
setting: robusts|rf 
Top-1 Accuracy = 0.24198617221873037 
Top-2 Accuracy = 0.454 
iter 14: [0.24198617221873037] 
setting: standardizee|rf 
Top-1 Accuracy = 0.2191874750014285 
Top-2 Accuracy = 0.322 
iter 15: [0.2191874750014285] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.2453002685560825 
Top-2 Accuracy = 0.453 
iter 16: [0.2453002685560825] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.24101479915433405 
Top-2 Accuracy = 0.448 
iter 17: [0.24101479915433405] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.2447288726358494 
Top-2 Accuracy = 0.454 
iter 18: [0.2447288726358494] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.21758756642477572 
Top-2 Accuracy = 0.321 
iter 19: [0.21758756642477572] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.24272898691503342 
Top-2 Accuracy = 0.437 
iter 20: [0.24272898691503342] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.283183818067539 
Top-2 Accuracy = 0.493 
iter 21: [0.283183818067539] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.2572424432889549 
Top-2 Accuracy = 0.452 
iter 22: [0.2572424432889549] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.24587166447631564 
Top-2 Accuracy = 0.452 
iter 23: [0.24587166447631564] 
setting: standardizec|rf 
Top-1 Accuracy = 0.2373007256728187 
Top-2 Accuracy = 0.441 
iter 24: [0.2373007256728187] 
setting: robuste|rf 
Top-1 Accuracy = 0.24278612650705675 
Top-2 Accuracy = 0.455 
iter 25: [0.24278612650705675] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.2572424432889549 
Top-2 Accuracy = 0.452 
iter 26: [0.2572424432889549] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.28472658705216847 
Top-2 Accuracy = 0.499 
iter 27: [0.28472658705216847] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.28604079766870466 
Top-2 Accuracy = 0.499 
iter 28: [0.28604079766870466] 
setting: normalizes|rf 
Top-1 Accuracy = 0.21861607908119535 
Top-2 Accuracy = 0.321 
iter 29: [0.21861607908119535] 
Run # 9 
====== 
setting: maxabsq|rf 
Top-1 Accuracy = 0.22170161705045427 
Top-2 Accuracy = 0.324 
iter 0: [0.22170161705045427] 
setting: robustY|rf 
Top-1 Accuracy = 0.28426947031598193 
Top-2 Accuracy = 0.498 
iter 1: [0.28426947031598193] 
setting: robustm|rf 
Top-1 Accuracy = 0.24490029141191932 
Top-2 Accuracy = 0.456 
iter 2: [0.24490029141191932] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.25558539512027884 
Top-2 Accuracy = 0.453 
iter 3: [0.25558539512027884] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.28472658705216847 
Top-2 Accuracy = 0.498 
iter 4: [0.28472658705216847] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.23752928404091195 
Top-2 Accuracy = 0.449 
iter 5: [0.23752928404091195] 
setting: standardizek|rf 
Top-1 Accuracy = 0.23930061139363465 
Top-2 Accuracy = 0.45 
iter 6: [0.23930061139363465] 
setting: standardizee|rf 
Top-1 Accuracy = 0.22170161705045427 
Top-2 Accuracy = 0.324 
iter 7: [0.22170161705045427] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.25649962859265185 
Top-2 Accuracy = 0.454 
iter 8: [0.25649962859265185] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.21673047254442604 
Top-2 Accuracy = 0.32 
iter 9: [0.21673047254442604] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.22181589623450088 
Top-2 Accuracy = 0.324 
iter 10: [0.22181589623450088] 
setting: robustz|rf 
Top-1 Accuracy = 0.2202159876578481 
Top-2 Accuracy = 0.324 
iter 11: [0.2202159876578481] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.2854694017484715 
Top-2 Accuracy = 0.498 
iter 12: [0.2854694017484715] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.2843837495000286 
Top-2 Accuracy = 0.497 
iter 13: [0.2843837495000286] 
setting: robustp|rf 
Top-1 Accuracy = 0.2855265413404948 
Top-2 Accuracy = 0.498 
iter 14: [0.2855265413404948] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.25638534940860525 
Top-2 Accuracy = 0.454 
iter 15: [0.25638534940860525] 
setting: normalizee|rf 
Top-1 Accuracy = 0.24381463916347637 
Top-2 Accuracy = 0.454 
iter 16: [0.24381463916347637] 
setting: normalizew|rf 
Top-1 Accuracy = 0.24375749957145307 
Top-2 Accuracy = 0.452 
iter 17: [0.24375749957145307] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.28644077481286784 
Top-2 Accuracy = 0.499 
iter 18: [0.28644077481286784] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.25604251185646537 
Top-2 Accuracy = 0.451 
iter 19: [0.25604251185646537] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.24604308325238558 
Top-2 Accuracy = 0.452 
iter 20: [0.24604308325238558] 
setting: robustM|rf 
Top-1 Accuracy = 0.28621221644477457 
Top-2 Accuracy = 0.499 
iter 21: [0.28621221644477457] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.24381463916347637 
Top-2 Accuracy = 0.453 
iter 22: [0.24381463916347637] 
setting: standardizey|rf 
Top-1 Accuracy = 0.25644248900062855 
Top-2 Accuracy = 0.456 
iter 23: [0.25644248900062855] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.25644248900062855 
Top-2 Accuracy = 0.456 
iter 24: [0.25644248900062855] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.24204331181075367 
Top-2 Accuracy = 0.443 
iter 25: [0.24204331181075367] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.25644248900062855 
Top-2 Accuracy = 0.456 
iter 26: [0.25644248900062855] 
setting: standardizer|rf 
Top-1 Accuracy = 0.21541626192788985 
Top-2 Accuracy = 0.319 
iter 27: [0.21541626192788985] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.2166161933603794 
Top-2 Accuracy = 0.32 
iter 28: [0.2166161933603794] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.24210045140277697 
Top-2 Accuracy = 0.453 
iter 29: [0.24210045140277697] 
Run # 10 
======= 
setting: normalizeo|rf 
Top-1 Accuracy = 0.28501228501228504 
Top-2 Accuracy = 0.496 
iter 0: [0.28501228501228504] 
setting: robustP|rf 
Top-1 Accuracy = 0.23930061139363465 
Top-2 Accuracy = 0.449 
iter 1: [0.23930061139363465] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.24032912405005427 
Top-2 Accuracy = 0.449 
iter 2: [0.24032912405005427] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.2227872692988972 
Top-2 Accuracy = 0.326 
iter 3: [0.2227872692988972] 
setting: robustt|rf 
Top-1 Accuracy = 0.28518370378835495 
Top-2 Accuracy = 0.5 
iter 4: [0.28518370378835495] 
setting: robustA|rf 
Top-1 Accuracy = 0.28524084338037825 
Top-2 Accuracy = 0.5 
iter 5: [0.28524084338037825] 
setting: normalizew|rf 
Top-1 Accuracy = 0.219644591737615 
Top-2 Accuracy = 0.322 
iter 6: [0.219644591737615] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.2524427175589966 
Top-2 Accuracy = 0.453 
iter 7: [0.2524427175589966] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.28381235357979545 
Top-2 Accuracy = 0.501 
iter 8: [0.28381235357979545] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.255985372264442 
Top-2 Accuracy = 0.452 
iter 9: [0.255985372264442] 
setting: robustq|rf 
Top-1 Accuracy = 0.21930175418547512 
Top-2 Accuracy = 0.322 
iter 10: [0.21930175418547512] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.255985372264442 
Top-2 Accuracy = 0.452 
iter 11: [0.255985372264442] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.255985372264442 
Top-2 Accuracy = 0.452 
iter 12: [0.255985372264442] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.21901605622535855 
Top-2 Accuracy = 0.322 
iter 13: [0.21901605622535855] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.21895891663333525 
Top-2 Accuracy = 0.321 
iter 14: [0.21895891663333525] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.25569967430432544 
Top-2 Accuracy = 0.452 
iter 15: [0.25569967430432544] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.28158390949088624 
Top-2 Accuracy = 0.491 
iter 16: [0.28158390949088624] 
setting: normalizet|rf 
Top-1 Accuracy = 0.28386949317181875 
Top-2 Accuracy = 0.495 
iter 17: [0.28386949317181875] 
setting: robustn|rf 
Top-1 Accuracy = 0.22598708645220272 
Top-2 Accuracy = 0.327 
iter 18: [0.22598708645220272] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.25552825552825553 
Top-2 Accuracy = 0.452 
iter 19: [0.25552825552825553] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.25564253471230214 
Top-2 Accuracy = 0.452 
iter 20: [0.25564253471230214] 
setting: robustb|rf 
Top-1 Accuracy = 0.25564253471230214 
Top-2 Accuracy = 0.452 
iter 21: [0.25564253471230214] 
setting: robustf|rf 
Top-1 Accuracy = 0.25564253471230214 
Top-2 Accuracy = 0.452 
iter 22: [0.25564253471230214] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.28421233072395863 
Top-2 Accuracy = 0.495 
iter 23: [0.28421233072395863] 
setting: robustO|rf 
Top-1 Accuracy = 0.2848408662362151 
Top-2 Accuracy = 0.495 
iter 24: [0.2848408662362151] 
setting: robustv|rf 
Top-1 Accuracy = 0.24072910119421748 
Top-2 Accuracy = 0.44 
iter 25: [0.24072910119421748] 
setting: maxabso|rf 
Top-1 Accuracy = 0.28421233072395863 
Top-2 Accuracy = 0.495 
iter 26: [0.28421233072395863] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.2245585966516199 
Top-2 Accuracy = 0.326 
iter 27: [0.2245585966516199] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.22335866521913034 
Top-2 Accuracy = 0.326 
iter 28: [0.22335866521913034] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.21861607908119535 
Top-2 Accuracy = 0.32 
iter 29: [0.21861607908119535] 
Run # 11 
======= 
setting: standardizel|rf 
Top-1 Accuracy = 0.25427118450374264 
Top-2 Accuracy = 0.452 
iter 0: [0.25427118450374264] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.25427118450374264 
Top-2 Accuracy = 0.452 
iter 1: [0.25427118450374264] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.2195874521455917 
Top-2 Accuracy = 0.323 
iter 2: [0.2195874521455917] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.25427118450374264 
Top-2 Accuracy = 0.452 
iter 3: [0.25427118450374264] 
setting: standardizev|rf 
Top-1 Accuracy = 0.21907319581738185 
Top-2 Accuracy = 0.323 
iter 4: [0.21907319581738185] 
setting: robusta|rf 
Top-1 Accuracy = 0.24067196160219417 
Top-2 Accuracy = 0.452 
iter 5: [0.24067196160219417] 
setting: normalizev|rf 
Top-1 Accuracy = 0.24318610365121993 
Top-2 Accuracy = 0.45 
iter 6: [0.24318610365121993] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.28284098051539913 
Top-2 Accuracy = 0.491 
iter 7: [0.28284098051539913] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.221473058682361 
Top-2 Accuracy = 0.325 
iter 8: [0.221473058682361] 
setting: robustP|rf 
Top-1 Accuracy = 0.247585852237015 
Top-2 Accuracy = 0.441 
iter 9: [0.247585852237015] 
setting: robustJ|rf 
Top-1 Accuracy = 0.2245585966516199 
Top-2 Accuracy = 0.327 
iter 10: [0.2245585966516199] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.28284098051539913 
Top-2 Accuracy = 0.491 
iter 11: [0.28284098051539913] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.24255756813896348 
Top-2 Accuracy = 0.445 
iter 12: [0.24255756813896348] 
setting: normalizec|rf 
Top-1 Accuracy = 0.2716987600708531 
Top-2 Accuracy = 0.48 
iter 13: [0.2716987600708531] 
setting: robustx|rf 
Top-1 Accuracy = 0.24741443346094508 
Top-2 Accuracy = 0.442 
iter 14: [0.24741443346094508] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.22107308153819782 
Top-2 Accuracy = 0.322 
iter 15: [0.22107308153819782] 
setting: robustF|rf 
Top-1 Accuracy = 0.2819267470430261 
Top-2 Accuracy = 0.492 
iter 16: [0.2819267470430261] 
setting: robustp|rf 
Top-1 Accuracy = 0.2818696074510028 
Top-2 Accuracy = 0.492 
iter 17: [0.2818696074510028] 
setting: normalizew|rf 
Top-1 Accuracy = 0.2535283698074396 
Top-2 Accuracy = 0.45 
iter 18: [0.2535283698074396] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.2818124678589795 
Top-2 Accuracy = 0.495 
iter 19: [0.2818124678589795] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.2818124678589795 
Top-2 Accuracy = 0.495 
iter 20: [0.2818124678589795] 
setting: robustf|rf 
Top-1 Accuracy = 0.24764299182903834 
Top-2 Accuracy = 0.453 
iter 21: [0.24764299182903834] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.282098165819096 
Top-2 Accuracy = 0.495 
iter 22: [0.282098165819096] 
setting: standardizef|rf 
Top-1 Accuracy = 0.2535283698074396 
Top-2 Accuracy = 0.45 
iter 23: [0.2535283698074396] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.28272670133135247 
Top-2 Accuracy = 0.494 
iter 24: [0.28272670133135247] 
setting: robustA|rf 
Top-1 Accuracy = 0.2535283698074396 
Top-2 Accuracy = 0.45 
iter 25: [0.2535283698074396] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.28175532826695615 
Top-2 Accuracy = 0.495 
iter 26: [0.28175532826695615] 
setting: normalizes|rf 
Top-1 Accuracy = 0.2537569281755328 
Top-2 Accuracy = 0.45 
iter 27: [0.2537569281755328] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.24147191589052056 
Top-2 Accuracy = 0.453 
iter 28: [0.24147191589052056] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.24192903262670704 
Top-2 Accuracy = 0.438 
iter 29: [0.24192903262670704] 
Run # 12 
======= 
setting: normalizeM|rf 
Top-1 Accuracy = 0.21553054111193645 
Top-2 Accuracy = 0.318 
iter 0: [0.21553054111193645] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.243928918347523 
Top-2 Accuracy = 0.457 
iter 1: [0.243928918347523] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.25061425061425063 
Top-2 Accuracy = 0.45 
iter 2: [0.25061425061425063] 
setting: robustT|rf 
Top-1 Accuracy = 0.22335866521913034 
Top-2 Accuracy = 0.325 
iter 3: [0.22335866521913034] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.25061425061425063 
Top-2 Accuracy = 0.45 
iter 4: [0.25061425061425063] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.2832980972515856 
Top-2 Accuracy = 0.496 
iter 5: [0.2832980972515856] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.25061425061425063 
Top-2 Accuracy = 0.45 
iter 6: [0.25061425061425063] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.21913033540940519 
Top-2 Accuracy = 0.322 
iter 7: [0.21913033540940519] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.22221587337866408 
Top-2 Accuracy = 0.324 
iter 8: [0.22221587337866408] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.2457002457002457 
Top-2 Accuracy = 0.452 
iter 9: [0.2457002457002457] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.2831266784755157 
Top-2 Accuracy = 0.496 
iter 10: [0.2831266784755157] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.2832980972515856 
Top-2 Accuracy = 0.496 
iter 11: [0.2832980972515856] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.28175532826695615 
Top-2 Accuracy = 0.492 
iter 12: [0.28175532826695615] 
setting: robusty|rf 
Top-1 Accuracy = 0.2831266784755157 
Top-2 Accuracy = 0.496 
iter 13: [0.2831266784755157] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.2840409119478887 
Top-2 Accuracy = 0.5 
iter 14: [0.2840409119478887] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.22290154848294383 
Top-2 Accuracy = 0.326 
iter 15: [0.22290154848294383] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.28432660990800523 
Top-2 Accuracy = 0.5 
iter 16: [0.28432660990800523] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.28421233072395863 
Top-2 Accuracy = 0.5 
iter 17: [0.28421233072395863] 
setting: normalizet|rf 
Top-1 Accuracy = 0.28398377235586536 
Top-2 Accuracy = 0.501 
iter 18: [0.28398377235586536] 
setting: robustl|rf 
Top-1 Accuracy = 0.21764470601679903 
Top-2 Accuracy = 0.321 
iter 19: [0.21764470601679903] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.24381463916347637 
Top-2 Accuracy = 0.455 
iter 20: [0.24381463916347637] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.28529798297240155 
Top-2 Accuracy = 0.5 
iter 21: [0.28529798297240155] 
setting: standardizem|rf 
Top-1 Accuracy = 0.22118736072224443 
Top-2 Accuracy = 0.322 
iter 22: [0.22118736072224443] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.24364322038740643 
Top-2 Accuracy = 0.448 
iter 23: [0.24364322038740643] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.2562710702245586 
Top-2 Accuracy = 0.454 
iter 24: [0.2562710702245586] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.2562710702245586 
Top-2 Accuracy = 0.454 
iter 25: [0.2562710702245586] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.2562710702245586 
Top-2 Accuracy = 0.454 
iter 26: [0.2562710702245586] 
setting: normalizem|rf 
Top-1 Accuracy = 0.25998514370607395 
Top-2 Accuracy = 0.466 
iter 27: [0.25998514370607395] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.25438546368778925 
Top-2 Accuracy = 0.455 
iter 28: [0.25438546368778925] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.24672875835666533 
Top-2 Accuracy = 0.452 
iter 29: [0.24672875835666533] 
Run # 13 
======= 
setting: standardizer|rf 
Top-1 Accuracy = 0.21547340151991315 
Top-2 Accuracy = 0.318 
iter 0: [0.21547340151991315] 
setting: robusth|rf 
Top-1 Accuracy = 0.24587166447631564 
Top-2 Accuracy = 0.458 
iter 1: [0.24587166447631564] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.25438546368778925 
Top-2 Accuracy = 0.455 
iter 2: [0.25438546368778925] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.25438546368778925 
Top-2 Accuracy = 0.455 
iter 3: [0.25438546368778925] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.25438546368778925 
Top-2 Accuracy = 0.455 
iter 4: [0.25438546368778925] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.28129821153076967 
Top-2 Accuracy = 0.49 
iter 5: [0.28129821153076967] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.25438546368778925 
Top-2 Accuracy = 0.455 
iter 6: [0.25438546368778925] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.24232900977087024 
Top-2 Accuracy = 0.438 
iter 7: [0.24232900977087024] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.25438546368778925 
Top-2 Accuracy = 0.455 
iter 8: [0.25438546368778925] 
setting: standardizep|rf 
Top-1 Accuracy = 0.24375749957145307 
Top-2 Accuracy = 0.456 
iter 9: [0.24375749957145307] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.25438546368778925 
Top-2 Accuracy = 0.455 
iter 10: [0.25438546368778925] 
setting: normalizem|rf 
Top-1 Accuracy = 0.2836409348037255 
Top-2 Accuracy = 0.494 
iter 11: [0.2836409348037255] 
setting: robustR|rf 
Top-1 Accuracy = 0.24621450202845552 
Top-2 Accuracy = 0.457 
iter 12: [0.24621450202845552] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.23930061139363465 
Top-2 Accuracy = 0.441 
iter 13: [0.23930061139363465] 
setting: robustA|rf 
Top-1 Accuracy = 0.2412433575224273 
Top-2 Accuracy = 0.452 
iter 14: [0.2412433575224273] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.2834695160276556 
Top-2 Accuracy = 0.494 
iter 15: [0.2834695160276556] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.22244443174675732 
Top-2 Accuracy = 0.325 
iter 16: [0.22244443174675732] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.24512884978001256 
Top-2 Accuracy = 0.454 
iter 17: [0.24512884978001256] 
setting: robustj|rf 
Top-1 Accuracy = 0.2836409348037255 
Top-2 Accuracy = 0.494 
iter 18: [0.2836409348037255] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.2195874521455917 
Top-2 Accuracy = 0.322 
iter 19: [0.2195874521455917] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.25661390777669846 
Top-2 Accuracy = 0.452 
iter 20: [0.25661390777669846] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.243928918347523 
Top-2 Accuracy = 0.454 
iter 21: [0.243928918347523] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.2440431975315696 
Top-2 Accuracy = 0.451 
iter 22: [0.2440431975315696] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.2201017084738015 
Top-2 Accuracy = 0.324 
iter 23: [0.2201017084738015] 
setting: maxabst|rf 
Top-1 Accuracy = 0.2835837952117022 
Top-2 Accuracy = 0.494 
iter 24: [0.2835837952117022] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.24324324324324326 
Top-2 Accuracy = 0.455 
iter 25: [0.24324324324324326] 
setting: normalizei|rf 
Top-1 Accuracy = 0.21821610193703217 
Top-2 Accuracy = 0.321 
iter 26: [0.21821610193703217] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.21947317296154506 
Top-2 Accuracy = 0.321 
iter 27: [0.21947317296154506] 
setting: standardizex|rf 
Top-1 Accuracy = 0.2568424661447917 
Top-2 Accuracy = 0.453 
iter 28: [0.2568424661447917] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.21895891663333525 
Top-2 Accuracy = 0.322 
iter 29: [0.21895891663333525] 
Run # 14 
======= 
setting: normalizeu|rf 
Top-1 Accuracy = 0.2582709559453745 
Top-2 Accuracy = 0.452 
iter 0: [0.2582709559453745] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.22170161705045427 
Top-2 Accuracy = 0.325 
iter 1: [0.22170161705045427] 
setting: robustp|rf 
Top-1 Accuracy = 0.2195874521455917 
Top-2 Accuracy = 0.325 
iter 2: [0.2195874521455917] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.24450031426775612 
Top-2 Accuracy = 0.453 
iter 3: [0.24450031426775612] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.2582709559453745 
Top-2 Accuracy = 0.452 
iter 4: [0.2582709559453745] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.2582709559453745 
Top-2 Accuracy = 0.452 
iter 5: [0.2582709559453745] 
setting: robustn|rf 
Top-1 Accuracy = 0.2209016627621279 
Top-2 Accuracy = 0.324 
iter 6: [0.2209016627621279] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.28249814296325926 
Top-2 Accuracy = 0.494 
iter 7: [0.28249814296325926] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.24592880406833895 
Top-2 Accuracy = 0.456 
iter 8: [0.24592880406833895] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.22004456888177817 
Top-2 Accuracy = 0.324 
iter 9: [0.22004456888177817] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.24387177875549967 
Top-2 Accuracy = 0.442 
iter 10: [0.24387177875549967] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.21718758928061255 
Top-2 Accuracy = 0.32 
iter 11: [0.21718758928061255] 
setting: normalizei|rf 
Top-1 Accuracy = 0.2581566767613279 
Top-2 Accuracy = 0.454 
iter 12: [0.2581566767613279] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.28261242214730586 
Top-2 Accuracy = 0.495 
iter 13: [0.28261242214730586] 
setting: robustE|rf 
Top-1 Accuracy = 0.24255756813896348 
Top-2 Accuracy = 0.457 
iter 14: [0.24255756813896348] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.2575852808410948 
Top-2 Accuracy = 0.452 
iter 15: [0.2575852808410948] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.2575852808410948 
Top-2 Accuracy = 0.452 
iter 16: [0.2575852808410948] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.217816124792869 
Top-2 Accuracy = 0.321 
iter 17: [0.217816124792869] 
setting: standardizez|rf 
Top-1 Accuracy = 0.28278384092337583 
Top-2 Accuracy = 0.496 
iter 18: [0.28278384092337583] 
setting: robustI|rf 
Top-1 Accuracy = 0.2575852808410948 
Top-2 Accuracy = 0.452 
iter 19: [0.2575852808410948] 
setting: standardizev|rf 
Top-1 Accuracy = 0.2409005199702874 
Top-2 Accuracy = 0.451 
iter 20: [0.2409005199702874] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.28249814296325926 
Top-2 Accuracy = 0.495 
iter 21: [0.28249814296325926] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.24598594366036228 
Top-2 Accuracy = 0.458 
iter 22: [0.24598594366036228] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.28072681561053653 
Top-2 Accuracy = 0.493 
iter 23: [0.28072681561053653] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.2165590537683561 
Top-2 Accuracy = 0.32 
iter 24: [0.2165590537683561] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.21993028969773157 
Top-2 Accuracy = 0.322 
iter 25: [0.21993028969773157] 
setting: standardizer|rf 
Top-1 Accuracy = 0.28432660990800523 
Top-2 Accuracy = 0.497 
iter 26: [0.28432660990800523] 
setting: robustP|rf 
Top-1 Accuracy = 0.24621450202845552 
Top-2 Accuracy = 0.455 
iter 27: [0.24621450202845552] 
setting: robusti|rf 
Top-1 Accuracy = 0.2524427175589966 
Top-2 Accuracy = 0.454 
iter 28: [0.2524427175589966] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.2524427175589966 
Top-2 Accuracy = 0.454 
iter 29: [0.2524427175589966] 
Run # 15 
======= 
setting: robustJ|rf 
Top-1 Accuracy = 0.2524427175589966 
Top-2 Accuracy = 0.454 
iter 0: [0.2524427175589966] 
setting: standardizej|rf 
Top-1 Accuracy = 0.22033026684189475 
Top-2 Accuracy = 0.323 
iter 1: [0.22033026684189475] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.255985372264442 
Top-2 Accuracy = 0.455 
iter 2: [0.255985372264442] 
setting: standardizec|rf 
Top-1 Accuracy = 0.24501457059596596 
Top-2 Accuracy = 0.458 
iter 3: [0.24501457059596596] 
setting: standardizes|rf 
Top-1 Accuracy = 0.255985372264442 
Top-2 Accuracy = 0.455 
iter 4: [0.255985372264442] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.24501457059596596 
Top-2 Accuracy = 0.455 
iter 5: [0.24501457059596596] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.2835266556196789 
Top-2 Accuracy = 0.496 
iter 6: [0.2835266556196789] 
setting: normalizem|rf 
Top-1 Accuracy = 0.2832980972515856 
Top-2 Accuracy = 0.495 
iter 7: [0.2832980972515856] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.21935889377749843 
Top-2 Accuracy = 0.322 
iter 8: [0.21935889377749843] 
setting: robustG|rf 
Top-1 Accuracy = 0.2209588023541512 
Top-2 Accuracy = 0.324 
iter 9: [0.2209588023541512] 
setting: robustl|rf 
Top-1 Accuracy = 0.2201017084738015 
Top-2 Accuracy = 0.323 
iter 10: [0.2201017084738015] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.25667104736872176 
Top-2 Accuracy = 0.455 
iter 11: [0.25667104736872176] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.24101479915433405 
Top-2 Accuracy = 0.439 
iter 12: [0.24101479915433405] 
setting: robusto|rf 
Top-1 Accuracy = 0.28381235357979545 
Top-2 Accuracy = 0.496 
iter 13: [0.28381235357979545] 
setting: robustz|rf 
Top-1 Accuracy = 0.21770184560882236 
Top-2 Accuracy = 0.321 
iter 14: [0.21770184560882236] 
setting: robustg|rf 
Top-1 Accuracy = 0.2191874750014285 
Top-2 Accuracy = 0.322 
iter 15: [0.2191874750014285] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.24301468487515 
Top-2 Accuracy = 0.46 
iter 16: [0.24301468487515] 
setting: minmaxw|rf 
Top-1 Accuracy = 0.2819267470430261 
Top-2 Accuracy = 0.491 
iter 17: [0.2819267470430261] 
setting: standardizek|rf 
Top-1 Accuracy = 0.24587166447631564 
Top-2 Accuracy = 0.454 
iter 18: [0.24587166447631564] 
setting: normalizek|rf 
Top-1 Accuracy = 0.28506942460430834 
Top-2 Accuracy = 0.5 
iter 19: [0.28506942460430834] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.21581623907205302 
Top-2 Accuracy = 0.318 
iter 20: [0.21581623907205302] 
setting: standardizel|rf 
Top-1 Accuracy = 0.2848980058282384 
Top-2 Accuracy = 0.5 
iter 21: [0.2848980058282384] 
setting: robusti|rf 
Top-1 Accuracy = 0.2848980058282384 
Top-2 Accuracy = 0.5 
iter 22: [0.2848980058282384] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.2836980743957488 
Top-2 Accuracy = 0.494 
iter 23: [0.2836980743957488] 
setting: robustu|rf 
Top-1 Accuracy = 0.24181475344266043 
Top-2 Accuracy = 0.455 
iter 24: [0.24181475344266043] 
setting: maxabse|rf 
Top-1 Accuracy = 0.21678761213644934 
Top-2 Accuracy = 0.32 
iter 25: [0.21678761213644934] 
setting: standardizeh|rf 
Top-1 Accuracy = 0.2409005199702874 
Top-2 Accuracy = 0.447 
iter 26: [0.2409005199702874] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.2408433803782641 
Top-2 Accuracy = 0.446 
iter 27: [0.2408433803782641] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.2434718016113365 
Top-2 Accuracy = 0.451 
iter 28: [0.2434718016113365] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.2547283012399291 
Top-2 Accuracy = 0.452 
iter 29: [0.2547283012399291] 
Run # 16 
======= 
setting: minmaxp|rf 
Top-1 Accuracy = 0.2848408662362151 
Top-2 Accuracy = 0.5 
iter 0: [0.2848408662362151] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.28472658705216847 
Top-2 Accuracy = 0.499 
iter 1: [0.28472658705216847] 
setting: normalizee|rf 
Top-1 Accuracy = 0.2192446145934518 
Top-2 Accuracy = 0.322 
iter 2: [0.2192446145934518] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.24501457059596596 
Top-2 Accuracy = 0.453 
iter 3: [0.24501457059596596] 
setting: robustP|rf 
Top-1 Accuracy = 0.2846123078681218 
Top-2 Accuracy = 0.5 
iter 4: [0.2846123078681218] 
setting: robustJ|rf 
Top-1 Accuracy = 0.23490086280783956 
Top-2 Accuracy = 0.428 
iter 5: [0.23490086280783956] 
setting: maxabse|rf 
Top-1 Accuracy = 0.24295754528312669 
Top-2 Accuracy = 0.45 
iter 6: [0.24295754528312669] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.2202159876578481 
Top-2 Accuracy = 0.324 
iter 7: [0.2202159876578481] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.2846123078681218 
Top-2 Accuracy = 0.499 
iter 8: [0.2846123078681218] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.2534712302154163 
Top-2 Accuracy = 0.453 
iter 9: [0.2534712302154163] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.2219873150105708 
Top-2 Accuracy = 0.324 
iter 10: [0.2219873150105708] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.2568424661447917 
Top-2 Accuracy = 0.455 
iter 11: [0.2568424661447917] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.2843837495000286 
Top-2 Accuracy = 0.502 
iter 12: [0.2843837495000286] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.22050168561796468 
Top-2 Accuracy = 0.323 
iter 13: [0.22050168561796468] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.2834123764356323 
Top-2 Accuracy = 0.494 
iter 14: [0.2834123764356323] 
setting: robustY|rf 
Top-1 Accuracy = 0.2201588480658248 
Top-2 Accuracy = 0.323 
iter 15: [0.2201588480658248] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.25912804982572424 
Top-2 Accuracy = 0.458 
iter 16: [0.25912804982572424] 
setting: robustU|rf 
Top-1 Accuracy = 0.24564310610822238 
Top-2 Accuracy = 0.457 
iter 17: [0.24564310610822238] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.27906976744186046 
Top-2 Accuracy = 0.492 
iter 18: [0.27906976744186046] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.28021255928232675 
Top-2 Accuracy = 0.492 
iter 19: [0.28021255928232675] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.21850179989714874 
Top-2 Accuracy = 0.321 
iter 20: [0.21850179989714874] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.2184446603051254 
Top-2 Accuracy = 0.32 
iter 21: [0.2184446603051254] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.27912690703388376 
Top-2 Accuracy = 0.492 
iter 22: [0.27912690703388376] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.24587166447631564 
Top-2 Accuracy = 0.447 
iter 23: [0.24587166447631564] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.21633049540026283 
Top-2 Accuracy = 0.32 
iter 24: [0.21633049540026283] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.27946974458602364 
Top-2 Accuracy = 0.493 
iter 25: [0.27946974458602364] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.24587166447631564 
Top-2 Accuracy = 0.447 
iter 26: [0.24587166447631564] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.22255871093080395 
Top-2 Accuracy = 0.326 
iter 27: [0.22255871093080395] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.2800411405062568 
Top-2 Accuracy = 0.495 
iter 28: [0.2800411405062568] 
setting: standardizez|rf 
Top-1 Accuracy = 0.2799840009142335 
Top-2 Accuracy = 0.495 
iter 29: [0.2799840009142335] 
Run # 17 
======= 
setting: minmaxb|rf 
Top-1 Accuracy = 0.24684303754071196 
Top-2 Accuracy = 0.455 
iter 0: [0.24684303754071196] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.28078395520255983 
Top-2 Accuracy = 0.494 
iter 1: [0.28078395520255983] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.2800411405062568 
Top-2 Accuracy = 0.495 
iter 2: [0.2800411405062568] 
setting: robustj|rf 
Top-1 Accuracy = 0.2452431289640592 
Top-2 Accuracy = 0.454 
iter 3: [0.2452431289640592] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.21981601051368493 
Top-2 Accuracy = 0.323 
iter 4: [0.21981601051368493] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.2557568138963488 
Top-2 Accuracy = 0.451 
iter 5: [0.2557568138963488] 
setting: normalizes|rf 
Top-1 Accuracy = 0.28175532826695615 
Top-2 Accuracy = 0.496 
iter 6: [0.28175532826695615] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.2557568138963488 
Top-2 Accuracy = 0.451 
iter 7: [0.2557568138963488] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.24941431918176105 
Top-2 Accuracy = 0.457 
iter 8: [0.24941431918176105] 
setting: robustk|rf 
Top-1 Accuracy = 0.22038740643391805 
Top-2 Accuracy = 0.323 
iter 9: [0.22038740643391805] 
setting: normalizey|rf 
Top-1 Accuracy = 0.25072852979829724 
Top-2 Accuracy = 0.448 
iter 10: [0.25072852979829724] 
setting: normalizez|rf 
Top-1 Accuracy = 0.2799268613222102 
Top-2 Accuracy = 0.494 
iter 11: [0.2799268613222102] 
setting: normalizex|rf 
Top-1 Accuracy = 0.2534712302154163 
Top-2 Accuracy = 0.453 
iter 12: [0.2534712302154163] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.2534712302154163 
Top-2 Accuracy = 0.453 
iter 13: [0.2534712302154163] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.27764127764127766 
Top-2 Accuracy = 0.488 
iter 14: [0.27764127764127766] 
setting: normalizep|rf 
Top-1 Accuracy = 0.24238614936289354 
Top-2 Accuracy = 0.45 
iter 15: [0.24238614936289354] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.28118393234672306 
Top-2 Accuracy = 0.496 
iter 16: [0.28118393234672306] 
setting: robustS|rf 
Top-1 Accuracy = 0.24644306039654876 
Top-2 Accuracy = 0.454 
iter 17: [0.24644306039654876] 
setting: standardizej|rf 
Top-1 Accuracy = 0.25649962859265185 
Top-2 Accuracy = 0.455 
iter 18: [0.25649962859265185] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.25649962859265185 
Top-2 Accuracy = 0.455 
iter 19: [0.25649962859265185] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.21758756642477572 
Top-2 Accuracy = 0.32 
iter 20: [0.21758756642477572] 
setting: robustL|rf 
Top-1 Accuracy = 0.2430718244671733 
Top-2 Accuracy = 0.452 
iter 21: [0.2430718244671733] 
setting: robustI|rf 
Top-1 Accuracy = 0.28175532826695615 
Top-2 Accuracy = 0.495 
iter 22: [0.28175532826695615] 
setting: robustC|rf 
Top-1 Accuracy = 0.2421575909948003 
Top-2 Accuracy = 0.453 
iter 23: [0.2421575909948003] 
setting: robustp|rf 
Top-1 Accuracy = 0.21764470601679903 
Top-2 Accuracy = 0.32 
iter 24: [0.21764470601679903] 
setting: robustW|rf 
Top-1 Accuracy = 0.22421575909948002 
Top-2 Accuracy = 0.326 
iter 25: [0.22421575909948002] 
setting: robustG|rf 
Top-1 Accuracy = 0.25649962859265185 
Top-2 Accuracy = 0.455 
iter 26: [0.25649962859265185] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.2245014570595966 
Top-2 Accuracy = 0.327 
iter 27: [0.2245014570595966] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.2421575909948003 
Top-2 Accuracy = 0.451 
iter 28: [0.2421575909948003] 
setting: robusto|rf 
Top-1 Accuracy = 0.23964344894577452 
Top-2 Accuracy = 0.44 
iter 29: [0.23964344894577452] 
Run # 18 
======= 
setting: standardizeq|rf 
Top-1 Accuracy = 0.24592880406833895 
Top-2 Accuracy = 0.458 
iter 0: [0.24592880406833895] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.2465001999885721 
Top-2 Accuracy = 0.442 
iter 1: [0.2465001999885721] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.2465001999885721 
Top-2 Accuracy = 0.442 
iter 2: [0.2465001999885721] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.27769841723330096 
Top-2 Accuracy = 0.49 
iter 3: [0.27769841723330096] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.2502142734700874 
Top-2 Accuracy = 0.442 
iter 4: [0.2502142734700874] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.24895720244557454 
Top-2 Accuracy = 0.457 
iter 5: [0.24895720244557454] 
setting: robusts|rf 
Top-1 Accuracy = 0.2804982572424433 
Top-2 Accuracy = 0.491 
iter 6: [0.2804982572424433] 
setting: robustS|rf 
Top-1 Accuracy = 0.28021255928232675 
Top-2 Accuracy = 0.492 
iter 7: [0.28021255928232675] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.28038397805839665 
Top-2 Accuracy = 0.491 
iter 8: [0.28038397805839665] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.2502142734700874 
Top-2 Accuracy = 0.442 
iter 9: [0.2502142734700874] 
setting: standardized|rf 
Top-1 Accuracy = 0.2502142734700874 
Top-2 Accuracy = 0.442 
iter 10: [0.2502142734700874] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.28044111765041996 
Top-2 Accuracy = 0.491 
iter 11: [0.28044111765041996] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.28032683846637335 
Top-2 Accuracy = 0.491 
iter 12: [0.28032683846637335] 
setting: maxabst|rf 
Top-1 Accuracy = 0.22107308153819782 
Top-2 Accuracy = 0.325 
iter 13: [0.22107308153819782] 
setting: robustJ|rf 
Top-1 Accuracy = 0.22033026684189475 
Top-2 Accuracy = 0.324 
iter 14: [0.22033026684189475] 
setting: robustN|rf 
Top-1 Accuracy = 0.24421461630763958 
Top-2 Accuracy = 0.449 
iter 15: [0.24421461630763958] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.25558539512027884 
Top-2 Accuracy = 0.454 
iter 16: [0.25558539512027884] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.21913033540940519 
Top-2 Accuracy = 0.323 
iter 17: [0.21913033540940519] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.2822124450031427 
Top-2 Accuracy = 0.497 
iter 18: [0.2822124450031427] 
setting: robusti|rf 
Top-1 Accuracy = 0.28266956173932917 
Top-2 Accuracy = 0.497 
iter 19: [0.28266956173932917] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.21507342437574994 
Top-2 Accuracy = 0.317 
iter 20: [0.21507342437574994] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.2582709559453745 
Top-2 Accuracy = 0.451 
iter 21: [0.2582709559453745] 
setting: normalizef|rf 
Top-1 Accuracy = 0.28175532826695615 
Top-2 Accuracy = 0.494 
iter 22: [0.28175532826695615] 
setting: standardizem|rf 
Top-1 Accuracy = 0.23981486772184446 
Top-2 Accuracy = 0.442 
iter 23: [0.23981486772184446] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.25604251185646537 
Top-2 Accuracy = 0.454 
iter 24: [0.25604251185646537] 
setting: standardizek|rf 
Top-1 Accuracy = 0.2823838637792126 
Top-2 Accuracy = 0.497 
iter 25: [0.2823838637792126] 
setting: standardizea|rf 
Top-1 Accuracy = 0.25604251185646537 
Top-2 Accuracy = 0.454 
iter 26: [0.25604251185646537] 
setting: robustb|rf 
Top-1 Accuracy = 0.25604251185646537 
Top-2 Accuracy = 0.454 
iter 27: [0.25604251185646537] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.282098165819096 
Top-2 Accuracy = 0.497 
iter 28: [0.282098165819096] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.2545568824638592 
Top-2 Accuracy = 0.453 
iter 29: [0.2545568824638592] 
Run # 19 
======= 
setting: minmaxz|rf 
Top-1 Accuracy = 0.24444317467573282 
Top-2 Accuracy = 0.454 
iter 0: [0.24444317467573282] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.2545568824638592 
Top-2 Accuracy = 0.453 
iter 1: [0.2545568824638592] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.24558596651619907 
Top-2 Accuracy = 0.456 
iter 2: [0.24558596651619907] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.284098051539912 
Top-2 Accuracy = 0.497 
iter 3: [0.284098051539912] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.281355351122793 
Top-2 Accuracy = 0.493 
iter 4: [0.281355351122793] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.24370035997942974 
Top-2 Accuracy = 0.455 
iter 5: [0.24370035997942974] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.2840409119478887 
Top-2 Accuracy = 0.498 
iter 6: [0.2840409119478887] 
setting: robustN|rf 
Top-1 Accuracy = 0.28392663276384206 
Top-2 Accuracy = 0.497 
iter 7: [0.28392663276384206] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.2545568824638592 
Top-2 Accuracy = 0.453 
iter 8: [0.2545568824638592] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.24427175589966288 
Top-2 Accuracy = 0.451 
iter 9: [0.24427175589966288] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.22044454602594138 
Top-2 Accuracy = 0.324 
iter 10: [0.22044454602594138] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.243928918347523 
Top-2 Accuracy = 0.457 
iter 11: [0.243928918347523] 
setting: standardizes|rf 
Top-1 Accuracy = 0.2545568824638592 
Top-2 Accuracy = 0.453 
iter 12: [0.2545568824638592] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.24290040569110335 
Top-2 Accuracy = 0.454 
iter 13: [0.24290040569110335] 
setting: standardizeh|rf 
Top-1 Accuracy = 0.2831266784755157 
Top-2 Accuracy = 0.497 
iter 14: [0.2831266784755157] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.256156791040512 
Top-2 Accuracy = 0.455 
iter 15: [0.256156791040512] 
setting: standardizem|rf 
Top-1 Accuracy = 0.2451859893720359 
Top-2 Accuracy = 0.457 
iter 16: [0.2451859893720359] 
setting: robustY|rf 
Top-1 Accuracy = 0.256156791040512 
Top-2 Accuracy = 0.455 
iter 17: [0.256156791040512] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.2195874521455917 
Top-2 Accuracy = 0.321 
iter 18: [0.2195874521455917] 
setting: robustV|rf 
Top-1 Accuracy = 0.21735900805668248 
Top-2 Accuracy = 0.32 
iter 19: [0.21735900805668248] 
setting: robustj|rf 
Top-1 Accuracy = 0.25078566939032054 
Top-2 Accuracy = 0.445 
iter 20: [0.25078566939032054] 
setting: robustT|rf 
Top-1 Accuracy = 0.28158390949088624 
Top-2 Accuracy = 0.494 
iter 21: [0.28158390949088624] 
setting: maxabst|rf 
Top-1 Accuracy = 0.25078566939032054 
Top-2 Accuracy = 0.445 
iter 22: [0.25078566939032054] 
setting: robustU|rf 
Top-1 Accuracy = 0.24432889549168618 
Top-2 Accuracy = 0.452 
iter 23: [0.24432889549168618] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.21930175418547512 
Top-2 Accuracy = 0.321 
iter 24: [0.21930175418547512] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.244843151819896 
Top-2 Accuracy = 0.454 
iter 25: [0.244843151819896] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.28072681561053653 
Top-2 Accuracy = 0.494 
iter 26: [0.28072681561053653] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.25078566939032054 
Top-2 Accuracy = 0.445 
iter 27: [0.25078566939032054] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.25078566939032054 
Top-2 Accuracy = 0.445 
iter 28: [0.25078566939032054] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.24147191589052056 
Top-2 Accuracy = 0.444 
iter 29: [0.24147191589052056] 
 
Median top-1 = 0.24604308325238558 
Median top-2 = 0.452 
9 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=92), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=76), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=45), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=39), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=81), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=35), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=40), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=27), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=78), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=58), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=99), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=33), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=13), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=45), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=88), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=16), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=96), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=44), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=67), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=67), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=70), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=52), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=48), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=59), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=63), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=88), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=12), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=96), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=53), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=44), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=81), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=14), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=31), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=48), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=14), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=67), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=86), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=28), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=50), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=70), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=52), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: normalized|rf 
Top-1 Accuracy = 0.18336095080281126 
Top-2 Accuracy = 0.276 
iter 0: [0.18336095080281126] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.1883320953088395 
Top-2 Accuracy = 0.34 
iter 1: [0.1883320953088395] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.22050168561796468 
Top-2 Accuracy = 0.406 
iter 2: [0.22050168561796468] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.22044454602594138 
Top-2 Accuracy = 0.405 
iter 3: [0.22044454602594138] 
setting: standardizev|rf 
Top-1 Accuracy = 0.19553168390377693 
Top-2 Accuracy = 0.371 
iter 4: [0.19553168390377693] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.20758813782069596 
Top-2 Accuracy = 0.376 
iter 5: [0.20758813782069596] 
setting: robustu|rf 
Top-1 Accuracy = 0.17896120221701617 
Top-2 Accuracy = 0.273 
iter 6: [0.17896120221701617] 
setting: robustf|rf 
Top-1 Accuracy = 0.203759785155134 
Top-2 Accuracy = 0.359 
iter 7: [0.203759785155134] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.19656019656019655 
Top-2 Accuracy = 0.374 
iter 8: [0.19656019656019655] 
setting: standardizet|rf 
Top-1 Accuracy = 0.1750185703674076 
Top-2 Accuracy = 0.269 
iter 9: [0.1750185703674076] 
setting: normalizew|rf 
Top-1 Accuracy = 0.2024455745385978 
Top-2 Accuracy = 0.38 
iter 10: [0.2024455745385978] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.1826752756985315 
Top-2 Accuracy = 0.277 
iter 11: [0.1826752756985315] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.22244443174675732 
Top-2 Accuracy = 0.406 
iter 12: [0.22244443174675732] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.21010227986972174 
Top-2 Accuracy = 0.381 
iter 13: [0.21010227986972174] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.20695960230843952 
Top-2 Accuracy = 0.378 
iter 14: [0.20695960230843952] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.21027369864579168 
Top-2 Accuracy = 0.381 
iter 15: [0.21027369864579168] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.22404434032341008 
Top-2 Accuracy = 0.406 
iter 16: [0.22404434032341008] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.18073252956973887 
Top-2 Accuracy = 0.275 
iter 17: [0.18073252956973887] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.2024455745385978 
Top-2 Accuracy = 0.38 
iter 18: [0.2024455745385978] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.20861665047711558 
Top-2 Accuracy = 0.382 
iter 19: [0.20861665047711558] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.20695960230843952 
Top-2 Accuracy = 0.372 
iter 20: [0.20695960230843952] 
setting: robustt|rf 
Top-1 Accuracy = 0.19821724472887264 
Top-2 Accuracy = 0.377 
iter 21: [0.19821724472887264] 
setting: normalizey|rf 
Top-1 Accuracy = 0.20170275984229472 
Top-2 Accuracy = 0.378 
iter 22: [0.20170275984229472] 
setting: normalizei|rf 
Top-1 Accuracy = 0.17827552711273642 
Top-2 Accuracy = 0.272 
iter 23: [0.17827552711273642] 
setting: robustG|rf 
Top-1 Accuracy = 0.22507285297982974 
Top-2 Accuracy = 0.409 
iter 24: [0.22507285297982974] 
setting: robustF|rf 
Top-1 Accuracy = 0.20381692474715732 
Top-2 Accuracy = 0.378 
iter 25: [0.20381692474715732] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.2113593508942346 
Top-2 Accuracy = 0.379 
iter 26: [0.2113593508942346] 
setting: standardizew|rf 
Top-1 Accuracy = 0.17747557282441004 
Top-2 Accuracy = 0.271 
iter 27: [0.17747557282441004] 
setting: robustV|rf 
Top-1 Accuracy = 0.22530141134792298 
Top-2 Accuracy = 0.409 
iter 28: [0.22530141134792298] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.20707388149248615 
Top-2 Accuracy = 0.377 
iter 29: [0.20707388149248615] 
Run # 1 
====== 
setting: minmaxY|rf 
Top-1 Accuracy = 0.17810410833666648 
Top-2 Accuracy = 0.272 
iter 0: [0.17810410833666648] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.20055996800182846 
Top-2 Accuracy = 0.378 
iter 1: [0.20055996800182846] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.20055996800182846 
Top-2 Accuracy = 0.378 
iter 2: [0.20055996800182846] 
setting: robustI|rf 
Top-1 Accuracy = 0.18107536712187874 
Top-2 Accuracy = 0.274 
iter 3: [0.18107536712187874] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.20055996800182846 
Top-2 Accuracy = 0.378 
iter 4: [0.20055996800182846] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.20055996800182846 
Top-2 Accuracy = 0.378 
iter 5: [0.20055996800182846] 
setting: standardizel|rf 
Top-1 Accuracy = 0.20055996800182846 
Top-2 Accuracy = 0.378 
iter 6: [0.20055996800182846] 
setting: robustM|rf 
Top-1 Accuracy = 0.22255871093080395 
Top-2 Accuracy = 0.406 
iter 7: [0.22255871093080395] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.20055996800182846 
Top-2 Accuracy = 0.378 
iter 8: [0.20055996800182846] 
setting: robustw|rf 
Top-1 Accuracy = 0.20055996800182846 
Top-2 Accuracy = 0.378 
iter 9: [0.20055996800182846] 
setting: maxabse|rf 
Top-1 Accuracy = 0.1764470601679904 
Top-2 Accuracy = 0.269 
iter 10: [0.1764470601679904] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.22295868807496713 
Top-2 Accuracy = 0.407 
iter 11: [0.22295868807496713] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.21107365293411806 
Top-2 Accuracy = 0.382 
iter 12: [0.21107365293411806] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.22341580481115364 
Top-2 Accuracy = 0.409 
iter 13: [0.22341580481115364] 
setting: robustW|rf 
Top-1 Accuracy = 0.22255871093080395 
Top-2 Accuracy = 0.41 
iter 14: [0.22255871093080395] 
setting: standardizec|rf 
Top-1 Accuracy = 0.2099308610936518 
Top-2 Accuracy = 0.377 
iter 15: [0.2099308610936518] 
setting: normalizee|rf 
Top-1 Accuracy = 0.2099880006856751 
Top-2 Accuracy = 0.381 
iter 16: [0.2099880006856751] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.1769041769041769 
Top-2 Accuracy = 0.27 
iter 17: [0.1769041769041769] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.1773041540483401 
Top-2 Accuracy = 0.273 
iter 18: [0.1773041540483401] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.21627335580823953 
Top-2 Accuracy = 0.393 
iter 19: [0.21627335580823953] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.22307296725901377 
Top-2 Accuracy = 0.407 
iter 20: [0.22307296725901377] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.2263299240043426 
Top-2 Accuracy = 0.41 
iter 21: [0.2263299240043426] 
setting: standardizek|rf 
Top-1 Accuracy = 0.2143877492714702 
Top-2 Accuracy = 0.393 
iter 22: [0.2143877492714702] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.18147534426604195 
Top-2 Accuracy = 0.274 
iter 23: [0.18147534426604195] 
setting: robustn|rf 
Top-1 Accuracy = 0.22644420318838923 
Top-2 Accuracy = 0.41 
iter 24: [0.22644420318838923] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.2267870407405291 
Top-2 Accuracy = 0.41 
iter 25: [0.2267870407405291] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.21553054111193645 
Top-2 Accuracy = 0.396 
iter 26: [0.21553054111193645] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.2042169018913205 
Top-2 Accuracy = 0.357 
iter 27: [0.2042169018913205] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.226215644820296 
Top-2 Accuracy = 0.409 
iter 28: [0.226215644820296] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.21621621621621623 
Top-2 Accuracy = 0.396 
iter 29: [0.21621621621621623] 
Run # 2 
====== 
setting: minmaxe|rf 
Top-1 Accuracy = 0.21621621621621623 
Top-2 Accuracy = 0.396 
iter 0: [0.21621621621621623] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.18181818181818182 
Top-2 Accuracy = 0.275 
iter 1: [0.18181818181818182] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.22610136563624936 
Top-2 Accuracy = 0.41 
iter 2: [0.22610136563624936] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.17964687732129592 
Top-2 Accuracy = 0.274 
iter 3: [0.17964687732129592] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.22598708645220272 
Top-2 Accuracy = 0.41 
iter 4: [0.22598708645220272] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.2078166961887892 
Top-2 Accuracy = 0.381 
iter 5: [0.2078166961887892] 
setting: robustx|rf 
Top-1 Accuracy = 0.20587395005999656 
Top-2 Accuracy = 0.371 
iter 6: [0.20587395005999656] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.1816467630421119 
Top-2 Accuracy = 0.274 
iter 7: [0.1816467630421119] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.17667561853608366 
Top-2 Accuracy = 0.27 
iter 8: [0.17667561853608366] 
setting: normalizec|rf 
Top-1 Accuracy = 0.22787269298897206 
Top-2 Accuracy = 0.412 
iter 9: [0.22787269298897206] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.22558710930803955 
Top-2 Accuracy = 0.41 
iter 10: [0.22558710930803955] 
setting: standardizep|rf 
Top-1 Accuracy = 0.18050397120164563 
Top-2 Accuracy = 0.274 
iter 11: [0.18050397120164563] 
setting: robuste|rf 
Top-1 Accuracy = 0.20798811496485914 
Top-2 Accuracy = 0.378 
iter 12: [0.20798811496485914] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.2051311353636935 
Top-2 Accuracy = 0.376 
iter 13: [0.2051311353636935] 
setting: normalizew|rf 
Top-1 Accuracy = 0.17798982915261985 
Top-2 Accuracy = 0.271 
iter 14: [0.17798982915261985] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.18124678589794868 
Top-2 Accuracy = 0.276 
iter 15: [0.18124678589794868] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.17947545854522598 
Top-2 Accuracy = 0.274 
iter 16: [0.17947545854522598] 
setting: robustT|rf 
Top-1 Accuracy = 0.22478715501971316 
Top-2 Accuracy = 0.409 
iter 17: [0.22478715501971316] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.2095308839494886 
Top-2 Accuracy = 0.382 
iter 18: [0.2095308839494886] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.2170161705045426 
Top-2 Accuracy = 0.397 
iter 19: [0.2170161705045426] 
setting: robustK|rf 
Top-1 Accuracy = 0.22564424890006285 
Top-2 Accuracy = 0.41 
iter 20: [0.22564424890006285] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.21855893948917204 
Top-2 Accuracy = 0.399 
iter 21: [0.21855893948917204] 
setting: robustl|rf 
Top-1 Accuracy = 0.21855893948917204 
Top-2 Accuracy = 0.399 
iter 22: [0.21855893948917204] 
setting: normalizet|rf 
Top-1 Accuracy = 0.21638763499228617 
Top-2 Accuracy = 0.395 
iter 23: [0.21638763499228617] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.22741557625278555 
Top-2 Accuracy = 0.412 
iter 24: [0.22741557625278555] 
setting: standardizej|rf 
Top-1 Accuracy = 0.2275869950288555 
Top-2 Accuracy = 0.411 
iter 25: [0.2275869950288555] 
setting: robustX|rf 
Top-1 Accuracy = 0.21638763499228617 
Top-2 Accuracy = 0.395 
iter 26: [0.21638763499228617] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.21638763499228617 
Top-2 Accuracy = 0.395 
iter 27: [0.21638763499228617] 
setting: normalizea|rf 
Top-1 Accuracy = 0.20787383578081253 
Top-2 Accuracy = 0.376 
iter 28: [0.20787383578081253] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.17798982915261985 
Top-2 Accuracy = 0.271 
iter 29: [0.17798982915261985] 
Run # 3 
====== 
setting: normalizef|rf 
Top-1 Accuracy = 0.21907319581738185 
Top-2 Accuracy = 0.398 
iter 0: [0.21907319581738185] 
setting: robustb|rf 
Top-1 Accuracy = 0.22941546197360152 
Top-2 Accuracy = 0.413 
iter 1: [0.22941546197360152] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.21907319581738185 
Top-2 Accuracy = 0.398 
iter 2: [0.21907319581738185] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.21907319581738185 
Top-2 Accuracy = 0.398 
iter 3: [0.21907319581738185] 
setting: standardizem|rf 
Top-1 Accuracy = 0.17656133935203702 
Top-2 Accuracy = 0.272 
iter 4: [0.17656133935203702] 
setting: standardizek|rf 
Top-1 Accuracy = 0.21907319581738185 
Top-2 Accuracy = 0.398 
iter 5: [0.21907319581738185] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.1795897377292726 
Top-2 Accuracy = 0.272 
iter 6: [0.1795897377292726] 
setting: standardizes|rf 
Top-1 Accuracy = 0.20181703902634135 
Top-2 Accuracy = 0.353 
iter 7: [0.20181703902634135] 
setting: normalizep|rf 
Top-1 Accuracy = 0.22901548482943831 
Top-2 Accuracy = 0.414 
iter 8: [0.22901548482943831] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.21941603336952173 
Top-2 Accuracy = 0.398 
iter 9: [0.21941603336952173] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.20678818353236958 
Top-2 Accuracy = 0.376 
iter 10: [0.20678818353236958] 
setting: robustS|rf 
Top-1 Accuracy = 0.20370264556311068 
Top-2 Accuracy = 0.354 
iter 11: [0.20370264556311068] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.21941603336952173 
Top-2 Accuracy = 0.398 
iter 12: [0.21941603336952173] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.2166161933603794 
Top-2 Accuracy = 0.395 
iter 13: [0.2166161933603794] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.20358836637906405 
Top-2 Accuracy = 0.368 
iter 14: [0.20358836637906405] 
setting: robustl|rf 
Top-1 Accuracy = 0.2166161933603794 
Top-2 Accuracy = 0.395 
iter 15: [0.2166161933603794] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.1795897377292726 
Top-2 Accuracy = 0.273 
iter 16: [0.1795897377292726] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.21558768070395978 
Top-2 Accuracy = 0.395 
iter 17: [0.21558768070395978] 
setting: robustP|rf 
Top-1 Accuracy = 0.2078166961887892 
Top-2 Accuracy = 0.378 
iter 18: [0.2078166961887892] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.2095308839494886 
Top-2 Accuracy = 0.38 
iter 19: [0.2095308839494886] 
setting: normalizee|rf 
Top-1 Accuracy = 0.20153134106622478 
Top-2 Accuracy = 0.357 
iter 20: [0.20153134106622478] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.20587395005999656 
Top-2 Accuracy = 0.38 
iter 21: [0.20587395005999656] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.2161590766241929 
Top-2 Accuracy = 0.396 
iter 22: [0.2161590766241929] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.22587280726815612 
Top-2 Accuracy = 0.411 
iter 23: [0.22587280726815612] 
setting: maxabso|rf 
Top-1 Accuracy = 0.2161590766241929 
Top-2 Accuracy = 0.396 
iter 24: [0.2161590766241929] 
setting: normalizet|rf 
Top-1 Accuracy = 0.22347294440317697 
Top-2 Accuracy = 0.41 
iter 25: [0.22347294440317697] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.2245014570595966 
Top-2 Accuracy = 0.412 
iter 26: [0.2245014570595966] 
setting: robustr|rf 
Top-1 Accuracy = 0.22438717787554996 
Top-2 Accuracy = 0.412 
iter 27: [0.22438717787554996] 
setting: robustw|rf 
Top-1 Accuracy = 0.21621621621621623 
Top-2 Accuracy = 0.395 
iter 28: [0.21621621621621623] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.22415861950745672 
Top-2 Accuracy = 0.413 
iter 29: [0.22415861950745672] 
Run # 4 
====== 
setting: maxabsq|rf 
Top-1 Accuracy = 0.1795897377292726 
Top-2 Accuracy = 0.273 
iter 0: [0.1795897377292726] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.20324552882692418 
Top-2 Accuracy = 0.371 
iter 1: [0.20324552882692418] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.17970401691331925 
Top-2 Accuracy = 0.272 
iter 2: [0.17970401691331925] 
setting: robustY|rf 
Top-1 Accuracy = 0.20621678761213644 
Top-2 Accuracy = 0.371 
iter 3: [0.20621678761213644] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.21815896234500887 
Top-2 Accuracy = 0.402 
iter 4: [0.21815896234500887] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.22044454602594138 
Top-2 Accuracy = 0.408 
iter 5: [0.22044454602594138] 
setting: normalizej|rf 
Top-1 Accuracy = 0.22638706359636593 
Top-2 Accuracy = 0.413 
iter 6: [0.22638706359636593] 
setting: robustD|rf 
Top-1 Accuracy = 0.20301697045883094 
Top-2 Accuracy = 0.35 
iter 7: [0.20301697045883094] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.2178732643848923 
Top-2 Accuracy = 0.396 
iter 8: [0.2178732643848923] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.22564424890006285 
Top-2 Accuracy = 0.412 
iter 9: [0.22564424890006285] 
setting: standardizel|rf 
Top-1 Accuracy = 0.20615964802011313 
Top-2 Accuracy = 0.376 
iter 10: [0.20615964802011313] 
setting: robustS|rf 
Top-1 Accuracy = 0.17873264384892293 
Top-2 Accuracy = 0.272 
iter 11: [0.17873264384892293] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.17964687732129592 
Top-2 Accuracy = 0.271 
iter 12: [0.17964687732129592] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.22524427175589967 
Top-2 Accuracy = 0.412 
iter 13: [0.22524427175589967] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.206502485572253 
Top-2 Accuracy = 0.379 
iter 14: [0.206502485572253] 
setting: robuste|rf 
Top-1 Accuracy = 0.21627335580823953 
Top-2 Accuracy = 0.397 
iter 15: [0.21627335580823953] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.21627335580823953 
Top-2 Accuracy = 0.397 
iter 16: [0.21627335580823953] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.20747385863664933 
Top-2 Accuracy = 0.381 
iter 17: [0.20747385863664933] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.2170161705045426 
Top-2 Accuracy = 0.397 
iter 18: [0.2170161705045426] 
setting: normalizev|rf 
Top-1 Accuracy = 0.21850179989714874 
Top-2 Accuracy = 0.398 
iter 19: [0.21850179989714874] 
setting: standardizet|rf 
Top-1 Accuracy = 0.18061825038569224 
Top-2 Accuracy = 0.274 
iter 20: [0.18061825038569224] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.22638706359636593 
Top-2 Accuracy = 0.41 
iter 21: [0.22638706359636593] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.21890177704131192 
Top-2 Accuracy = 0.397 
iter 22: [0.21890177704131192] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.22587280726815612 
Top-2 Accuracy = 0.413 
iter 23: [0.22587280726815612] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.21890177704131192 
Top-2 Accuracy = 0.397 
iter 24: [0.21890177704131192] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.21890177704131192 
Top-2 Accuracy = 0.397 
iter 25: [0.21890177704131192] 
setting: maxabst|rf 
Top-1 Accuracy = 0.2113593508942346 
Top-2 Accuracy = 0.378 
iter 26: [0.2113593508942346] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.22512999257185304 
Top-2 Accuracy = 0.412 
iter 27: [0.22512999257185304] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.17878978344094623 
Top-2 Accuracy = 0.272 
iter 28: [0.17878978344094623] 
setting: robustL|rf 
Top-1 Accuracy = 0.22535855093994628 
Top-2 Accuracy = 0.413 
iter 29: [0.22535855093994628] 
Run # 5 
====== 
setting: minmaxL|rf 
Top-1 Accuracy = 0.17981829609736585 
Top-2 Accuracy = 0.272 
iter 0: [0.17981829609736585] 
setting: robustG|rf 
Top-1 Accuracy = 0.21890177704131192 
Top-2 Accuracy = 0.397 
iter 1: [0.21890177704131192] 
setting: robustu|rf 
Top-1 Accuracy = 0.2254728301239929 
Top-2 Accuracy = 0.413 
iter 2: [0.2254728301239929] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.2166161933603794 
Top-2 Accuracy = 0.395 
iter 3: [0.2166161933603794] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.206502485572253 
Top-2 Accuracy = 0.369 
iter 4: [0.206502485572253] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.20570253128392663 
Top-2 Accuracy = 0.376 
iter 5: [0.20570253128392663] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.2271870178846923 
Top-2 Accuracy = 0.411 
iter 6: [0.2271870178846923] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.2263299240043426 
Top-2 Accuracy = 0.412 
iter 7: [0.2263299240043426] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.226215644820296 
Top-2 Accuracy = 0.413 
iter 8: [0.226215644820296] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.1786183646648763 
Top-2 Accuracy = 0.272 
iter 9: [0.1786183646648763] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.20655962516427634 
Top-2 Accuracy = 0.376 
iter 10: [0.20655962516427634] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.2262727844123193 
Top-2 Accuracy = 0.412 
iter 11: [0.2262727844123193] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.21827324152905547 
Top-2 Accuracy = 0.396 
iter 12: [0.21827324152905547] 
setting: robustE|rf 
Top-1 Accuracy = 0.21164504885435118 
Top-2 Accuracy = 0.38 
iter 13: [0.21164504885435118] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.2271870178846923 
Top-2 Accuracy = 0.41 
iter 14: [0.2271870178846923] 
setting: robustl|rf 
Top-1 Accuracy = 0.20050282840980516 
Top-2 Accuracy = 0.353 
iter 15: [0.20050282840980516] 
setting: robusts|rf 
Top-1 Accuracy = 0.20758813782069596 
Top-2 Accuracy = 0.375 
iter 16: [0.20758813782069596] 
setting: robustS|rf 
Top-1 Accuracy = 0.1817039026341352 
Top-2 Accuracy = 0.274 
iter 17: [0.1817039026341352] 
setting: robustZ|rf 
Top-1 Accuracy = 0.2284440889092052 
Top-2 Accuracy = 0.411 
iter 18: [0.2284440889092052] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.2281012513570653 
Top-2 Accuracy = 0.411 
iter 19: [0.2281012513570653] 
setting: robustM|rf 
Top-1 Accuracy = 0.20547397291583339 
Top-2 Accuracy = 0.378 
iter 20: [0.20547397291583339] 
setting: robustv|rf 
Top-1 Accuracy = 0.1799325752814125 
Top-2 Accuracy = 0.275 
iter 21: [0.1799325752814125] 
setting: robustH|rf 
Top-1 Accuracy = 0.17987543568938918 
Top-2 Accuracy = 0.273 
iter 22: [0.17987543568938918] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.2279869721730187 
Top-2 Accuracy = 0.411 
iter 23: [0.2279869721730187] 
setting: robustW|rf 
Top-1 Accuracy = 0.21821610193703217 
Top-2 Accuracy = 0.397 
iter 24: [0.21821610193703217] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.221473058682361 
Top-2 Accuracy = 0.407 
iter 25: [0.221473058682361] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.20878806925318552 
Top-2 Accuracy = 0.392 
iter 26: [0.20878806925318552] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.2082166733329524 
Top-2 Accuracy = 0.384 
iter 27: [0.2082166733329524] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.1795325981372493 
Top-2 Accuracy = 0.274 
iter 28: [0.1795325981372493] 
setting: standardizea|rf 
Top-1 Accuracy = 0.2072453002685561 
Top-2 Accuracy = 0.377 
iter 29: [0.2072453002685561] 
Run # 6 
====== 
setting: robustw|rf 
Top-1 Accuracy = 0.22050168561796468 
Top-2 Accuracy = 0.402 
iter 0: [0.22050168561796468] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.2082166733329524 
Top-2 Accuracy = 0.384 
iter 1: [0.2082166733329524] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.206502485572253 
Top-2 Accuracy = 0.376 
iter 2: [0.206502485572253] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.2082166733329524 
Top-2 Accuracy = 0.384 
iter 3: [0.2082166733329524] 
setting: standardized|rf 
Top-1 Accuracy = 0.2082166733329524 
Top-2 Accuracy = 0.384 
iter 4: [0.2082166733329524] 
setting: robustz|rf 
Top-1 Accuracy = 0.22050168561796468 
Top-2 Accuracy = 0.405 
iter 5: [0.22050168561796468] 
setting: normalizek|rf 
Top-1 Accuracy = 0.213073538654934 
Top-2 Accuracy = 0.39 
iter 6: [0.213073538654934] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.1755328266956174 
Top-2 Accuracy = 0.267 
iter 7: [0.1755328266956174] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.20141706188217817 
Top-2 Accuracy = 0.369 
iter 8: [0.20141706188217817] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.213073538654934 
Top-2 Accuracy = 0.39 
iter 9: [0.213073538654934] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.1821038797782984 
Top-2 Accuracy = 0.275 
iter 10: [0.1821038797782984] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.1839894863150677 
Top-2 Accuracy = 0.277 
iter 11: [0.1839894863150677] 
setting: standardizej|rf 
Top-1 Accuracy = 0.2266727615564825 
Top-2 Accuracy = 0.414 
iter 12: [0.2266727615564825] 
setting: robustg|rf 
Top-1 Accuracy = 0.21398777212730702 
Top-2 Accuracy = 0.395 
iter 13: [0.21398777212730702] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.2263299240043426 
Top-2 Accuracy = 0.413 
iter 14: [0.2263299240043426] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.21427347008742356 
Top-2 Accuracy = 0.393 
iter 15: [0.21427347008742356] 
setting: robustT|rf 
Top-1 Accuracy = 0.21427347008742356 
Top-2 Accuracy = 0.393 
iter 16: [0.21427347008742356] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.2244443174675733 
Top-2 Accuracy = 0.409 
iter 17: [0.2244443174675733] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.2244443174675733 
Top-2 Accuracy = 0.409 
iter 18: [0.2244443174675733] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.17924690017713274 
Top-2 Accuracy = 0.272 
iter 19: [0.17924690017713274] 
setting: normalizet|rf 
Top-1 Accuracy = 0.22564424890006285 
Top-2 Accuracy = 0.411 
iter 20: [0.22564424890006285] 
setting: robusta|rf 
Top-1 Accuracy = 0.21221644477458432 
Top-2 Accuracy = 0.384 
iter 21: [0.21221644477458432] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.180389692017599 
Top-2 Accuracy = 0.274 
iter 22: [0.180389692017599] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.22335866521913034 
Top-2 Accuracy = 0.411 
iter 23: [0.22335866521913034] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.17896120221701617 
Top-2 Accuracy = 0.273 
iter 24: [0.17896120221701617] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.17964687732129592 
Top-2 Accuracy = 0.273 
iter 25: [0.17964687732129592] 
setting: robustK|rf 
Top-1 Accuracy = 0.18056111079366893 
Top-2 Accuracy = 0.274 
iter 26: [0.18056111079366893] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.2126164219187475 
Top-2 Accuracy = 0.386 
iter 27: [0.2126164219187475] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.2126164219187475 
Top-2 Accuracy = 0.386 
iter 28: [0.2126164219187475] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.220558825209988 
Top-2 Accuracy = 0.405 
iter 29: [0.220558825209988] 
Run # 7 
====== 
setting: normalizeH|rf 
Top-1 Accuracy = 0.22044454602594138 
Top-2 Accuracy = 0.405 
iter 0: [0.22044454602594138] 
setting: normalizel|rf 
Top-1 Accuracy = 0.17638992057596709 
Top-2 Accuracy = 0.271 
iter 1: [0.17638992057596709] 
setting: robustx|rf 
Top-1 Accuracy = 0.2202159876578481 
Top-2 Accuracy = 0.406 
iter 2: [0.2202159876578481] 
setting: normalizes|rf 
Top-1 Accuracy = 0.17627564139192045 
Top-2 Accuracy = 0.27 
iter 3: [0.17627564139192045] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.22512999257185304 
Top-2 Accuracy = 0.414 
iter 4: [0.22512999257185304] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.20798811496485914 
Top-2 Accuracy = 0.368 
iter 5: [0.20798811496485914] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.18198960059425176 
Top-2 Accuracy = 0.276 
iter 6: [0.18198960059425176] 
setting: normalizer|rf 
Top-1 Accuracy = 0.22924404319753158 
Top-2 Accuracy = 0.414 
iter 7: [0.22924404319753158] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.20747385863664933 
Top-2 Accuracy = 0.373 
iter 8: [0.20747385863664933] 
setting: normalizex|rf 
Top-1 Accuracy = 0.17570424547168734 
Top-2 Accuracy = 0.267 
iter 9: [0.17570424547168734] 
setting: robustU|rf 
Top-1 Accuracy = 0.20895948802925546 
Top-2 Accuracy = 0.373 
iter 10: [0.20895948802925546] 
setting: robustv|rf 
Top-1 Accuracy = 0.1773041540483401 
Top-2 Accuracy = 0.27 
iter 11: [0.1773041540483401] 
setting: robustw|rf 
Top-1 Accuracy = 0.2147877264156334 
Top-2 Accuracy = 0.395 
iter 12: [0.2147877264156334] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.2147877264156334 
Top-2 Accuracy = 0.395 
iter 13: [0.2147877264156334] 
setting: robusty|rf 
Top-1 Accuracy = 0.18050397120164563 
Top-2 Accuracy = 0.274 
iter 14: [0.18050397120164563] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.175647105879664 
Top-2 Accuracy = 0.269 
iter 15: [0.175647105879664] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.20627392720415977 
Top-2 Accuracy = 0.383 
iter 16: [0.20627392720415977] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.20627392720415977 
Top-2 Accuracy = 0.383 
iter 17: [0.20627392720415977] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.21513056396777328 
Top-2 Accuracy = 0.397 
iter 18: [0.21513056396777328] 
setting: robustD|rf 
Top-1 Accuracy = 0.2161590766241929 
Top-2 Accuracy = 0.399 
iter 19: [0.2161590766241929] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.21621621621621623 
Top-2 Accuracy = 0.399 
iter 20: [0.21621621621621623] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.21621621621621623 
Top-2 Accuracy = 0.399 
iter 21: [0.21621621621621623] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.18318953202674132 
Top-2 Accuracy = 0.277 
iter 22: [0.18318953202674132] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.19838866350494258 
Top-2 Accuracy = 0.351 
iter 23: [0.19838866350494258] 
setting: robusti|rf 
Top-1 Accuracy = 0.21558768070395978 
Top-2 Accuracy = 0.398 
iter 24: [0.21558768070395978] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.2047311582195303 
Top-2 Accuracy = 0.384 
iter 25: [0.2047311582195303] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.2047311582195303 
Top-2 Accuracy = 0.384 
iter 26: [0.2047311582195303] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.20673104394034628 
Top-2 Accuracy = 0.372 
iter 27: [0.20673104394034628] 
setting: normalizee|rf 
Top-1 Accuracy = 0.22073024398605795 
Top-2 Accuracy = 0.405 
iter 28: [0.22073024398605795] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.22073024398605795 
Top-2 Accuracy = 0.404 
iter 29: [0.22073024398605795] 
Run # 8 
====== 
setting: standardizeK|rf 
Top-1 Accuracy = 0.21975887092166163 
Top-2 Accuracy = 0.403 
iter 0: [0.21975887092166163] 
setting: standardizev|rf 
Top-1 Accuracy = 0.22073024398605795 
Top-2 Accuracy = 0.404 
iter 1: [0.22073024398605795] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.20610250842808983 
Top-2 Accuracy = 0.376 
iter 2: [0.20610250842808983] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.2077595565967659 
Top-2 Accuracy = 0.376 
iter 3: [0.2077595565967659] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.17890406262499287 
Top-2 Accuracy = 0.27 
iter 4: [0.17890406262499287] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.21473058682361007 
Top-2 Accuracy = 0.393 
iter 5: [0.21473058682361007] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.20695960230843952 
Top-2 Accuracy = 0.378 
iter 6: [0.20695960230843952] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.21250214273470086 
Top-2 Accuracy = 0.391 
iter 7: [0.21250214273470086] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.2213587794983144 
Top-2 Accuracy = 0.405 
iter 8: [0.2213587794983144] 
setting: robustv|rf 
Top-1 Accuracy = 0.20935946517341866 
Top-2 Accuracy = 0.378 
iter 9: [0.20935946517341866] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.21381635335123708 
Top-2 Accuracy = 0.384 
iter 10: [0.21381635335123708] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.20015999085766528 
Top-2 Accuracy = 0.352 
iter 11: [0.20015999085766528] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.2213587794983144 
Top-2 Accuracy = 0.405 
iter 12: [0.2213587794983144] 
setting: robustx|rf 
Top-1 Accuracy = 0.21381635335123708 
Top-2 Accuracy = 0.384 
iter 13: [0.21381635335123708] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.22730129706873892 
Top-2 Accuracy = 0.414 
iter 14: [0.22730129706873892] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.20758813782069596 
Top-2 Accuracy = 0.377 
iter 15: [0.20758813782069596] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.17787554996857322 
Top-2 Accuracy = 0.271 
iter 16: [0.17787554996857322] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.17701845608822353 
Top-2 Accuracy = 0.271 
iter 17: [0.17701845608822353] 
setting: standardizef|rf 
Top-1 Accuracy = 0.20987372150162847 
Top-2 Accuracy = 0.39 
iter 18: [0.20987372150162847] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.18336095080281126 
Top-2 Accuracy = 0.275 
iter 19: [0.18336095080281126] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.2272441574767156 
Top-2 Accuracy = 0.414 
iter 20: [0.2272441574767156] 
setting: normalizek|rf 
Top-1 Accuracy = 0.21404491171933032 
Top-2 Accuracy = 0.394 
iter 21: [0.21404491171933032] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.229872578709788 
Top-2 Accuracy = 0.417 
iter 22: [0.229872578709788] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.2077595565967659 
Top-2 Accuracy = 0.379 
iter 23: [0.2077595565967659] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.23095823095823095 
Top-2 Accuracy = 0.418 
iter 24: [0.23095823095823095] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.17747557282441004 
Top-2 Accuracy = 0.271 
iter 25: [0.17747557282441004] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.22998685789383463 
Top-2 Accuracy = 0.416 
iter 26: [0.22998685789383463] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.18198960059425176 
Top-2 Accuracy = 0.273 
iter 27: [0.18198960059425176] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.22301582766699046 
Top-2 Accuracy = 0.408 
iter 28: [0.22301582766699046] 
setting: maxabss|rf 
Top-1 Accuracy = 0.22375864236329351 
Top-2 Accuracy = 0.408 
iter 29: [0.22375864236329351] 
Run # 9 
====== 
setting: minmaxd|rf 
Top-1 Accuracy = 0.22347294440317697 
Top-2 Accuracy = 0.409 
iter 0: [0.22347294440317697] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.18067538997771557 
Top-2 Accuracy = 0.273 
iter 1: [0.18067538997771557] 
setting: standardizes|rf 
Top-1 Accuracy = 0.2245014570595966 
Top-2 Accuracy = 0.41 
iter 2: [0.2245014570595966] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.22473001542768983 
Top-2 Accuracy = 0.408 
iter 3: [0.22473001542768983] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.19901719901719903 
Top-2 Accuracy = 0.348 
iter 4: [0.19901719901719903] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.20713102108450945 
Top-2 Accuracy = 0.382 
iter 5: [0.20713102108450945] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.22404434032341008 
Top-2 Accuracy = 0.41 
iter 6: [0.22404434032341008] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.22375864236329351 
Top-2 Accuracy = 0.409 
iter 7: [0.22375864236329351] 
setting: robustQ|rf 
Top-1 Accuracy = 0.2042740414833438 
Top-2 Accuracy = 0.371 
iter 8: [0.2042740414833438] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.21444488886349353 
Top-2 Accuracy = 0.393 
iter 9: [0.21444488886349353] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.2244443174675733 
Top-2 Accuracy = 0.41 
iter 10: [0.2244443174675733] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.20695960230843952 
Top-2 Accuracy = 0.374 
iter 11: [0.20695960230843952] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.22478715501971316 
Top-2 Accuracy = 0.41 
iter 12: [0.22478715501971316] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.22341580481115364 
Top-2 Accuracy = 0.41 
iter 13: [0.22341580481115364] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.21444488886349353 
Top-2 Accuracy = 0.393 
iter 14: [0.21444488886349353] 
setting: standardizet|rf 
Top-1 Accuracy = 0.18061825038569224 
Top-2 Accuracy = 0.274 
iter 15: [0.18061825038569224] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.21827324152905547 
Top-2 Accuracy = 0.392 
iter 16: [0.21827324152905547] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.22421575909948002 
Top-2 Accuracy = 0.411 
iter 17: [0.22421575909948002] 
setting: robustN|rf 
Top-1 Accuracy = 0.22467287583566653 
Top-2 Accuracy = 0.411 
iter 18: [0.22467287583566653] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.21427347008742356 
Top-2 Accuracy = 0.394 
iter 19: [0.21427347008742356] 
setting: robustp|rf 
Top-1 Accuracy = 0.2245585966516199 
Top-2 Accuracy = 0.411 
iter 20: [0.2245585966516199] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.2249014342037598 
Top-2 Accuracy = 0.411 
iter 21: [0.2249014342037598] 
setting: normalizes|rf 
Top-1 Accuracy = 0.22473001542768983 
Top-2 Accuracy = 0.406 
iter 22: [0.22473001542768983] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.20667390434832295 
Top-2 Accuracy = 0.373 
iter 23: [0.20667390434832295] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.2250157133878064 
Top-2 Accuracy = 0.407 
iter 24: [0.2250157133878064] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.22433003828352666 
Top-2 Accuracy = 0.407 
iter 25: [0.22433003828352666] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.2236443631792469 
Top-2 Accuracy = 0.406 
iter 26: [0.2236443631792469] 
setting: standardizef|rf 
Top-1 Accuracy = 0.22524427175589967 
Top-2 Accuracy = 0.408 
iter 27: [0.22524427175589967] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.18181818181818182 
Top-2 Accuracy = 0.274 
iter 28: [0.18181818181818182] 
setting: robustK|rf 
Top-1 Accuracy = 0.2174732872407291 
Top-2 Accuracy = 0.392 
iter 29: [0.2174732872407291] 
Run # 10 
======= 
setting: standardizeX|rf 
Top-1 Accuracy = 0.2174732872407291 
Top-2 Accuracy = 0.392 
iter 0: [0.2174732872407291] 
setting: standardizer|rf 
Top-1 Accuracy = 0.2174732872407291 
Top-2 Accuracy = 0.392 
iter 1: [0.2174732872407291] 
setting: robustp|rf 
Top-1 Accuracy = 0.2174732872407291 
Top-2 Accuracy = 0.392 
iter 2: [0.2174732872407291] 
setting: robustW|rf 
Top-1 Accuracy = 0.22387292154734015 
Top-2 Accuracy = 0.407 
iter 3: [0.22387292154734015] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.22415861950745672 
Top-2 Accuracy = 0.407 
iter 4: [0.22415861950745672] 
setting: robustE|rf 
Top-1 Accuracy = 0.1769041769041769 
Top-2 Accuracy = 0.27 
iter 5: [0.1769041769041769] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.17964687732129592 
Top-2 Accuracy = 0.273 
iter 6: [0.17964687732129592] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.2174732872407291 
Top-2 Accuracy = 0.392 
iter 7: [0.2174732872407291] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.22381578195531684 
Top-2 Accuracy = 0.407 
iter 8: [0.22381578195531684] 
setting: robusty|rf 
Top-1 Accuracy = 0.2077024170047426 
Top-2 Accuracy = 0.379 
iter 9: [0.2077024170047426] 
setting: normalized|rf 
Top-1 Accuracy = 0.17844694588880636 
Top-2 Accuracy = 0.271 
iter 10: [0.17844694588880636] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.20330266841894748 
Top-2 Accuracy = 0.365 
iter 11: [0.20330266841894748] 
setting: standardizep|rf 
Top-1 Accuracy = 0.20661676475629964 
Top-2 Accuracy = 0.377 
iter 12: [0.20661676475629964] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.22655848237243587 
Top-2 Accuracy = 0.412 
iter 13: [0.22655848237243587] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.21547340151991315 
Top-2 Accuracy = 0.394 
iter 14: [0.21547340151991315] 
setting: standardizee|rf 
Top-1 Accuracy = 0.22644420318838923 
Top-2 Accuracy = 0.411 
iter 15: [0.22644420318838923] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.21547340151991315 
Top-2 Accuracy = 0.394 
iter 16: [0.21547340151991315] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.21547340151991315 
Top-2 Accuracy = 0.394 
iter 17: [0.21547340151991315] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.21804468316096223 
Top-2 Accuracy = 0.402 
iter 18: [0.21804468316096223] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.21598765784812296 
Top-2 Accuracy = 0.394 
iter 19: [0.21598765784812296] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.1817039026341352 
Top-2 Accuracy = 0.275 
iter 20: [0.1817039026341352] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.2051311353636935 
Top-2 Accuracy = 0.36 
iter 21: [0.2051311353636935] 
setting: normalizem|rf 
Top-1 Accuracy = 0.21587337866407633 
Top-2 Accuracy = 0.394 
iter 22: [0.21587337866407633] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.17541854751157077 
Top-2 Accuracy = 0.267 
iter 23: [0.17541854751157077] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.1733615221987315 
Top-2 Accuracy = 0.268 
iter 24: [0.1733615221987315] 
setting: robustG|rf 
Top-1 Accuracy = 0.22518713216387634 
Top-2 Accuracy = 0.41 
iter 25: [0.22518713216387634] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.22878692646134507 
Top-2 Accuracy = 0.413 
iter 26: [0.22878692646134507] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.1795325981372493 
Top-2 Accuracy = 0.271 
iter 27: [0.1795325981372493] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.2174732872407291 
Top-2 Accuracy = 0.392 
iter 28: [0.2174732872407291] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.22478715501971316 
Top-2 Accuracy = 0.41 
iter 29: [0.22478715501971316] 
Run # 11 
======= 
setting: normalizex|rf 
Top-1 Accuracy = 0.21935889377749843 
Top-2 Accuracy = 0.39 
iter 0: [0.21935889377749843] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.17930403976915604 
Top-2 Accuracy = 0.272 
iter 1: [0.17930403976915604] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.20450259985143707 
Top-2 Accuracy = 0.372 
iter 2: [0.20450259985143707] 
setting: standardizec|rf 
Top-1 Accuracy = 0.21935889377749843 
Top-2 Accuracy = 0.39 
iter 3: [0.21935889377749843] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.22947260156562482 
Top-2 Accuracy = 0.414 
iter 4: [0.22947260156562482] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.21935889377749843 
Top-2 Accuracy = 0.39 
iter 5: [0.21935889377749843] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.22947260156562482 
Top-2 Accuracy = 0.414 
iter 6: [0.22947260156562482] 
setting: standardized|rf 
Top-1 Accuracy = 0.21935889377749843 
Top-2 Accuracy = 0.39 
iter 7: [0.21935889377749843] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.20758813782069596 
Top-2 Accuracy = 0.379 
iter 8: [0.20758813782069596] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.17621850179989715 
Top-2 Accuracy = 0.269 
iter 9: [0.17621850179989715] 
setting: robustq|rf 
Top-1 Accuracy = 0.181303925489972 
Top-2 Accuracy = 0.275 
iter 10: [0.181303925489972] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.21547340151991315 
Top-2 Accuracy = 0.392 
iter 11: [0.21547340151991315] 
setting: standardizex|rf 
Top-1 Accuracy = 0.22872978686932174 
Top-2 Accuracy = 0.415 
iter 12: [0.22872978686932174] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.18136106508199532 
Top-2 Accuracy = 0.275 
iter 13: [0.18136106508199532] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.20358836637906405 
Top-2 Accuracy = 0.359 
iter 14: [0.20358836637906405] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.17593280383978058 
Top-2 Accuracy = 0.27 
iter 15: [0.17593280383978058] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.2157019598880064 
Top-2 Accuracy = 0.392 
iter 16: [0.2157019598880064] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.2023884349465745 
Top-2 Accuracy = 0.373 
iter 17: [0.2023884349465745] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.17873264384892293 
Top-2 Accuracy = 0.272 
iter 18: [0.17873264384892293] 
setting: robustD|rf 
Top-1 Accuracy = 0.20873092966116222 
Top-2 Accuracy = 0.374 
iter 19: [0.20873092966116222] 
setting: standardizef|rf 
Top-1 Accuracy = 0.1768470373121536 
Top-2 Accuracy = 0.267 
iter 20: [0.1768470373121536] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.20678818353236958 
Top-2 Accuracy = 0.374 
iter 21: [0.20678818353236958] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.204674018627507 
Top-2 Accuracy = 0.366 
iter 22: [0.204674018627507] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.20753099822867266 
Top-2 Accuracy = 0.373 
iter 23: [0.20753099822867266] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.17804696874464315 
Top-2 Accuracy = 0.271 
iter 24: [0.17804696874464315] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.22421575909948002 
Top-2 Accuracy = 0.407 
iter 25: [0.22421575909948002] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.21627335580823953 
Top-2 Accuracy = 0.394 
iter 26: [0.21627335580823953] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.21627335580823953 
Top-2 Accuracy = 0.394 
iter 27: [0.21627335580823953] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.21627335580823953 
Top-2 Accuracy = 0.394 
iter 28: [0.21627335580823953] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.22461573624364323 
Top-2 Accuracy = 0.409 
iter 29: [0.22461573624364323] 
Run # 12 
======= 
setting: maxabsR|rf 
Top-1 Accuracy = 0.20398834352322726 
Top-2 Accuracy = 0.372 
iter 0: [0.20398834352322726] 
setting: robusti|rf 
Top-1 Accuracy = 0.20507399577167018 
Top-2 Accuracy = 0.374 
iter 1: [0.20507399577167018] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.2134735157990972 
Top-2 Accuracy = 0.388 
iter 2: [0.2134735157990972] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.20838809210902234 
Top-2 Accuracy = 0.376 
iter 3: [0.20838809210902234] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.2231872464430604 
Top-2 Accuracy = 0.408 
iter 4: [0.2231872464430604] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.18027541283355236 
Top-2 Accuracy = 0.274 
iter 5: [0.18027541283355236] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.2134735157990972 
Top-2 Accuracy = 0.388 
iter 6: [0.2134735157990972] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.19833152391291925 
Top-2 Accuracy = 0.343 
iter 7: [0.19833152391291925] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.20233129535455116 
Top-2 Accuracy = 0.353 
iter 8: [0.20233129535455116] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.17930403976915604 
Top-2 Accuracy = 0.272 
iter 9: [0.17930403976915604] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.21238786355065425 
Top-2 Accuracy = 0.386 
iter 10: [0.21238786355065425] 
setting: robustm|rf 
Top-1 Accuracy = 0.22575852808410948 
Top-2 Accuracy = 0.413 
iter 11: [0.22575852808410948] 
setting: normalizes|rf 
Top-1 Accuracy = 0.20564539169190332 
Top-2 Accuracy = 0.371 
iter 12: [0.20564539169190332] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.20661676475629964 
Top-2 Accuracy = 0.377 
iter 13: [0.20661676475629964] 
setting: standardizei|rf 
Top-1 Accuracy = 0.22250157133878065 
Top-2 Accuracy = 0.41 
iter 14: [0.22250157133878065] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.20627392720415977 
Top-2 Accuracy = 0.37 
iter 15: [0.20627392720415977] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.20101708473801497 
Top-2 Accuracy = 0.351 
iter 16: [0.20101708473801497] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.22181589623450088 
Top-2 Accuracy = 0.41 
iter 17: [0.22181589623450088] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.20204559739443462 
Top-2 Accuracy = 0.365 
iter 18: [0.20204559739443462] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.20793097537283584 
Top-2 Accuracy = 0.378 
iter 19: [0.20793097537283584] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.21107365293411806 
Top-2 Accuracy = 0.386 
iter 20: [0.21107365293411806] 
setting: normalizen|rf 
Top-1 Accuracy = 0.22113022113022113 
Top-2 Accuracy = 0.406 
iter 21: [0.22113022113022113] 
setting: robusta|rf 
Top-1 Accuracy = 0.2118164676304211 
Top-2 Accuracy = 0.386 
iter 22: [0.2118164676304211] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.20661676475629964 
Top-2 Accuracy = 0.378 
iter 23: [0.20661676475629964] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.2258156676761328 
Top-2 Accuracy = 0.411 
iter 24: [0.2258156676761328] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.18141820467401862 
Top-2 Accuracy = 0.275 
iter 25: [0.18141820467401862] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.2219301754185475 
Top-2 Accuracy = 0.408 
iter 26: [0.2219301754185475] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.1809039483458088 
Top-2 Accuracy = 0.273 
iter 27: [0.1809039483458088] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.20621678761213644 
Top-2 Accuracy = 0.374 
iter 28: [0.20621678761213644] 
setting: standardizet|rf 
Top-1 Accuracy = 0.21284498028684076 
Top-2 Accuracy = 0.391 
iter 29: [0.21284498028684076] 
Run # 13 
======= 
setting: maxabsN|rf 
Top-1 Accuracy = 0.2236443631792469 
Top-2 Accuracy = 0.41 
iter 0: [0.2236443631792469] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.22393006113936348 
Top-2 Accuracy = 0.41 
iter 1: [0.22393006113936348] 
setting: maxabso|rf 
Top-1 Accuracy = 0.22290154848294383 
Top-2 Accuracy = 0.41 
iter 2: [0.22290154848294383] 
setting: normalized|rf 
Top-1 Accuracy = 0.17936117936117937 
Top-2 Accuracy = 0.273 
iter 3: [0.17936117936117937] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.17833266670475972 
Top-2 Accuracy = 0.27 
iter 4: [0.17833266670475972] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.21638763499228617 
Top-2 Accuracy = 0.391 
iter 5: [0.21638763499228617] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.20810239414890577 
Top-2 Accuracy = 0.375 
iter 6: [0.20810239414890577] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.18198960059425176 
Top-2 Accuracy = 0.276 
iter 7: [0.18198960059425176] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.17713273527227016 
Top-2 Accuracy = 0.271 
iter 8: [0.17713273527227016] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.20518827495571682 
Top-2 Accuracy = 0.371 
iter 9: [0.20518827495571682] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.2059310896520199 
Top-2 Accuracy = 0.369 
iter 10: [0.2059310896520199] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.22650134278041253 
Top-2 Accuracy = 0.414 
iter 11: [0.22650134278041253] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.17833266670475972 
Top-2 Accuracy = 0.271 
iter 12: [0.17833266670475972] 
setting: maxabst|rf 
Top-1 Accuracy = 0.21638763499228617 
Top-2 Accuracy = 0.391 
iter 13: [0.21638763499228617] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.2006742471858751 
Top-2 Accuracy = 0.353 
iter 14: [0.2006742471858751] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.17576138506371064 
Top-2 Accuracy = 0.27 
iter 15: [0.17576138506371064] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.2077595565967659 
Top-2 Accuracy = 0.38 
iter 16: [0.2077595565967659] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.22404434032341008 
Top-2 Accuracy = 0.407 
iter 17: [0.22404434032341008] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.2285583680932518 
Top-2 Accuracy = 0.413 
iter 18: [0.2285583680932518] 
setting: standardizew|rf 
Top-1 Accuracy = 0.20484543740357694 
Top-2 Accuracy = 0.377 
iter 19: [0.20484543740357694] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.21775898520084566 
Top-2 Accuracy = 0.393 
iter 20: [0.21775898520084566] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.21775898520084566 
Top-2 Accuracy = 0.393 
iter 21: [0.21775898520084566] 
setting: normalizec|rf 
Top-1 Accuracy = 0.22227301297068738 
Top-2 Accuracy = 0.406 
iter 22: [0.22227301297068738] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.20524541454774012 
Top-2 Accuracy = 0.376 
iter 23: [0.20524541454774012] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.20970230272555854 
Top-2 Accuracy = 0.375 
iter 24: [0.20970230272555854] 
setting: maxabss|rf 
Top-1 Accuracy = 0.2231301068510371 
Top-2 Accuracy = 0.406 
iter 25: [0.2231301068510371] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.20387406433918062 
Top-2 Accuracy = 0.371 
iter 26: [0.20387406433918062] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.20501685617964688 
Top-2 Accuracy = 0.369 
iter 27: [0.20501685617964688] 
setting: normalizem|rf 
Top-1 Accuracy = 0.20078852636992173 
Top-2 Accuracy = 0.366 
iter 28: [0.20078852636992173] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.22381578195531684 
Top-2 Accuracy = 0.41 
iter 29: [0.22381578195531684] 
Run # 14 
======= 
setting: maxabsV|rf 
Top-1 Accuracy = 0.22421575909948002 
Top-2 Accuracy = 0.41 
iter 0: [0.22421575909948002] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.22433003828352666 
Top-2 Accuracy = 0.409 
iter 1: [0.22433003828352666] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.20758813782069596 
Top-2 Accuracy = 0.372 
iter 2: [0.20758813782069596] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.1804468316096223 
Top-2 Accuracy = 0.272 
iter 3: [0.1804468316096223] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.21370207416719045 
Top-2 Accuracy = 0.391 
iter 4: [0.21370207416719045] 
setting: normalizej|rf 
Top-1 Accuracy = 0.20570253128392663 
Top-2 Accuracy = 0.375 
iter 5: [0.20570253128392663] 
setting: robusto|rf 
Top-1 Accuracy = 0.1786183646648763 
Top-2 Accuracy = 0.273 
iter 6: [0.1786183646648763] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.22381578195531684 
Top-2 Accuracy = 0.411 
iter 7: [0.22381578195531684] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.21427347008742356 
Top-2 Accuracy = 0.391 
iter 8: [0.21427347008742356] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.21427347008742356 
Top-2 Accuracy = 0.391 
iter 9: [0.21427347008742356] 
setting: standardizek|rf 
Top-1 Accuracy = 0.21427347008742356 
Top-2 Accuracy = 0.391 
iter 10: [0.21427347008742356] 
setting: robustw|rf 
Top-1 Accuracy = 0.22415861950745672 
Top-2 Accuracy = 0.411 
iter 11: [0.22415861950745672] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.20084566596194503 
Top-2 Accuracy = 0.354 
iter 12: [0.20084566596194503] 
setting: normalizey|rf 
Top-1 Accuracy = 0.18410376549911434 
Top-2 Accuracy = 0.278 
iter 13: [0.18410376549911434] 
setting: robustB|rf 
Top-1 Accuracy = 0.22564424890006285 
Top-2 Accuracy = 0.41 
iter 14: [0.22564424890006285] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.20638820638820637 
Top-2 Accuracy = 0.375 
iter 15: [0.20638820638820637] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.18107536712187874 
Top-2 Accuracy = 0.275 
iter 16: [0.18107536712187874] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.17947545854522598 
Top-2 Accuracy = 0.273 
iter 17: [0.17947545854522598] 
setting: robustd|rf 
Top-1 Accuracy = 0.22558710930803955 
Top-2 Accuracy = 0.411 
iter 18: [0.22558710930803955] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.2147877264156334 
Top-2 Accuracy = 0.394 
iter 19: [0.2147877264156334] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.20570253128392663 
Top-2 Accuracy = 0.373 
iter 20: [0.20570253128392663] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.2249014342037598 
Top-2 Accuracy = 0.412 
iter 21: [0.2249014342037598] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.20444546025941374 
Top-2 Accuracy = 0.376 
iter 22: [0.20444546025941374] 
setting: robustS|rf 
Top-1 Accuracy = 0.20478829781155364 
Top-2 Accuracy = 0.378 
iter 23: [0.20478829781155364] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.1773041540483401 
Top-2 Accuracy = 0.271 
iter 24: [0.1773041540483401] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.20564539169190332 
Top-2 Accuracy = 0.376 
iter 25: [0.20564539169190332] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.18016113364950576 
Top-2 Accuracy = 0.274 
iter 26: [0.18016113364950576] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.21490200559968 
Top-2 Accuracy = 0.393 
iter 27: [0.21490200559968] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.22524427175589967 
Top-2 Accuracy = 0.411 
iter 28: [0.22524427175589967] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.2245585966516199 
Top-2 Accuracy = 0.409 
iter 29: [0.2245585966516199] 
Run # 15 
======= 
setting: normalizeS|rf 
Top-1 Accuracy = 0.1799325752814125 
Top-2 Accuracy = 0.273 
iter 0: [0.1799325752814125] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.1750185703674076 
Top-2 Accuracy = 0.269 
iter 1: [0.1750185703674076] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.20324552882692418 
Top-2 Accuracy = 0.375 
iter 2: [0.20324552882692418] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.22433003828352666 
Top-2 Accuracy = 0.409 
iter 3: [0.22433003828352666] 
setting: robustC|rf 
Top-1 Accuracy = 0.20764527741271926 
Top-2 Accuracy = 0.374 
iter 4: [0.20764527741271926] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.20095994514599166 
Top-2 Accuracy = 0.35 
iter 5: [0.20095994514599166] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.17884692303296953 
Top-2 Accuracy = 0.272 
iter 6: [0.17884692303296953] 
setting: normalizev|rf 
Top-1 Accuracy = 0.20673104394034628 
Top-2 Accuracy = 0.376 
iter 7: [0.20673104394034628] 
setting: robustS|rf 
Top-1 Accuracy = 0.2258156676761328 
Top-2 Accuracy = 0.411 
iter 8: [0.2258156676761328] 
setting: robustY|rf 
Top-1 Accuracy = 0.22592994686017942 
Top-2 Accuracy = 0.411 
iter 9: [0.22592994686017942] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.18181818181818182 
Top-2 Accuracy = 0.275 
iter 10: [0.18181818181818182] 
setting: maxabso|rf 
Top-1 Accuracy = 0.20501685617964688 
Top-2 Accuracy = 0.374 
iter 11: [0.20501685617964688] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.21284498028684076 
Top-2 Accuracy = 0.391 
iter 12: [0.21284498028684076] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.22427289869150335 
Top-2 Accuracy = 0.409 
iter 13: [0.22427289869150335] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.21284498028684076 
Top-2 Accuracy = 0.391 
iter 14: [0.21284498028684076] 
setting: robustM|rf 
Top-1 Accuracy = 0.22433003828352666 
Top-2 Accuracy = 0.41 
iter 15: [0.22433003828352666] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.2072453002685561 
Top-2 Accuracy = 0.374 
iter 16: [0.2072453002685561] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.17838980629678305 
Top-2 Accuracy = 0.273 
iter 17: [0.17838980629678305] 
setting: robustn|rf 
Top-1 Accuracy = 0.21535912233586652 
Top-2 Accuracy = 0.393 
iter 18: [0.21535912233586652] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.226215644820296 
Top-2 Accuracy = 0.412 
iter 19: [0.226215644820296] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.22615850522827266 
Top-2 Accuracy = 0.411 
iter 20: [0.22615850522827266] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.17221873035826524 
Top-2 Accuracy = 0.266 
iter 21: [0.17221873035826524] 
setting: standardizev|rf 
Top-1 Accuracy = 0.21473058682361007 
Top-2 Accuracy = 0.394 
iter 22: [0.21473058682361007] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.175647105879664 
Top-2 Accuracy = 0.268 
iter 23: [0.175647105879664] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.20587395005999656 
Top-2 Accuracy = 0.377 
iter 24: [0.20587395005999656] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.21598765784812296 
Top-2 Accuracy = 0.391 
iter 25: [0.21598765784812296] 
setting: robustR|rf 
Top-1 Accuracy = 0.21598765784812296 
Top-2 Accuracy = 0.391 
iter 26: [0.21598765784812296] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.20353122678704075 
Top-2 Accuracy = 0.367 
iter 27: [0.20353122678704075] 
setting: normalizex|rf 
Top-1 Accuracy = 0.17976115650534255 
Top-2 Accuracy = 0.273 
iter 28: [0.17976115650534255] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.226215644820296 
Top-2 Accuracy = 0.412 
iter 29: [0.226215644820296] 
Run # 16 
======= 
setting: normalizeL|rf 
Top-1 Accuracy = 0.21684475172847265 
Top-2 Accuracy = 0.397 
iter 0: [0.21684475172847265] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.22650134278041253 
Top-2 Accuracy = 0.412 
iter 1: [0.22650134278041253] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.20798811496485914 
Top-2 Accuracy = 0.378 
iter 2: [0.20798811496485914] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.17793268956059655 
Top-2 Accuracy = 0.272 
iter 3: [0.17793268956059655] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.20661676475629964 
Top-2 Accuracy = 0.376 
iter 4: [0.20661676475629964] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.21684475172847265 
Top-2 Accuracy = 0.397 
iter 5: [0.21684475172847265] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.22615850522827266 
Top-2 Accuracy = 0.412 
iter 6: [0.22615850522827266] 
setting: normalizei|rf 
Top-1 Accuracy = 0.21575909948002972 
Top-2 Accuracy = 0.396 
iter 7: [0.21575909948002972] 
setting: robustT|rf 
Top-1 Accuracy = 0.22644420318838923 
Top-2 Accuracy = 0.412 
iter 8: [0.22644420318838923] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.21575909948002972 
Top-2 Accuracy = 0.396 
iter 9: [0.21575909948002972] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.22644420318838923 
Top-2 Accuracy = 0.412 
iter 10: [0.22644420318838923] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.20833095251699904 
Top-2 Accuracy = 0.374 
iter 11: [0.20833095251699904] 
setting: robustY|rf 
Top-1 Accuracy = 0.22467287583566653 
Top-2 Accuracy = 0.409 
iter 12: [0.22467287583566653] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.20935946517341866 
Top-2 Accuracy = 0.379 
iter 13: [0.20935946517341866] 
setting: standardizey|rf 
Top-1 Accuracy = 0.1816467630421119 
Top-2 Accuracy = 0.272 
iter 14: [0.1816467630421119] 
setting: robusto|rf 
Top-1 Accuracy = 0.20787383578081253 
Top-2 Accuracy = 0.378 
iter 15: [0.20787383578081253] 
setting: robusta|rf 
Top-1 Accuracy = 0.22467287583566653 
Top-2 Accuracy = 0.409 
iter 16: [0.22467287583566653] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.20610250842808983 
Top-2 Accuracy = 0.373 
iter 17: [0.20610250842808983] 
setting: normalizem|rf 
Top-1 Accuracy = 0.2262727844123193 
Top-2 Accuracy = 0.411 
iter 18: [0.2262727844123193] 
setting: robustE|rf 
Top-1 Accuracy = 0.22564424890006285 
Top-2 Accuracy = 0.411 
iter 19: [0.22564424890006285] 
setting: robustK|rf 
Top-1 Accuracy = 0.22638706359636593 
Top-2 Accuracy = 0.411 
iter 20: [0.22638706359636593] 
setting: robustZ|rf 
Top-1 Accuracy = 0.22638706359636593 
Top-2 Accuracy = 0.411 
iter 21: [0.22638706359636593] 
setting: robustc|rf 
Top-1 Accuracy = 0.180389692017599 
Top-2 Accuracy = 0.274 
iter 22: [0.180389692017599] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.21553054111193645 
Top-2 Accuracy = 0.391 
iter 23: [0.21553054111193645] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.1791326209930861 
Top-2 Accuracy = 0.274 
iter 24: [0.1791326209930861] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.20410262270727386 
Top-2 Accuracy = 0.376 
iter 25: [0.20410262270727386] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.2262727844123193 
Top-2 Accuracy = 0.411 
iter 26: [0.2262727844123193] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.21553054111193645 
Top-2 Accuracy = 0.391 
iter 27: [0.21553054111193645] 
setting: robustH|rf 
Top-1 Accuracy = 0.21553054111193645 
Top-2 Accuracy = 0.391 
iter 28: [0.21553054111193645] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.18010399405748242 
Top-2 Accuracy = 0.272 
iter 29: [0.18010399405748242] 
Run # 17 
======= 
setting: standardizef|rf 
Top-1 Accuracy = 0.20587395005999656 
Top-2 Accuracy = 0.372 
iter 0: [0.20587395005999656] 
setting: normalizez|rf 
Top-1 Accuracy = 0.2059310896520199 
Top-2 Accuracy = 0.376 
iter 1: [0.2059310896520199] 
setting: robustU|rf 
Top-1 Accuracy = 0.22661562196445917 
Top-2 Accuracy = 0.411 
iter 2: [0.22661562196445917] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.20621678761213644 
Top-2 Accuracy = 0.377 
iter 3: [0.20621678761213644] 
setting: standardizek|rf 
Top-1 Accuracy = 0.21415919090337696 
Top-2 Accuracy = 0.391 
iter 4: [0.21415919090337696] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.21415919090337696 
Top-2 Accuracy = 0.391 
iter 5: [0.21415919090337696] 
setting: standardizer|rf 
Top-1 Accuracy = 0.2267299011485058 
Top-2 Accuracy = 0.411 
iter 6: [0.2267299011485058] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.1786183646648763 
Top-2 Accuracy = 0.272 
iter 7: [0.1786183646648763] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.2055311125078567 
Top-2 Accuracy = 0.373 
iter 8: [0.2055311125078567] 
setting: robustX|rf 
Top-1 Accuracy = 0.2073024398605794 
Top-2 Accuracy = 0.376 
iter 9: [0.2073024398605794] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.20798811496485914 
Top-2 Accuracy = 0.378 
iter 10: [0.20798811496485914] 
setting: robustg|rf 
Top-1 Accuracy = 0.17793268956059655 
Top-2 Accuracy = 0.27 
iter 11: [0.17793268956059655] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.21753042683275242 
Top-2 Accuracy = 0.39 
iter 12: [0.21753042683275242] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.22507285297982974 
Top-2 Accuracy = 0.41 
iter 13: [0.22507285297982974] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.21387349294326038 
Top-2 Accuracy = 0.391 
iter 14: [0.21387349294326038] 
setting: normalizek|rf 
Top-1 Accuracy = 0.21387349294326038 
Top-2 Accuracy = 0.391 
iter 15: [0.21387349294326038] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.2077024170047426 
Top-2 Accuracy = 0.378 
iter 16: [0.2077024170047426] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.22518713216387634 
Top-2 Accuracy = 0.411 
iter 17: [0.22518713216387634] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.18021827324152906 
Top-2 Accuracy = 0.274 
iter 18: [0.18021827324152906] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.2244443174675733 
Top-2 Accuracy = 0.409 
iter 19: [0.2244443174675733] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.21295925947088737 
Top-2 Accuracy = 0.391 
iter 20: [0.21295925947088737] 
setting: normalizes|rf 
Top-1 Accuracy = 0.2254728301239929 
Top-2 Accuracy = 0.411 
iter 21: [0.2254728301239929] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.2019884578024113 
Top-2 Accuracy = 0.37 
iter 22: [0.2019884578024113] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.22518713216387634 
Top-2 Accuracy = 0.411 
iter 23: [0.22518713216387634] 
setting: robustb|rf 
Top-1 Accuracy = 0.1764470601679904 
Top-2 Accuracy = 0.268 
iter 24: [0.1764470601679904] 
setting: robustt|rf 
Top-1 Accuracy = 0.206502485572253 
Top-2 Accuracy = 0.378 
iter 25: [0.206502485572253] 
setting: robustQ|rf 
Top-1 Accuracy = 0.2245014570595966 
Top-2 Accuracy = 0.41 
iter 26: [0.2245014570595966] 
setting: standardized|rf 
Top-1 Accuracy = 0.22410147991543342 
Top-2 Accuracy = 0.41 
iter 27: [0.22410147991543342] 
setting: robustY|rf 
Top-1 Accuracy = 0.22507285297982974 
Top-2 Accuracy = 0.411 
iter 28: [0.22507285297982974] 
setting: normalizex|rf 
Top-1 Accuracy = 0.2226729901148506 
Top-2 Accuracy = 0.406 
iter 29: [0.2226729901148506] 
Run # 18 
======= 
setting: standardizee|rf 
Top-1 Accuracy = 0.19993143248957201 
Top-2 Accuracy = 0.351 
iter 0: [0.19993143248957201] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.20524541454774012 
Top-2 Accuracy = 0.378 
iter 1: [0.20524541454774012] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.2047311582195303 
Top-2 Accuracy = 0.378 
iter 2: [0.2047311582195303] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.22478715501971316 
Top-2 Accuracy = 0.411 
iter 3: [0.22478715501971316] 
setting: standardizev|rf 
Top-1 Accuracy = 0.2249014342037598 
Top-2 Accuracy = 0.411 
iter 4: [0.2249014342037598] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.17981829609736585 
Top-2 Accuracy = 0.273 
iter 5: [0.17981829609736585] 
setting: robusti|rf 
Top-1 Accuracy = 0.2250157133878064 
Top-2 Accuracy = 0.411 
iter 6: [0.2250157133878064] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.18124678589794868 
Top-2 Accuracy = 0.274 
iter 7: [0.18124678589794868] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.20895948802925546 
Top-2 Accuracy = 0.376 
iter 8: [0.20895948802925546] 
setting: robustv|rf 
Top-1 Accuracy = 0.2250157133878064 
Top-2 Accuracy = 0.411 
iter 9: [0.2250157133878064] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.17661847894406035 
Top-2 Accuracy = 0.27 
iter 10: [0.17661847894406035] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.22530141134792298 
Top-2 Accuracy = 0.413 
iter 11: [0.22530141134792298] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.20661676475629964 
Top-2 Accuracy = 0.376 
iter 12: [0.20661676475629964] 
setting: normalizez|rf 
Top-1 Accuracy = 0.198102965544826 
Top-2 Accuracy = 0.352 
iter 13: [0.198102965544826] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.21364493457516714 
Top-2 Accuracy = 0.393 
iter 14: [0.21364493457516714] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.21364493457516714 
Top-2 Accuracy = 0.393 
iter 15: [0.21364493457516714] 
setting: robustb|rf 
Top-1 Accuracy = 0.17890406262499287 
Top-2 Accuracy = 0.272 
iter 16: [0.17890406262499287] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.21364493457516714 
Top-2 Accuracy = 0.393 
iter 17: [0.21364493457516714] 
setting: robuste|rf 
Top-1 Accuracy = 0.18050397120164563 
Top-2 Accuracy = 0.274 
iter 18: [0.18050397120164563] 
setting: robustu|rf 
Top-1 Accuracy = 0.18021827324152906 
Top-2 Accuracy = 0.272 
iter 19: [0.18021827324152906] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.22473001542768983 
Top-2 Accuracy = 0.41 
iter 20: [0.22473001542768983] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.1750757099594309 
Top-2 Accuracy = 0.267 
iter 21: [0.1750757099594309] 
setting: standardizet|rf 
Top-1 Accuracy = 0.21364493457516714 
Top-2 Accuracy = 0.393 
iter 22: [0.21364493457516714] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.2055311125078567 
Top-2 Accuracy = 0.379 
iter 23: [0.2055311125078567] 
setting: robustG|rf 
Top-1 Accuracy = 0.20484543740357694 
Top-2 Accuracy = 0.368 
iter 24: [0.20484543740357694] 
setting: normalizes|rf 
Top-1 Accuracy = 0.17936117936117937 
Top-2 Accuracy = 0.271 
iter 25: [0.17936117936117937] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.21935889377749843 
Top-2 Accuracy = 0.402 
iter 26: [0.21935889377749843] 
setting: normalizee|rf 
Top-1 Accuracy = 0.20267413290669103 
Top-2 Accuracy = 0.369 
iter 27: [0.20267413290669103] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.20627392720415977 
Top-2 Accuracy = 0.373 
iter 28: [0.20627392720415977] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.20410262270727386 
Top-2 Accuracy = 0.356 
iter 29: [0.20410262270727386] 
Run # 19 
======= 
setting: robustV|rf 
Top-1 Accuracy = 0.2078166961887892 
Top-2 Accuracy = 0.376 
iter 0: [0.2078166961887892] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.20701674190046282 
Top-2 Accuracy = 0.373 
iter 1: [0.20701674190046282] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.20124564310610824 
Top-2 Accuracy = 0.36 
iter 2: [0.20124564310610824] 
setting: robustI|rf 
Top-1 Accuracy = 0.21050225701388492 
Top-2 Accuracy = 0.387 
iter 3: [0.21050225701388492] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.22170161705045427 
Top-2 Accuracy = 0.406 
iter 4: [0.22170161705045427] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.22158733786640764 
Top-2 Accuracy = 0.406 
iter 5: [0.22158733786640764] 
setting: robustZ|rf 
Top-1 Accuracy = 0.22170161705045427 
Top-2 Accuracy = 0.406 
iter 6: [0.22170161705045427] 
setting: robustL|rf 
Top-1 Accuracy = 0.21050225701388492 
Top-2 Accuracy = 0.387 
iter 7: [0.21050225701388492] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.21050225701388492 
Top-2 Accuracy = 0.387 
iter 8: [0.21050225701388492] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.21050225701388492 
Top-2 Accuracy = 0.387 
iter 9: [0.21050225701388492] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.20507399577167018 
Top-2 Accuracy = 0.376 
iter 10: [0.20507399577167018] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.20398834352322726 
Top-2 Accuracy = 0.354 
iter 11: [0.20398834352322726] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.21050225701388492 
Top-2 Accuracy = 0.387 
iter 12: [0.21050225701388492] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.17844694588880636 
Top-2 Accuracy = 0.271 
iter 13: [0.17844694588880636] 
setting: standardizez|rf 
Top-1 Accuracy = 0.2082166733329524 
Top-2 Accuracy = 0.373 
iter 14: [0.2082166733329524] 
setting: robustw|rf 
Top-1 Accuracy = 0.20444546025941374 
Top-2 Accuracy = 0.375 
iter 15: [0.20444546025941374] 
setting: robusts|rf 
Top-1 Accuracy = 0.22164447745843094 
Top-2 Accuracy = 0.406 
iter 16: [0.22164447745843094] 
setting: standardizew|rf 
Top-1 Accuracy = 0.22164447745843094 
Top-2 Accuracy = 0.406 
iter 17: [0.22164447745843094] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.20850237129306898 
Top-2 Accuracy = 0.373 
iter 18: [0.20850237129306898] 
setting: standardizeh|rf 
Top-1 Accuracy = 0.2210159419461745 
Top-2 Accuracy = 0.406 
iter 19: [0.2210159419461745] 
setting: standardizex|rf 
Top-1 Accuracy = 0.21050225701388492 
Top-2 Accuracy = 0.387 
iter 20: [0.21050225701388492] 
setting: normalizey|rf 
Top-1 Accuracy = 0.18187532141020513 
Top-2 Accuracy = 0.274 
iter 21: [0.18187532141020513] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.20615964802011313 
Top-2 Accuracy = 0.374 
iter 22: [0.20615964802011313] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.1816467630421119 
Top-2 Accuracy = 0.274 
iter 23: [0.1816467630421119] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.21050225701388492 
Top-2 Accuracy = 0.387 
iter 24: [0.21050225701388492] 
setting: standardizei|rf 
Top-1 Accuracy = 0.22518713216387634 
Top-2 Accuracy = 0.409 
iter 25: [0.22518713216387634] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.20404548311525056 
Top-2 Accuracy = 0.37 
iter 26: [0.20404548311525056] 
setting: robustn|rf 
Top-1 Accuracy = 0.21050225701388492 
Top-2 Accuracy = 0.387 
iter 27: [0.21050225701388492] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.17884692303296953 
Top-2 Accuracy = 0.27 
iter 28: [0.17884692303296953] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.1809610879378321 
Top-2 Accuracy = 0.274 
iter 29: [0.1809610879378321] 
 
Median top-1 = 0.21050225701388492 
Median top-2 = 0.385 
Running: eclipse 
============================== 
2 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=36), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=16), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=63), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=36), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=46), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=23), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=36), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=84), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=93), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=10), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=85), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=71), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=20), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=98), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=32), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=93), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=23), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=31), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=12), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=18), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=56), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=95), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=91), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=98), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=52), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=64), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=27), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=13), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=18), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=71), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=12), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=91), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=88), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=81), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=53), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=42), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=61), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=29), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=98), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=14), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=82), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=32), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=24), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=98), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: standardizeH|rf 
Top-1 Accuracy = 0.630821095937375 
Top-2 Accuracy = 1.0 
iter 0: [0.630821095937375] 
setting: normalizel|rf 
Top-1 Accuracy = 0.621678761213645 
Top-2 Accuracy = 1.0 
iter 1: [0.621678761213645] 
setting: robustx|rf 
Top-1 Accuracy = 0.6575624250042855 
Top-2 Accuracy = 1.0 
iter 2: [0.6575624250042855] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.6536769327467001 
Top-2 Accuracy = 1.0 
iter 3: [0.6536769327467001] 
setting: robustY|rf 
Top-1 Accuracy = 0.6777898405805383 
Top-2 Accuracy = 1.0 
iter 4: [0.6777898405805383] 
setting: robustl|rf 
Top-1 Accuracy = 0.656933889492029 
Top-2 Accuracy = 1.0 
iter 5: [0.656933889492029] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.6559625164276327 
Top-2 Accuracy = 1.0 
iter 6: [0.6559625164276327] 
setting: robustt|rf 
Top-1 Accuracy = 0.6777898405805383 
Top-2 Accuracy = 1.0 
iter 7: [0.6777898405805383] 
setting: robustk|rf 
Top-1 Accuracy = 0.6567053311239358 
Top-2 Accuracy = 1.0 
iter 8: [0.6567053311239358] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.6203074110050855 
Top-2 Accuracy = 1.0 
iter 9: [0.6203074110050855] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.6575624250042855 
Top-2 Accuracy = 1.0 
iter 10: [0.6575624250042855] 
setting: normalizee|rf 
Top-1 Accuracy = 0.6499628592651848 
Top-2 Accuracy = 1.0 
iter 11: [0.6499628592651848] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.674818581795326 
Top-2 Accuracy = 1.0 
iter 12: [0.674818581795326] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.6457345294554597 
Top-2 Accuracy = 1.0 
iter 13: [0.6457345294554597] 
setting: robustM|rf 
Top-1 Accuracy = 0.6457345294554597 
Top-2 Accuracy = 1.0 
iter 14: [0.6457345294554597] 
setting: robustN|rf 
Top-1 Accuracy = 0.6508199531455345 
Top-2 Accuracy = 1.0 
iter 15: [0.6508199531455345] 
setting: normalizey|rf 
Top-1 Accuracy = 0.6512199302896977 
Top-2 Accuracy = 1.0 
iter 16: [0.6512199302896977] 
setting: normalizer|rf 
Top-1 Accuracy = 0.6428204102622708 
Top-2 Accuracy = 1.0 
iter 17: [0.6428204102622708] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.6504199760013714 
Top-2 Accuracy = 1.0 
iter 18: [0.6504199760013714] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.6693903205531112 
Top-2 Accuracy = 1.0 
iter 19: [0.6693903205531112] 
setting: robustp|rf 
Top-1 Accuracy = 0.6428204102622708 
Top-2 Accuracy = 1.0 
iter 20: [0.6428204102622708] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.6209359465173419 
Top-2 Accuracy = 1.0 
iter 21: [0.6209359465173419] 
setting: robustX|rf 
Top-1 Accuracy = 0.6391063367807553 
Top-2 Accuracy = 1.0 
iter 22: [0.6391063367807553] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.6696760185132278 
Top-2 Accuracy = 1.0 
iter 23: [0.6696760185132278] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.6172218730358265 
Top-2 Accuracy = 1.0 
iter 24: [0.6172218730358265] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.6511056511056511 
Top-2 Accuracy = 1.0 
iter 25: [0.6511056511056511] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.6209359465173419 
Top-2 Accuracy = 1.0 
iter 26: [0.6209359465173419] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.6451059939432032 
Top-2 Accuracy = 1.0 
iter 27: [0.6451059939432032] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.62590709102337 
Top-2 Accuracy = 1.0 
iter 28: [0.62590709102337] 
setting: standardizek|rf 
Top-1 Accuracy = 0.6460773670075995 
Top-2 Accuracy = 1.0 
iter 29: [0.6460773670075995] 
Run # 1 
====== 
setting: maxabsi|rf 
Top-1 Accuracy = 0.6704759728015542 
Top-2 Accuracy = 1.0 
iter 0: [0.6704759728015542] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.6704188332095309 
Top-2 Accuracy = 1.0 
iter 1: [0.6704188332095309] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.6677904119764585 
Top-2 Accuracy = 1.0 
iter 2: [0.6677904119764585] 
setting: normalizea|rf 
Top-1 Accuracy = 0.653276955602537 
Top-2 Accuracy = 1.0 
iter 3: [0.653276955602537] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.6426489914862008 
Top-2 Accuracy = 1.0 
iter 4: [0.6426489914862008] 
setting: normalizej|rf 
Top-1 Accuracy = 0.6199074338609223 
Top-2 Accuracy = 1.0 
iter 5: [0.6199074338609223] 
setting: normalizek|rf 
Top-1 Accuracy = 0.6385920804525456 
Top-2 Accuracy = 1.0 
iter 6: [0.6385920804525456] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.6489343466087653 
Top-2 Accuracy = 1.0 
iter 7: [0.6489343466087653] 
setting: standardizen|rf 
Top-1 Accuracy = 0.649620021713045 
Top-2 Accuracy = 1.0 
iter 8: [0.649620021713045] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.6226501342780413 
Top-2 Accuracy = 1.0 
iter 9: [0.6226501342780413] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.6695045997371579 
Top-2 Accuracy = 1.0 
iter 10: [0.6695045997371579] 
setting: robustC|rf 
Top-1 Accuracy = 0.6693903205531112 
Top-2 Accuracy = 1.0 
iter 11: [0.6693903205531112] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.6421918747500143 
Top-2 Accuracy = 1.0 
iter 12: [0.6421918747500143] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.6468201817039027 
Top-2 Accuracy = 1.0 
iter 13: [0.6468201817039027] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.6218501799897149 
Top-2 Accuracy = 1.0 
iter 14: [0.6218501799897149] 
setting: robustT|rf 
Top-1 Accuracy = 0.6516199074338609 
Top-2 Accuracy = 1.0 
iter 15: [0.6516199074338609] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.6477344151762756 
Top-2 Accuracy = 1.0 
iter 16: [0.6477344151762756] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.6504771155933947 
Top-2 Accuracy = 1.0 
iter 17: [0.6504771155933947] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.6485915090566253 
Top-2 Accuracy = 1.0 
iter 18: [0.6485915090566253] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.6519627449860008 
Top-2 Accuracy = 1.0 
iter 19: [0.6519627449860008] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.6489914862007885 
Top-2 Accuracy = 1.0 
iter 20: [0.6489914862007885] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.6413347808696646 
Top-2 Accuracy = 1.0 
iter 21: [0.6413347808696646] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.6179646877321296 
Top-2 Accuracy = 1.0 
iter 22: [0.6179646877321296] 
setting: robustt|rf 
Top-1 Accuracy = 0.6241357636706474 
Top-2 Accuracy = 1.0 
iter 23: [0.6241357636706474] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.6367064739157763 
Top-2 Accuracy = 1.0 
iter 24: [0.6367064739157763] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.6633906633906634 
Top-2 Accuracy = 1.0 
iter 25: [0.6633906633906634] 
setting: robustB|rf 
Top-1 Accuracy = 0.652191303354094 
Top-2 Accuracy = 1.0 
iter 26: [0.652191303354094] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.6553339809153763 
Top-2 Accuracy = 1.0 
iter 27: [0.6553339809153763] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.6367064739157763 
Top-2 Accuracy = 1.0 
iter 28: [0.6367064739157763] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.6190503399805726 
Top-2 Accuracy = 1.0 
iter 29: [0.6190503399805726] 
Run # 2 
====== 
setting: standardizeA|rf 
Top-1 Accuracy = 0.6367064739157763 
Top-2 Accuracy = 1.0 
iter 0: [0.6367064739157763] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.6629906862465001 
Top-2 Accuracy = 1.0 
iter 1: [0.6629906862465001] 
setting: robustP|rf 
Top-1 Accuracy = 0.6633906633906634 
Top-2 Accuracy = 1.0 
iter 2: [0.6633906633906634] 
setting: robustT|rf 
Top-1 Accuracy = 0.6520770241700474 
Top-2 Accuracy = 1.0 
iter 3: [0.6520770241700474] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.6634478029826867 
Top-2 Accuracy = 1.0 
iter 4: [0.6634478029826867] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.6367064739157763 
Top-2 Accuracy = 1.0 
iter 5: [0.6367064739157763] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.6539054911147935 
Top-2 Accuracy = 1.0 
iter 6: [0.6539054911147935] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.6426489914862008 
Top-2 Accuracy = 1.0 
iter 7: [0.6426489914862008] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.652534140906234 
Top-2 Accuracy = 1.0 
iter 8: [0.652534140906234] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.6243643220387406 
Top-2 Accuracy = 1.0 
iter 9: [0.6243643220387406] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.6392206159648021 
Top-2 Accuracy = 1.0 
iter 10: [0.6392206159648021] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.6613336380778241 
Top-2 Accuracy = 1.0 
iter 11: [0.6613336380778241] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.6392206159648021 
Top-2 Accuracy = 1.0 
iter 12: [0.6392206159648021] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.6531055368264671 
Top-2 Accuracy = 1.0 
iter 13: [0.6531055368264671] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.6392206159648021 
Top-2 Accuracy = 1.0 
iter 14: [0.6392206159648021] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.6253928346951603 
Top-2 Accuracy = 1.0 
iter 15: [0.6253928346951603] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.6243643220387406 
Top-2 Accuracy = 1.0 
iter 16: [0.6243643220387406] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.6626478486943603 
Top-2 Accuracy = 1.0 
iter 17: [0.6626478486943603] 
setting: robustv|rf 
Top-1 Accuracy = 0.6625335695103137 
Top-2 Accuracy = 1.0 
iter 18: [0.6625335695103137] 
setting: robustI|rf 
Top-1 Accuracy = 0.6272213016399063 
Top-2 Accuracy = 1.0 
iter 19: [0.6272213016399063] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.6201359922290155 
Top-2 Accuracy = 1.0 
iter 20: [0.6201359922290155] 
setting: robustV|rf 
Top-1 Accuracy = 0.6192217587566424 
Top-2 Accuracy = 1.0 
iter 21: [0.6192217587566424] 
setting: standardizek|rf 
Top-1 Accuracy = 0.6672190160562254 
Top-2 Accuracy = 1.0 
iter 22: [0.6672190160562254] 
setting: normalizen|rf 
Top-1 Accuracy = 0.6391634763727787 
Top-2 Accuracy = 1.0 
iter 23: [0.6391634763727787] 
setting: robusty|rf 
Top-1 Accuracy = 0.6540197702988401 
Top-2 Accuracy = 1.0 
iter 24: [0.6540197702988401] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.6217930403976916 
Top-2 Accuracy = 1.0 
iter 25: [0.6217930403976916] 
setting: robustk|rf 
Top-1 Accuracy = 0.6391634763727787 
Top-2 Accuracy = 1.0 
iter 26: [0.6391634763727787] 
setting: robustl|rf 
Top-1 Accuracy = 0.6480772527284155 
Top-2 Accuracy = 1.0 
iter 27: [0.6480772527284155] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.6649334323752928 
Top-2 Accuracy = 1.0 
iter 28: [0.6649334323752928] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.6192788983486658 
Top-2 Accuracy = 1.0 
iter 29: [0.6192788983486658] 
Run # 3 
====== 
setting: robustj|rf 
Top-1 Accuracy = 0.6440774812867837 
Top-2 Accuracy = 1.0 
iter 0: [0.6440774812867837] 
setting: robustp|rf 
Top-1 Accuracy = 0.6212787840694818 
Top-2 Accuracy = 1.0 
iter 1: [0.6212787840694818] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.6327067024741443 
Top-2 Accuracy = 1.0 
iter 2: [0.6327067024741443] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.6229358322381578 
Top-2 Accuracy = 1.0 
iter 3: [0.6229358322381578] 
setting: robustO|rf 
Top-1 Accuracy = 0.6688760642249014 
Top-2 Accuracy = 1.0 
iter 4: [0.6688760642249014] 
setting: normalizes|rf 
Top-1 Accuracy = 0.6536769327467001 
Top-2 Accuracy = 1.0 
iter 5: [0.6536769327467001] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.6670475972801554 
Top-2 Accuracy = 1.0 
iter 6: [0.6670475972801554] 
setting: robusta|rf 
Top-1 Accuracy = 0.6392206159648021 
Top-2 Accuracy = 1.0 
iter 7: [0.6392206159648021] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.6392206159648021 
Top-2 Accuracy = 1.0 
iter 8: [0.6392206159648021] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.6330495400262842 
Top-2 Accuracy = 1.0 
iter 9: [0.6330495400262842] 
setting: maxabso|rf 
Top-1 Accuracy = 0.621335923661505 
Top-2 Accuracy = 1.0 
iter 10: [0.621335923661505] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.655105422547283 
Top-2 Accuracy = 1.0 
iter 11: [0.655105422547283] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.6252785555111137 
Top-2 Accuracy = 1.0 
iter 12: [0.6252785555111137] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.6323638649220045 
Top-2 Accuracy = 1.0 
iter 13: [0.6323638649220045] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.6536769327467001 
Top-2 Accuracy = 1.0 
iter 14: [0.6536769327467001] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.6323638649220045 
Top-2 Accuracy = 1.0 
iter 15: [0.6323638649220045] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.6488200674247185 
Top-2 Accuracy = 1.0 
iter 16: [0.6488200674247185] 
setting: normalizet|rf 
Top-1 Accuracy = 0.647620135992229 
Top-2 Accuracy = 1.0 
iter 17: [0.647620135992229] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.6331638192103308 
Top-2 Accuracy = 1.0 
iter 18: [0.6331638192103308] 
setting: normalizel|rf 
Top-1 Accuracy = 0.6512770698817211 
Top-2 Accuracy = 1.0 
iter 19: [0.6512770698817211] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.6331638192103308 
Top-2 Accuracy = 1.0 
iter 20: [0.6331638192103308] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.6196217359008057 
Top-2 Accuracy = 1.0 
iter 21: [0.6196217359008057] 
setting: robustv|rf 
Top-1 Accuracy = 0.6488200674247185 
Top-2 Accuracy = 1.0 
iter 22: [0.6488200674247185] 
setting: robustr|rf 
Top-1 Accuracy = 0.6331638192103308 
Top-2 Accuracy = 1.0 
iter 23: [0.6331638192103308] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.637392149020056 
Top-2 Accuracy = 1.0 
iter 24: [0.637392149020056] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.6736757899548598 
Top-2 Accuracy = 1.0 
iter 25: [0.6736757899548598] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.637392149020056 
Top-2 Accuracy = 1.0 
iter 26: [0.637392149020056] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.673732929546883 
Top-2 Accuracy = 1.0 
iter 27: [0.673732929546883] 
setting: robustI|rf 
Top-1 Accuracy = 0.621678761213645 
Top-2 Accuracy = 1.0 
iter 28: [0.621678761213645] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.6634478029826867 
Top-2 Accuracy = 1.0 
iter 29: [0.6634478029826867] 
Run # 4 
====== 
setting: minmaxd|rf 
Top-1 Accuracy = 0.6640763384949432 
Top-2 Accuracy = 1.0 
iter 0: [0.6640763384949432] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.6237357865264842 
Top-2 Accuracy = 1.0 
iter 1: [0.6237357865264842] 
setting: normalizea|rf 
Top-1 Accuracy = 0.6704188332095309 
Top-2 Accuracy = 1.0 
iter 2: [0.6704188332095309] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.6704759728015542 
Top-2 Accuracy = 1.0 
iter 3: [0.6704759728015542] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.6475058568081824 
Top-2 Accuracy = 1.0 
iter 4: [0.6475058568081824] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.621507342437575 
Top-2 Accuracy = 1.0 
iter 5: [0.621507342437575] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.6213930632535284 
Top-2 Accuracy = 1.0 
iter 6: [0.6213930632535284] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.6312210730815382 
Top-2 Accuracy = 1.0 
iter 7: [0.6312210730815382] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.6690474830009714 
Top-2 Accuracy = 1.0 
iter 8: [0.6690474830009714] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.6208216673332952 
Top-2 Accuracy = 1.0 
iter 9: [0.6208216673332952] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.6685332266727616 
Top-2 Accuracy = 1.0 
iter 10: [0.6685332266727616] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.6312210730815382 
Top-2 Accuracy = 1.0 
iter 11: [0.6312210730815382] 
setting: standardized|rf 
Top-1 Accuracy = 0.622421575909948 
Top-2 Accuracy = 1.0 
iter 12: [0.622421575909948] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.6312210730815382 
Top-2 Accuracy = 1.0 
iter 13: [0.6312210730815382] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.6520770241700474 
Top-2 Accuracy = 1.0 
iter 14: [0.6520770241700474] 
setting: standardizer|rf 
Top-1 Accuracy = 0.6467630421118793 
Top-2 Accuracy = 1.0 
iter 15: [0.6467630421118793] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.6312210730815382 
Top-2 Accuracy = 1.0 
iter 16: [0.6312210730815382] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.6527055596823038 
Top-2 Accuracy = 1.0 
iter 17: [0.6527055596823038] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.6552197017313296 
Top-2 Accuracy = 1.0 
iter 18: [0.6552197017313296] 
setting: robustW|rf 
Top-1 Accuracy = 0.6508770927375579 
Top-2 Accuracy = 1.0 
iter 19: [0.6508770927375579] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.6312210730815382 
Top-2 Accuracy = 1.0 
iter 20: [0.6312210730815382] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.6685332266727616 
Top-2 Accuracy = 1.0 
iter 21: [0.6685332266727616] 
setting: standardizel|rf 
Top-1 Accuracy = 0.6312210730815382 
Top-2 Accuracy = 1.0 
iter 22: [0.6312210730815382] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.6312210730815382 
Top-2 Accuracy = 1.0 
iter 23: [0.6312210730815382] 
setting: robustU|rf 
Top-1 Accuracy = 0.6195645963087824 
Top-2 Accuracy = 1.0 
iter 24: [0.6195645963087824] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.6207645277412719 
Top-2 Accuracy = 1.0 
iter 25: [0.6207645277412719] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.6172790126278498 
Top-2 Accuracy = 1.0 
iter 26: [0.6172790126278498] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.6667047597280156 
Top-2 Accuracy = 1.0 
iter 27: [0.6667047597280156] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.6520770241700474 
Top-2 Accuracy = 1.0 
iter 28: [0.6520770241700474] 
setting: normalizev|rf 
Top-1 Accuracy = 0.6660762242157591 
Top-2 Accuracy = 1.0 
iter 29: [0.6660762242157591] 
Run # 5 
====== 
setting: standardizeS|rf 
Top-1 Accuracy = 0.6520198845780241 
Top-2 Accuracy = 1.0 
iter 0: [0.6520198845780241] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.6313353522655848 
Top-2 Accuracy = 1.0 
iter 1: [0.6313353522655848] 
setting: standardizel|rf 
Top-1 Accuracy = 0.6157362436432204 
Top-2 Accuracy = 1.0 
iter 2: [0.6157362436432204] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.6313353522655848 
Top-2 Accuracy = 1.0 
iter 3: [0.6313353522655848] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.6531055368264671 
Top-2 Accuracy = 1.0 
iter 4: [0.6531055368264671] 
setting: robusts|rf 
Top-1 Accuracy = 0.6680761099365751 
Top-2 Accuracy = 1.0 
iter 5: [0.6680761099365751] 
setting: standardizes|rf 
Top-1 Accuracy = 0.6681332495285983 
Top-2 Accuracy = 1.0 
iter 6: [0.6681332495285983] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.6313353522655848 
Top-2 Accuracy = 1.0 
iter 7: [0.6313353522655848] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.642706131078224 
Top-2 Accuracy = 1.0 
iter 8: [0.642706131078224] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.6681332495285983 
Top-2 Accuracy = 1.0 
iter 9: [0.6681332495285983] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.6201931318210387 
Top-2 Accuracy = 1.0 
iter 10: [0.6201931318210387] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.6536769327467001 
Top-2 Accuracy = 1.0 
iter 11: [0.6536769327467001] 
setting: standardizej|rf 
Top-1 Accuracy = 0.6224787155019713 
Top-2 Accuracy = 1.0 
iter 12: [0.6224787155019713] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.6541340494828867 
Top-2 Accuracy = 1.0 
iter 13: [0.6541340494828867] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.649620021713045 
Top-2 Accuracy = 1.0 
iter 14: [0.649620021713045] 
setting: normalizev|rf 
Top-1 Accuracy = 0.6518484658019542 
Top-2 Accuracy = 1.0 
iter 15: [0.6518484658019542] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.6688189246328782 
Top-2 Accuracy = 1.0 
iter 16: [0.6688189246328782] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.6400777098451517 
Top-2 Accuracy = 1.0 
iter 17: [0.6400777098451517] 
setting: robustY|rf 
Top-1 Accuracy = 0.6681903891206217 
Top-2 Accuracy = 1.0 
iter 18: [0.6681903891206217] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.6324210045140277 
Top-2 Accuracy = 1.0 
iter 19: [0.6324210045140277] 
setting: robustK|rf 
Top-1 Accuracy = 0.6240214844866008 
Top-2 Accuracy = 1.0 
iter 20: [0.6240214844866008] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.6324210045140277 
Top-2 Accuracy = 1.0 
iter 21: [0.6324210045140277] 
setting: robustg|rf 
Top-1 Accuracy = 0.6227072738700645 
Top-2 Accuracy = 1.0 
iter 22: [0.6227072738700645] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.6677904119764585 
Top-2 Accuracy = 1.0 
iter 23: [0.6677904119764585] 
setting: robustM|rf 
Top-1 Accuracy = 0.6484772298725787 
Top-2 Accuracy = 1.0 
iter 24: [0.6484772298725787] 
setting: normalizer|rf 
Top-1 Accuracy = 0.6679618307525285 
Top-2 Accuracy = 1.0 
iter 25: [0.6679618307525285] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.627164162047883 
Top-2 Accuracy = 1.0 
iter 26: [0.627164162047883] 
setting: robustU|rf 
Top-1 Accuracy = 0.6673904348322953 
Top-2 Accuracy = 1.0 
iter 27: [0.6673904348322953] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.6216216216216216 
Top-2 Accuracy = 1.0 
iter 28: [0.6216216216216216] 
setting: normalizen|rf 
Top-1 Accuracy = 0.6536769327467001 
Top-2 Accuracy = 1.0 
iter 29: [0.6536769327467001] 
Run # 6 
====== 
setting: standardizeR|rf 
Top-1 Accuracy = 0.667161876464202 
Top-2 Accuracy = 1.0 
iter 0: [0.667161876464202] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.65419118907491 
Top-2 Accuracy = 1.0 
iter 1: [0.65419118907491] 
setting: robustm|rf 
Top-1 Accuracy = 0.646705902519856 
Top-2 Accuracy = 1.0 
iter 2: [0.646705902519856] 
setting: robustS|rf 
Top-1 Accuracy = 0.6191646191646192 
Top-2 Accuracy = 1.0 
iter 3: [0.6191646191646192] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.627164162047883 
Top-2 Accuracy = 1.0 
iter 4: [0.627164162047883] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.6675618536083653 
Top-2 Accuracy = 1.0 
iter 5: [0.6675618536083653] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.6675047140163419 
Top-2 Accuracy = 1.0 
iter 6: [0.6675047140163419] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.6676761327924119 
Top-2 Accuracy = 1.0 
iter 7: [0.6676761327924119] 
setting: robustf|rf 
Top-1 Accuracy = 0.6469344608879493 
Top-2 Accuracy = 1.0 
iter 8: [0.6469344608879493] 
setting: robustC|rf 
Top-1 Accuracy = 0.6451631335352266 
Top-2 Accuracy = 1.0 
iter 9: [0.6451631335352266] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.633563796354494 
Top-2 Accuracy = 1.0 
iter 10: [0.633563796354494] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.649620021713045 
Top-2 Accuracy = 1.0 
iter 11: [0.649620021713045] 
setting: robustL|rf 
Top-1 Accuracy = 0.6529912576424204 
Top-2 Accuracy = 1.0 
iter 12: [0.6529912576424204] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.6670475972801554 
Top-2 Accuracy = 1.0 
iter 13: [0.6670475972801554] 
setting: normalizej|rf 
Top-1 Accuracy = 0.6308782355293984 
Top-2 Accuracy = 1.0 
iter 14: [0.6308782355293984] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.6308782355293984 
Top-2 Accuracy = 1.0 
iter 15: [0.6308782355293984] 
setting: robustT|rf 
Top-1 Accuracy = 0.6685903662647849 
Top-2 Accuracy = 1.0 
iter 16: [0.6685903662647849] 
setting: robustU|rf 
Top-1 Accuracy = 0.6687046454488315 
Top-2 Accuracy = 1.0 
iter 17: [0.6687046454488315] 
setting: robusth|rf 
Top-1 Accuracy = 0.6308782355293984 
Top-2 Accuracy = 1.0 
iter 18: [0.6308782355293984] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.6308782355293984 
Top-2 Accuracy = 1.0 
iter 19: [0.6308782355293984] 
setting: robustj|rf 
Top-1 Accuracy = 0.6484200902805554 
Top-2 Accuracy = 1.0 
iter 20: [0.6484200902805554] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.6308782355293984 
Top-2 Accuracy = 1.0 
iter 21: [0.6308782355293984] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.6449917147591566 
Top-2 Accuracy = 1.0 
iter 22: [0.6449917147591566] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.6184789440603394 
Top-2 Accuracy = 1.0 
iter 23: [0.6184789440603394] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.6546483058110965 
Top-2 Accuracy = 1.0 
iter 24: [0.6546483058110965] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.623335809382321 
Top-2 Accuracy = 1.0 
iter 25: [0.623335809382321] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.6308782355293984 
Top-2 Accuracy = 1.0 
iter 26: [0.6308782355293984] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.618936060796526 
Top-2 Accuracy = 1.0 
iter 27: [0.618936060796526] 
setting: normalizec|rf 
Top-1 Accuracy = 0.6200217130449689 
Top-2 Accuracy = 1.0 
iter 28: [0.6200217130449689] 
setting: standardizey|rf 
Top-1 Accuracy = 0.6532198160105137 
Top-2 Accuracy = 1.0 
iter 29: [0.6532198160105137] 
Run # 7 
====== 
setting: standardizes|rf 
Top-1 Accuracy = 0.6689332038169248 
Top-2 Accuracy = 1.0 
iter 0: [0.6689332038169248] 
setting: robustQ|rf 
Top-1 Accuracy = 0.6491629049768585 
Top-2 Accuracy = 1.0 
iter 1: [0.6491629049768585] 
setting: standardizen|rf 
Top-1 Accuracy = 0.6215644820295984 
Top-2 Accuracy = 1.0 
iter 2: [0.6215644820295984] 
setting: standardizer|rf 
Top-1 Accuracy = 0.6565910519398892 
Top-2 Accuracy = 1.0 
iter 3: [0.6565910519398892] 
setting: robusta|rf 
Top-1 Accuracy = 0.621507342437575 
Top-2 Accuracy = 1.0 
iter 4: [0.621507342437575] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.6325352836980744 
Top-2 Accuracy = 1.0 
iter 5: [0.6325352836980744] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.6209930861093652 
Top-2 Accuracy = 1.0 
iter 6: [0.6209930861093652] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.6531055368264671 
Top-2 Accuracy = 1.0 
iter 7: [0.6531055368264671] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.6236786469344608 
Top-2 Accuracy = 1.0 
iter 8: [0.6236786469344608] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.6247071595908805 
Top-2 Accuracy = 1.0 
iter 9: [0.6247071595908805] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.6179075481401063 
Top-2 Accuracy = 1.0 
iter 10: [0.6179075481401063] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.6681903891206217 
Top-2 Accuracy = 1.0 
iter 11: [0.6681903891206217] 
setting: standardized|rf 
Top-1 Accuracy = 0.6503056968173248 
Top-2 Accuracy = 1.0 
iter 12: [0.6503056968173248] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.6539054911147935 
Top-2 Accuracy = 1.0 
iter 13: [0.6539054911147935] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.6308782355293984 
Top-2 Accuracy = 1.0 
iter 14: [0.6308782355293984] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.6308782355293984 
Top-2 Accuracy = 1.0 
iter 15: [0.6308782355293984] 
setting: normalizes|rf 
Top-1 Accuracy = 0.6534483743786069 
Top-2 Accuracy = 1.0 
iter 16: [0.6534483743786069] 
setting: robustm|rf 
Top-1 Accuracy = 0.6329352608422376 
Top-2 Accuracy = 1.0 
iter 17: [0.6329352608422376] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.6185360836523627 
Top-2 Accuracy = 1.0 
iter 18: [0.6185360836523627] 
setting: standardizei|rf 
Top-1 Accuracy = 0.6227072738700645 
Top-2 Accuracy = 1.0 
iter 19: [0.6227072738700645] 
setting: robustR|rf 
Top-1 Accuracy = 0.6699617164733443 
Top-2 Accuracy = 1.0 
iter 20: [0.6699617164733443] 
setting: robustb|rf 
Top-1 Accuracy = 0.6225358550939947 
Top-2 Accuracy = 1.0 
iter 21: [0.6225358550939947] 
setting: robustT|rf 
Top-1 Accuracy = 0.6547054454031198 
Top-2 Accuracy = 1.0 
iter 22: [0.6547054454031198] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.6200217130449689 
Top-2 Accuracy = 1.0 
iter 23: [0.6200217130449689] 
setting: robustX|rf 
Top-1 Accuracy = 0.6217930403976916 
Top-2 Accuracy = 1.0 
iter 24: [0.6217930403976916] 
setting: robusts|rf 
Top-1 Accuracy = 0.670075995657391 
Top-2 Accuracy = 1.0 
iter 25: [0.670075995657391] 
setting: robustE|rf 
Top-1 Accuracy = 0.6699617164733443 
Top-2 Accuracy = 1.0 
iter 26: [0.6699617164733443] 
setting: normalizec|rf 
Top-1 Accuracy = 0.6228786926461345 
Top-2 Accuracy = 1.0 
iter 27: [0.6228786926461345] 
setting: standardizec|rf 
Top-1 Accuracy = 0.6724187189303469 
Top-2 Accuracy = 1.0 
iter 28: [0.6724187189303469] 
setting: standardizea|rf 
Top-1 Accuracy = 0.618593223244386 
Top-2 Accuracy = 1.0 
iter 29: [0.618593223244386] 
Run # 8 
====== 
setting: normalizeo|rf 
Top-1 Accuracy = 0.619507456716759 
Top-2 Accuracy = 1.0 
iter 0: [0.619507456716759] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.620593108965202 
Top-2 Accuracy = 1.0 
iter 1: [0.620593108965202] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.6518484658019542 
Top-2 Accuracy = 1.0 
iter 2: [0.6518484658019542] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.6216216216216216 
Top-2 Accuracy = 1.0 
iter 3: [0.6216216216216216] 
setting: robustf|rf 
Top-1 Accuracy = 0.6527626992743272 
Top-2 Accuracy = 1.0 
iter 4: [0.6527626992743272] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.6544768870350266 
Top-2 Accuracy = 1.0 
iter 5: [0.6544768870350266] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.6226501342780413 
Top-2 Accuracy = 1.0 
iter 6: [0.6226501342780413] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.6741900462830696 
Top-2 Accuracy = 1.0 
iter 7: [0.6741900462830696] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.6284783726644192 
Top-2 Accuracy = 1.0 
iter 8: [0.6284783726644192] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.6529912576424204 
Top-2 Accuracy = 1.0 
iter 9: [0.6529912576424204] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.6503056968173248 
Top-2 Accuracy = 1.0 
iter 10: [0.6503056968173248] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.6483058110965088 
Top-2 Accuracy = 1.0 
iter 11: [0.6483058110965088] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.6246500199988572 
Top-2 Accuracy = 1.0 
iter 12: [0.6246500199988572] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.6284212330723958 
Top-2 Accuracy = 1.0 
iter 13: [0.6284212330723958] 
setting: robustc|rf 
Top-1 Accuracy = 0.6284212330723958 
Top-2 Accuracy = 1.0 
iter 14: [0.6284212330723958] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.6731615336266499 
Top-2 Accuracy = 1.0 
iter 15: [0.6731615336266499] 
setting: normalizek|rf 
Top-1 Accuracy = 0.628992628992629 
Top-2 Accuracy = 1.0 
iter 16: [0.628992628992629] 
setting: normalizei|rf 
Top-1 Accuracy = 0.6269356036797897 
Top-2 Accuracy = 1.0 
iter 17: [0.6269356036797897] 
setting: standardizes|rf 
Top-1 Accuracy = 0.6181932461002229 
Top-2 Accuracy = 1.0 
iter 18: [0.6181932461002229] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.6377921261642192 
Top-2 Accuracy = 1.0 
iter 19: [0.6377921261642192] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.6699045768813211 
Top-2 Accuracy = 1.0 
iter 20: [0.6699045768813211] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.64487743557511 
Top-2 Accuracy = 1.0 
iter 21: [0.64487743557511] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.652362722130164 
Top-2 Accuracy = 1.0 
iter 22: [0.652362722130164] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.6461345065996229 
Top-2 Accuracy = 1.0 
iter 23: [0.6461345065996229] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.6269356036797897 
Top-2 Accuracy = 1.0 
iter 24: [0.6269356036797897] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.6269356036797897 
Top-2 Accuracy = 1.0 
iter 25: [0.6269356036797897] 
setting: robusts|rf 
Top-1 Accuracy = 0.6214502028455516 
Top-2 Accuracy = 1.0 
iter 26: [0.6214502028455516] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.6710473687217873 
Top-2 Accuracy = 1.0 
iter 27: [0.6710473687217873] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.622421575909948 
Top-2 Accuracy = 1.0 
iter 28: [0.622421575909948] 
setting: robusth|rf 
Top-1 Accuracy = 0.6227644134620879 
Top-2 Accuracy = 1.0 
iter 29: [0.6227644134620879] 
Run # 9 
====== 
setting: standardizez|rf 
Top-1 Accuracy = 0.6227644134620879 
Top-2 Accuracy = 1.0 
iter 0: [0.6227644134620879] 
setting: standardizev|rf 
Top-1 Accuracy = 0.6205359693731787 
Top-2 Accuracy = 1.0 
iter 1: [0.6205359693731787] 
setting: robustw|rf 
Top-1 Accuracy = 0.6227644134620879 
Top-2 Accuracy = 1.0 
iter 2: [0.6227644134620879] 
setting: normalizew|rf 
Top-1 Accuracy = 0.6284783726644192 
Top-2 Accuracy = 1.0 
iter 3: [0.6284783726644192] 
setting: robustz|rf 
Top-1 Accuracy = 0.6493914633449517 
Top-2 Accuracy = 1.0 
iter 4: [0.6493914633449517] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.6284783726644192 
Top-2 Accuracy = 1.0 
iter 5: [0.6284783726644192] 
setting: robustp|rf 
Top-1 Accuracy = 0.6527055596823038 
Top-2 Accuracy = 1.0 
iter 6: [0.6527055596823038] 
setting: robustr|rf 
Top-1 Accuracy = 0.6284783726644192 
Top-2 Accuracy = 1.0 
iter 7: [0.6284783726644192] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.6510485115136277 
Top-2 Accuracy = 1.0 
iter 8: [0.6510485115136277] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.6195645963087824 
Top-2 Accuracy = 1.0 
iter 9: [0.6195645963087824] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.6284783726644192 
Top-2 Accuracy = 1.0 
iter 10: [0.6284783726644192] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.6238500657105308 
Top-2 Accuracy = 1.0 
iter 11: [0.6238500657105308] 
setting: normalizex|rf 
Top-1 Accuracy = 0.6291069081766756 
Top-2 Accuracy = 1.0 
iter 12: [0.6291069081766756] 
setting: normalizes|rf 
Top-1 Accuracy = 0.666247642991829 
Top-2 Accuracy = 1.0 
iter 13: [0.666247642991829] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.6528769784583738 
Top-2 Accuracy = 1.0 
iter 14: [0.6528769784583738] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.6228215530541112 
Top-2 Accuracy = 1.0 
iter 15: [0.6228215530541112] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.666247642991829 
Top-2 Accuracy = 1.0 
iter 16: [0.666247642991829] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.6423061539340609 
Top-2 Accuracy = 1.0 
iter 17: [0.6423061539340609] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.6547625849951432 
Top-2 Accuracy = 1.0 
iter 18: [0.6547625849951432] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.6679618307525285 
Top-2 Accuracy = 1.0 
iter 19: [0.6679618307525285] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.6297925832809553 
Top-2 Accuracy = 1.0 
iter 20: [0.6297925832809553] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.655276841323353 
Top-2 Accuracy = 1.0 
iter 21: [0.655276841323353] 
setting: robustX|rf 
Top-1 Accuracy = 0.6194503171247357 
Top-2 Accuracy = 1.0 
iter 22: [0.6194503171247357] 
setting: robustv|rf 
Top-1 Accuracy = 0.6183075252842695 
Top-2 Accuracy = 1.0 
iter 23: [0.6183075252842695] 
setting: standardizei|rf 
Top-1 Accuracy = 0.6685332266727616 
Top-2 Accuracy = 1.0 
iter 24: [0.6685332266727616] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.6297925832809553 
Top-2 Accuracy = 1.0 
iter 25: [0.6297925832809553] 
setting: robustq|rf 
Top-1 Accuracy = 0.6680761099365751 
Top-2 Accuracy = 1.0 
iter 26: [0.6680761099365751] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.6492200445688818 
Top-2 Accuracy = 1.0 
iter 27: [0.6492200445688818] 
setting: robustu|rf 
Top-1 Accuracy = 0.6297925832809553 
Top-2 Accuracy = 1.0 
iter 28: [0.6297925832809553] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.6297925832809553 
Top-2 Accuracy = 1.0 
iter 29: [0.6297925832809553] 
Run # 10 
======= 
setting: robusto|rf 
Top-1 Accuracy = 0.6297925832809553 
Top-2 Accuracy = 1.0 
iter 0: [0.6297925832809553] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.6297925832809553 
Top-2 Accuracy = 1.0 
iter 1: [0.6297925832809553] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.6539054911147935 
Top-2 Accuracy = 1.0 
iter 2: [0.6539054911147935] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.6417347580138277 
Top-2 Accuracy = 1.0 
iter 3: [0.6417347580138277] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.6683046683046683 
Top-2 Accuracy = 1.0 
iter 4: [0.6683046683046683] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.6671047368721787 
Top-2 Accuracy = 1.0 
iter 5: [0.6671047368721787] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.6293354665447689 
Top-2 Accuracy = 1.0 
iter 6: [0.6293354665447689] 
setting: robustQ|rf 
Top-1 Accuracy = 0.6683046683046683 
Top-2 Accuracy = 1.0 
iter 7: [0.6683046683046683] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.6293354665447689 
Top-2 Accuracy = 1.0 
iter 8: [0.6293354665447689] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.6298497228729787 
Top-2 Accuracy = 1.0 
iter 9: [0.6298497228729787] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.6175075709959431 
Top-2 Accuracy = 1.0 
iter 10: [0.6175075709959431] 
setting: maxabss|rf 
Top-1 Accuracy = 0.6298497228729787 
Top-2 Accuracy = 1.0 
iter 11: [0.6298497228729787] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.6298497228729787 
Top-2 Accuracy = 1.0 
iter 12: [0.6298497228729787] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.6550482829552597 
Top-2 Accuracy = 1.0 
iter 13: [0.6550482829552597] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.6298497228729787 
Top-2 Accuracy = 1.0 
iter 14: [0.6298497228729787] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.6298497228729787 
Top-2 Accuracy = 1.0 
iter 15: [0.6298497228729787] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.6419061767898977 
Top-2 Accuracy = 1.0 
iter 16: [0.6419061767898977] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.6207073881492486 
Top-2 Accuracy = 1.0 
iter 17: [0.6207073881492486] 
setting: robustf|rf 
Top-1 Accuracy = 0.622421575909948 
Top-2 Accuracy = 1.0 
iter 18: [0.622421575909948] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.6298497228729787 
Top-2 Accuracy = 1.0 
iter 19: [0.6298497228729787] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.6683618078966916 
Top-2 Accuracy = 1.0 
iter 20: [0.6683618078966916] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.6681332495285983 
Top-2 Accuracy = 1.0 
iter 21: [0.6681332495285983] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.6298497228729787 
Top-2 Accuracy = 1.0 
iter 22: [0.6298497228729787] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.6298497228729787 
Top-2 Accuracy = 1.0 
iter 23: [0.6298497228729787] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.6681903891206217 
Top-2 Accuracy = 1.0 
iter 24: [0.6681903891206217] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.622421575909948 
Top-2 Accuracy = 1.0 
iter 25: [0.622421575909948] 
setting: robustd|rf 
Top-1 Accuracy = 0.6681332495285983 
Top-2 Accuracy = 1.0 
iter 26: [0.6681332495285983] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.6298497228729787 
Top-2 Accuracy = 1.0 
iter 27: [0.6298497228729787] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.6707045311696475 
Top-2 Accuracy = 1.0 
iter 28: [0.6707045311696475] 
setting: normalizer|rf 
Top-1 Accuracy = 0.6529912576424204 
Top-2 Accuracy = 1.0 
iter 29: [0.6529912576424204] 
Run # 11 
======= 
setting: maxabsi|rf 
Top-1 Accuracy = 0.6253356951031369 
Top-2 Accuracy = 1.0 
iter 0: [0.6253356951031369] 
setting: robustY|rf 
Top-1 Accuracy = 0.671161647905834 
Top-2 Accuracy = 1.0 
iter 1: [0.671161647905834] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.6228215530541112 
Top-2 Accuracy = 1.0 
iter 2: [0.6228215530541112] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.6236215073424376 
Top-2 Accuracy = 1.0 
iter 3: [0.6236215073424376] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.6226501342780413 
Top-2 Accuracy = 1.0 
iter 4: [0.6226501342780413] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.6232786697902977 
Top-2 Accuracy = 1.0 
iter 5: [0.6232786697902977] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.6541340494828867 
Top-2 Accuracy = 1.0 
iter 6: [0.6541340494828867] 
setting: robustq|rf 
Top-1 Accuracy = 0.6253356951031369 
Top-2 Accuracy = 1.0 
iter 7: [0.6253356951031369] 
setting: robustI|rf 
Top-1 Accuracy = 0.670990229129764 
Top-2 Accuracy = 1.0 
iter 8: [0.670990229129764] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.6209930861093652 
Top-2 Accuracy = 1.0 
iter 9: [0.6209930861093652] 
setting: robustt|rf 
Top-1 Accuracy = 0.6186503628364094 
Top-2 Accuracy = 1.0 
iter 10: [0.6186503628364094] 
setting: normalizep|rf 
Top-1 Accuracy = 0.6442489000628535 
Top-2 Accuracy = 1.0 
iter 11: [0.6442489000628535] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.6531626764184904 
Top-2 Accuracy = 1.0 
iter 12: [0.6531626764184904] 
setting: robustE|rf 
Top-1 Accuracy = 0.6216216216216216 
Top-2 Accuracy = 1.0 
iter 13: [0.6216216216216216] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.6727615564824867 
Top-2 Accuracy = 1.0 
iter 14: [0.6727615564824867] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.6529912576424204 
Top-2 Accuracy = 1.0 
iter 15: [0.6529912576424204] 
setting: robustL|rf 
Top-1 Accuracy = 0.6527626992743272 
Top-2 Accuracy = 1.0 
iter 16: [0.6527626992743272] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.6508199531455345 
Top-2 Accuracy = 1.0 
iter 17: [0.6508199531455345] 
setting: standardizej|rf 
Top-1 Accuracy = 0.6220215987657848 
Top-2 Accuracy = 1.0 
iter 18: [0.6220215987657848] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.6220215987657848 
Top-2 Accuracy = 1.0 
iter 19: [0.6220215987657848] 
setting: normalizem|rf 
Top-1 Accuracy = 0.6400205702531284 
Top-2 Accuracy = 1.0 
iter 20: [0.6400205702531284] 
setting: standardizez|rf 
Top-1 Accuracy = 0.6486486486486487 
Top-2 Accuracy = 1.0 
iter 21: [0.6486486486486487] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.6716187646420204 
Top-2 Accuracy = 1.0 
iter 22: [0.6716187646420204] 
setting: standardized|rf 
Top-1 Accuracy = 0.6517913262099309 
Top-2 Accuracy = 1.0 
iter 23: [0.6517913262099309] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.6241929032626707 
Top-2 Accuracy = 1.0 
iter 24: [0.6241929032626707] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.6684760870807382 
Top-2 Accuracy = 1.0 
iter 25: [0.6684760870807382] 
setting: normalizex|rf 
Top-1 Accuracy = 0.6690474830009714 
Top-2 Accuracy = 1.0 
iter 26: [0.6690474830009714] 
setting: robustm|rf 
Top-1 Accuracy = 0.6489914862007885 
Top-2 Accuracy = 1.0 
iter 27: [0.6489914862007885] 
setting: normalizee|rf 
Top-1 Accuracy = 0.6428204102622708 
Top-2 Accuracy = 1.0 
iter 28: [0.6428204102622708] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.6311067938974916 
Top-2 Accuracy = 1.0 
iter 29: [0.6311067938974916] 
Run # 12 
======= 
setting: minmaxH|rf 
Top-1 Accuracy = 0.6229358322381578 
Top-2 Accuracy = 1.0 
iter 0: [0.6229358322381578] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.6722473001542769 
Top-2 Accuracy = 1.0 
iter 1: [0.6722473001542769] 
setting: robustt|rf 
Top-1 Accuracy = 0.6311067938974916 
Top-2 Accuracy = 1.0 
iter 2: [0.6311067938974916] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.6216216216216216 
Top-2 Accuracy = 1.0 
iter 3: [0.6216216216216216] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.65436260785098 
Top-2 Accuracy = 1.0 
iter 4: [0.65436260785098] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.6305925375692818 
Top-2 Accuracy = 1.0 
iter 5: [0.6305925375692818] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.6301925604251186 
Top-2 Accuracy = 1.0 
iter 6: [0.6301925604251186] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.671904462602137 
Top-2 Accuracy = 1.0 
iter 7: [0.671904462602137] 
setting: normalizer|rf 
Top-1 Accuracy = 0.6331066796183076 
Top-2 Accuracy = 1.0 
iter 8: [0.6331066796183076] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.6205359693731787 
Top-2 Accuracy = 1.0 
iter 9: [0.6205359693731787] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.6180218273241529 
Top-2 Accuracy = 1.0 
iter 10: [0.6180218273241529] 
setting: robustL|rf 
Top-1 Accuracy = 0.6331066796183076 
Top-2 Accuracy = 1.0 
iter 11: [0.6331066796183076] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.6716187646420204 
Top-2 Accuracy = 1.0 
iter 12: [0.6716187646420204] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.6515056282498143 
Top-2 Accuracy = 1.0 
iter 13: [0.6515056282498143] 
setting: maxabst|rf 
Top-1 Accuracy = 0.6714473458659506 
Top-2 Accuracy = 1.0 
iter 14: [0.6714473458659506] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.6716187646420204 
Top-2 Accuracy = 1.0 
iter 15: [0.6716187646420204] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.670990229129764 
Top-2 Accuracy = 1.0 
iter 16: [0.670990229129764] 
setting: standardizez|rf 
Top-1 Accuracy = 0.6495628821210216 
Top-2 Accuracy = 1.0 
iter 17: [0.6495628821210216] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.6491629049768585 
Top-2 Accuracy = 1.0 
iter 18: [0.6491629049768585] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.6559625164276327 
Top-2 Accuracy = 1.0 
iter 19: [0.6559625164276327] 
setting: robustQ|rf 
Top-1 Accuracy = 0.6219073195817382 
Top-2 Accuracy = 1.0 
iter 20: [0.6219073195817382] 
setting: standardizey|rf 
Top-1 Accuracy = 0.6745328838352094 
Top-2 Accuracy = 1.0 
iter 21: [0.6745328838352094] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.6230501114222045 
Top-2 Accuracy = 1.0 
iter 22: [0.6230501114222045] 
setting: standardizet|rf 
Top-1 Accuracy = 0.6540197702988401 
Top-2 Accuracy = 1.0 
iter 23: [0.6540197702988401] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.6212216444774584 
Top-2 Accuracy = 1.0 
iter 24: [0.6212216444774584] 
setting: normalizey|rf 
Top-1 Accuracy = 0.6219073195817382 
Top-2 Accuracy = 1.0 
iter 25: [0.6219073195817382] 
setting: robustj|rf 
Top-1 Accuracy = 0.6732758128106965 
Top-2 Accuracy = 1.0 
iter 26: [0.6732758128106965] 
setting: minmaxw|rf 
Top-1 Accuracy = 0.6300782812410719 
Top-2 Accuracy = 1.0 
iter 27: [0.6300782812410719] 
setting: standardizek|rf 
Top-1 Accuracy = 0.6731615336266499 
Top-2 Accuracy = 1.0 
iter 28: [0.6731615336266499] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.6300782812410719 
Top-2 Accuracy = 1.0 
iter 29: [0.6300782812410719] 
Run # 13 
======= 
setting: robustg|rf 
Top-1 Accuracy = 0.6732758128106965 
Top-2 Accuracy = 1.0 
iter 0: [0.6732758128106965] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.6708759499457174 
Top-2 Accuracy = 1.0 
iter 1: [0.6708759499457174] 
setting: standardizek|rf 
Top-1 Accuracy = 0.6300782812410719 
Top-2 Accuracy = 1.0 
iter 2: [0.6300782812410719] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.6712187874978572 
Top-2 Accuracy = 1.0 
iter 3: [0.6712187874978572] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.6525912804982572 
Top-2 Accuracy = 1.0 
iter 4: [0.6525912804982572] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.673561510770813 
Top-2 Accuracy = 1.0 
iter 5: [0.673561510770813] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.673561510770813 
Top-2 Accuracy = 1.0 
iter 6: [0.673561510770813] 
setting: standardizee|rf 
Top-1 Accuracy = 0.6735043711787898 
Top-2 Accuracy = 1.0 
iter 7: [0.6735043711787898] 
setting: standardizey|rf 
Top-1 Accuracy = 0.6512770698817211 
Top-2 Accuracy = 1.0 
iter 8: [0.6512770698817211] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.6735043711787898 
Top-2 Accuracy = 1.0 
iter 9: [0.6735043711787898] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.6522484429461174 
Top-2 Accuracy = 1.0 
iter 10: [0.6522484429461174] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.6756185360836524 
Top-2 Accuracy = 1.0 
iter 11: [0.6756185360836524] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.6200217130449689 
Top-2 Accuracy = 1.0 
iter 12: [0.6200217130449689] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.6756756756756757 
Top-2 Accuracy = 1.0 
iter 13: [0.6756756756756757] 
setting: robuste|rf 
Top-1 Accuracy = 0.6541340494828867 
Top-2 Accuracy = 1.0 
iter 14: [0.6541340494828867] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.6315639106336781 
Top-2 Accuracy = 1.0 
iter 15: [0.6315639106336781] 
setting: robustA|rf 
Top-1 Accuracy = 0.6200788526369921 
Top-2 Accuracy = 1.0 
iter 16: [0.6200788526369921] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.6212216444774584 
Top-2 Accuracy = 1.0 
iter 17: [0.6212216444774584] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.6220215987657848 
Top-2 Accuracy = 1.0 
iter 18: [0.6220215987657848] 
setting: standardizej|rf 
Top-1 Accuracy = 0.6756756756756757 
Top-2 Accuracy = 1.0 
iter 19: [0.6756756756756757] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.6508199531455345 
Top-2 Accuracy = 1.0 
iter 20: [0.6508199531455345] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.621678761213645 
Top-2 Accuracy = 1.0 
iter 21: [0.621678761213645] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.652362722130164 
Top-2 Accuracy = 1.0 
iter 22: [0.652362722130164] 
setting: robustj|rf 
Top-1 Accuracy = 0.6229358322381578 
Top-2 Accuracy = 1.0 
iter 23: [0.6229358322381578] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.6173361522198731 
Top-2 Accuracy = 1.0 
iter 24: [0.6173361522198731] 
setting: normalizen|rf 
Top-1 Accuracy = 0.6762470715959088 
Top-2 Accuracy = 1.0 
iter 25: [0.6762470715959088] 
setting: robustM|rf 
Top-1 Accuracy = 0.6763042111879322 
Top-2 Accuracy = 1.0 
iter 26: [0.6763042111879322] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.6756756756756757 
Top-2 Accuracy = 1.0 
iter 27: [0.6756756756756757] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.6756185360836524 
Top-2 Accuracy = 1.0 
iter 28: [0.6756185360836524] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.6467630421118793 
Top-2 Accuracy = 1.0 
iter 29: [0.6467630421118793] 
Run # 14 
======= 
setting: standardizeu|rf 
Top-1 Accuracy = 0.675732815267699 
Top-2 Accuracy = 1.0 
iter 0: [0.675732815267699] 
setting: robustQ|rf 
Top-1 Accuracy = 0.6760756528198388 
Top-2 Accuracy = 1.0 
iter 1: [0.6760756528198388] 
setting: robustr|rf 
Top-1 Accuracy = 0.6759613736357922 
Top-2 Accuracy = 1.0 
iter 2: [0.6759613736357922] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.6198502942688989 
Top-2 Accuracy = 1.0 
iter 3: [0.6198502942688989] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.6548768641791898 
Top-2 Accuracy = 1.0 
iter 4: [0.6548768641791898] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.6170504542597566 
Top-2 Accuracy = 1.0 
iter 5: [0.6170504542597566] 
setting: maxabse|rf 
Top-1 Accuracy = 0.6532198160105137 
Top-2 Accuracy = 1.0 
iter 6: [0.6532198160105137] 
setting: standardizer|rf 
Top-1 Accuracy = 0.6201931318210387 
Top-2 Accuracy = 1.0 
iter 7: [0.6201931318210387] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.6261927889834866 
Top-2 Accuracy = 1.0 
iter 8: [0.6261927889834866] 
setting: robustE|rf 
Top-1 Accuracy = 0.6189932003885492 
Top-2 Accuracy = 1.0 
iter 9: [0.6189932003885492] 
setting: robustl|rf 
Top-1 Accuracy = 0.6480772527284155 
Top-2 Accuracy = 1.0 
iter 10: [0.6480772527284155] 
setting: robustX|rf 
Top-1 Accuracy = 0.6545911662190732 
Top-2 Accuracy = 1.0 
iter 11: [0.6545911662190732] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.6519627449860008 
Top-2 Accuracy = 1.0 
iter 12: [0.6519627449860008] 
setting: robustq|rf 
Top-1 Accuracy = 0.6261927889834866 
Top-2 Accuracy = 1.0 
iter 13: [0.6261927889834866] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.6199074338609223 
Top-2 Accuracy = 1.0 
iter 14: [0.6199074338609223] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.6218501799897149 
Top-2 Accuracy = 1.0 
iter 15: [0.6218501799897149] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.671161647905834 
Top-2 Accuracy = 1.0 
iter 16: [0.671161647905834] 
setting: robustn|rf 
Top-1 Accuracy = 0.6195645963087824 
Top-2 Accuracy = 1.0 
iter 17: [0.6195645963087824] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.6491057653848351 
Top-2 Accuracy = 1.0 
iter 18: [0.6491057653848351] 
setting: robustK|rf 
Top-1 Accuracy = 0.6518484658019542 
Top-2 Accuracy = 1.0 
iter 19: [0.6518484658019542] 
setting: robustD|rf 
Top-1 Accuracy = 0.6536769327467001 
Top-2 Accuracy = 1.0 
iter 20: [0.6536769327467001] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.6225358550939947 
Top-2 Accuracy = 1.0 
iter 21: [0.6225358550939947] 
setting: standardizef|rf 
Top-1 Accuracy = 0.6391063367807553 
Top-2 Accuracy = 1.0 
iter 22: [0.6391063367807553] 
setting: robustv|rf 
Top-1 Accuracy = 0.6296211645048855 
Top-2 Accuracy = 1.0 
iter 23: [0.6296211645048855] 
setting: robustY|rf 
Top-1 Accuracy = 0.6484200902805554 
Top-2 Accuracy = 1.0 
iter 24: [0.6484200902805554] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.649620021713045 
Top-2 Accuracy = 1.0 
iter 25: [0.649620021713045] 
setting: robustT|rf 
Top-1 Accuracy = 0.6500771384492314 
Top-2 Accuracy = 1.0 
iter 26: [0.6500771384492314] 
setting: robustZ|rf 
Top-1 Accuracy = 0.6703045540254843 
Top-2 Accuracy = 1.0 
iter 27: [0.6703045540254843] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.6296211645048855 
Top-2 Accuracy = 1.0 
iter 28: [0.6296211645048855] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.6296211645048855 
Top-2 Accuracy = 1.0 
iter 29: [0.6296211645048855] 
Run # 15 
======= 
setting: minmaxS|rf 
Top-1 Accuracy = 0.6208216673332952 
Top-2 Accuracy = 1.0 
iter 0: [0.6208216673332952] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.6703616936175075 
Top-2 Accuracy = 1.0 
iter 1: [0.6703616936175075] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.65436260785098 
Top-2 Accuracy = 1.0 
iter 2: [0.65436260785098] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.6179075481401063 
Top-2 Accuracy = 1.0 
iter 3: [0.6179075481401063] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.6707616707616708 
Top-2 Accuracy = 1.0 
iter 4: [0.6707616707616708] 
setting: robustf|rf 
Top-1 Accuracy = 0.6296211645048855 
Top-2 Accuracy = 1.0 
iter 5: [0.6296211645048855] 
setting: normalizek|rf 
Top-1 Accuracy = 0.6529341180503971 
Top-2 Accuracy = 1.0 
iter 6: [0.6529341180503971] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.6714473458659506 
Top-2 Accuracy = 1.0 
iter 7: [0.6714473458659506] 
setting: robustm|rf 
Top-1 Accuracy = 0.6445917376149934 
Top-2 Accuracy = 1.0 
iter 8: [0.6445917376149934] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.6235643677504142 
Top-2 Accuracy = 1.0 
iter 9: [0.6235643677504142] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.6715616250499972 
Top-2 Accuracy = 1.0 
iter 10: [0.6715616250499972] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.6236215073424376 
Top-2 Accuracy = 1.0 
iter 11: [0.6236215073424376] 
setting: standardizee|rf 
Top-1 Accuracy = 0.6202502714130621 
Top-2 Accuracy = 1.0 
iter 12: [0.6202502714130621] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.6473344380321124 
Top-2 Accuracy = 1.0 
iter 13: [0.6473344380321124] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.6519627449860008 
Top-2 Accuracy = 1.0 
iter 14: [0.6519627449860008] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.6732186732186732 
Top-2 Accuracy = 1.0 
iter 15: [0.6732186732186732] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.6230501114222045 
Top-2 Accuracy = 1.0 
iter 16: [0.6230501114222045] 
setting: robustT|rf 
Top-1 Accuracy = 0.6257928118393234 
Top-2 Accuracy = 1.0 
iter 17: [0.6257928118393234] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.6206502485572253 
Top-2 Accuracy = 1.0 
iter 18: [0.6206502485572253] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.6684189474887149 
Top-2 Accuracy = 1.0 
iter 19: [0.6684189474887149] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.6707045311696475 
Top-2 Accuracy = 1.0 
iter 20: [0.6707045311696475] 
setting: standardized|rf 
Top-1 Accuracy = 0.6193931775327124 
Top-2 Accuracy = 1.0 
iter 21: [0.6193931775327124] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.6555625392834695 
Top-2 Accuracy = 1.0 
iter 22: [0.6555625392834695] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.6223072967259013 
Top-2 Accuracy = 1.0 
iter 23: [0.6223072967259013] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.6287069310325124 
Top-2 Accuracy = 1.0 
iter 24: [0.6287069310325124] 
setting: standardizem|rf 
Top-1 Accuracy = 0.6527626992743272 
Top-2 Accuracy = 1.0 
iter 25: [0.6527626992743272] 
setting: robusti|rf 
Top-1 Accuracy = 0.6287069310325124 
Top-2 Accuracy = 1.0 
iter 26: [0.6287069310325124] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.6683046683046683 
Top-2 Accuracy = 1.0 
iter 27: [0.6683046683046683] 
setting: robustH|rf 
Top-1 Accuracy = 0.6683618078966916 
Top-2 Accuracy = 1.0 
iter 28: [0.6683618078966916] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.6188789212045026 
Top-2 Accuracy = 1.0 
iter 29: [0.6188789212045026] 
Run # 16 
======= 
setting: normalizeE|rf 
Top-1 Accuracy = 0.6517341866179075 
Top-2 Accuracy = 1.0 
iter 0: [0.6517341866179075] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.6286497914404892 
Top-2 Accuracy = 1.0 
iter 1: [0.6286497914404892] 
setting: robustW|rf 
Top-1 Accuracy = 0.6505913947774413 
Top-2 Accuracy = 1.0 
iter 2: [0.6505913947774413] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.6533912347865837 
Top-2 Accuracy = 1.0 
iter 3: [0.6533912347865837] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.6227072738700645 
Top-2 Accuracy = 1.0 
iter 4: [0.6227072738700645] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.6684760870807382 
Top-2 Accuracy = 1.0 
iter 5: [0.6684760870807382] 
setting: robustc|rf 
Top-1 Accuracy = 0.668990343408948 
Top-2 Accuracy = 1.0 
iter 6: [0.668990343408948] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.6690474830009714 
Top-2 Accuracy = 1.0 
iter 7: [0.6690474830009714] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.62642134735158 
Top-2 Accuracy = 1.0 
iter 8: [0.62642134735158] 
setting: robustZ|rf 
Top-1 Accuracy = 0.6462487857836695 
Top-2 Accuracy = 1.0 
iter 9: [0.6462487857836695] 
setting: maxabse|rf 
Top-1 Accuracy = 0.6204216901891321 
Top-2 Accuracy = 1.0 
iter 10: [0.6204216901891321] 
setting: standardizek|rf 
Top-1 Accuracy = 0.62642134735158 
Top-2 Accuracy = 1.0 
iter 11: [0.62642134735158] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.62642134735158 
Top-2 Accuracy = 1.0 
iter 12: [0.62642134735158] 
setting: normalizea|rf 
Top-1 Accuracy = 0.6226501342780413 
Top-2 Accuracy = 1.0 
iter 13: [0.6226501342780413] 
setting: robustN|rf 
Top-1 Accuracy = 0.620593108965202 
Top-2 Accuracy = 1.0 
iter 14: [0.620593108965202] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.6711045083138106 
Top-2 Accuracy = 1.0 
iter 15: [0.6711045083138106] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.6243643220387406 
Top-2 Accuracy = 1.0 
iter 16: [0.6243643220387406] 
setting: robustH|rf 
Top-1 Accuracy = 0.6243643220387406 
Top-2 Accuracy = 1.0 
iter 17: [0.6243643220387406] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.6542483286669333 
Top-2 Accuracy = 1.0 
iter 18: [0.6542483286669333] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.6511056511056511 
Top-2 Accuracy = 1.0 
iter 19: [0.6511056511056511] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.6539626307068167 
Top-2 Accuracy = 1.0 
iter 20: [0.6539626307068167] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.6177932689560597 
Top-2 Accuracy = 1.0 
iter 21: [0.6177932689560597] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.6243643220387406 
Top-2 Accuracy = 1.0 
iter 22: [0.6243643220387406] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.6720187417861836 
Top-2 Accuracy = 1.0 
iter 23: [0.6720187417861836] 
setting: normalizef|rf 
Top-1 Accuracy = 0.6548197245871664 
Top-2 Accuracy = 1.0 
iter 24: [0.6548197245871664] 
setting: robustP|rf 
Top-1 Accuracy = 0.6377349865721958 
Top-2 Accuracy = 1.0 
iter 25: [0.6377349865721958] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.6237357865264842 
Top-2 Accuracy = 1.0 
iter 26: [0.6237357865264842] 
setting: robustJ|rf 
Top-1 Accuracy = 0.6237357865264842 
Top-2 Accuracy = 1.0 
iter 27: [0.6237357865264842] 
setting: robusts|rf 
Top-1 Accuracy = 0.6207645277412719 
Top-2 Accuracy = 1.0 
iter 28: [0.6207645277412719] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.6486486486486487 
Top-2 Accuracy = 1.0 
iter 29: [0.6486486486486487] 
Run # 17 
======= 
setting: robustH|rf 
Top-1 Accuracy = 0.6237357865264842 
Top-2 Accuracy = 1.0 
iter 0: [0.6237357865264842] 
setting: normalizek|rf 
Top-1 Accuracy = 0.6288783498085824 
Top-2 Accuracy = 1.0 
iter 1: [0.6288783498085824] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.6543054682589566 
Top-2 Accuracy = 1.0 
iter 2: [0.6543054682589566] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.6701331352494143 
Top-2 Accuracy = 1.0 
iter 3: [0.6701331352494143] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.6429346894463174 
Top-2 Accuracy = 1.0 
iter 4: [0.6429346894463174] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.6307068167533284 
Top-2 Accuracy = 1.0 
iter 5: [0.6307068167533284] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.6722473001542769 
Top-2 Accuracy = 1.0 
iter 6: [0.6722473001542769] 
setting: robustt|rf 
Top-1 Accuracy = 0.6533340951945603 
Top-2 Accuracy = 1.0 
iter 7: [0.6533340951945603] 
setting: standardizei|rf 
Top-1 Accuracy = 0.623335809382321 
Top-2 Accuracy = 1.0 
iter 8: [0.623335809382321] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.6545340266270498 
Top-2 Accuracy = 1.0 
iter 9: [0.6545340266270498] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.6307068167533284 
Top-2 Accuracy = 1.0 
iter 10: [0.6307068167533284] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.6240214844866008 
Top-2 Accuracy = 1.0 
iter 11: [0.6240214844866008] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.6307068167533284 
Top-2 Accuracy = 1.0 
iter 12: [0.6307068167533284] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.6307068167533284 
Top-2 Accuracy = 1.0 
iter 13: [0.6307068167533284] 
setting: normalizey|rf 
Top-1 Accuracy = 0.652362722130164 
Top-2 Accuracy = 1.0 
iter 14: [0.652362722130164] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.6208216673332952 
Top-2 Accuracy = 1.0 
iter 15: [0.6208216673332952] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.6696760185132278 
Top-2 Accuracy = 1.0 
iter 16: [0.6696760185132278] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.6713902062739272 
Top-2 Accuracy = 1.0 
iter 17: [0.6713902062739272] 
setting: robustn|rf 
Top-1 Accuracy = 0.6713902062739272 
Top-2 Accuracy = 1.0 
iter 18: [0.6713902062739272] 
setting: normalizef|rf 
Top-1 Accuracy = 0.6179646877321296 
Top-2 Accuracy = 1.0 
iter 19: [0.6179646877321296] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.6351065653391235 
Top-2 Accuracy = 1.0 
iter 20: [0.6351065653391235] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.6351065653391235 
Top-2 Accuracy = 1.0 
iter 21: [0.6351065653391235] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.6500199988572082 
Top-2 Accuracy = 1.0 
iter 22: [0.6500199988572082] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.618593223244386 
Top-2 Accuracy = 1.0 
iter 23: [0.618593223244386] 
setting: robustz|rf 
Top-1 Accuracy = 0.6351065653391235 
Top-2 Accuracy = 1.0 
iter 24: [0.6351065653391235] 
setting: standardizen|rf 
Top-1 Accuracy = 0.642134735157991 
Top-2 Accuracy = 1.0 
iter 25: [0.642134735157991] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.6197360150848523 
Top-2 Accuracy = 1.0 
iter 26: [0.6197360150848523] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.6507628135535112 
Top-2 Accuracy = 1.0 
iter 27: [0.6507628135535112] 
setting: normalizei|rf 
Top-1 Accuracy = 0.6531626764184904 
Top-2 Accuracy = 1.0 
iter 28: [0.6531626764184904] 
setting: robustP|rf 
Top-1 Accuracy = 0.6656191074795726 
Top-2 Accuracy = 1.0 
iter 29: [0.6656191074795726] 
Run # 18 
======= 
setting: robustA|rf 
Top-1 Accuracy = 0.6345351694188903 
Top-2 Accuracy = 1.0 
iter 0: [0.6345351694188903] 
setting: normalizes|rf 
Top-1 Accuracy = 0.6702474144334609 
Top-2 Accuracy = 1.0 
iter 1: [0.6702474144334609] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.6276784183760928 
Top-2 Accuracy = 1.0 
iter 2: [0.6276784183760928] 
setting: robuste|rf 
Top-1 Accuracy = 0.6276784183760928 
Top-2 Accuracy = 1.0 
iter 3: [0.6276784183760928] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.6701331352494143 
Top-2 Accuracy = 1.0 
iter 4: [0.6701331352494143] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.6195645963087824 
Top-2 Accuracy = 1.0 
iter 5: [0.6195645963087824] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.6533340951945603 
Top-2 Accuracy = 1.0 
iter 6: [0.6533340951945603] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.6276784183760928 
Top-2 Accuracy = 1.0 
iter 7: [0.6276784183760928] 
setting: robustj|rf 
Top-1 Accuracy = 0.6276784183760928 
Top-2 Accuracy = 1.0 
iter 8: [0.6276784183760928] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.621335923661505 
Top-2 Accuracy = 1.0 
iter 9: [0.621335923661505] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.6276784183760928 
Top-2 Accuracy = 1.0 
iter 10: [0.6276784183760928] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.6199645734529455 
Top-2 Accuracy = 1.0 
iter 11: [0.6199645734529455] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.6544197474430032 
Top-2 Accuracy = 1.0 
iter 12: [0.6544197474430032] 
setting: robustE|rf 
Top-1 Accuracy = 0.6516199074338609 
Top-2 Accuracy = 1.0 
iter 13: [0.6516199074338609] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.6276784183760928 
Top-2 Accuracy = 1.0 
iter 14: [0.6276784183760928] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.6276784183760928 
Top-2 Accuracy = 1.0 
iter 15: [0.6276784183760928] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.6298497228729787 
Top-2 Accuracy = 1.0 
iter 16: [0.6298497228729787] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.6186503628364094 
Top-2 Accuracy = 1.0 
iter 17: [0.6186503628364094] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.6550482829552597 
Top-2 Accuracy = 1.0 
iter 18: [0.6550482829552597] 
setting: standardized|rf 
Top-1 Accuracy = 0.6703045540254843 
Top-2 Accuracy = 1.0 
iter 19: [0.6703045540254843] 
setting: robustP|rf 
Top-1 Accuracy = 0.6701331352494143 
Top-2 Accuracy = 1.0 
iter 20: [0.6701331352494143] 
setting: normalizem|rf 
Top-1 Accuracy = 0.6669333180961088 
Top-2 Accuracy = 1.0 
iter 21: [0.6669333180961088] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.6528198388663505 
Top-2 Accuracy = 1.0 
iter 22: [0.6528198388663505] 
setting: robusto|rf 
Top-1 Accuracy = 0.6322495857379579 
Top-2 Accuracy = 1.0 
iter 23: [0.6322495857379579] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.6531626764184904 
Top-2 Accuracy = 1.0 
iter 24: [0.6531626764184904] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.6222501571338781 
Top-2 Accuracy = 1.0 
iter 25: [0.6222501571338781] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.6713902062739272 
Top-2 Accuracy = 1.0 
iter 26: [0.6713902062739272] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.6335066567624708 
Top-2 Accuracy = 1.0 
iter 27: [0.6335066567624708] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.6452774127192732 
Top-2 Accuracy = 1.0 
iter 28: [0.6452774127192732] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.652534140906234 
Top-2 Accuracy = 1.0 
iter 29: [0.652534140906234] 
Run # 19 
======= 
setting: normalizeC|rf 
Top-1 Accuracy = 0.6466487629278327 
Top-2 Accuracy = 1.0 
iter 0: [0.6466487629278327] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.6717330438260671 
Top-2 Accuracy = 1.0 
iter 1: [0.6717330438260671] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.6304211187932118 
Top-2 Accuracy = 1.0 
iter 2: [0.6304211187932118] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.6742471858750928 
Top-2 Accuracy = 1.0 
iter 3: [0.6742471858750928] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.6182503856922461 
Top-2 Accuracy = 1.0 
iter 4: [0.6182503856922461] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.6505913947774413 
Top-2 Accuracy = 1.0 
iter 5: [0.6505913947774413] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.6304211187932118 
Top-2 Accuracy = 1.0 
iter 6: [0.6304211187932118] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.651448488657791 
Top-2 Accuracy = 1.0 
iter 7: [0.651448488657791] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.6304211187932118 
Top-2 Accuracy = 1.0 
iter 8: [0.6304211187932118] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.6304211187932118 
Top-2 Accuracy = 1.0 
iter 9: [0.6304211187932118] 
setting: standardizer|rf 
Top-1 Accuracy = 0.6743043254671162 
Top-2 Accuracy = 1.0 
iter 10: [0.6743043254671162] 
setting: standardizef|rf 
Top-1 Accuracy = 0.6186503628364094 
Top-2 Accuracy = 1.0 
iter 11: [0.6186503628364094] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.6200217130449689 
Top-2 Accuracy = 1.0 
iter 12: [0.6200217130449689] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.6304211187932118 
Top-2 Accuracy = 1.0 
iter 13: [0.6304211187932118] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.6742471858750928 
Top-2 Accuracy = 1.0 
iter 14: [0.6742471858750928] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.629906862465002 
Top-2 Accuracy = 1.0 
iter 15: [0.629906862465002] 
setting: normalizej|rf 
Top-1 Accuracy = 0.6547054454031198 
Top-2 Accuracy = 1.0 
iter 16: [0.6547054454031198] 
setting: robustg|rf 
Top-1 Accuracy = 0.6454488314953432 
Top-2 Accuracy = 1.0 
iter 17: [0.6454488314953432] 
setting: robustC|rf 
Top-1 Accuracy = 0.642877549854294 
Top-2 Accuracy = 1.0 
iter 18: [0.642877549854294] 
setting: normalizef|rf 
Top-1 Accuracy = 0.6188217816124792 
Top-2 Accuracy = 1.0 
iter 19: [0.6188217816124792] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.6743043254671162 
Top-2 Accuracy = 1.0 
iter 20: [0.6743043254671162] 
setting: standardizee|rf 
Top-1 Accuracy = 0.6509342323295811 
Top-2 Accuracy = 1.0 
iter 21: [0.6509342323295811] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.6229929718301811 
Top-2 Accuracy = 1.0 
iter 22: [0.6229929718301811] 
setting: robustF|rf 
Top-1 Accuracy = 0.6172218730358265 
Top-2 Accuracy = 1.0 
iter 23: [0.6172218730358265] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.6536197931546769 
Top-2 Accuracy = 1.0 
iter 24: [0.6536197931546769] 
setting: standardizes|rf 
Top-1 Accuracy = 0.6743043254671162 
Top-2 Accuracy = 1.0 
iter 25: [0.6743043254671162] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.6463059253756929 
Top-2 Accuracy = 1.0 
iter 26: [0.6463059253756929] 
setting: robustn|rf 
Top-1 Accuracy = 0.6229929718301811 
Top-2 Accuracy = 1.0 
iter 27: [0.6229929718301811] 
setting: robustS|rf 
Top-1 Accuracy = 0.6743043254671162 
Top-2 Accuracy = 1.0 
iter 28: [0.6743043254671162] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.6743043254671162 
Top-2 Accuracy = 1.0 
iter 29: [0.6743043254671162] 
 
Median top-1 = 0.6444203188389235 
Median top-2 = 1.0 
3 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=35), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=72), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=50), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=84), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=77), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=91), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=98), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=80), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=60), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=19), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=42), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=68), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=56), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=41), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=18), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=10), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=74), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=98), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=42), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=23), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=54), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=16), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=71), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=17), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=71), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=62), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=74), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=97), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=88), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=53), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=57), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=31), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=28), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=90), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=26), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=63), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=82), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=13), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=27), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=19), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=99), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=59), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=59), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=21), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=82), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=67), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=69), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: normalizeK|rf 
Top-1 Accuracy = 0.533683789497743 
Top-2 Accuracy = 0.817 
iter 0: [0.533683789497743] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.49951431346780184 
Top-2 Accuracy = 0.79 
iter 1: [0.49951431346780184] 
setting: normalizes|rf 
Top-1 Accuracy = 0.537512142163305 
Top-2 Accuracy = 0.818 
iter 2: [0.537512142163305] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.4846580195417405 
Top-2 Accuracy = 0.781 
iter 3: [0.4846580195417405] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.528026969887435 
Top-2 Accuracy = 0.817 
iter 4: [0.528026969887435] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.4868293240386264 
Top-2 Accuracy = 0.782 
iter 5: [0.4868293240386264] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.5366550482829553 
Top-2 Accuracy = 0.818 
iter 6: [0.5366550482829553] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.5240271984458031 
Top-2 Accuracy = 0.815 
iter 7: [0.5240271984458031] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.5348837209302325 
Top-2 Accuracy = 0.816 
iter 8: [0.5348837209302325] 
setting: normalizey|rf 
Top-1 Accuracy = 0.5300839952002743 
Top-2 Accuracy = 0.824 
iter 9: [0.5300839952002743] 
setting: normalizet|rf 
Top-1 Accuracy = 0.5119136049368608 
Top-2 Accuracy = 0.785 
iter 10: [0.5119136049368608] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.5119136049368608 
Top-2 Accuracy = 0.785 
iter 11: [0.5119136049368608] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.5427118450374264 
Top-2 Accuracy = 0.822 
iter 12: [0.5427118450374264] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.5119136049368608 
Top-2 Accuracy = 0.785 
iter 13: [0.5119136049368608] 
setting: robustk|rf 
Top-1 Accuracy = 0.5304268327524142 
Top-2 Accuracy = 0.824 
iter 14: [0.5304268327524142] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.4797440146277356 
Top-2 Accuracy = 0.779 
iter 15: [0.4797440146277356] 
setting: robustr|rf 
Top-1 Accuracy = 0.5425404262613565 
Top-2 Accuracy = 0.822 
iter 16: [0.5425404262613565] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.4950002856979601 
Top-2 Accuracy = 0.789 
iter 17: [0.4950002856979601] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.542997542997543 
Top-2 Accuracy = 0.823 
iter 18: [0.542997542997543] 
setting: robustt|rf 
Top-1 Accuracy = 0.5427689846294498 
Top-2 Accuracy = 0.822 
iter 19: [0.5427689846294498] 
setting: robustL|rf 
Top-1 Accuracy = 0.48185817953259813 
Top-2 Accuracy = 0.778 
iter 20: [0.48185817953259813] 
setting: robustK|rf 
Top-1 Accuracy = 0.4950002856979601 
Top-2 Accuracy = 0.789 
iter 21: [0.4950002856979601] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.49562882121021656 
Top-2 Accuracy = 0.785 
iter 22: [0.49562882121021656] 
setting: robuste|rf 
Top-1 Accuracy = 0.4831723901491343 
Top-2 Accuracy = 0.783 
iter 23: [0.4831723901491343] 
setting: normalizev|rf 
Top-1 Accuracy = 0.48540083423804353 
Top-2 Accuracy = 0.783 
iter 24: [0.48540083423804353] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.5003142677561282 
Top-2 Accuracy = 0.793 
iter 25: [0.5003142677561282] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.5003142677561282 
Top-2 Accuracy = 0.793 
iter 26: [0.5003142677561282] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.49905719673161536 
Top-2 Accuracy = 0.794 
iter 27: [0.49905719673161536] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.49905719673161536 
Top-2 Accuracy = 0.794 
iter 28: [0.49905719673161536] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.5273984343751785 
Top-2 Accuracy = 0.823 
iter 29: [0.5273984343751785] 
Run # 1 
====== 
setting: minmaxz|rf 
Top-1 Accuracy = 0.5501971315924804 
Top-2 Accuracy = 0.822 
iter 0: [0.5501971315924804] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.48551511342209014 
Top-2 Accuracy = 0.781 
iter 1: [0.48551511342209014] 
setting: robustD|rf 
Top-1 Accuracy = 0.48420090280555395 
Top-2 Accuracy = 0.781 
iter 2: [0.48420090280555395] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.5020855951088509 
Top-2 Accuracy = 0.794 
iter 3: [0.5020855951088509] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.5469401748471516 
Top-2 Accuracy = 0.823 
iter 4: [0.5469401748471516] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.48488657790983375 
Top-2 Accuracy = 0.782 
iter 5: [0.48488657790983375] 
setting: normalizen|rf 
Top-1 Accuracy = 0.5480258270955946 
Top-2 Accuracy = 0.825 
iter 6: [0.5480258270955946] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.5293411805039712 
Top-2 Accuracy = 0.821 
iter 7: [0.5293411805039712] 
setting: robustW|rf 
Top-1 Accuracy = 0.528198388663505 
Top-2 Accuracy = 0.819 
iter 8: [0.528198388663505] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.5405405405405406 
Top-2 Accuracy = 0.822 
iter 9: [0.5405405405405406] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.48728644077481287 
Top-2 Accuracy = 0.785 
iter 10: [0.48728644077481287] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.48894348894348894 
Top-2 Accuracy = 0.785 
iter 11: [0.48894348894348894] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.5405405405405406 
Top-2 Accuracy = 0.823 
iter 12: [0.5405405405405406] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.5060282269584595 
Top-2 Accuracy = 0.785 
iter 13: [0.5060282269584595] 
setting: normalizef|rf 
Top-1 Accuracy = 0.5421975887092166 
Top-2 Accuracy = 0.82 
iter 14: [0.5421975887092166] 
setting: normalizew|rf 
Top-1 Accuracy = 0.5060282269584595 
Top-2 Accuracy = 0.785 
iter 15: [0.5060282269584595] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.5060282269584595 
Top-2 Accuracy = 0.785 
iter 16: [0.5060282269584595] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.4895148848637221 
Top-2 Accuracy = 0.784 
iter 17: [0.4895148848637221] 
setting: normalized|rf 
Top-1 Accuracy = 0.5435117993257528 
Top-2 Accuracy = 0.825 
iter 18: [0.5435117993257528] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.520541683332381 
Top-2 Accuracy = 0.814 
iter 19: [0.520541683332381] 
setting: robustN|rf 
Top-1 Accuracy = 0.5441403348380093 
Top-2 Accuracy = 0.825 
iter 20: [0.5441403348380093] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.5313410662247872 
Top-2 Accuracy = 0.822 
iter 21: [0.5313410662247872] 
setting: robustT|rf 
Top-1 Accuracy = 0.5299697160162277 
Top-2 Accuracy = 0.821 
iter 22: [0.5299697160162277] 
setting: normalizev|rf 
Top-1 Accuracy = 0.48374378606936747 
Top-2 Accuracy = 0.78 
iter 23: [0.48374378606936747] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.5215701959888006 
Top-2 Accuracy = 0.817 
iter 24: [0.5215701959888006] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.5008285240843381 
Top-2 Accuracy = 0.788 
iter 25: [0.5008285240843381] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.5437403576938461 
Top-2 Accuracy = 0.823 
iter 26: [0.5437403576938461] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.5436832181018227 
Top-2 Accuracy = 0.823 
iter 27: [0.5436832181018227] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.5437974972858693 
Top-2 Accuracy = 0.823 
iter 28: [0.5437974972858693] 
setting: robustH|rf 
Top-1 Accuracy = 0.525284269470316 
Top-2 Accuracy = 0.821 
iter 29: [0.525284269470316] 
Run # 2 
====== 
setting: maxabsT|rf 
Top-1 Accuracy = 0.4817439003485515 
Top-2 Accuracy = 0.778 
iter 0: [0.4817439003485515] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.4865436260785098 
Top-2 Accuracy = 0.783 
iter 1: [0.4865436260785098] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.4843723215816239 
Top-2 Accuracy = 0.782 
iter 2: [0.4843723215816239] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.5419118907491001 
Top-2 Accuracy = 0.823 
iter 3: [0.5419118907491001] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.48494371750185705 
Top-2 Accuracy = 0.782 
iter 4: [0.48494371750185705] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.5279126907033884 
Top-2 Accuracy = 0.819 
iter 5: [0.5279126907033884] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.5223701502771271 
Top-2 Accuracy = 0.811 
iter 6: [0.5223701502771271] 
setting: normalizem|rf 
Top-1 Accuracy = 0.4843151819896006 
Top-2 Accuracy = 0.779 
iter 7: [0.4843151819896006] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.4816867607565282 
Top-2 Accuracy = 0.778 
iter 8: [0.4816867607565282] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.5221987315010571 
Top-2 Accuracy = 0.818 
iter 9: [0.5221987315010571] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.5464830581109651 
Top-2 Accuracy = 0.827 
iter 10: [0.5464830581109651] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.5463687789269185 
Top-2 Accuracy = 0.827 
iter 11: [0.5463687789269185] 
setting: robusti|rf 
Top-1 Accuracy = 0.5465401977029885 
Top-2 Accuracy = 0.828 
iter 12: [0.5465401977029885] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.5460259413747786 
Top-2 Accuracy = 0.826 
iter 13: [0.5460259413747786] 
setting: normalizen|rf 
Top-1 Accuracy = 0.5235129421175932 
Top-2 Accuracy = 0.822 
iter 14: [0.5235129421175932] 
setting: normalizel|rf 
Top-1 Accuracy = 0.5483115250557111 
Top-2 Accuracy = 0.826 
iter 15: [0.5483115250557111] 
setting: robustd|rf 
Top-1 Accuracy = 0.5289983429518313 
Top-2 Accuracy = 0.821 
iter 16: [0.5289983429518313] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.48677218444660303 
Top-2 Accuracy = 0.782 
iter 17: [0.48677218444660303] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.4824867150448546 
Top-2 Accuracy = 0.78 
iter 18: [0.4824867150448546] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.48380092566139077 
Top-2 Accuracy = 0.783 
iter 19: [0.48380092566139077] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.5511113650648535 
Top-2 Accuracy = 0.826 
iter 20: [0.5511113650648535] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.4831723901491343 
Top-2 Accuracy = 0.781 
iter 21: [0.4831723901491343] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.500257128164105 
Top-2 Accuracy = 0.786 
iter 22: [0.500257128164105] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.500257128164105 
Top-2 Accuracy = 0.786 
iter 23: [0.500257128164105] 
setting: standardized|rf 
Top-1 Accuracy = 0.4811153648362951 
Top-2 Accuracy = 0.778 
iter 24: [0.4811153648362951] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.500257128164105 
Top-2 Accuracy = 0.786 
iter 25: [0.500257128164105] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.500257128164105 
Top-2 Accuracy = 0.786 
iter 26: [0.500257128164105] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.5260842237586424 
Top-2 Accuracy = 0.82 
iter 27: [0.5260842237586424] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.500257128164105 
Top-2 Accuracy = 0.786 
iter 28: [0.500257128164105] 
setting: normalizea|rf 
Top-1 Accuracy = 0.5005428261242215 
Top-2 Accuracy = 0.785 
iter 29: [0.5005428261242215] 
Run # 3 
====== 
setting: minmaxL|rf 
Top-1 Accuracy = 0.5467116164790583 
Top-2 Accuracy = 0.822 
iter 0: [0.5467116164790583] 
setting: robustQ|rf 
Top-1 Accuracy = 0.5480829666876178 
Top-2 Accuracy = 0.824 
iter 1: [0.5480829666876178] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.5485400834238043 
Top-2 Accuracy = 0.824 
iter 2: [0.5485400834238043] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.48534369464602023 
Top-2 Accuracy = 0.782 
iter 3: [0.48534369464602023] 
setting: robustR|rf 
Top-1 Accuracy = 0.5248271527341295 
Top-2 Accuracy = 0.821 
iter 4: [0.5248271527341295] 
setting: robustO|rf 
Top-1 Accuracy = 0.5005428261242215 
Top-2 Accuracy = 0.785 
iter 5: [0.5005428261242215] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.5284269470315982 
Top-2 Accuracy = 0.821 
iter 6: [0.5284269470315982] 
setting: maxabst|rf 
Top-1 Accuracy = 0.526198502942689 
Top-2 Accuracy = 0.82 
iter 7: [0.526198502942689] 
setting: robustc|rf 
Top-1 Accuracy = 0.5496828752642706 
Top-2 Accuracy = 0.823 
iter 8: [0.5496828752642706] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.4882006742471859 
Top-2 Accuracy = 0.785 
iter 9: [0.4882006742471859] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.549397177304154 
Top-2 Accuracy = 0.822 
iter 10: [0.549397177304154] 
setting: normalizei|rf 
Top-1 Accuracy = 0.5236272213016399 
Top-2 Accuracy = 0.819 
iter 11: [0.5236272213016399] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.5267127592708988 
Top-2 Accuracy = 0.822 
iter 12: [0.5267127592708988] 
setting: standardizec|rf 
Top-1 Accuracy = 0.5025427118450374 
Top-2 Accuracy = 0.786 
iter 13: [0.5025427118450374] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.5253414090623393 
Top-2 Accuracy = 0.821 
iter 14: [0.5253414090623393] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.526369921718759 
Top-2 Accuracy = 0.819 
iter 15: [0.526369921718759] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.5189989143477516 
Top-2 Accuracy = 0.813 
iter 16: [0.5189989143477516] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.5235129421175932 
Top-2 Accuracy = 0.817 
iter 17: [0.5235129421175932] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.5025427118450374 
Top-2 Accuracy = 0.785 
iter 18: [0.5025427118450374] 
setting: robustt|rf 
Top-1 Accuracy = 0.5025427118450374 
Top-2 Accuracy = 0.785 
iter 19: [0.5025427118450374] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.48408662362150734 
Top-2 Accuracy = 0.782 
iter 20: [0.48408662362150734] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.48060110850808524 
Top-2 Accuracy = 0.78 
iter 21: [0.48060110850808524] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.5270555968230387 
Top-2 Accuracy = 0.821 
iter 22: [0.5270555968230387] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.5025427118450374 
Top-2 Accuracy = 0.785 
iter 23: [0.5025427118450374] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.48402948402948404 
Top-2 Accuracy = 0.781 
iter 24: [0.48402948402948404] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.5463687789269185 
Top-2 Accuracy = 0.822 
iter 25: [0.5463687789269185] 
setting: robustb|rf 
Top-1 Accuracy = 0.5275127135592251 
Top-2 Accuracy = 0.819 
iter 26: [0.5275127135592251] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.4848294383178104 
Top-2 Accuracy = 0.782 
iter 27: [0.4848294383178104] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.5508256671047369 
Top-2 Accuracy = 0.824 
iter 28: [0.5508256671047369] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.5017998971487344 
Top-2 Accuracy = 0.783 
iter 29: [0.5017998971487344] 
Run # 4 
====== 
setting: robustr|rf 
Top-1 Accuracy = 0.5227701274212903 
Top-2 Accuracy = 0.819 
iter 0: [0.5227701274212903] 
setting: normalizer|rf 
Top-1 Accuracy = 0.5479686875035712 
Top-2 Accuracy = 0.822 
iter 1: [0.5479686875035712] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.48591509056625337 
Top-2 Accuracy = 0.783 
iter 2: [0.48591509056625337] 
setting: standardizeh|rf 
Top-1 Accuracy = 0.5481972458716645 
Top-2 Accuracy = 0.823 
iter 3: [0.5481972458716645] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.48288669218901775 
Top-2 Accuracy = 0.781 
iter 4: [0.48288669218901775] 
setting: normalizea|rf 
Top-1 Accuracy = 0.5458545225987086 
Top-2 Accuracy = 0.821 
iter 5: [0.5458545225987086] 
setting: robustO|rf 
Top-1 Accuracy = 0.549397177304154 
Top-2 Accuracy = 0.824 
iter 6: [0.549397177304154] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.5284840866236216 
Top-2 Accuracy = 0.82 
iter 7: [0.5284840866236216] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.5209988000685675 
Top-2 Accuracy = 0.817 
iter 8: [0.5209988000685675] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.5494543168961774 
Top-2 Accuracy = 0.818 
iter 9: [0.5494543168961774] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.5455116850465688 
Top-2 Accuracy = 0.817 
iter 10: [0.5455116850465688] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.5468830352551283 
Top-2 Accuracy = 0.819 
iter 11: [0.5468830352551283] 
setting: standardizef|rf 
Top-1 Accuracy = 0.4950574252899834 
Top-2 Accuracy = 0.782 
iter 12: [0.4950574252899834] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.5226558482372435 
Top-2 Accuracy = 0.82 
iter 13: [0.5226558482372435] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.4870578824067196 
Top-2 Accuracy = 0.782 
iter 14: [0.4870578824067196] 
setting: robustQ|rf 
Top-1 Accuracy = 0.526369921718759 
Top-2 Accuracy = 0.822 
iter 15: [0.526369921718759] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.5467116164790583 
Top-2 Accuracy = 0.819 
iter 16: [0.5467116164790583] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.5245985943660362 
Top-2 Accuracy = 0.821 
iter 17: [0.5245985943660362] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.5468258956631049 
Top-2 Accuracy = 0.819 
iter 18: [0.5468258956631049] 
setting: normalizev|rf 
Top-1 Accuracy = 0.4958002399862865 
Top-2 Accuracy = 0.774 
iter 19: [0.4958002399862865] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.4879149762870693 
Top-2 Accuracy = 0.785 
iter 20: [0.4879149762870693] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.527112736415062 
Top-2 Accuracy = 0.822 
iter 21: [0.527112736415062] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.5501399920004572 
Top-2 Accuracy = 0.819 
iter 22: [0.5501399920004572] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.5487686417918977 
Top-2 Accuracy = 0.817 
iter 23: [0.5487686417918977] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.5487686417918977 
Top-2 Accuracy = 0.817 
iter 24: [0.5487686417918977] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.48242957545283127 
Top-2 Accuracy = 0.781 
iter 25: [0.48242957545283127] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.49557168161819326 
Top-2 Accuracy = 0.774 
iter 26: [0.49557168161819326] 
setting: robustv|rf 
Top-1 Accuracy = 0.5266556196788755 
Top-2 Accuracy = 0.823 
iter 27: [0.5266556196788755] 
setting: normalizej|rf 
Top-1 Accuracy = 0.5024855722530142 
Top-2 Accuracy = 0.787 
iter 28: [0.5024855722530142] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.5504256899605737 
Top-2 Accuracy = 0.822 
iter 29: [0.5504256899605737] 
Run # 5 
====== 
setting: minmaxd|rf 
Top-1 Accuracy = 0.5484258042397577 
Top-2 Accuracy = 0.821 
iter 0: [0.5484258042397577] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.4847151591337638 
Top-2 Accuracy = 0.78 
iter 1: [0.4847151591337638] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.4858008113822067 
Top-2 Accuracy = 0.783 
iter 2: [0.4858008113822067] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.5253414090623393 
Top-2 Accuracy = 0.82 
iter 3: [0.5253414090623393] 
setting: standardizek|rf 
Top-1 Accuracy = 0.5180275412833553 
Top-2 Accuracy = 0.814 
iter 4: [0.5180275412833553] 
setting: robusth|rf 
Top-1 Accuracy = 0.5509399462887835 
Top-2 Accuracy = 0.827 
iter 5: [0.5509399462887835] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.5509399462887835 
Top-2 Accuracy = 0.827 
iter 6: [0.5509399462887835] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.5024855722530142 
Top-2 Accuracy = 0.787 
iter 7: [0.5024855722530142] 
setting: robustR|rf 
Top-1 Accuracy = 0.5507113879206903 
Top-2 Accuracy = 0.827 
iter 8: [0.5507113879206903] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.5024855722530142 
Top-2 Accuracy = 0.787 
iter 9: [0.5024855722530142] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.550482829552597 
Top-2 Accuracy = 0.822 
iter 10: [0.550482829552597] 
setting: normalizea|rf 
Top-1 Accuracy = 0.5251128506942461 
Top-2 Accuracy = 0.817 
iter 11: [0.5251128506942461] 
setting: standardizej|rf 
Top-1 Accuracy = 0.48488657790983375 
Top-2 Accuracy = 0.781 
iter 12: [0.48488657790983375] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.5469401748471516 
Top-2 Accuracy = 0.82 
iter 13: [0.5469401748471516] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.5021427347008742 
Top-2 Accuracy = 0.786 
iter 14: [0.5021427347008742] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.48385806525341407 
Top-2 Accuracy = 0.781 
iter 15: [0.48385806525341407] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.5021427347008742 
Top-2 Accuracy = 0.786 
iter 16: [0.5021427347008742] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.5021427347008742 
Top-2 Accuracy = 0.786 
iter 17: [0.5021427347008742] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.5471687332152448 
Top-2 Accuracy = 0.821 
iter 18: [0.5471687332152448] 
setting: robustw|rf 
Top-1 Accuracy = 0.5469973144391749 
Top-2 Accuracy = 0.821 
iter 19: [0.5469973144391749] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.5203131249642877 
Top-2 Accuracy = 0.818 
iter 20: [0.5203131249642877] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.48517227586995026 
Top-2 Accuracy = 0.783 
iter 21: [0.48517227586995026] 
setting: normalizek|rf 
Top-1 Accuracy = 0.5253414090623393 
Top-2 Accuracy = 0.821 
iter 22: [0.5253414090623393] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.5476258499514314 
Top-2 Accuracy = 0.828 
iter 23: [0.5476258499514314] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.5491114793440375 
Top-2 Accuracy = 0.828 
iter 24: [0.5491114793440375] 
setting: robustV|rf 
Top-1 Accuracy = 0.5175132849551454 
Top-2 Accuracy = 0.81 
iter 25: [0.5175132849551454] 
setting: normalizei|rf 
Top-1 Accuracy = 0.5275127135592251 
Top-2 Accuracy = 0.825 
iter 26: [0.5275127135592251] 
setting: normalizej|rf 
Top-1 Accuracy = 0.4835723672932975 
Top-2 Accuracy = 0.777 
iter 27: [0.4835723672932975] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.5314553454088338 
Top-2 Accuracy = 0.822 
iter 28: [0.5314553454088338] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.5500828524084338 
Top-2 Accuracy = 0.823 
iter 29: [0.5500828524084338] 
Run # 6 
====== 
setting: robustX|rf 
Top-1 Accuracy = 0.5205988229244043 
Top-2 Accuracy = 0.817 
iter 0: [0.5205988229244043] 
setting: robustj|rf 
Top-1 Accuracy = 0.48505799668590366 
Top-2 Accuracy = 0.781 
iter 1: [0.48505799668590366] 
setting: robustm|rf 
Top-1 Accuracy = 0.5507685275127135 
Top-2 Accuracy = 0.823 
iter 2: [0.5507685275127135] 
setting: robustZ|rf 
Top-1 Accuracy = 0.5029998285812239 
Top-2 Accuracy = 0.785 
iter 3: [0.5029998285812239] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.5458545225987086 
Top-2 Accuracy = 0.823 
iter 4: [0.5458545225987086] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.5048854351179932 
Top-2 Accuracy = 0.781 
iter 5: [0.5048854351179932] 
setting: standardizel|rf 
Top-1 Accuracy = 0.5252271298782927 
Top-2 Accuracy = 0.822 
iter 6: [0.5252271298782927] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.4795154562596423 
Top-2 Accuracy = 0.777 
iter 7: [0.4795154562596423] 
setting: robustc|rf 
Top-1 Accuracy = 0.4852294154619736 
Top-2 Accuracy = 0.781 
iter 8: [0.4852294154619736] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.5459688017827553 
Top-2 Accuracy = 0.822 
iter 9: [0.5459688017827553] 
setting: robustU|rf 
Top-1 Accuracy = 0.5447688703502657 
Top-2 Accuracy = 0.823 
iter 10: [0.5447688703502657] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.5237415004856866 
Top-2 Accuracy = 0.815 
iter 11: [0.5237415004856866] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.5113993486086509 
Top-2 Accuracy = 0.786 
iter 12: [0.5113993486086509] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.5463116393348951 
Top-2 Accuracy = 0.821 
iter 13: [0.5463116393348951] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.5435689389177761 
Top-2 Accuracy = 0.822 
iter 14: [0.5435689389177761] 
setting: standardizex|rf 
Top-1 Accuracy = 0.4846008799497172 
Top-2 Accuracy = 0.78 
iter 15: [0.4846008799497172] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.5465973372950117 
Top-2 Accuracy = 0.823 
iter 16: [0.5465973372950117] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.5279698302954117 
Top-2 Accuracy = 0.821 
iter 17: [0.5279698302954117] 
setting: normalizen|rf 
Top-1 Accuracy = 0.5012856408205245 
Top-2 Accuracy = 0.787 
iter 18: [0.5012856408205245] 
setting: normalizea|rf 
Top-1 Accuracy = 0.5213987772127306 
Top-2 Accuracy = 0.816 
iter 19: [0.5213987772127306] 
setting: robustd|rf 
Top-1 Accuracy = 0.528026969887435 
Top-2 Accuracy = 0.821 
iter 20: [0.528026969887435] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.5228272670133135 
Top-2 Accuracy = 0.819 
iter 21: [0.5228272670133135] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.5483115250557111 
Top-2 Accuracy = 0.823 
iter 22: [0.5483115250557111] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.5091709045197417 
Top-2 Accuracy = 0.787 
iter 23: [0.5091709045197417] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.5268841780469687 
Top-2 Accuracy = 0.822 
iter 24: [0.5268841780469687] 
setting: normalizex|rf 
Top-1 Accuracy = 0.5081995314553454 
Top-2 Accuracy = 0.785 
iter 25: [0.5081995314553454] 
setting: normalizer|rf 
Top-1 Accuracy = 0.509228044111765 
Top-2 Accuracy = 0.786 
iter 26: [0.509228044111765] 
setting: robustM|rf 
Top-1 Accuracy = 0.5476258499514314 
Top-2 Accuracy = 0.82 
iter 27: [0.5476258499514314] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.509228044111765 
Top-2 Accuracy = 0.786 
iter 28: [0.509228044111765] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.5247128735500829 
Top-2 Accuracy = 0.82 
iter 29: [0.5247128735500829] 
Run # 7 
====== 
setting: robustN|rf 
Top-1 Accuracy = 0.5266556196788755 
Top-2 Accuracy = 0.82 
iter 0: [0.5266556196788755] 
setting: standardizel|rf 
Top-1 Accuracy = 0.547568710359408 
Top-2 Accuracy = 0.821 
iter 1: [0.547568710359408] 
setting: maxabsK|rf 
Top-1 Accuracy = 0.5251699902862693 
Top-2 Accuracy = 0.816 
iter 2: [0.5251699902862693] 
setting: standardizev|rf 
Top-1 Accuracy = 0.48637220730243985 
Top-2 Accuracy = 0.782 
iter 3: [0.48637220730243985] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.5451117079024056 
Top-2 Accuracy = 0.821 
iter 4: [0.5451117079024056] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.5451117079024056 
Top-2 Accuracy = 0.821 
iter 5: [0.5451117079024056] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.5089423461516485 
Top-2 Accuracy = 0.789 
iter 6: [0.5089423461516485] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.5089423461516485 
Top-2 Accuracy = 0.789 
iter 7: [0.5089423461516485] 
setting: robustK|rf 
Top-1 Accuracy = 0.5089423461516485 
Top-2 Accuracy = 0.789 
iter 8: [0.5089423461516485] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.5089423461516485 
Top-2 Accuracy = 0.789 
iter 9: [0.5089423461516485] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.5283698074395748 
Top-2 Accuracy = 0.819 
iter 10: [0.5283698074395748] 
setting: robustr|rf 
Top-1 Accuracy = 0.49105765384835154 
Top-2 Accuracy = 0.783 
iter 11: [0.49105765384835154] 
setting: maxabst|rf 
Top-1 Accuracy = 0.48242957545283127 
Top-2 Accuracy = 0.779 
iter 12: [0.48242957545283127] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.5092851837037884 
Top-2 Accuracy = 0.789 
iter 13: [0.5092851837037884] 
setting: standardizee|rf 
Top-1 Accuracy = 0.48408662362150734 
Top-2 Accuracy = 0.78 
iter 14: [0.48408662362150734] 
setting: robustL|rf 
Top-1 Accuracy = 0.48620078852636994 
Top-2 Accuracy = 0.78 
iter 15: [0.48620078852636994] 
setting: robustR|rf 
Top-1 Accuracy = 0.4811153648362951 
Top-2 Accuracy = 0.78 
iter 16: [0.4811153648362951] 
setting: standardizef|rf 
Top-1 Accuracy = 0.5092851837037884 
Top-2 Accuracy = 0.789 
iter 17: [0.5092851837037884] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.5292269013199246 
Top-2 Accuracy = 0.82 
iter 18: [0.5292269013199246] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.4844866007656705 
Top-2 Accuracy = 0.781 
iter 19: [0.4844866007656705] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.5492828981201074 
Top-2 Accuracy = 0.824 
iter 20: [0.5492828981201074] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.4835152277012742 
Top-2 Accuracy = 0.78 
iter 21: [0.4835152277012742] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.5041997600137135 
Top-2 Accuracy = 0.783 
iter 22: [0.5041997600137135] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.5460259413747786 
Top-2 Accuracy = 0.823 
iter 23: [0.5460259413747786] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.5244843151819896 
Top-2 Accuracy = 0.816 
iter 24: [0.5244843151819896] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.5211130792526142 
Top-2 Accuracy = 0.817 
iter 25: [0.5211130792526142] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.5464830581109651 
Top-2 Accuracy = 0.824 
iter 26: [0.5464830581109651] 
setting: robustD|rf 
Top-1 Accuracy = 0.5463687789269185 
Top-2 Accuracy = 0.823 
iter 27: [0.5463687789269185] 
setting: robustX|rf 
Top-1 Accuracy = 0.5470544540311982 
Top-2 Accuracy = 0.823 
iter 28: [0.5470544540311982] 
setting: normalizec|rf 
Top-1 Accuracy = 0.5465401977029885 
Top-2 Accuracy = 0.823 
iter 29: [0.5465401977029885] 
Run # 8 
====== 
setting: robustw|rf 
Top-1 Accuracy = 0.518713216387635 
Top-2 Accuracy = 0.813 
iter 0: [0.518713216387635] 
setting: normalizes|rf 
Top-1 Accuracy = 0.5187703559796583 
Top-2 Accuracy = 0.814 
iter 1: [0.5187703559796583] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.5495114564882007 
Top-2 Accuracy = 0.817 
iter 2: [0.5495114564882007] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.5222558710930804 
Top-2 Accuracy = 0.819 
iter 3: [0.5222558710930804] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.48362950688532086 
Top-2 Accuracy = 0.778 
iter 4: [0.48362950688532086] 
setting: robustD|rf 
Top-1 Accuracy = 0.497171590194846 
Top-2 Accuracy = 0.771 
iter 5: [0.497171590194846] 
setting: standardizek|rf 
Top-1 Accuracy = 0.4834009485172276 
Top-2 Accuracy = 0.779 
iter 6: [0.4834009485172276] 
setting: normalizex|rf 
Top-1 Accuracy = 0.4820867379006914 
Top-2 Accuracy = 0.778 
iter 7: [0.4820867379006914] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.5019713159248043 
Top-2 Accuracy = 0.783 
iter 8: [0.5019713159248043] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.4852294154619736 
Top-2 Accuracy = 0.781 
iter 9: [0.4852294154619736] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.5471687332152448 
Top-2 Accuracy = 0.824 
iter 10: [0.5471687332152448] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.5019713159248043 
Top-2 Accuracy = 0.783 
iter 11: [0.5019713159248043] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.5217987543568939 
Top-2 Accuracy = 0.816 
iter 12: [0.5217987543568939] 
setting: normalizez|rf 
Top-1 Accuracy = 0.5501971315924804 
Top-2 Accuracy = 0.823 
iter 13: [0.5501971315924804] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.5028855493971773 
Top-2 Accuracy = 0.787 
iter 14: [0.5028855493971773] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.4857436717901834 
Top-2 Accuracy = 0.781 
iter 15: [0.4857436717901834] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.501914176332781 
Top-2 Accuracy = 0.786 
iter 16: [0.501914176332781] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.5242557568138964 
Top-2 Accuracy = 0.82 
iter 17: [0.5242557568138964] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.4831723901491343 
Top-2 Accuracy = 0.78 
iter 18: [0.4831723901491343] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.501914176332781 
Top-2 Accuracy = 0.786 
iter 19: [0.501914176332781] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.5508256671047369 
Top-2 Accuracy = 0.824 
iter 20: [0.5508256671047369] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.5509399462887835 
Top-2 Accuracy = 0.825 
iter 21: [0.5509399462887835] 
setting: normalizea|rf 
Top-1 Accuracy = 0.550482829552597 
Top-2 Accuracy = 0.826 
iter 22: [0.550482829552597] 
setting: robustS|rf 
Top-1 Accuracy = 0.550311410776527 
Top-2 Accuracy = 0.826 
iter 23: [0.550311410776527] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.48762927832695274 
Top-2 Accuracy = 0.783 
iter 24: [0.48762927832695274] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.5471115936232215 
Top-2 Accuracy = 0.82 
iter 25: [0.5471115936232215] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.5267698988629221 
Top-2 Accuracy = 0.821 
iter 26: [0.5267698988629221] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.5208273812924976 
Top-2 Accuracy = 0.814 
iter 27: [0.5208273812924976] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.5250557111022227 
Top-2 Accuracy = 0.818 
iter 28: [0.5250557111022227] 
setting: standardizew|rf 
Top-1 Accuracy = 0.5212273584366608 
Top-2 Accuracy = 0.811 
iter 29: [0.5212273584366608] 
Run # 9 
====== 
setting: standardizeh|rf 
Top-1 Accuracy = 0.5505399691446203 
Top-2 Accuracy = 0.827 
iter 0: [0.5505399691446203] 
setting: robustK|rf 
Top-1 Accuracy = 0.5512256442489001 
Top-2 Accuracy = 0.827 
iter 1: [0.5512256442489001] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.5500828524084338 
Top-2 Accuracy = 0.826 
iter 2: [0.5500828524084338] 
setting: robusty|rf 
Top-1 Accuracy = 0.48534369464602023 
Top-2 Accuracy = 0.783 
iter 3: [0.48534369464602023] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.5509970858808068 
Top-2 Accuracy = 0.827 
iter 4: [0.5509970858808068] 
setting: robustS|rf 
Top-1 Accuracy = 0.5039140620535969 
Top-2 Accuracy = 0.789 
iter 5: [0.5039140620535969] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.4830009713730644 
Top-2 Accuracy = 0.777 
iter 6: [0.4830009713730644] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.4821438774927147 
Top-2 Accuracy = 0.779 
iter 7: [0.4821438774927147] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.5011142220444545 
Top-2 Accuracy = 0.784 
iter 8: [0.5011142220444545] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.5467116164790583 
Top-2 Accuracy = 0.824 
iter 9: [0.5467116164790583] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.521455916804754 
Top-2 Accuracy = 0.822 
iter 10: [0.521455916804754] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.4870578824067196 
Top-2 Accuracy = 0.78 
iter 11: [0.4870578824067196] 
setting: robustP|rf 
Top-1 Accuracy = 0.47940117707559565 
Top-2 Accuracy = 0.778 
iter 12: [0.47940117707559565] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.5253985486543626 
Top-2 Accuracy = 0.822 
iter 13: [0.5253985486543626] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.5032283869493172 
Top-2 Accuracy = 0.787 
iter 14: [0.5032283869493172] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.5511113650648535 
Top-2 Accuracy = 0.826 
iter 15: [0.5511113650648535] 
setting: robustU|rf 
Top-1 Accuracy = 0.5032283869493172 
Top-2 Accuracy = 0.787 
iter 16: [0.5032283869493172] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.5032283869493172 
Top-2 Accuracy = 0.787 
iter 17: [0.5032283869493172] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.5032283869493172 
Top-2 Accuracy = 0.787 
iter 18: [0.5032283869493172] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.5228844066053369 
Top-2 Accuracy = 0.82 
iter 19: [0.5228844066053369] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.521627335580824 
Top-2 Accuracy = 0.821 
iter 20: [0.521627335580824] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.5032283869493172 
Top-2 Accuracy = 0.787 
iter 21: [0.5032283869493172] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.5180846808753785 
Top-2 Accuracy = 0.814 
iter 22: [0.5180846808753785] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.5509399462887835 
Top-2 Accuracy = 0.826 
iter 23: [0.5509399462887835] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.5492828981201074 
Top-2 Accuracy = 0.827 
iter 24: [0.5492828981201074] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.48894348894348894 
Top-2 Accuracy = 0.783 
iter 25: [0.48894348894348894] 
setting: robustj|rf 
Top-1 Accuracy = 0.4894577452716988 
Top-2 Accuracy = 0.783 
iter 26: [0.4894577452716988] 
setting: robustV|rf 
Top-1 Accuracy = 0.5155705388263527 
Top-2 Accuracy = 0.811 
iter 27: [0.5155705388263527] 
setting: robustr|rf 
Top-1 Accuracy = 0.4890577681275356 
Top-2 Accuracy = 0.784 
iter 28: [0.4890577681275356] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.48271527341294784 
Top-2 Accuracy = 0.78 
iter 29: [0.48271527341294784] 
Run # 10 
======= 
setting: standardizeL|rf 
Top-1 Accuracy = 0.5510542254728301 
Top-2 Accuracy = 0.826 
iter 0: [0.5510542254728301] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.5032283869493172 
Top-2 Accuracy = 0.787 
iter 1: [0.5032283869493172] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.48751499914290614 
Top-2 Accuracy = 0.781 
iter 2: [0.48751499914290614] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.5032283869493172 
Top-2 Accuracy = 0.787 
iter 3: [0.5032283869493172] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.48894348894348894 
Top-2 Accuracy = 0.783 
iter 4: [0.48894348894348894] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.5509399462887835 
Top-2 Accuracy = 0.826 
iter 5: [0.5509399462887835] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.48997200159990856 
Top-2 Accuracy = 0.783 
iter 6: [0.48997200159990856] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.526198502942689 
Top-2 Accuracy = 0.818 
iter 7: [0.526198502942689] 
setting: robustP|rf 
Top-1 Accuracy = 0.5269984572310153 
Top-2 Accuracy = 0.818 
iter 8: [0.5269984572310153] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.48362950688532086 
Top-2 Accuracy = 0.782 
iter 9: [0.48362950688532086] 
setting: robustn|rf 
Top-1 Accuracy = 0.4893434660876521 
Top-2 Accuracy = 0.782 
iter 10: [0.4893434660876521] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.5032283869493172 
Top-2 Accuracy = 0.787 
iter 11: [0.5032283869493172] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.4832295297411576 
Top-2 Accuracy = 0.778 
iter 12: [0.4832295297411576] 
setting: robustA|rf 
Top-1 Accuracy = 0.4908862350722816 
Top-2 Accuracy = 0.783 
iter 13: [0.4908862350722816] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.5032283869493172 
Top-2 Accuracy = 0.787 
iter 14: [0.5032283869493172] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.5514542026169933 
Top-2 Accuracy = 0.827 
iter 15: [0.5514542026169933] 
setting: robustg|rf 
Top-1 Accuracy = 0.5515113422090167 
Top-2 Accuracy = 0.827 
iter 16: [0.5515113422090167] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.48505799668590366 
Top-2 Accuracy = 0.782 
iter 17: [0.48505799668590366] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.5007713844923147 
Top-2 Accuracy = 0.786 
iter 18: [0.5007713844923147] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.5513399234329467 
Top-2 Accuracy = 0.827 
iter 19: [0.5513399234329467] 
setting: standardizei|rf 
Top-1 Accuracy = 0.5007713844923147 
Top-2 Accuracy = 0.786 
iter 20: [0.5007713844923147] 
setting: normalized|rf 
Top-1 Accuracy = 0.5021998742928976 
Top-2 Accuracy = 0.787 
iter 21: [0.5021998742928976] 
setting: robustJ|rf 
Top-1 Accuracy = 0.5317981829609737 
Top-2 Accuracy = 0.82 
iter 22: [0.5317981829609737] 
setting: robustf|rf 
Top-1 Accuracy = 0.48888634935146563 
Top-2 Accuracy = 0.783 
iter 23: [0.48888634935146563] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.5504256899605737 
Top-2 Accuracy = 0.827 
iter 24: [0.5504256899605737] 
setting: standardizef|rf 
Top-1 Accuracy = 0.5209416604765442 
Top-2 Accuracy = 0.816 
iter 25: [0.5209416604765442] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.5251699902862693 
Top-2 Accuracy = 0.822 
iter 26: [0.5251699902862693] 
setting: robustK|rf 
Top-1 Accuracy = 0.552482715273413 
Top-2 Accuracy = 0.827 
iter 27: [0.552482715273413] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.5522541569053196 
Top-2 Accuracy = 0.827 
iter 28: [0.5522541569053196] 
setting: standardizej|rf 
Top-1 Accuracy = 0.502656991029084 
Top-2 Accuracy = 0.787 
iter 29: [0.502656991029084] 
Run # 11 
======= 
setting: normalizek|rf 
Top-1 Accuracy = 0.5520827381292498 
Top-2 Accuracy = 0.827 
iter 0: [0.5520827381292498] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.5520827381292498 
Top-2 Accuracy = 0.826 
iter 1: [0.5520827381292498] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.5257413862065025 
Top-2 Accuracy = 0.821 
iter 2: [0.5257413862065025] 
setting: normalizei|rf 
Top-1 Accuracy = 0.5029426889892006 
Top-2 Accuracy = 0.787 
iter 3: [0.5029426889892006] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.5191131935317982 
Top-2 Accuracy = 0.816 
iter 4: [0.5191131935317982] 
setting: standardizee|rf 
Top-1 Accuracy = 0.5509399462887835 
Top-2 Accuracy = 0.824 
iter 5: [0.5509399462887835] 
setting: robustV|rf 
Top-1 Accuracy = 0.5029426889892006 
Top-2 Accuracy = 0.787 
iter 6: [0.5029426889892006] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.4859722301582767 
Top-2 Accuracy = 0.783 
iter 7: [0.4859722301582767] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.48494371750185705 
Top-2 Accuracy = 0.782 
iter 8: [0.48494371750185705] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.4843151819896006 
Top-2 Accuracy = 0.781 
iter 9: [0.4843151819896006] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.5500257128164104 
Top-2 Accuracy = 0.826 
iter 10: [0.5500257128164104] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.5256842466144792 
Top-2 Accuracy = 0.819 
iter 11: [0.5256842466144792] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.4868293240386264 
Top-2 Accuracy = 0.784 
iter 12: [0.4868293240386264] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.5309982286726472 
Top-2 Accuracy = 0.825 
iter 13: [0.5309982286726472] 
setting: robustb|rf 
Top-1 Accuracy = 0.5255699674304325 
Top-2 Accuracy = 0.821 
iter 14: [0.5255699674304325] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.5225415690531969 
Top-2 Accuracy = 0.821 
iter 15: [0.5225415690531969] 
setting: robustM|rf 
Top-1 Accuracy = 0.5499685732243872 
Top-2 Accuracy = 0.825 
iter 16: [0.5499685732243872] 
setting: standardizet|rf 
Top-1 Accuracy = 0.4859722301582767 
Top-2 Accuracy = 0.783 
iter 17: [0.4859722301582767] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.5268841780469687 
Top-2 Accuracy = 0.822 
iter 18: [0.5268841780469687] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.5021427347008742 
Top-2 Accuracy = 0.788 
iter 19: [0.5021427347008742] 
setting: robustQ|rf 
Top-1 Accuracy = 0.5021427347008742 
Top-2 Accuracy = 0.788 
iter 20: [0.5021427347008742] 
setting: robustu|rf 
Top-1 Accuracy = 0.4820295983086681 
Top-2 Accuracy = 0.778 
iter 21: [0.4820295983086681] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.4846580195417405 
Top-2 Accuracy = 0.782 
iter 22: [0.4846580195417405] 
setting: robusti|rf 
Top-1 Accuracy = 0.5265984800868522 
Top-2 Accuracy = 0.82 
iter 23: [0.5265984800868522] 
setting: normalizey|rf 
Top-1 Accuracy = 0.48374378606936747 
Top-2 Accuracy = 0.781 
iter 24: [0.48374378606936747] 
setting: standardizew|rf 
Top-1 Accuracy = 0.5190560539397748 
Top-2 Accuracy = 0.813 
iter 25: [0.5190560539397748] 
setting: robustA|rf 
Top-1 Accuracy = 0.5256842466144792 
Top-2 Accuracy = 0.823 
iter 26: [0.5256842466144792] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.553225529969716 
Top-2 Accuracy = 0.825 
iter 27: [0.553225529969716] 
setting: robustR|rf 
Top-1 Accuracy = 0.48985772241586195 
Top-2 Accuracy = 0.783 
iter 28: [0.48985772241586195] 
setting: robustO|rf 
Top-1 Accuracy = 0.5257413862065025 
Top-2 Accuracy = 0.823 
iter 29: [0.5257413862065025] 
Run # 12 
======= 
setting: normalizeV|rf 
Top-1 Accuracy = 0.552139877721273 
Top-2 Accuracy = 0.822 
iter 0: [0.552139877721273] 
setting: robusts|rf 
Top-1 Accuracy = 0.5519684589452031 
Top-2 Accuracy = 0.822 
iter 1: [0.5519684589452031] 
setting: robustf|rf 
Top-1 Accuracy = 0.4878006971030227 
Top-2 Accuracy = 0.783 
iter 2: [0.4878006971030227] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.5524255756813896 
Top-2 Accuracy = 0.822 
iter 3: [0.5524255756813896] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.5523684360893664 
Top-2 Accuracy = 0.822 
iter 4: [0.5523684360893664] 
setting: normalizep|rf 
Top-1 Accuracy = 0.4997428718358951 
Top-2 Accuracy = 0.79 
iter 5: [0.4997428718358951] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.5213416376207074 
Top-2 Accuracy = 0.815 
iter 6: [0.5213416376207074] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.5517399005771099 
Top-2 Accuracy = 0.823 
iter 7: [0.5517399005771099] 
setting: normalizef|rf 
Top-1 Accuracy = 0.48511513627792696 
Top-2 Accuracy = 0.779 
iter 8: [0.48511513627792696] 
setting: robustX|rf 
Top-1 Accuracy = 0.4810010856522484 
Top-2 Accuracy = 0.78 
iter 9: [0.4810010856522484] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.5220273127249871 
Top-2 Accuracy = 0.821 
iter 10: [0.5220273127249871] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.4989429175475687 
Top-2 Accuracy = 0.789 
iter 11: [0.4989429175475687] 
setting: standardizen|rf 
Top-1 Accuracy = 0.4989429175475687 
Top-2 Accuracy = 0.789 
iter 12: [0.4989429175475687] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.4860865093423233 
Top-2 Accuracy = 0.783 
iter 13: [0.4860865093423233] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.550311410776527 
Top-2 Accuracy = 0.824 
iter 14: [0.550311410776527] 
setting: standardizev|rf 
Top-1 Accuracy = 0.48757213873492944 
Top-2 Accuracy = 0.781 
iter 15: [0.48757213873492944] 
setting: robustl|rf 
Top-1 Accuracy = 0.48494371750185705 
Top-2 Accuracy = 0.779 
iter 16: [0.48494371750185705] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.48391520484543743 
Top-2 Accuracy = 0.78 
iter 17: [0.48391520484543743] 
setting: minmaxw|rf 
Top-1 Accuracy = 0.550311410776527 
Top-2 Accuracy = 0.824 
iter 18: [0.550311410776527] 
setting: robusto|rf 
Top-1 Accuracy = 0.4989429175475687 
Top-2 Accuracy = 0.789 
iter 19: [0.4989429175475687] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.4825438546368779 
Top-2 Accuracy = 0.777 
iter 20: [0.4825438546368779] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.4989429175475687 
Top-2 Accuracy = 0.789 
iter 21: [0.4989429175475687] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.4989429175475687 
Top-2 Accuracy = 0.789 
iter 22: [0.4989429175475687] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.5260842237586424 
Top-2 Accuracy = 0.817 
iter 23: [0.5260842237586424] 
setting: normalizen|rf 
Top-1 Accuracy = 0.5233415233415234 
Top-2 Accuracy = 0.819 
iter 24: [0.5233415233415234] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.5479686875035712 
Top-2 Accuracy = 0.824 
iter 25: [0.5479686875035712] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.4975715673390092 
Top-2 Accuracy = 0.783 
iter 26: [0.4975715673390092] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.48277241300497115 
Top-2 Accuracy = 0.782 
iter 27: [0.48277241300497115] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.528769784583738 
Top-2 Accuracy = 0.812 
iter 28: [0.528769784583738] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.5443688932061025 
Top-2 Accuracy = 0.819 
iter 29: [0.5443688932061025] 
Run # 13 
======= 
setting: standardizeo|rf 
Top-1 Accuracy = 0.5266556196788755 
Top-2 Accuracy = 0.822 
iter 0: [0.5266556196788755] 
setting: maxabso|rf 
Top-1 Accuracy = 0.49837152162733556 
Top-2 Accuracy = 0.781 
iter 1: [0.49837152162733556] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.543911776469916 
Top-2 Accuracy = 0.822 
iter 2: [0.543911776469916] 
setting: robustL|rf 
Top-1 Accuracy = 0.5118564653448374 
Top-2 Accuracy = 0.807 
iter 3: [0.5118564653448374] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.5443688932061025 
Top-2 Accuracy = 0.822 
iter 4: [0.5443688932061025] 
setting: robustj|rf 
Top-1 Accuracy = 0.4974572881549626 
Top-2 Accuracy = 0.785 
iter 5: [0.4974572881549626] 
setting: robustk|rf 
Top-1 Accuracy = 0.4974572881549626 
Top-2 Accuracy = 0.785 
iter 6: [0.4974572881549626] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.4974572881549626 
Top-2 Accuracy = 0.785 
iter 7: [0.4974572881549626] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.4835152277012742 
Top-2 Accuracy = 0.783 
iter 8: [0.4835152277012742] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.5453402662704988 
Top-2 Accuracy = 0.823 
iter 9: [0.5453402662704988] 
setting: normalizea|rf 
Top-1 Accuracy = 0.5239129192617564 
Top-2 Accuracy = 0.817 
iter 10: [0.5239129192617564] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.5207702417004743 
Top-2 Accuracy = 0.818 
iter 11: [0.5207702417004743] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.5445974515741958 
Top-2 Accuracy = 0.822 
iter 12: [0.5445974515741958] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.5215130563967774 
Top-2 Accuracy = 0.815 
iter 13: [0.5215130563967774] 
setting: robustB|rf 
Top-1 Accuracy = 0.497171590194846 
Top-2 Accuracy = 0.784 
iter 14: [0.497171590194846] 
setting: normalizen|rf 
Top-1 Accuracy = 0.48282955259699445 
Top-2 Accuracy = 0.779 
iter 15: [0.48282955259699445] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.4979144048911491 
Top-2 Accuracy = 0.767 
iter 16: [0.4979144048911491] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.4834009485172276 
Top-2 Accuracy = 0.78 
iter 17: [0.4834009485172276] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.5255699674304325 
Top-2 Accuracy = 0.817 
iter 18: [0.5255699674304325] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.4976287069310325 
Top-2 Accuracy = 0.779 
iter 19: [0.4976287069310325] 
setting: standardizea|rf 
Top-1 Accuracy = 0.48642934689446315 
Top-2 Accuracy = 0.781 
iter 20: [0.48642934689446315] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.48282955259699445 
Top-2 Accuracy = 0.782 
iter 21: [0.48282955259699445] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.4979144048911491 
Top-2 Accuracy = 0.779 
iter 22: [0.4979144048911491] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.5283126678475516 
Top-2 Accuracy = 0.822 
iter 23: [0.5283126678475516] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.4979144048911491 
Top-2 Accuracy = 0.779 
iter 24: [0.4979144048911491] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.5173418661790755 
Top-2 Accuracy = 0.81 
iter 25: [0.5173418661790755] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.526027084166619 
Top-2 Accuracy = 0.821 
iter 26: [0.526027084166619] 
setting: maxabst|rf 
Top-1 Accuracy = 0.5418547511570767 
Top-2 Accuracy = 0.82 
iter 27: [0.5418547511570767] 
setting: normalizes|rf 
Top-1 Accuracy = 0.5233986629335466 
Top-2 Accuracy = 0.818 
iter 28: [0.5233986629335466] 
setting: robustq|rf 
Top-1 Accuracy = 0.48865779098337236 
Top-2 Accuracy = 0.782 
iter 29: [0.48865779098337236] 
Run # 14 
======= 
setting: maxabsC|rf 
Top-1 Accuracy = 0.4879149762870693 
Top-2 Accuracy = 0.784 
iter 0: [0.4879149762870693] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.5191703331238215 
Top-2 Accuracy = 0.814 
iter 1: [0.5191703331238215] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.5509399462887835 
Top-2 Accuracy = 0.824 
iter 2: [0.5509399462887835] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.4999714302039883 
Top-2 Accuracy = 0.784 
iter 3: [0.4999714302039883] 
setting: robustF|rf 
Top-1 Accuracy = 0.4999714302039883 
Top-2 Accuracy = 0.784 
iter 4: [0.4999714302039883] 
setting: normalized|rf 
Top-1 Accuracy = 0.4865436260785098 
Top-2 Accuracy = 0.78 
iter 5: [0.4865436260785098] 
setting: robustX|rf 
Top-1 Accuracy = 0.5522541569053196 
Top-2 Accuracy = 0.821 
iter 6: [0.5522541569053196] 
setting: robustr|rf 
Top-1 Accuracy = 0.5292269013199246 
Top-2 Accuracy = 0.821 
iter 7: [0.5292269013199246] 
setting: robustA|rf 
Top-1 Accuracy = 0.4865436260785098 
Top-2 Accuracy = 0.784 
iter 8: [0.4865436260785098] 
setting: robusty|rf 
Top-1 Accuracy = 0.5010570824524313 
Top-2 Accuracy = 0.769 
iter 9: [0.5010570824524313] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.5010570824524313 
Top-2 Accuracy = 0.769 
iter 10: [0.5010570824524313] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.5268270384549454 
Top-2 Accuracy = 0.819 
iter 11: [0.5268270384549454] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.5010570824524313 
Top-2 Accuracy = 0.769 
iter 12: [0.5010570824524313] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.5010570824524313 
Top-2 Accuracy = 0.769 
iter 13: [0.5010570824524313] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.5010570824524313 
Top-2 Accuracy = 0.769 
iter 14: [0.5010570824524313] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.5010570824524313 
Top-2 Accuracy = 0.769 
iter 15: [0.5010570824524313] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.4861436489343466 
Top-2 Accuracy = 0.779 
iter 16: [0.4861436489343466] 
setting: robustV|rf 
Top-1 Accuracy = 0.5270555968230387 
Top-2 Accuracy = 0.817 
iter 17: [0.5270555968230387] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.5010570824524313 
Top-2 Accuracy = 0.769 
iter 18: [0.5010570824524313] 
setting: minmaxw|rf 
Top-1 Accuracy = 0.55139706302497 
Top-2 Accuracy = 0.82 
iter 19: [0.55139706302497] 
setting: robustG|rf 
Top-1 Accuracy = 0.5010570824524313 
Top-2 Accuracy = 0.769 
iter 20: [0.5010570824524313] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.5010570824524313 
Top-2 Accuracy = 0.769 
iter 21: [0.5010570824524313] 
setting: robustb|rf 
Top-1 Accuracy = 0.5205988229244043 
Top-2 Accuracy = 0.82 
iter 22: [0.5205988229244043] 
setting: robustM|rf 
Top-1 Accuracy = 0.4831723901491343 
Top-2 Accuracy = 0.779 
iter 23: [0.4831723901491343] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.5010570824524313 
Top-2 Accuracy = 0.769 
iter 24: [0.5010570824524313] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.5522541569053196 
Top-2 Accuracy = 0.821 
iter 25: [0.5522541569053196] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.4826009942289012 
Top-2 Accuracy = 0.779 
iter 26: [0.4826009942289012] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.48517227586995026 
Top-2 Accuracy = 0.782 
iter 27: [0.48517227586995026] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.5023141534769442 
Top-2 Accuracy = 0.771 
iter 28: [0.5023141534769442] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.4799725729958288 
Top-2 Accuracy = 0.776 
iter 29: [0.4799725729958288] 
Run # 15 
======= 
setting: maxabsP|rf 
Top-1 Accuracy = 0.5449402891263356 
Top-2 Accuracy = 0.819 
iter 0: [0.5449402891263356] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.525284269470316 
Top-2 Accuracy = 0.82 
iter 1: [0.525284269470316] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.4799154334038055 
Top-2 Accuracy = 0.779 
iter 2: [0.4799154334038055] 
setting: robustL|rf 
Top-1 Accuracy = 0.5472830123992914 
Top-2 Accuracy = 0.82 
iter 3: [0.5472830123992914] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.5426547054454032 
Top-2 Accuracy = 0.821 
iter 4: [0.5426547054454032] 
setting: robustT|rf 
Top-1 Accuracy = 0.48397234443746073 
Top-2 Accuracy = 0.781 
iter 5: [0.48397234443746073] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.5237415004856866 
Top-2 Accuracy = 0.822 
iter 6: [0.5237415004856866] 
setting: normalizem|rf 
Top-1 Accuracy = 0.5474544311753614 
Top-2 Accuracy = 0.822 
iter 7: [0.5474544311753614] 
setting: normalized|rf 
Top-1 Accuracy = 0.5229986857893835 
Top-2 Accuracy = 0.819 
iter 8: [0.5229986857893835] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.48540083423804353 
Top-2 Accuracy = 0.782 
iter 9: [0.48540083423804353] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.48500085709388036 
Top-2 Accuracy = 0.78 
iter 10: [0.48500085709388036] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.5452831266784756 
Top-2 Accuracy = 0.821 
iter 11: [0.5452831266784756] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.5139706302497 
Top-2 Accuracy = 0.813 
iter 12: [0.5139706302497] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.5432832409576596 
Top-2 Accuracy = 0.821 
iter 13: [0.5432832409576596] 
setting: standardizey|rf 
Top-1 Accuracy = 0.5451688474944288 
Top-2 Accuracy = 0.822 
iter 14: [0.5451688474944288] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.4987143591794755 
Top-2 Accuracy = 0.782 
iter 15: [0.4987143591794755] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.48991486200788525 
Top-2 Accuracy = 0.784 
iter 16: [0.48991486200788525] 
setting: robustD|rf 
Top-1 Accuracy = 0.5454545454545454 
Top-2 Accuracy = 0.822 
iter 17: [0.5454545454545454] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.4987143591794755 
Top-2 Accuracy = 0.782 
iter 18: [0.4987143591794755] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.5235129421175932 
Top-2 Accuracy = 0.822 
iter 19: [0.5235129421175932] 
setting: robustI|rf 
Top-1 Accuracy = 0.5500257128164104 
Top-2 Accuracy = 0.821 
iter 20: [0.5500257128164104] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.5001428489800582 
Top-2 Accuracy = 0.785 
iter 21: [0.5001428489800582] 
setting: standardizet|rf 
Top-1 Accuracy = 0.5271698760070853 
Top-2 Accuracy = 0.823 
iter 22: [0.5271698760070853] 
setting: robustR|rf 
Top-1 Accuracy = 0.5001428489800582 
Top-2 Accuracy = 0.785 
iter 23: [0.5001428489800582] 
setting: maxabsK|rf 
Top-1 Accuracy = 0.48402948402948404 
Top-2 Accuracy = 0.782 
iter 24: [0.48402948402948404] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.5279698302954117 
Top-2 Accuracy = 0.82 
iter 25: [0.5279698302954117] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.5001428489800582 
Top-2 Accuracy = 0.785 
iter 26: [0.5001428489800582] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.4847722987257871 
Top-2 Accuracy = 0.782 
iter 27: [0.4847722987257871] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.5245985943660362 
Top-2 Accuracy = 0.819 
iter 28: [0.5245985943660362] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.48162962116450486 
Top-2 Accuracy = 0.776 
iter 29: [0.48162962116450486] 
Run # 16 
======= 
setting: robustO|rf 
Top-1 Accuracy = 0.5460259413747786 
Top-2 Accuracy = 0.823 
iter 0: [0.5460259413747786] 
setting: robustd|rf 
Top-1 Accuracy = 0.48385806525341407 
Top-2 Accuracy = 0.778 
iter 1: [0.48385806525341407] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.5461402205588252 
Top-2 Accuracy = 0.823 
iter 2: [0.5461402205588252] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.4999714302039883 
Top-2 Accuracy = 0.783 
iter 3: [0.4999714302039883] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.5453974058625222 
Top-2 Accuracy = 0.823 
iter 4: [0.5453974058625222] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.5169990286269356 
Top-2 Accuracy = 0.814 
iter 5: [0.5169990286269356] 
setting: robustD|rf 
Top-1 Accuracy = 0.5237415004856866 
Top-2 Accuracy = 0.818 
iter 6: [0.5237415004856866] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.5007713844923147 
Top-2 Accuracy = 0.781 
iter 7: [0.5007713844923147] 
setting: normalizes|rf 
Top-1 Accuracy = 0.5235700817096166 
Top-2 Accuracy = 0.821 
iter 8: [0.5235700817096166] 
setting: robustA|rf 
Top-1 Accuracy = 0.5450545683103822 
Top-2 Accuracy = 0.823 
iter 9: [0.5450545683103822] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.5447688703502657 
Top-2 Accuracy = 0.822 
iter 10: [0.5447688703502657] 
setting: standardizec|rf 
Top-1 Accuracy = 0.49831438203531225 
Top-2 Accuracy = 0.78 
iter 11: [0.49831438203531225] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.5487686417918977 
Top-2 Accuracy = 0.824 
iter 12: [0.5487686417918977] 
setting: standardizei|rf 
Top-1 Accuracy = 0.499914290611965 
Top-2 Accuracy = 0.781 
iter 13: [0.499914290611965] 
setting: normalizem|rf 
Top-1 Accuracy = 0.48288669218901775 
Top-2 Accuracy = 0.779 
iter 14: [0.48288669218901775] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.5259699445745958 
Top-2 Accuracy = 0.821 
iter 15: [0.5259699445745958] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.4845437403576938 
Top-2 Accuracy = 0.781 
iter 16: [0.4845437403576938] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.5257413862065025 
Top-2 Accuracy = 0.821 
iter 17: [0.5257413862065025] 
setting: normalizek|rf 
Top-1 Accuracy = 0.5283126678475516 
Top-2 Accuracy = 0.821 
iter 18: [0.5283126678475516] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.4832295297411576 
Top-2 Accuracy = 0.779 
iter 19: [0.4832295297411576] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.5237415004856866 
Top-2 Accuracy = 0.822 
iter 20: [0.5237415004856866] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.4832295297411576 
Top-2 Accuracy = 0.779 
iter 21: [0.4832295297411576] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.5259699445745958 
Top-2 Accuracy = 0.818 
iter 22: [0.5259699445745958] 
setting: robusty|rf 
Top-1 Accuracy = 0.5243128964059197 
Top-2 Accuracy = 0.819 
iter 23: [0.5243128964059197] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.4988286383635221 
Top-2 Accuracy = 0.78 
iter 24: [0.4988286383635221] 
setting: robustE|rf 
Top-1 Accuracy = 0.5488257813839209 
Top-2 Accuracy = 0.824 
iter 25: [0.5488257813839209] 
setting: normalizer|rf 
Top-1 Accuracy = 0.5450545683103822 
Top-2 Accuracy = 0.823 
iter 26: [0.5450545683103822] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.5233986629335466 
Top-2 Accuracy = 0.818 
iter 27: [0.5233986629335466] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.5221415919090338 
Top-2 Accuracy = 0.82 
iter 28: [0.5221415919090338] 
setting: standardizes|rf 
Top-1 Accuracy = 0.544997428718359 
Top-2 Accuracy = 0.823 
iter 29: [0.544997428718359] 
Run # 17 
======= 
setting: minmaxG|rf 
Top-1 Accuracy = 0.5222558710930804 
Top-2 Accuracy = 0.817 
iter 0: [0.5222558710930804] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.4987714987714988 
Top-2 Accuracy = 0.779 
iter 1: [0.4987714987714988] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.48185817953259813 
Top-2 Accuracy = 0.779 
iter 2: [0.48185817953259813] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.4985429404034055 
Top-2 Accuracy = 0.778 
iter 3: [0.4985429404034055] 
setting: robustu|rf 
Top-1 Accuracy = 0.5459688017827553 
Top-2 Accuracy = 0.822 
iter 4: [0.5459688017827553] 
setting: normalizev|rf 
Top-1 Accuracy = 0.5206559625164277 
Top-2 Accuracy = 0.817 
iter 5: [0.5206559625164277] 
setting: robustE|rf 
Top-1 Accuracy = 0.4820867379006914 
Top-2 Accuracy = 0.78 
iter 6: [0.4820867379006914] 
setting: standardizei|rf 
Top-1 Accuracy = 0.4993428946917319 
Top-2 Accuracy = 0.768 
iter 7: [0.4993428946917319] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.5264270613107822 
Top-2 Accuracy = 0.821 
iter 8: [0.5264270613107822] 
setting: robustb|rf 
Top-1 Accuracy = 0.4825438546368779 
Top-2 Accuracy = 0.778 
iter 9: [0.4825438546368779] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.4824867150448546 
Top-2 Accuracy = 0.78 
iter 10: [0.4824867150448546] 
setting: robustg|rf 
Top-1 Accuracy = 0.4993428946917319 
Top-2 Accuracy = 0.768 
iter 11: [0.4993428946917319] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.4993428946917319 
Top-2 Accuracy = 0.768 
iter 12: [0.4993428946917319] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.4811725044283184 
Top-2 Accuracy = 0.777 
iter 13: [0.4811725044283184] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.4864864864864865 
Top-2 Accuracy = 0.784 
iter 14: [0.4864864864864865] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.5443117536140792 
Top-2 Accuracy = 0.821 
iter 15: [0.5443117536140792] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.5049425747100166 
Top-2 Accuracy = 0.778 
iter 16: [0.5049425747100166] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.518713216387635 
Top-2 Accuracy = 0.817 
iter 17: [0.518713216387635] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.5487686417918977 
Top-2 Accuracy = 0.823 
iter 18: [0.5487686417918977] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.5233986629335466 
Top-2 Accuracy = 0.817 
iter 19: [0.5233986629335466] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.5276841323352951 
Top-2 Accuracy = 0.821 
iter 20: [0.5276841323352951] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.4864864864864865 
Top-2 Accuracy = 0.783 
iter 21: [0.4864864864864865] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.5049425747100166 
Top-2 Accuracy = 0.778 
iter 22: [0.5049425747100166] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.5049425747100166 
Top-2 Accuracy = 0.778 
iter 23: [0.5049425747100166] 
setting: normalizej|rf 
Top-1 Accuracy = 0.48414376321353064 
Top-2 Accuracy = 0.78 
iter 24: [0.48414376321353064] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.549568596080224 
Top-2 Accuracy = 0.827 
iter 25: [0.549568596080224] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.48768641791897605 
Top-2 Accuracy = 0.782 
iter 26: [0.48768641791897605] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.48185817953259813 
Top-2 Accuracy = 0.778 
iter 27: [0.48185817953259813] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.5486543626078509 
Top-2 Accuracy = 0.826 
iter 28: [0.5486543626078509] 
setting: normalizen|rf 
Top-1 Accuracy = 0.5491114793440375 
Top-2 Accuracy = 0.828 
iter 29: [0.5491114793440375] 
Run # 18 
======= 
setting: normalizeu|rf 
Top-1 Accuracy = 0.4844294611736472 
Top-2 Accuracy = 0.78 
iter 0: [0.4844294611736472] 
setting: standardizey|rf 
Top-1 Accuracy = 0.5143706073938632 
Top-2 Accuracy = 0.813 
iter 1: [0.5143706073938632] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.4977429861150791 
Top-2 Accuracy = 0.78 
iter 2: [0.4977429861150791] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.49728586937889263 
Top-2 Accuracy = 0.78 
iter 3: [0.49728586937889263] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.5437403576938461 
Top-2 Accuracy = 0.822 
iter 4: [0.5437403576938461] 
setting: standardizea|rf 
Top-1 Accuracy = 0.5285412262156448 
Top-2 Accuracy = 0.817 
iter 5: [0.5285412262156448] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.49728586937889263 
Top-2 Accuracy = 0.78 
iter 6: [0.49728586937889263] 
setting: standardized|rf 
Top-1 Accuracy = 0.4808868064682018 
Top-2 Accuracy = 0.776 
iter 7: [0.4808868064682018] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.49728586937889263 
Top-2 Accuracy = 0.78 
iter 8: [0.49728586937889263] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.49728586937889263 
Top-2 Accuracy = 0.78 
iter 9: [0.49728586937889263] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.524198617221873 
Top-2 Accuracy = 0.817 
iter 10: [0.524198617221873] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.48768641791897605 
Top-2 Accuracy = 0.785 
iter 11: [0.48768641791897605] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.5285412262156448 
Top-2 Accuracy = 0.822 
iter 12: [0.5285412262156448] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.49728586937889263 
Top-2 Accuracy = 0.78 
iter 13: [0.49728586937889263] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.52345580252557 
Top-2 Accuracy = 0.822 
iter 14: [0.52345580252557] 
setting: standardizen|rf 
Top-1 Accuracy = 0.5283126678475516 
Top-2 Accuracy = 0.82 
iter 15: [0.5283126678475516] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.49728586937889263 
Top-2 Accuracy = 0.78 
iter 16: [0.49728586937889263] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.5486543626078509 
Top-2 Accuracy = 0.826 
iter 17: [0.5486543626078509] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.5529398320095994 
Top-2 Accuracy = 0.826 
iter 18: [0.5529398320095994] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.48391520484543743 
Top-2 Accuracy = 0.783 
iter 19: [0.48391520484543743] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.5438546368778927 
Top-2 Accuracy = 0.822 
iter 20: [0.5438546368778927] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.5471687332152448 
Top-2 Accuracy = 0.824 
iter 21: [0.5471687332152448] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.49728586937889263 
Top-2 Accuracy = 0.78 
iter 22: [0.49728586937889263] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.4799725729958288 
Top-2 Accuracy = 0.775 
iter 23: [0.4799725729958288] 
setting: robustq|rf 
Top-1 Accuracy = 0.49722872978686933 
Top-2 Accuracy = 0.78 
iter 24: [0.49722872978686933] 
setting: normalizej|rf 
Top-1 Accuracy = 0.5460830809668019 
Top-2 Accuracy = 0.824 
iter 25: [0.5460830809668019] 
setting: robustS|rf 
Top-1 Accuracy = 0.5180846808753785 
Top-2 Accuracy = 0.814 
iter 26: [0.5180846808753785] 
setting: robustZ|rf 
Top-1 Accuracy = 0.48048682932403863 
Top-2 Accuracy = 0.777 
iter 27: [0.48048682932403863] 
setting: robustU|rf 
Top-1 Accuracy = 0.48591509056625337 
Top-2 Accuracy = 0.781 
iter 28: [0.48591509056625337] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.5453974058625222 
Top-2 Accuracy = 0.823 
iter 29: [0.5453974058625222] 
Run # 19 
======= 
setting: standardizeI|rf 
Top-1 Accuracy = 0.48585795097423007 
Top-2 Accuracy = 0.784 
iter 0: [0.48585795097423007] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.5161419347465859 
Top-2 Accuracy = 0.811 
iter 1: [0.5161419347465859] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.48271527341294784 
Top-2 Accuracy = 0.778 
iter 2: [0.48271527341294784] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.4831723901491343 
Top-2 Accuracy = 0.778 
iter 3: [0.4831723901491343] 
setting: robustR|rf 
Top-1 Accuracy = 0.49940003428375523 
Top-2 Accuracy = 0.773 
iter 4: [0.49940003428375523] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.49940003428375523 
Top-2 Accuracy = 0.773 
iter 5: [0.49940003428375523] 
setting: robustn|rf 
Top-1 Accuracy = 0.48374378606936747 
Top-2 Accuracy = 0.779 
iter 6: [0.48374378606936747] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.4829438317810411 
Top-2 Accuracy = 0.782 
iter 7: [0.4829438317810411] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.4842580423975773 
Top-2 Accuracy = 0.78 
iter 8: [0.4842580423975773] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.49940003428375523 
Top-2 Accuracy = 0.773 
iter 9: [0.49940003428375523] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.4816867607565282 
Top-2 Accuracy = 0.778 
iter 10: [0.4816867607565282] 
setting: standardizez|rf 
Top-1 Accuracy = 0.48374378606936747 
Top-2 Accuracy = 0.78 
iter 11: [0.48374378606936747] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.5478544083195246 
Top-2 Accuracy = 0.824 
iter 12: [0.5478544083195246] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.49940003428375523 
Top-2 Accuracy = 0.773 
iter 13: [0.49940003428375523] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.49940003428375523 
Top-2 Accuracy = 0.773 
iter 14: [0.49940003428375523] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.547740129135478 
Top-2 Accuracy = 0.824 
iter 15: [0.547740129135478] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.5205988229244043 
Top-2 Accuracy = 0.818 
iter 16: [0.5205988229244043] 
setting: robustv|rf 
Top-1 Accuracy = 0.4817439003485515 
Top-2 Accuracy = 0.778 
iter 17: [0.4817439003485515] 
setting: robustj|rf 
Top-1 Accuracy = 0.49940003428375523 
Top-2 Accuracy = 0.773 
iter 18: [0.49940003428375523] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.49940003428375523 
Top-2 Accuracy = 0.773 
iter 19: [0.49940003428375523] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.48397234443746073 
Top-2 Accuracy = 0.778 
iter 20: [0.48397234443746073] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.48042968973201533 
Top-2 Accuracy = 0.775 
iter 21: [0.48042968973201533] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.49905719673161536 
Top-2 Accuracy = 0.774 
iter 22: [0.49905719673161536] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.5226558482372435 
Top-2 Accuracy = 0.82 
iter 23: [0.5226558482372435] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.5176847037312153 
Top-2 Accuracy = 0.81 
iter 24: [0.5176847037312153] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.49940003428375523 
Top-2 Accuracy = 0.771 
iter 25: [0.49940003428375523] 
setting: standardizek|rf 
Top-1 Accuracy = 0.49940003428375523 
Top-2 Accuracy = 0.771 
iter 26: [0.49940003428375523] 
setting: robustb|rf 
Top-1 Accuracy = 0.5176275641391921 
Top-2 Accuracy = 0.815 
iter 27: [0.5176275641391921] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.4808296668761785 
Top-2 Accuracy = 0.778 
iter 28: [0.4808296668761785] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.4842580423975773 
Top-2 Accuracy = 0.778 
iter 29: [0.4842580423975773] 
 
Median top-1 = 0.5158562367864693 
Median top-2 = 0.8105 
5 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=28), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=24), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=91), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=98), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=13), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=82), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=65), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=79), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=56), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=17), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=89), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=59), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=87), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=32), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=64), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=71), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=83), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=39), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=42), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=13), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=27), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=93), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=93), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=95), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=99), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=82), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=46), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=18), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=76), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=13), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=42), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=81), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=77), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=94), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=54), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=39), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=26), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=10), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=59), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=70), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=97), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=28), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=23), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=14), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=32), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: maxabsY|rf 
Top-1 Accuracy = 0.3203245528826924 
Top-2 Accuracy = 0.597 
iter 0: [0.3203245528826924] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.3203245528826924 
Top-2 Accuracy = 0.597 
iter 1: [0.3203245528826924] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.29844008913776354 
Top-2 Accuracy = 0.568 
iter 2: [0.29844008913776354] 
setting: robustx|rf 
Top-1 Accuracy = 0.30638249242900406 
Top-2 Accuracy = 0.56 
iter 3: [0.30638249242900406] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.29844008913776354 
Top-2 Accuracy = 0.568 
iter 4: [0.29844008913776354] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.3094108908062396 
Top-2 Accuracy = 0.565 
iter 5: [0.3094108908062396] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.30855379692588997 
Top-2 Accuracy = 0.563 
iter 6: [0.30855379692588997] 
setting: robusti|rf 
Top-1 Accuracy = 0.2831266784755157 
Top-2 Accuracy = 0.491 
iter 7: [0.2831266784755157] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.30769670304554025 
Top-2 Accuracy = 0.566 
iter 8: [0.30769670304554025] 
setting: robustb|rf 
Top-1 Accuracy = 0.30912519284612305 
Top-2 Accuracy = 0.558 
iter 9: [0.30912519284612305] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.3198674361465059 
Top-2 Accuracy = 0.597 
iter 10: [0.3198674361465059] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.29844008913776354 
Top-2 Accuracy = 0.568 
iter 11: [0.29844008913776354] 
setting: robustc|rf 
Top-1 Accuracy = 0.2844408890920519 
Top-2 Accuracy = 0.493 
iter 12: [0.2844408890920519] 
setting: standardizes|rf 
Top-1 Accuracy = 0.29844008913776354 
Top-2 Accuracy = 0.568 
iter 13: [0.29844008913776354] 
setting: normalizek|rf 
Top-1 Accuracy = 0.3175247128735501 
Top-2 Accuracy = 0.584 
iter 14: [0.3175247128735501] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.3175247128735501 
Top-2 Accuracy = 0.584 
iter 15: [0.3175247128735501] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.3175247128735501 
Top-2 Accuracy = 0.584 
iter 16: [0.3175247128735501] 
setting: standardizei|rf 
Top-1 Accuracy = 0.3037540711959317 
Top-2 Accuracy = 0.565 
iter 17: [0.3037540711959317] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.2867836123650077 
Top-2 Accuracy = 0.497 
iter 18: [0.2867836123650077] 
setting: normalizev|rf 
Top-1 Accuracy = 0.28975487115022 
Top-2 Accuracy = 0.501 
iter 19: [0.28975487115022] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.31615336266499056 
Top-2 Accuracy = 0.583 
iter 20: [0.31615336266499056] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.30409690874807155 
Top-2 Accuracy = 0.553 
iter 21: [0.30409690874807155] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.3275812810696532 
Top-2 Accuracy = 0.604 
iter 22: [0.3275812810696532] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.2848408662362151 
Top-2 Accuracy = 0.493 
iter 23: [0.2848408662362151] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.31615336266499056 
Top-2 Accuracy = 0.58 
iter 24: [0.31615336266499056] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.28826924175761387 
Top-2 Accuracy = 0.499 
iter 25: [0.28826924175761387] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.30049711445060284 
Top-2 Accuracy = 0.545 
iter 26: [0.30049711445060284] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.326267070453117 
Top-2 Accuracy = 0.605 
iter 27: [0.326267070453117] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.2848980058282384 
Top-2 Accuracy = 0.493 
iter 28: [0.2848980058282384] 
setting: robustC|rf 
Top-1 Accuracy = 0.32672418718930346 
Top-2 Accuracy = 0.605 
iter 29: [0.32672418718930346] 
Run # 1 
====== 
setting: normalizeC|rf 
Top-1 Accuracy = 0.303639792011885 
Top-2 Accuracy = 0.557 
iter 0: [0.303639792011885] 
setting: standardizev|rf 
Top-1 Accuracy = 0.3070110279412605 
Top-2 Accuracy = 0.557 
iter 1: [0.3070110279412605] 
setting: robustT|rf 
Top-1 Accuracy = 0.30426832752414146 
Top-2 Accuracy = 0.565 
iter 2: [0.30426832752414146] 
setting: standardizer|rf 
Top-1 Accuracy = 0.30409690874807155 
Top-2 Accuracy = 0.558 
iter 3: [0.30409690874807155] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.3132963830638249 
Top-2 Accuracy = 0.569 
iter 4: [0.3132963830638249] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.2835837952117022 
Top-2 Accuracy = 0.495 
iter 5: [0.2835837952117022] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.2998114393463231 
Top-2 Accuracy = 0.564 
iter 6: [0.2998114393463231] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.32312439289183476 
Top-2 Accuracy = 0.595 
iter 7: [0.32312439289183476] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.3238672075881378 
Top-2 Accuracy = 0.594 
iter 8: [0.3238672075881378] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.30415404834009485 
Top-2 Accuracy = 0.556 
iter 9: [0.30415404834009485] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.305639677732701 
Top-2 Accuracy = 0.556 
iter 10: [0.305639677732701] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.285926518484658 
Top-2 Accuracy = 0.495 
iter 11: [0.285926518484658] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.32398148677218447 
Top-2 Accuracy = 0.598 
iter 12: [0.32398148677218447] 
setting: robuste|rf 
Top-1 Accuracy = 0.29666876178504087 
Top-2 Accuracy = 0.559 
iter 13: [0.29666876178504087] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.29666876178504087 
Top-2 Accuracy = 0.559 
iter 14: [0.29666876178504087] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.30198274384320895 
Top-2 Accuracy = 0.557 
iter 15: [0.30198274384320895] 
setting: normalizec|rf 
Top-1 Accuracy = 0.2872407291011942 
Top-2 Accuracy = 0.497 
iter 16: [0.2872407291011942] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.3295240271984458 
Top-2 Accuracy = 0.605 
iter 17: [0.3295240271984458] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.30861093651791327 
Top-2 Accuracy = 0.565 
iter 18: [0.30861093651791327] 
setting: standardizex|rf 
Top-1 Accuracy = 0.3082109593737501 
Top-2 Accuracy = 0.566 
iter 19: [0.3082109593737501] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.28872635849380035 
Top-2 Accuracy = 0.497 
iter 20: [0.28872635849380035] 
setting: robustm|rf 
Top-1 Accuracy = 0.2965544826009942 
Top-2 Accuracy = 0.558 
iter 21: [0.2965544826009942] 
setting: robustl|rf 
Top-1 Accuracy = 0.2862693560367979 
Top-2 Accuracy = 0.497 
iter 22: [0.2862693560367979] 
setting: normalized|rf 
Top-1 Accuracy = 0.3024970001714188 
Top-2 Accuracy = 0.557 
iter 23: [0.3024970001714188] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.30289697731558196 
Top-2 Accuracy = 0.561 
iter 24: [0.30289697731558196] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.3284955145420262 
Top-2 Accuracy = 0.607 
iter 25: [0.3284955145420262] 
setting: normalizes|rf 
Top-1 Accuracy = 0.32683846637335007 
Top-2 Accuracy = 0.602 
iter 26: [0.32683846637335007] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.30512542140449117 
Top-2 Accuracy = 0.548 
iter 27: [0.30512542140449117] 
setting: robusty|rf 
Top-1 Accuracy = 0.28432660990800523 
Top-2 Accuracy = 0.494 
iter 28: [0.28432660990800523] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.32678132678132676 
Top-2 Accuracy = 0.603 
iter 29: [0.32678132678132676] 
Run # 2 
====== 
setting: robustR|rf 
Top-1 Accuracy = 0.2927261299354323 
Top-2 Accuracy = 0.558 
iter 0: [0.2927261299354323] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.3079252614136335 
Top-2 Accuracy = 0.562 
iter 1: [0.3079252614136335] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.32672418718930346 
Top-2 Accuracy = 0.603 
iter 2: [0.32672418718930346] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.3268956059653734 
Top-2 Accuracy = 0.605 
iter 3: [0.3268956059653734] 
setting: maxabss|rf 
Top-1 Accuracy = 0.28735500828524085 
Top-2 Accuracy = 0.496 
iter 4: [0.28735500828524085] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.30318267527569853 
Top-2 Accuracy = 0.559 
iter 5: [0.30318267527569853] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.304725444260328 
Top-2 Accuracy = 0.551 
iter 6: [0.304725444260328] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.2868978915490543 
Top-2 Accuracy = 0.496 
iter 7: [0.2868978915490543] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.2834695160276556 
Top-2 Accuracy = 0.496 
iter 8: [0.2834695160276556] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.3048968630363979 
Top-2 Accuracy = 0.557 
iter 9: [0.3048968630363979] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.2989543454659734 
Top-2 Accuracy = 0.557 
iter 10: [0.2989543454659734] 
setting: normalizem|rf 
Top-1 Accuracy = 0.3264384892291869 
Top-2 Accuracy = 0.603 
iter 11: [0.3264384892291869] 
setting: standardizey|rf 
Top-1 Accuracy = 0.2835266556196789 
Top-2 Accuracy = 0.494 
iter 12: [0.2835266556196789] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.2856979601165648 
Top-2 Accuracy = 0.497 
iter 13: [0.2856979601165648] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.32712416433346664 
Top-2 Accuracy = 0.603 
iter 14: [0.32712416433346664] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.30289697731558196 
Top-2 Accuracy = 0.558 
iter 15: [0.30289697731558196] 
setting: standardizee|rf 
Top-1 Accuracy = 0.29586880749671446 
Top-2 Accuracy = 0.555 
iter 16: [0.29586880749671446] 
setting: robustq|rf 
Top-1 Accuracy = 0.287926404205474 
Top-2 Accuracy = 0.496 
iter 17: [0.287926404205474] 
setting: robustB|rf 
Top-1 Accuracy = 0.3035826524198617 
Top-2 Accuracy = 0.556 
iter 18: [0.3035826524198617] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.3051825609965145 
Top-2 Accuracy = 0.564 
iter 19: [0.3051825609965145] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.29586880749671446 
Top-2 Accuracy = 0.555 
iter 20: [0.29586880749671446] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.2962687846408777 
Top-2 Accuracy = 0.555 
iter 21: [0.2962687846408777] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.2962687846408777 
Top-2 Accuracy = 0.555 
iter 22: [0.2962687846408777] 
setting: robusts|rf 
Top-1 Accuracy = 0.2962687846408777 
Top-2 Accuracy = 0.555 
iter 23: [0.2962687846408777] 
setting: robustM|rf 
Top-1 Accuracy = 0.32889549168618937 
Top-2 Accuracy = 0.604 
iter 24: [0.32889549168618937] 
setting: robustm|rf 
Top-1 Accuracy = 0.2962687846408777 
Top-2 Accuracy = 0.555 
iter 25: [0.2962687846408777] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.3286669333180961 
Top-2 Accuracy = 0.604 
iter 26: [0.3286669333180961] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.28146963030683964 
Top-2 Accuracy = 0.493 
iter 27: [0.28146963030683964] 
setting: robustS|rf 
Top-1 Accuracy = 0.299982858122393 
Top-2 Accuracy = 0.545 
iter 28: [0.299982858122393] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.2846123078681218 
Top-2 Accuracy = 0.496 
iter 29: [0.2846123078681218] 
Run # 3 
====== 
setting: minmaxf|rf 
Top-1 Accuracy = 0.2962687846408777 
Top-2 Accuracy = 0.555 
iter 0: [0.2962687846408777] 
setting: robustN|rf 
Top-1 Accuracy = 0.2962687846408777 
Top-2 Accuracy = 0.555 
iter 1: [0.2962687846408777] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.282269584595166 
Top-2 Accuracy = 0.493 
iter 2: [0.282269584595166] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.3033540940517685 
Top-2 Accuracy = 0.556 
iter 3: [0.3033540940517685] 
setting: maxabst|rf 
Top-1 Accuracy = 0.3282669561739329 
Top-2 Accuracy = 0.604 
iter 4: [0.3282669561739329] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.2962687846408777 
Top-2 Accuracy = 0.555 
iter 5: [0.2962687846408777] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.28295525969944574 
Top-2 Accuracy = 0.494 
iter 6: [0.28295525969944574] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.29666876178504087 
Top-2 Accuracy = 0.555 
iter 7: [0.29666876178504087] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.29666876178504087 
Top-2 Accuracy = 0.555 
iter 8: [0.29666876178504087] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.3003828352665562 
Top-2 Accuracy = 0.557 
iter 9: [0.3003828352665562] 
setting: standardizej|rf 
Top-1 Accuracy = 0.3003828352665562 
Top-2 Accuracy = 0.557 
iter 10: [0.3003828352665562] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.30512542140449117 
Top-2 Accuracy = 0.558 
iter 11: [0.30512542140449117] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.3078681218216102 
Top-2 Accuracy = 0.564 
iter 12: [0.3078681218216102] 
setting: robustP|rf 
Top-1 Accuracy = 0.329924004342609 
Top-2 Accuracy = 0.605 
iter 13: [0.329924004342609] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.28261242214730586 
Top-2 Accuracy = 0.494 
iter 14: [0.28261242214730586] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.3069538883492372 
Top-2 Accuracy = 0.56 
iter 15: [0.3069538883492372] 
setting: robusty|rf 
Top-1 Accuracy = 0.28512656419633164 
Top-2 Accuracy = 0.496 
iter 16: [0.28512656419633164] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.3058110965087709 
Top-2 Accuracy = 0.562 
iter 17: [0.3058110965087709] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.3207245300268556 
Top-2 Accuracy = 0.598 
iter 18: [0.3207245300268556] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.2854694017484715 
Top-2 Accuracy = 0.497 
iter 19: [0.2854694017484715] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.3034112336437918 
Top-2 Accuracy = 0.557 
iter 20: [0.3034112336437918] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.30781098222958686 
Top-2 Accuracy = 0.561 
iter 21: [0.30781098222958686] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.2844980286840752 
Top-2 Accuracy = 0.494 
iter 22: [0.2844980286840752] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.28146963030683964 
Top-2 Accuracy = 0.493 
iter 23: [0.28146963030683964] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.3049540026284212 
Top-2 Accuracy = 0.552 
iter 24: [0.3049540026284212] 
setting: robustU|rf 
Top-1 Accuracy = 0.32203874064339183 
Top-2 Accuracy = 0.598 
iter 25: [0.32203874064339183] 
setting: standardizen|rf 
Top-1 Accuracy = 0.3023255813953488 
Top-2 Accuracy = 0.558 
iter 26: [0.3023255813953488] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.30192560425118564 
Top-2 Accuracy = 0.543 
iter 27: [0.30192560425118564] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.3262099308610937 
Top-2 Accuracy = 0.605 
iter 28: [0.3262099308610937] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.29358322381578195 
Top-2 Accuracy = 0.557 
iter 29: [0.29358322381578195] 
Run # 4 
====== 
setting: normalizeH|rf 
Top-1 Accuracy = 0.3096394491743329 
Top-2 Accuracy = 0.563 
iter 0: [0.3096394491743329] 
setting: normalizej|rf 
Top-1 Accuracy = 0.283183818067539 
Top-2 Accuracy = 0.491 
iter 1: [0.283183818067539] 
setting: standardizes|rf 
Top-1 Accuracy = 0.307468144677447 
Top-2 Accuracy = 0.564 
iter 2: [0.307468144677447] 
setting: normalizev|rf 
Top-1 Accuracy = 0.2819838866350494 
Top-2 Accuracy = 0.494 
iter 3: [0.2819838866350494] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.28072681561053653 
Top-2 Accuracy = 0.49 
iter 4: [0.28072681561053653] 
setting: standardizek|rf 
Top-1 Accuracy = 0.27946974458602364 
Top-2 Accuracy = 0.491 
iter 5: [0.27946974458602364] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.3078681218216102 
Top-2 Accuracy = 0.556 
iter 6: [0.3078681218216102] 
setting: normalizef|rf 
Top-1 Accuracy = 0.29226901319924575 
Top-2 Accuracy = 0.556 
iter 7: [0.29226901319924575] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.29226901319924575 
Top-2 Accuracy = 0.556 
iter 8: [0.29226901319924575] 
setting: normalizel|rf 
Top-1 Accuracy = 0.30506828181246787 
Top-2 Accuracy = 0.566 
iter 9: [0.30506828181246787] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.3290669104622593 
Top-2 Accuracy = 0.604 
iter 10: [0.3290669104622593] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.30409690874807155 
Top-2 Accuracy = 0.563 
iter 11: [0.30409690874807155] 
setting: maxabso|rf 
Top-1 Accuracy = 0.3290669104622593 
Top-2 Accuracy = 0.603 
iter 12: [0.3290669104622593] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.30638249242900406 
Top-2 Accuracy = 0.565 
iter 13: [0.30638249242900406] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.3043826067081881 
Top-2 Accuracy = 0.544 
iter 14: [0.3043826067081881] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.2916976172790126 
Top-2 Accuracy = 0.556 
iter 15: [0.2916976172790126] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.2916976172790126 
Top-2 Accuracy = 0.556 
iter 16: [0.2916976172790126] 
setting: normalizez|rf 
Top-1 Accuracy = 0.3059253756928176 
Top-2 Accuracy = 0.562 
iter 17: [0.3059253756928176] 
setting: normalizem|rf 
Top-1 Accuracy = 0.28598365807668136 
Top-2 Accuracy = 0.495 
iter 18: [0.28598365807668136] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.2916976172790126 
Top-2 Accuracy = 0.556 
iter 19: [0.2916976172790126] 
setting: robustH|rf 
Top-1 Accuracy = 0.2916976172790126 
Top-2 Accuracy = 0.556 
iter 20: [0.2916976172790126] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.2820410262270727 
Top-2 Accuracy = 0.492 
iter 21: [0.2820410262270727] 
setting: robustX|rf 
Top-1 Accuracy = 0.2916976172790126 
Top-2 Accuracy = 0.556 
iter 22: [0.2916976172790126] 
setting: normalizes|rf 
Top-1 Accuracy = 0.32895263127821267 
Top-2 Accuracy = 0.603 
iter 23: [0.32895263127821267] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.28381235357979545 
Top-2 Accuracy = 0.495 
iter 24: [0.28381235357979545] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.28529798297240155 
Top-2 Accuracy = 0.496 
iter 25: [0.28529798297240155] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.28781212502142733 
Top-2 Accuracy = 0.498 
iter 26: [0.28781212502142733] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.30803954059768013 
Top-2 Accuracy = 0.563 
iter 27: [0.30803954059768013] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.32678132678132676 
Top-2 Accuracy = 0.602 
iter 28: [0.32678132678132676] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.3059253756928176 
Top-2 Accuracy = 0.563 
iter 29: [0.3059253756928176] 
Run # 5 
====== 
setting: standardizew|rf 
Top-1 Accuracy = 0.2907833838066396 
Top-2 Accuracy = 0.556 
iter 0: [0.2907833838066396] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.2914690589109194 
Top-2 Accuracy = 0.556 
iter 1: [0.2914690589109194] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.32780983943774644 
Top-2 Accuracy = 0.603 
iter 2: [0.32780983943774644] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.28078395520255983 
Top-2 Accuracy = 0.49 
iter 3: [0.28078395520255983] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.3274670018856065 
Top-2 Accuracy = 0.603 
iter 4: [0.3274670018856065] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.28529798297240155 
Top-2 Accuracy = 0.497 
iter 5: [0.28529798297240155] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.2844980286840752 
Top-2 Accuracy = 0.495 
iter 6: [0.2844980286840752] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.33020970230272556 
Top-2 Accuracy = 0.603 
iter 7: [0.33020970230272556] 
setting: normalizew|rf 
Top-1 Accuracy = 0.29358322381578195 
Top-2 Accuracy = 0.559 
iter 8: [0.29358322381578195] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.2823267241871893 
Top-2 Accuracy = 0.493 
iter 9: [0.2823267241871893] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.33015256271070226 
Top-2 Accuracy = 0.603 
iter 10: [0.33015256271070226] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.33020970230272556 
Top-2 Accuracy = 0.603 
iter 11: [0.33020970230272556] 
setting: normalizep|rf 
Top-1 Accuracy = 0.32683846637335007 
Top-2 Accuracy = 0.603 
iter 12: [0.32683846637335007] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.32666704759728016 
Top-2 Accuracy = 0.604 
iter 13: [0.32666704759728016] 
setting: robustb|rf 
Top-1 Accuracy = 0.32655276841323355 
Top-2 Accuracy = 0.604 
iter 14: [0.32655276841323355] 
setting: standardizec|rf 
Top-1 Accuracy = 0.2919833152391292 
Top-2 Accuracy = 0.556 
iter 15: [0.2919833152391292] 
setting: normalizee|rf 
Top-1 Accuracy = 0.2903834066624764 
Top-2 Accuracy = 0.555 
iter 16: [0.2903834066624764] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.304725444260328 
Top-2 Accuracy = 0.564 
iter 17: [0.304725444260328] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.3073538654934004 
Top-2 Accuracy = 0.564 
iter 18: [0.3073538654934004] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.3070681675332838 
Top-2 Accuracy = 0.563 
iter 19: [0.3070681675332838] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.32712416433346664 
Top-2 Accuracy = 0.604 
iter 20: [0.32712416433346664] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.28375521398777215 
Top-2 Accuracy = 0.493 
iter 21: [0.28375521398777215] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.29095480258270956 
Top-2 Accuracy = 0.556 
iter 22: [0.29095480258270956] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.32718130392549 
Top-2 Accuracy = 0.604 
iter 23: [0.32718130392549] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.28638363522084453 
Top-2 Accuracy = 0.495 
iter 24: [0.28638363522084453] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.284098051539912 
Top-2 Accuracy = 0.495 
iter 25: [0.284098051539912] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.30558253814067765 
Top-2 Accuracy = 0.563 
iter 26: [0.30558253814067765] 
setting: maxabse|rf 
Top-1 Accuracy = 0.30758242386149365 
Top-2 Accuracy = 0.563 
iter 27: [0.30758242386149365] 
setting: standardizem|rf 
Top-1 Accuracy = 0.32712416433346664 
Top-2 Accuracy = 0.604 
iter 28: [0.32712416433346664] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.32700988514942003 
Top-2 Accuracy = 0.604 
iter 29: [0.32700988514942003] 
Run # 6 
====== 
setting: robustx|rf 
Top-1 Accuracy = 0.3078681218216102 
Top-2 Accuracy = 0.562 
iter 0: [0.3078681218216102] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.32700988514942003 
Top-2 Accuracy = 0.604 
iter 1: [0.32700988514942003] 
setting: robustf|rf 
Top-1 Accuracy = 0.3264384892291869 
Top-2 Accuracy = 0.603 
iter 2: [0.3264384892291869] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.28632649562882123 
Top-2 Accuracy = 0.497 
iter 3: [0.28632649562882123] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.30403976915604825 
Top-2 Accuracy = 0.548 
iter 4: [0.30403976915604825] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.32940974801439915 
Top-2 Accuracy = 0.603 
iter 5: [0.32940974801439915] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.3021541626192789 
Top-2 Accuracy = 0.557 
iter 6: [0.3021541626192789] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.2976972744414605 
Top-2 Accuracy = 0.543 
iter 7: [0.2976972744414605] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.28301239929146904 
Top-2 Accuracy = 0.494 
iter 8: [0.28301239929146904] 
setting: robustr|rf 
Top-1 Accuracy = 0.29918290383406665 
Top-2 Accuracy = 0.559 
iter 9: [0.29918290383406665] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.30283983772355866 
Top-2 Accuracy = 0.563 
iter 10: [0.30283983772355866] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.29918290383406665 
Top-2 Accuracy = 0.559 
iter 11: [0.29918290383406665] 
setting: robustp|rf 
Top-1 Accuracy = 0.29918290383406665 
Top-2 Accuracy = 0.559 
iter 12: [0.29918290383406665] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.28255528255528256 
Top-2 Accuracy = 0.492 
iter 13: [0.28255528255528256] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.29918290383406665 
Top-2 Accuracy = 0.559 
iter 14: [0.29918290383406665] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.3012970687389292 
Top-2 Accuracy = 0.554 
iter 15: [0.3012970687389292] 
setting: standardizef|rf 
Top-1 Accuracy = 0.29918290383406665 
Top-2 Accuracy = 0.559 
iter 16: [0.29918290383406665] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.28564082052454143 
Top-2 Accuracy = 0.495 
iter 17: [0.28564082052454143] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.32923832923832924 
Top-2 Accuracy = 0.603 
iter 18: [0.32923832923832924] 
setting: standardizev|rf 
Top-1 Accuracy = 0.32918118964630594 
Top-2 Accuracy = 0.603 
iter 19: [0.32918118964630594] 
setting: robustE|rf 
Top-1 Accuracy = 0.29918290383406665 
Top-2 Accuracy = 0.559 
iter 20: [0.29918290383406665] 
setting: robustd|rf 
Top-1 Accuracy = 0.30403976915604825 
Top-2 Accuracy = 0.556 
iter 21: [0.30403976915604825] 
setting: robustu|rf 
Top-1 Accuracy = 0.32923832923832924 
Top-2 Accuracy = 0.603 
iter 22: [0.32923832923832924] 
setting: robusth|rf 
Top-1 Accuracy = 0.32923832923832924 
Top-2 Accuracy = 0.603 
iter 23: [0.32923832923832924] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.30152562710702246 
Top-2 Accuracy = 0.545 
iter 24: [0.30152562710702246] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.29918290383406665 
Top-2 Accuracy = 0.559 
iter 25: [0.29918290383406665] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.32912405005428264 
Top-2 Accuracy = 0.603 
iter 26: [0.32912405005428264] 
setting: robustm|rf 
Top-1 Accuracy = 0.32929546883035254 
Top-2 Accuracy = 0.603 
iter 27: [0.32929546883035254] 
setting: standardizex|rf 
Top-1 Accuracy = 0.32923832923832924 
Top-2 Accuracy = 0.603 
iter 28: [0.32923832923832924] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.3044968858922347 
Top-2 Accuracy = 0.56 
iter 29: [0.3044968858922347] 
Run # 7 
====== 
setting: normalizeT|rf 
Top-1 Accuracy = 0.2832409576595623 
Top-2 Accuracy = 0.494 
iter 0: [0.2832409576595623] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.3268956059653734 
Top-2 Accuracy = 0.603 
iter 1: [0.3268956059653734] 
setting: robustN|rf 
Top-1 Accuracy = 0.30655391120507397 
Top-2 Accuracy = 0.563 
iter 2: [0.30655391120507397] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.2940974801439918 
Top-2 Accuracy = 0.556 
iter 3: [0.2940974801439918] 
setting: robustl|rf 
Top-1 Accuracy = 0.29238329238329236 
Top-2 Accuracy = 0.501 
iter 4: [0.29238329238329236] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.3038683503799783 
Top-2 Accuracy = 0.544 
iter 5: [0.3038683503799783] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.2836980743957488 
Top-2 Accuracy = 0.493 
iter 6: [0.2836980743957488] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.2940403405519685 
Top-2 Accuracy = 0.556 
iter 7: [0.2940403405519685] 
setting: robustE|rf 
Top-1 Accuracy = 0.2940403405519685 
Top-2 Accuracy = 0.556 
iter 8: [0.2940403405519685] 
setting: normalizek|rf 
Top-1 Accuracy = 0.3083252385577967 
Top-2 Accuracy = 0.566 
iter 9: [0.3083252385577967] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.28398377235586536 
Top-2 Accuracy = 0.494 
iter 10: [0.28398377235586536] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.2848408662362151 
Top-2 Accuracy = 0.496 
iter 11: [0.2848408662362151] 
setting: maxabse|rf 
Top-1 Accuracy = 0.2855836809325181 
Top-2 Accuracy = 0.495 
iter 12: [0.2855836809325181] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.32912405005428264 
Top-2 Accuracy = 0.603 
iter 13: [0.32912405005428264] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.3000399977144163 
Top-2 Accuracy = 0.55 
iter 14: [0.3000399977144163] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.3052397005885378 
Top-2 Accuracy = 0.562 
iter 15: [0.3052397005885378] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.294326038512085 
Top-2 Accuracy = 0.558 
iter 16: [0.294326038512085] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.32940974801439915 
Top-2 Accuracy = 0.602 
iter 17: [0.32940974801439915] 
setting: robustU|rf 
Top-1 Accuracy = 0.30775384263756356 
Top-2 Accuracy = 0.561 
iter 18: [0.30775384263756356] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.3286097937260728 
Top-2 Accuracy = 0.602 
iter 19: [0.3286097937260728] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.294326038512085 
Top-2 Accuracy = 0.558 
iter 20: [0.294326038512085] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.294326038512085 
Top-2 Accuracy = 0.558 
iter 21: [0.294326038512085] 
setting: robustC|rf 
Top-1 Accuracy = 0.294326038512085 
Top-2 Accuracy = 0.558 
iter 22: [0.294326038512085] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.2870693103251243 
Top-2 Accuracy = 0.496 
iter 23: [0.2870693103251243] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.30403976915604825 
Top-2 Accuracy = 0.559 
iter 24: [0.30403976915604825] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.2880978229815439 
Top-2 Accuracy = 0.497 
iter 25: [0.2880978229815439] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.32912405005428264 
Top-2 Accuracy = 0.603 
iter 26: [0.32912405005428264] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.32912405005428264 
Top-2 Accuracy = 0.603 
iter 27: [0.32912405005428264] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.32895263127821267 
Top-2 Accuracy = 0.603 
iter 28: [0.32895263127821267] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.2938689217758985 
Top-2 Accuracy = 0.556 
iter 29: [0.2938689217758985] 
Run # 8 
====== 
setting: minmaxT|rf 
Top-1 Accuracy = 0.2938689217758985 
Top-2 Accuracy = 0.556 
iter 0: [0.2938689217758985] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.2938689217758985 
Top-2 Accuracy = 0.556 
iter 1: [0.2938689217758985] 
setting: robustL|rf 
Top-1 Accuracy = 0.30512542140449117 
Top-2 Accuracy = 0.56 
iter 2: [0.30512542140449117] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.2938689217758985 
Top-2 Accuracy = 0.556 
iter 3: [0.2938689217758985] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.3035255128278384 
Top-2 Accuracy = 0.562 
iter 4: [0.3035255128278384] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.3072967259013771 
Top-2 Accuracy = 0.557 
iter 5: [0.3072967259013771] 
setting: normalized|rf 
Top-1 Accuracy = 0.3071253071253071 
Top-2 Accuracy = 0.558 
iter 6: [0.3071253071253071] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.2936975029998286 
Top-2 Accuracy = 0.556 
iter 7: [0.2936975029998286] 
setting: robustb|rf 
Top-1 Accuracy = 0.32883835209416606 
Top-2 Accuracy = 0.602 
iter 8: [0.32883835209416606] 
setting: standardizez|rf 
Top-1 Accuracy = 0.2936975029998286 
Top-2 Accuracy = 0.556 
iter 9: [0.2936975029998286] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.3294668876064225 
Top-2 Accuracy = 0.602 
iter 10: [0.3294668876064225] 
setting: robusto|rf 
Top-1 Accuracy = 0.32883835209416606 
Top-2 Accuracy = 0.602 
iter 11: [0.32883835209416606] 
setting: standardizem|rf 
Top-1 Accuracy = 0.3071824467173304 
Top-2 Accuracy = 0.562 
iter 12: [0.3071824467173304] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.2936975029998286 
Top-2 Accuracy = 0.556 
iter 13: [0.2936975029998286] 
setting: standardizej|rf 
Top-1 Accuracy = 0.2936975029998286 
Top-2 Accuracy = 0.556 
iter 14: [0.2936975029998286] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.30283983772355866 
Top-2 Accuracy = 0.546 
iter 15: [0.30283983772355866] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.32878121250214276 
Top-2 Accuracy = 0.602 
iter 16: [0.32878121250214276] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.30403976915604825 
Top-2 Accuracy = 0.546 
iter 17: [0.30403976915604825] 
setting: robustC|rf 
Top-1 Accuracy = 0.2936975029998286 
Top-2 Accuracy = 0.556 
iter 18: [0.2936975029998286] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.32889549168618937 
Top-2 Accuracy = 0.602 
iter 19: [0.32889549168618937] 
setting: standardizef|rf 
Top-1 Accuracy = 0.3059253756928176 
Top-2 Accuracy = 0.565 
iter 20: [0.3059253756928176] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.30461116507628133 
Top-2 Accuracy = 0.561 
iter 21: [0.30461116507628133] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.3290669104622593 
Top-2 Accuracy = 0.602 
iter 22: [0.3290669104622593] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.2936975029998286 
Top-2 Accuracy = 0.556 
iter 23: [0.2936975029998286] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.28969773155819667 
Top-2 Accuracy = 0.501 
iter 24: [0.28969773155819667] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.28632649562882123 
Top-2 Accuracy = 0.495 
iter 25: [0.28632649562882123] 
setting: normalizet|rf 
Top-1 Accuracy = 0.3022113022113022 
Top-2 Accuracy = 0.553 
iter 26: [0.3022113022113022] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.29438317810410836 
Top-2 Accuracy = 0.556 
iter 27: [0.29438317810410836] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.32935260842237585 
Top-2 Accuracy = 0.603 
iter 28: [0.32935260842237585] 
setting: normalizep|rf 
Top-1 Accuracy = 0.3061539340609108 
Top-2 Accuracy = 0.559 
iter 29: [0.3061539340609108] 
Run # 9 
====== 
setting: maxabsq|rf 
Top-1 Accuracy = 0.32940974801439915 
Top-2 Accuracy = 0.604 
iter 0: [0.32940974801439915] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.29449745728815496 
Top-2 Accuracy = 0.558 
iter 1: [0.29449745728815496] 
setting: normalizei|rf 
Top-1 Accuracy = 0.28432660990800523 
Top-2 Accuracy = 0.494 
iter 2: [0.28432660990800523] 
setting: robustv|rf 
Top-1 Accuracy = 0.3286669333180961 
Top-2 Accuracy = 0.603 
iter 3: [0.3286669333180961] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.29364036340780525 
Top-2 Accuracy = 0.556 
iter 4: [0.29364036340780525] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.30661105079709733 
Top-2 Accuracy = 0.563 
iter 5: [0.30661105079709733] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.32923832923832924 
Top-2 Accuracy = 0.603 
iter 6: [0.32923832923832924] 
setting: normalizef|rf 
Top-1 Accuracy = 0.30889663447802984 
Top-2 Accuracy = 0.554 
iter 7: [0.30889663447802984] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.3078681218216102 
Top-2 Accuracy = 0.566 
iter 8: [0.3078681218216102] 
setting: robustU|rf 
Top-1 Accuracy = 0.3079252614136335 
Top-2 Accuracy = 0.562 
iter 9: [0.3079252614136335] 
setting: normalizee|rf 
Top-1 Accuracy = 0.3263242100451403 
Top-2 Accuracy = 0.599 
iter 10: [0.3263242100451403] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.2933546654476887 
Top-2 Accuracy = 0.555 
iter 11: [0.2933546654476887] 
setting: robusto|rf 
Top-1 Accuracy = 0.2876407062453574 
Top-2 Accuracy = 0.496 
iter 12: [0.2876407062453574] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.3030683960916519 
Top-2 Accuracy = 0.562 
iter 13: [0.3030683960916519] 
setting: robustA|rf 
Top-1 Accuracy = 0.28644077481286784 
Top-2 Accuracy = 0.496 
iter 14: [0.28644077481286784] 
setting: normalizep|rf 
Top-1 Accuracy = 0.3285526541340495 
Top-2 Accuracy = 0.6 
iter 15: [0.3285526541340495] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.30678246957316724 
Top-2 Accuracy = 0.557 
iter 16: [0.30678246957316724] 
setting: normalizea|rf 
Top-1 Accuracy = 0.30501114222044456 
Top-2 Accuracy = 0.566 
iter 17: [0.30501114222044456] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.285926518484658 
Top-2 Accuracy = 0.496 
iter 18: [0.285926518484658] 
setting: standardizea|rf 
Top-1 Accuracy = 0.300897091594766 
Top-2 Accuracy = 0.56 
iter 19: [0.300897091594766] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.3286669333180961 
Top-2 Accuracy = 0.601 
iter 20: [0.3286669333180961] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.32878121250214276 
Top-2 Accuracy = 0.601 
iter 21: [0.32878121250214276] 
setting: robustu|rf 
Top-1 Accuracy = 0.3044968858922347 
Top-2 Accuracy = 0.559 
iter 22: [0.3044968858922347] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.2855836809325181 
Top-2 Accuracy = 0.496 
iter 23: [0.2855836809325181] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.2844408890920519 
Top-2 Accuracy = 0.496 
iter 24: [0.2844408890920519] 
setting: normalizej|rf 
Top-1 Accuracy = 0.3013542083309525 
Top-2 Accuracy = 0.559 
iter 25: [0.3013542083309525] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.30655391120507397 
Top-2 Accuracy = 0.559 
iter 26: [0.30655391120507397] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.28918347522998683 
Top-2 Accuracy = 0.499 
iter 27: [0.28918347522998683] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.309468030398263 
Top-2 Accuracy = 0.562 
iter 28: [0.309468030398263] 
setting: robustN|rf 
Top-1 Accuracy = 0.3013542083309525 
Top-2 Accuracy = 0.559 
iter 29: [0.3013542083309525] 
Run # 10 
======= 
setting: robustc|rf 
Top-1 Accuracy = 0.3013542083309525 
Top-2 Accuracy = 0.559 
iter 0: [0.3013542083309525] 
setting: robusts|rf 
Top-1 Accuracy = 0.3013542083309525 
Top-2 Accuracy = 0.559 
iter 1: [0.3013542083309525] 
setting: standardizef|rf 
Top-1 Accuracy = 0.3013542083309525 
Top-2 Accuracy = 0.559 
iter 2: [0.3013542083309525] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.2846123078681218 
Top-2 Accuracy = 0.494 
iter 3: [0.2846123078681218] 
setting: normalizes|rf 
Top-1 Accuracy = 0.2872407291011942 
Top-2 Accuracy = 0.498 
iter 4: [0.2872407291011942] 
setting: standardizev|rf 
Top-1 Accuracy = 0.29312610707959547 
Top-2 Accuracy = 0.557 
iter 5: [0.29312610707959547] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.30415404834009485 
Top-2 Accuracy = 0.55 
iter 6: [0.30415404834009485] 
setting: robustd|rf 
Top-1 Accuracy = 0.29312610707959547 
Top-2 Accuracy = 0.557 
iter 7: [0.29312610707959547] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.28826924175761387 
Top-2 Accuracy = 0.498 
iter 8: [0.28826924175761387] 
setting: standardizew|rf 
Top-1 Accuracy = 0.32929546883035254 
Top-2 Accuracy = 0.601 
iter 9: [0.32929546883035254] 
setting: normalizet|rf 
Top-1 Accuracy = 0.3310096565910519 
Top-2 Accuracy = 0.602 
iter 10: [0.3310096565910519] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.309296611622193 
Top-2 Accuracy = 0.566 
iter 11: [0.309296611622193] 
setting: maxabse|rf 
Top-1 Accuracy = 0.2986686475058568 
Top-2 Accuracy = 0.555 
iter 12: [0.2986686475058568] 
setting: maxabst|rf 
Top-1 Accuracy = 0.2986686475058568 
Top-2 Accuracy = 0.555 
iter 13: [0.2986686475058568] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.3312382149591452 
Top-2 Accuracy = 0.602 
iter 14: [0.3312382149591452] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.30415404834009485 
Top-2 Accuracy = 0.553 
iter 15: [0.30415404834009485] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.2986686475058568 
Top-2 Accuracy = 0.555 
iter 16: [0.2986686475058568] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.2986686475058568 
Top-2 Accuracy = 0.555 
iter 17: [0.2986686475058568] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.3309525169990286 
Top-2 Accuracy = 0.602 
iter 18: [0.3309525169990286] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.2986686475058568 
Top-2 Accuracy = 0.555 
iter 19: [0.2986686475058568] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.3061539340609108 
Top-2 Accuracy = 0.557 
iter 20: [0.3061539340609108] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.3309525169990286 
Top-2 Accuracy = 0.602 
iter 21: [0.3309525169990286] 
setting: normalizea|rf 
Top-1 Accuracy = 0.28649791440489114 
Top-2 Accuracy = 0.496 
iter 22: [0.28649791440489114] 
setting: robustN|rf 
Top-1 Accuracy = 0.28506942460430834 
Top-2 Accuracy = 0.495 
iter 23: [0.28506942460430834] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.2867836123650077 
Top-2 Accuracy = 0.497 
iter 24: [0.2867836123650077] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.303811210787955 
Top-2 Accuracy = 0.561 
iter 25: [0.303811210787955] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.29975429975429974 
Top-2 Accuracy = 0.558 
iter 26: [0.29975429975429974] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.29975429975429974 
Top-2 Accuracy = 0.558 
iter 27: [0.29975429975429974] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.3097537283583795 
Top-2 Accuracy = 0.568 
iter 28: [0.3097537283583795] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.30181132506713904 
Top-2 Accuracy = 0.559 
iter 29: [0.30181132506713904] 
Run # 11 
======= 
setting: standardizeN|rf 
Top-1 Accuracy = 0.28878349808582365 
Top-2 Accuracy = 0.498 
iter 0: [0.28878349808582365] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.32889549168618937 
Top-2 Accuracy = 0.602 
iter 1: [0.32889549168618937] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.2821553054111194 
Top-2 Accuracy = 0.492 
iter 2: [0.2821553054111194] 
setting: normalizei|rf 
Top-1 Accuracy = 0.2967830409690875 
Top-2 Accuracy = 0.554 
iter 3: [0.2967830409690875] 
setting: robustC|rf 
Top-1 Accuracy = 0.33026684189474886 
Top-2 Accuracy = 0.602 
iter 4: [0.33026684189474886] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.3072395863093538 
Top-2 Accuracy = 0.561 
iter 5: [0.3072395863093538] 
setting: normalizep|rf 
Top-1 Accuracy = 0.3093537512142163 
Top-2 Accuracy = 0.567 
iter 6: [0.3093537512142163] 
setting: standardizep|rf 
Top-1 Accuracy = 0.2862693560367979 
Top-2 Accuracy = 0.496 
iter 7: [0.2862693560367979] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.32935260842237585 
Top-2 Accuracy = 0.602 
iter 8: [0.32935260842237585] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.32935260842237585 
Top-2 Accuracy = 0.602 
iter 9: [0.32935260842237585] 
setting: standardizey|rf 
Top-1 Accuracy = 0.28918347522998683 
Top-2 Accuracy = 0.498 
iter 10: [0.28918347522998683] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.309296611622193 
Top-2 Accuracy = 0.564 
iter 11: [0.309296611622193] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.2903834066624764 
Top-2 Accuracy = 0.501 
iter 12: [0.2903834066624764] 
setting: robustp|rf 
Top-1 Accuracy = 0.30146848751499916 
Top-2 Accuracy = 0.56 
iter 13: [0.30146848751499916] 
setting: robustY|rf 
Top-1 Accuracy = 0.32940974801439915 
Top-2 Accuracy = 0.602 
iter 14: [0.32940974801439915] 
setting: normalizee|rf 
Top-1 Accuracy = 0.33032398148677217 
Top-2 Accuracy = 0.602 
iter 15: [0.33032398148677217] 
setting: robustQ|rf 
Top-1 Accuracy = 0.28775498542940403 
Top-2 Accuracy = 0.499 
iter 16: [0.28775498542940403] 
setting: normalizev|rf 
Top-1 Accuracy = 0.3242100451402777 
Top-2 Accuracy = 0.599 
iter 17: [0.3242100451402777] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.32535283698074396 
Top-2 Accuracy = 0.6 
iter 18: [0.32535283698074396] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.3061539340609108 
Top-2 Accuracy = 0.561 
iter 19: [0.3061539340609108] 
setting: normalizey|rf 
Top-1 Accuracy = 0.3039254899720016 
Top-2 Accuracy = 0.55 
iter 20: [0.3039254899720016] 
setting: robustF|rf 
Top-1 Accuracy = 0.2856979601165648 
Top-2 Accuracy = 0.495 
iter 21: [0.2856979601165648] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.29352608422375864 
Top-2 Accuracy = 0.561 
iter 22: [0.29352608422375864] 
setting: robustK|rf 
Top-1 Accuracy = 0.28295525969944574 
Top-2 Accuracy = 0.494 
iter 23: [0.28295525969944574] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.3044397463002114 
Top-2 Accuracy = 0.564 
iter 24: [0.3044397463002114] 
setting: normalizea|rf 
Top-1 Accuracy = 0.3058682361007942 
Top-2 Accuracy = 0.569 
iter 25: [0.3058682361007942] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.3285526541340495 
Top-2 Accuracy = 0.602 
iter 26: [0.3285526541340495] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.3060967944688875 
Top-2 Accuracy = 0.563 
iter 27: [0.3060967944688875] 
setting: robuste|rf 
Top-1 Accuracy = 0.2930118278955488 
Top-2 Accuracy = 0.558 
iter 28: [0.2930118278955488] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.2930118278955488 
Top-2 Accuracy = 0.558 
iter 29: [0.2930118278955488] 
Run # 12 
======= 
setting: robusty|rf 
Top-1 Accuracy = 0.32809553739786296 
Top-2 Accuracy = 0.601 
iter 0: [0.32809553739786296] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.3084395177418433 
Top-2 Accuracy = 0.563 
iter 1: [0.3084395177418433] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.3049540026284212 
Top-2 Accuracy = 0.56 
iter 2: [0.3049540026284212] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.2875835666533341 
Top-2 Accuracy = 0.498 
iter 3: [0.2875835666533341] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.32803839780583965 
Top-2 Accuracy = 0.601 
iter 4: [0.32803839780583965] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.2930118278955488 
Top-2 Accuracy = 0.558 
iter 5: [0.2930118278955488] 
setting: robustd|rf 
Top-1 Accuracy = 0.2930118278955488 
Top-2 Accuracy = 0.558 
iter 6: [0.2930118278955488] 
setting: robustT|rf 
Top-1 Accuracy = 0.30643963202102736 
Top-2 Accuracy = 0.556 
iter 7: [0.30643963202102736] 
setting: robustW|rf 
Top-1 Accuracy = 0.3283240957659562 
Top-2 Accuracy = 0.601 
iter 8: [0.3283240957659562] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.30546825895663104 
Top-2 Accuracy = 0.565 
iter 9: [0.30546825895663104] 
setting: robustR|rf 
Top-1 Accuracy = 0.32803839780583965 
Top-2 Accuracy = 0.601 
iter 10: [0.32803839780583965] 
setting: standardizex|rf 
Top-1 Accuracy = 0.2930118278955488 
Top-2 Accuracy = 0.558 
iter 11: [0.2930118278955488] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.3034112336437918 
Top-2 Accuracy = 0.564 
iter 12: [0.3034112336437918] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.2879835437974973 
Top-2 Accuracy = 0.498 
iter 13: [0.2879835437974973] 
setting: robustg|rf 
Top-1 Accuracy = 0.3051825609965145 
Top-2 Accuracy = 0.561 
iter 14: [0.3051825609965145] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.30655391120507397 
Top-2 Accuracy = 0.564 
iter 15: [0.30655391120507397] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.3071824467173304 
Top-2 Accuracy = 0.556 
iter 16: [0.3071824467173304] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.304725444260328 
Top-2 Accuracy = 0.563 
iter 17: [0.304725444260328] 
setting: robustS|rf 
Top-1 Accuracy = 0.2930118278955488 
Top-2 Accuracy = 0.558 
iter 18: [0.2930118278955488] 
setting: normalizep|rf 
Top-1 Accuracy = 0.29101194217473286 
Top-2 Accuracy = 0.555 
iter 19: [0.29101194217473286] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.29101194217473286 
Top-2 Accuracy = 0.555 
iter 20: [0.29101194217473286] 
setting: maxabss|rf 
Top-1 Accuracy = 0.2835837952117022 
Top-2 Accuracy = 0.494 
iter 21: [0.2835837952117022] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.29101194217473286 
Top-2 Accuracy = 0.555 
iter 22: [0.29101194217473286] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.29135477972687274 
Top-2 Accuracy = 0.555 
iter 23: [0.29135477972687274] 
setting: normalizem|rf 
Top-1 Accuracy = 0.3023255813953488 
Top-2 Accuracy = 0.557 
iter 24: [0.3023255813953488] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.3263242100451403 
Top-2 Accuracy = 0.599 
iter 25: [0.3263242100451403] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.28872635849380035 
Top-2 Accuracy = 0.553 
iter 26: [0.28872635849380035] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.28872635849380035 
Top-2 Accuracy = 0.553 
iter 27: [0.28872635849380035] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.28872635849380035 
Top-2 Accuracy = 0.553 
iter 28: [0.28872635849380035] 
setting: robustF|rf 
Top-1 Accuracy = 0.28175532826695615 
Top-2 Accuracy = 0.491 
iter 29: [0.28175532826695615] 
Run # 13 
======= 
setting: minmaxL|rf 
Top-1 Accuracy = 0.2991257642420433 
Top-2 Accuracy = 0.548 
iter 0: [0.2991257642420433] 
setting: robustD|rf 
Top-1 Accuracy = 0.28872635849380035 
Top-2 Accuracy = 0.553 
iter 1: [0.28872635849380035] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.28872635849380035 
Top-2 Accuracy = 0.553 
iter 2: [0.28872635849380035] 
setting: robustU|rf 
Top-1 Accuracy = 0.28872635849380035 
Top-2 Accuracy = 0.553 
iter 3: [0.28872635849380035] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.3060396548768642 
Top-2 Accuracy = 0.563 
iter 4: [0.3060396548768642] 
setting: normalizev|rf 
Top-1 Accuracy = 0.3074110050854237 
Top-2 Accuracy = 0.556 
iter 5: [0.3074110050854237] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.2890691960459402 
Top-2 Accuracy = 0.553 
iter 6: [0.2890691960459402] 
setting: normalizej|rf 
Top-1 Accuracy = 0.2808410947945832 
Top-2 Accuracy = 0.491 
iter 7: [0.2808410947945832] 
setting: robustF|rf 
Top-1 Accuracy = 0.28249814296325926 
Top-2 Accuracy = 0.493 
iter 8: [0.28249814296325926] 
setting: robustV|rf 
Top-1 Accuracy = 0.2889549168618936 
Top-2 Accuracy = 0.552 
iter 9: [0.2889549168618936] 
setting: standardizej|rf 
Top-1 Accuracy = 0.32489572024455743 
Top-2 Accuracy = 0.599 
iter 10: [0.32489572024455743] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.32878121250214276 
Top-2 Accuracy = 0.603 
iter 11: [0.32878121250214276] 
setting: robuste|rf 
Top-1 Accuracy = 0.3282669561739329 
Top-2 Accuracy = 0.603 
iter 12: [0.3282669561739329] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.2808982343866065 
Top-2 Accuracy = 0.492 
iter 13: [0.2808982343866065] 
setting: normalizep|rf 
Top-1 Accuracy = 0.2846694474601451 
Top-2 Accuracy = 0.493 
iter 14: [0.2846694474601451] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.3286097937260728 
Top-2 Accuracy = 0.602 
iter 15: [0.3286097937260728] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.32895263127821267 
Top-2 Accuracy = 0.602 
iter 16: [0.32895263127821267] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.2919833152391292 
Top-2 Accuracy = 0.556 
iter 17: [0.2919833152391292] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.28872635849380035 
Top-2 Accuracy = 0.498 
iter 18: [0.28872635849380035] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.28375521398777215 
Top-2 Accuracy = 0.496 
iter 19: [0.28375521398777215] 
setting: robustP|rf 
Top-1 Accuracy = 0.2938117821838752 
Top-2 Accuracy = 0.556 
iter 20: [0.2938117821838752] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.2938117821838752 
Top-2 Accuracy = 0.556 
iter 21: [0.2938117821838752] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.2845551682760985 
Top-2 Accuracy = 0.496 
iter 22: [0.2845551682760985] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.3286669333180961 
Top-2 Accuracy = 0.599 
iter 23: [0.3286669333180961] 
setting: standardizey|rf 
Top-1 Accuracy = 0.286840751957031 
Top-2 Accuracy = 0.498 
iter 24: [0.286840751957031] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.2890691960459402 
Top-2 Accuracy = 0.553 
iter 25: [0.2890691960459402] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.28952631278212676 
Top-2 Accuracy = 0.554 
iter 26: [0.28952631278212676] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.3025541397634421 
Top-2 Accuracy = 0.548 
iter 27: [0.3025541397634421] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.3287240729101194 
Top-2 Accuracy = 0.601 
iter 28: [0.3287240729101194] 
setting: robustW|rf 
Top-1 Accuracy = 0.2866121935889378 
Top-2 Accuracy = 0.496 
iter 29: [0.2866121935889378] 
Run # 14 
======= 
setting: normalizeW|rf 
Top-1 Accuracy = 0.3307810982229587 
Top-2 Accuracy = 0.601 
iter 0: [0.3307810982229587] 
setting: robustQ|rf 
Top-1 Accuracy = 0.28741214787726416 
Top-2 Accuracy = 0.5 
iter 1: [0.28741214787726416] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.3309525169990286 
Top-2 Accuracy = 0.601 
iter 2: [0.3309525169990286] 
setting: robustI|rf 
Top-1 Accuracy = 0.28512656419633164 
Top-2 Accuracy = 0.496 
iter 3: [0.28512656419633164] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.3058682361007942 
Top-2 Accuracy = 0.564 
iter 4: [0.3058682361007942] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.28969773155819667 
Top-2 Accuracy = 0.553 
iter 5: [0.28969773155819667] 
setting: robustT|rf 
Top-1 Accuracy = 0.28752642706131076 
Top-2 Accuracy = 0.498 
iter 6: [0.28752642706131076] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.32780983943774644 
Top-2 Accuracy = 0.598 
iter 7: [0.32780983943774644] 
setting: robustZ|rf 
Top-1 Accuracy = 0.2819838866350494 
Top-2 Accuracy = 0.493 
iter 8: [0.2819838866350494] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.3276955602536998 
Top-2 Accuracy = 0.598 
iter 9: [0.3276955602536998] 
setting: standardizef|rf 
Top-1 Accuracy = 0.2856979601165648 
Top-2 Accuracy = 0.497 
iter 10: [0.2856979601165648] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.2858693788926347 
Top-2 Accuracy = 0.497 
iter 11: [0.2858693788926347] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.2845551682760985 
Top-2 Accuracy = 0.494 
iter 12: [0.2845551682760985] 
setting: robustS|rf 
Top-1 Accuracy = 0.29084052339866295 
Top-2 Accuracy = 0.554 
iter 13: [0.29084052339866295] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.3087252157019599 
Top-2 Accuracy = 0.565 
iter 14: [0.3087252157019599] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.2891263356379635 
Top-2 Accuracy = 0.5 
iter 15: [0.2891263356379635] 
setting: robustd|rf 
Top-1 Accuracy = 0.2845551682760985 
Top-2 Accuracy = 0.493 
iter 16: [0.2845551682760985] 
setting: standardizel|rf 
Top-1 Accuracy = 0.284098051539912 
Top-2 Accuracy = 0.493 
iter 17: [0.284098051539912] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.28975487115022 
Top-2 Accuracy = 0.552 
iter 18: [0.28975487115022] 
setting: robustz|rf 
Top-1 Accuracy = 0.28975487115022 
Top-2 Accuracy = 0.552 
iter 19: [0.28975487115022] 
setting: standardizer|rf 
Top-1 Accuracy = 0.2814124907148163 
Top-2 Accuracy = 0.491 
iter 20: [0.2814124907148163] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.32695274555739673 
Top-2 Accuracy = 0.601 
iter 21: [0.32695274555739673] 
setting: normalizei|rf 
Top-1 Accuracy = 0.30323981486772184 
Top-2 Accuracy = 0.548 
iter 22: [0.30323981486772184] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.30912519284612305 
Top-2 Accuracy = 0.563 
iter 23: [0.30912519284612305] 
setting: normalizew|rf 
Top-1 Accuracy = 0.2846694474601451 
Top-2 Accuracy = 0.496 
iter 24: [0.2846694474601451] 
setting: robustk|rf 
Top-1 Accuracy = 0.3276384206616765 
Top-2 Accuracy = 0.6 
iter 25: [0.3276384206616765] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.2869550311410777 
Top-2 Accuracy = 0.499 
iter 26: [0.2869550311410777] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.3286669333180961 
Top-2 Accuracy = 0.6 
iter 27: [0.3286669333180961] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.30541111936460774 
Top-2 Accuracy = 0.557 
iter 28: [0.30541111936460774] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.3286097937260728 
Top-2 Accuracy = 0.6 
iter 29: [0.3286097937260728] 
Run # 15 
======= 
setting: minmaxq|rf 
Top-1 Accuracy = 0.29089766299068626 
Top-2 Accuracy = 0.554 
iter 0: [0.29089766299068626] 
setting: normalizev|rf 
Top-1 Accuracy = 0.3049540026284212 
Top-2 Accuracy = 0.563 
iter 1: [0.3049540026284212] 
setting: normalizec|rf 
Top-1 Accuracy = 0.3059825152848409 
Top-2 Accuracy = 0.558 
iter 2: [0.3059825152848409] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.2933546654476887 
Top-2 Accuracy = 0.556 
iter 3: [0.2933546654476887] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.3298097251585624 
Top-2 Accuracy = 0.602 
iter 4: [0.3298097251585624] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.2855265413404948 
Top-2 Accuracy = 0.496 
iter 5: [0.2855265413404948] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.2862693560367979 
Top-2 Accuracy = 0.498 
iter 6: [0.2862693560367979] 
setting: robustn|rf 
Top-1 Accuracy = 0.2933546654476887 
Top-2 Accuracy = 0.556 
iter 7: [0.2933546654476887] 
setting: standardizer|rf 
Top-1 Accuracy = 0.30535397977258444 
Top-2 Accuracy = 0.56 
iter 8: [0.30535397977258444] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.30535397977258444 
Top-2 Accuracy = 0.562 
iter 9: [0.30535397977258444] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.28244100337123595 
Top-2 Accuracy = 0.493 
iter 10: [0.28244100337123595] 
setting: robustc|rf 
Top-1 Accuracy = 0.2933546654476887 
Top-2 Accuracy = 0.556 
iter 11: [0.2933546654476887] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.3297525855665391 
Top-2 Accuracy = 0.603 
iter 12: [0.3297525855665391] 
setting: normalizea|rf 
Top-1 Accuracy = 0.2857550997085881 
Top-2 Accuracy = 0.497 
iter 13: [0.2857550997085881] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.28506942460430834 
Top-2 Accuracy = 0.496 
iter 14: [0.28506942460430834] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.29106908176675617 
Top-2 Accuracy = 0.555 
iter 15: [0.29106908176675617] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.30501114222044456 
Top-2 Accuracy = 0.561 
iter 16: [0.30501114222044456] 
setting: standardizev|rf 
Top-1 Accuracy = 0.2836980743957488 
Top-2 Accuracy = 0.495 
iter 17: [0.2836980743957488] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.29106908176675617 
Top-2 Accuracy = 0.555 
iter 18: [0.29106908176675617] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.28729786869321755 
Top-2 Accuracy = 0.496 
iter 19: [0.28729786869321755] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.3070110279412605 
Top-2 Accuracy = 0.562 
iter 20: [0.3070110279412605] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.29106908176675617 
Top-2 Accuracy = 0.555 
iter 21: [0.29106908176675617] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.28295525969944574 
Top-2 Accuracy = 0.492 
iter 22: [0.28295525969944574] 
setting: maxabss|rf 
Top-1 Accuracy = 0.32912405005428264 
Top-2 Accuracy = 0.601 
iter 23: [0.32912405005428264] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.29106908176675617 
Top-2 Accuracy = 0.555 
iter 24: [0.29106908176675617] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.28655505399691444 
Top-2 Accuracy = 0.497 
iter 25: [0.28655505399691444] 
setting: maxabso|rf 
Top-1 Accuracy = 0.32912405005428264 
Top-2 Accuracy = 0.601 
iter 26: [0.32912405005428264] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.29106908176675617 
Top-2 Accuracy = 0.555 
iter 27: [0.29106908176675617] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.3094108908062396 
Top-2 Accuracy = 0.566 
iter 28: [0.3094108908062396] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.32895263127821267 
Top-2 Accuracy = 0.601 
iter 29: [0.32895263127821267] 
Run # 16 
======= 
setting: robustC|rf 
Top-1 Accuracy = 0.28638363522084453 
Top-2 Accuracy = 0.497 
iter 0: [0.28638363522084453] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.32918118964630594 
Top-2 Accuracy = 0.601 
iter 1: [0.32918118964630594] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.32912405005428264 
Top-2 Accuracy = 0.601 
iter 2: [0.32912405005428264] 
setting: standardizem|rf 
Top-1 Accuracy = 0.3059825152848409 
Top-2 Accuracy = 0.551 
iter 3: [0.3059825152848409] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.2849551454202617 
Top-2 Accuracy = 0.495 
iter 4: [0.2849551454202617] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.32912405005428264 
Top-2 Accuracy = 0.601 
iter 5: [0.32912405005428264] 
setting: normalizes|rf 
Top-1 Accuracy = 0.32918118964630594 
Top-2 Accuracy = 0.6 
iter 6: [0.32918118964630594] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.2916976172790126 
Top-2 Accuracy = 0.555 
iter 7: [0.2916976172790126] 
setting: robusts|rf 
Top-1 Accuracy = 0.2854122621564482 
Top-2 Accuracy = 0.497 
iter 8: [0.2854122621564482] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.29232615279126906 
Top-2 Accuracy = 0.555 
iter 9: [0.29232615279126906] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.30661105079709733 
Top-2 Accuracy = 0.564 
iter 10: [0.30661105079709733] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.30906805325409975 
Top-2 Accuracy = 0.565 
iter 11: [0.30906805325409975] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.28752642706131076 
Top-2 Accuracy = 0.496 
iter 12: [0.28752642706131076] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.29232615279126906 
Top-2 Accuracy = 0.555 
iter 13: [0.29232615279126906] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.3062110736529341 
Top-2 Accuracy = 0.549 
iter 14: [0.3062110736529341] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.29209759442317584 
Top-2 Accuracy = 0.555 
iter 15: [0.29209759442317584] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.30678246957316724 
Top-2 Accuracy = 0.565 
iter 16: [0.30678246957316724] 
setting: robustK|rf 
Top-1 Accuracy = 0.3057539569167476 
Top-2 Accuracy = 0.56 
iter 17: [0.3057539569167476] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.29209759442317584 
Top-2 Accuracy = 0.555 
iter 18: [0.29209759442317584] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.28278384092337583 
Top-2 Accuracy = 0.492 
iter 19: [0.28278384092337583] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.30455402548425803 
Top-2 Accuracy = 0.559 
iter 20: [0.30455402548425803] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.2955259699445746 
Top-2 Accuracy = 0.557 
iter 21: [0.2955259699445746] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.3259242329009771 
Top-2 Accuracy = 0.599 
iter 22: [0.3259242329009771] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.3264384892291869 
Top-2 Accuracy = 0.6 
iter 23: [0.3264384892291869] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.3091823324381464 
Top-2 Accuracy = 0.563 
iter 24: [0.3091823324381464] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.2915261985029427 
Top-2 Accuracy = 0.502 
iter 25: [0.2915261985029427] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.32752414147762987 
Top-2 Accuracy = 0.601 
iter 26: [0.32752414147762987] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.28644077481286784 
Top-2 Accuracy = 0.496 
iter 27: [0.28644077481286784] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.3275812810696532 
Top-2 Accuracy = 0.601 
iter 28: [0.3275812810696532] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.2938689217758985 
Top-2 Accuracy = 0.56 
iter 29: [0.2938689217758985] 
Run # 17 
======= 
setting: maxabsI|rf 
Top-1 Accuracy = 0.287926404205474 
Top-2 Accuracy = 0.496 
iter 0: [0.287926404205474] 
setting: robustO|rf 
Top-1 Accuracy = 0.309296611622193 
Top-2 Accuracy = 0.565 
iter 1: [0.309296611622193] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.2938689217758985 
Top-2 Accuracy = 0.56 
iter 2: [0.2938689217758985] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.3275812810696532 
Top-2 Accuracy = 0.601 
iter 3: [0.3275812810696532] 
setting: standardizel|rf 
Top-1 Accuracy = 0.2938689217758985 
Top-2 Accuracy = 0.56 
iter 4: [0.2938689217758985] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.32718130392549 
Top-2 Accuracy = 0.6 
iter 5: [0.32718130392549] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.2855265413404948 
Top-2 Accuracy = 0.497 
iter 6: [0.2855265413404948] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.3082680989657734 
Top-2 Accuracy = 0.55 
iter 7: [0.3082680989657734] 
setting: robuste|rf 
Top-1 Accuracy = 0.30535397977258444 
Top-2 Accuracy = 0.564 
iter 8: [0.30535397977258444] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.28518370378835495 
Top-2 Accuracy = 0.495 
iter 9: [0.28518370378835495] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.3274098622935832 
Top-2 Accuracy = 0.6 
iter 10: [0.3274098622935832] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.3060967944688875 
Top-2 Accuracy = 0.562 
iter 11: [0.3060967944688875] 
setting: robustR|rf 
Top-1 Accuracy = 0.3273527227015599 
Top-2 Accuracy = 0.6 
iter 12: [0.3273527227015599] 
setting: standardizea|rf 
Top-1 Accuracy = 0.3286097937260728 
Top-2 Accuracy = 0.6 
iter 13: [0.3286097937260728] 
setting: standardizev|rf 
Top-1 Accuracy = 0.3273527227015599 
Top-2 Accuracy = 0.6 
iter 14: [0.3273527227015599] 
setting: maxabso|rf 
Top-1 Accuracy = 0.2855836809325181 
Top-2 Accuracy = 0.496 
iter 15: [0.2855836809325181] 
setting: standardized|rf 
Top-1 Accuracy = 0.28426947031598193 
Top-2 Accuracy = 0.496 
iter 16: [0.28426947031598193] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.2920404548311525 
Top-2 Accuracy = 0.554 
iter 17: [0.2920404548311525] 
setting: standardizec|rf 
Top-1 Accuracy = 0.2920404548311525 
Top-2 Accuracy = 0.554 
iter 18: [0.2920404548311525] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.2835837952117022 
Top-2 Accuracy = 0.493 
iter 19: [0.2835837952117022] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.2920404548311525 
Top-2 Accuracy = 0.554 
iter 20: [0.2920404548311525] 
setting: robustg|rf 
Top-1 Accuracy = 0.28872635849380035 
Top-2 Accuracy = 0.499 
iter 21: [0.28872635849380035] 
setting: normalizel|rf 
Top-1 Accuracy = 0.28164104908290954 
Top-2 Accuracy = 0.494 
iter 22: [0.28164104908290954] 
setting: robustU|rf 
Top-1 Accuracy = 0.283183818067539 
Top-2 Accuracy = 0.492 
iter 23: [0.283183818067539] 
setting: normalizep|rf 
Top-1 Accuracy = 0.2814124907148163 
Top-2 Accuracy = 0.493 
iter 24: [0.2814124907148163] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.28964059196617337 
Top-2 Accuracy = 0.555 
iter 25: [0.28964059196617337] 
setting: standardizen|rf 
Top-1 Accuracy = 0.3274670018856065 
Top-2 Accuracy = 0.598 
iter 26: [0.3274670018856065] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.28964059196617337 
Top-2 Accuracy = 0.555 
iter 27: [0.28964059196617337] 
setting: robusta|rf 
Top-1 Accuracy = 0.3274670018856065 
Top-2 Accuracy = 0.598 
iter 28: [0.3274670018856065] 
setting: robustH|rf 
Top-1 Accuracy = 0.28118393234672306 
Top-2 Accuracy = 0.491 
iter 29: [0.28118393234672306] 
Run # 18 
======= 
setting: robustq|rf 
Top-1 Accuracy = 0.282098165819096 
Top-2 Accuracy = 0.493 
iter 0: [0.282098165819096] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.30455402548425803 
Top-2 Accuracy = 0.561 
iter 1: [0.30455402548425803] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.28964059196617337 
Top-2 Accuracy = 0.555 
iter 2: [0.28964059196617337] 
setting: robustP|rf 
Top-1 Accuracy = 0.28129821153076967 
Top-2 Accuracy = 0.491 
iter 3: [0.28129821153076967] 
setting: robusti|rf 
Top-1 Accuracy = 0.3026112793554654 
Top-2 Accuracy = 0.548 
iter 4: [0.3026112793554654] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.32683846637335007 
Top-2 Accuracy = 0.598 
iter 5: [0.32683846637335007] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.3259813724930004 
Top-2 Accuracy = 0.599 
iter 6: [0.3259813724930004] 
setting: robusth|rf 
Top-1 Accuracy = 0.32666704759728016 
Top-2 Accuracy = 0.599 
iter 7: [0.32666704759728016] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.29129764013484943 
Top-2 Accuracy = 0.555 
iter 8: [0.29129764013484943] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.29129764013484943 
Top-2 Accuracy = 0.555 
iter 9: [0.29129764013484943] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.307468144677447 
Top-2 Accuracy = 0.565 
iter 10: [0.307468144677447] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.30501114222044456 
Top-2 Accuracy = 0.556 
iter 11: [0.30501114222044456] 
setting: normalizer|rf 
Top-1 Accuracy = 0.28964059196617337 
Top-2 Accuracy = 0.555 
iter 12: [0.28964059196617337] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.30512542140449117 
Top-2 Accuracy = 0.549 
iter 13: [0.30512542140449117] 
setting: standardizew|rf 
Top-1 Accuracy = 0.3274670018856065 
Top-2 Accuracy = 0.6 
iter 14: [0.3274670018856065] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.3068967487572139 
Top-2 Accuracy = 0.564 
iter 15: [0.3068967487572139] 
setting: normalizev|rf 
Top-1 Accuracy = 0.2854694017484715 
Top-2 Accuracy = 0.495 
iter 16: [0.2854694017484715] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.28769784583738073 
Top-2 Accuracy = 0.497 
iter 17: [0.28769784583738073] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.3061539340609108 
Top-2 Accuracy = 0.563 
iter 18: [0.3061539340609108] 
setting: standardizee|rf 
Top-1 Accuracy = 0.3282669561739329 
Top-2 Accuracy = 0.601 
iter 19: [0.3282669561739329] 
setting: robustV|rf 
Top-1 Accuracy = 0.3282098165819096 
Top-2 Accuracy = 0.601 
iter 20: [0.3282098165819096] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.28158390949088624 
Top-2 Accuracy = 0.491 
iter 21: [0.28158390949088624] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.30541111936460774 
Top-2 Accuracy = 0.56 
iter 22: [0.30541111936460774] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.3022684418033255 
Top-2 Accuracy = 0.546 
iter 23: [0.3022684418033255] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.30323981486772184 
Top-2 Accuracy = 0.561 
iter 24: [0.30323981486772184] 
setting: robustY|rf 
Top-1 Accuracy = 0.30838237814982 
Top-2 Accuracy = 0.561 
iter 25: [0.30838237814982] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.2915261985029427 
Top-2 Accuracy = 0.555 
iter 26: [0.2915261985029427] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.2920404548311525 
Top-2 Accuracy = 0.557 
iter 27: [0.2920404548311525] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.2920404548311525 
Top-2 Accuracy = 0.557 
iter 28: [0.2920404548311525] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.28175532826695615 
Top-2 Accuracy = 0.495 
iter 29: [0.28175532826695615] 
Run # 19 
======= 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.28866921890177705 
Top-2 Accuracy = 0.499 
iter 0: [0.28866921890177705] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.32718130392549 
Top-2 Accuracy = 0.599 
iter 1: [0.32718130392549] 
setting: robustf|rf 
Top-1 Accuracy = 0.3282098165819096 
Top-2 Accuracy = 0.6 
iter 2: [0.3282098165819096] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.2919833152391292 
Top-2 Accuracy = 0.556 
iter 3: [0.2919833152391292] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.28998342951831324 
Top-2 Accuracy = 0.555 
iter 4: [0.28998342951831324] 
setting: standardized|rf 
Top-1 Accuracy = 0.2834123764356323 
Top-2 Accuracy = 0.496 
iter 5: [0.2834123764356323] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.28998342951831324 
Top-2 Accuracy = 0.555 
iter 6: [0.28998342951831324] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.32535283698074396 
Top-2 Accuracy = 0.599 
iter 7: [0.32535283698074396] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.32540997657276727 
Top-2 Accuracy = 0.599 
iter 8: [0.32540997657276727] 
setting: standardizep|rf 
Top-1 Accuracy = 0.32529569738872066 
Top-2 Accuracy = 0.599 
iter 9: [0.32529569738872066] 
setting: robustF|rf 
Top-1 Accuracy = 0.3060396548768642 
Top-2 Accuracy = 0.562 
iter 10: [0.3060396548768642] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.3250671390206274 
Top-2 Accuracy = 0.598 
iter 11: [0.3250671390206274] 
setting: normalizec|rf 
Top-1 Accuracy = 0.28169818867493285 
Top-2 Accuracy = 0.491 
iter 12: [0.28169818867493285] 
setting: robustt|rf 
Top-1 Accuracy = 0.2884978001257071 
Top-2 Accuracy = 0.554 
iter 13: [0.2884978001257071] 
setting: robustx|rf 
Top-1 Accuracy = 0.2882121021655905 
Top-2 Accuracy = 0.496 
iter 14: [0.2882121021655905] 
setting: robustm|rf 
Top-1 Accuracy = 0.2884978001257071 
Top-2 Accuracy = 0.554 
iter 15: [0.2884978001257071] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.2884978001257071 
Top-2 Accuracy = 0.554 
iter 16: [0.2884978001257071] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.2884978001257071 
Top-2 Accuracy = 0.554 
iter 17: [0.2884978001257071] 
setting: maxabso|rf 
Top-1 Accuracy = 0.2884978001257071 
Top-2 Accuracy = 0.554 
iter 18: [0.2884978001257071] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.3263242100451403 
Top-2 Accuracy = 0.6 
iter 19: [0.3263242100451403] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.3272384435175133 
Top-2 Accuracy = 0.601 
iter 20: [0.3272384435175133] 
setting: robustv|rf 
Top-1 Accuracy = 0.2890691960459402 
Top-2 Accuracy = 0.555 
iter 21: [0.2890691960459402] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.32718130392549 
Top-2 Accuracy = 0.601 
iter 22: [0.32718130392549] 
setting: robustR|rf 
Top-1 Accuracy = 0.3272384435175133 
Top-2 Accuracy = 0.601 
iter 23: [0.3272384435175133] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.29135477972687274 
Top-2 Accuracy = 0.556 
iter 24: [0.29135477972687274] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.29135477972687274 
Top-2 Accuracy = 0.556 
iter 25: [0.29135477972687274] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.29135477972687274 
Top-2 Accuracy = 0.556 
iter 26: [0.29135477972687274] 
setting: normalizev|rf 
Top-1 Accuracy = 0.32563853494086054 
Top-2 Accuracy = 0.598 
iter 27: [0.32563853494086054] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.2834695160276556 
Top-2 Accuracy = 0.494 
iter 28: [0.2834695160276556] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.28381235357979545 
Top-2 Accuracy = 0.495 
iter 29: [0.28381235357979545] 
 
Median top-1 = 0.3013542083309525 
Median top-2 = 0.557 
7 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=46), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=31), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=31), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=77), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=35), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=42), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=35), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=28), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=41), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=38), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=91), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=41), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=89), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=23), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=78), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=18), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=76), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=78), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=87), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=68), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=58), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=23), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=45), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=99), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=34), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=93), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=87), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=64), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=23), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=41), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=48), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=16), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=42), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=27), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=58), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=34), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: robustr|rf 
Top-1 Accuracy = 0.2554139763442089 
Top-2 Accuracy = 0.428 
iter 0: [0.2554139763442089] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.23884349465744814 
Top-2 Accuracy = 0.4 
iter 1: [0.23884349465744814] 
setting: robustj|rf 
Top-1 Accuracy = 0.3059825152848409 
Top-2 Accuracy = 0.479 
iter 2: [0.3059825152848409] 
setting: robustt|rf 
Top-1 Accuracy = 0.3060967944688875 
Top-2 Accuracy = 0.478 
iter 3: [0.3060967944688875] 
setting: robustF|rf 
Top-1 Accuracy = 0.2835837952117022 
Top-2 Accuracy = 0.446 
iter 4: [0.2835837952117022] 
setting: robustu|rf 
Top-1 Accuracy = 0.2835837952117022 
Top-2 Accuracy = 0.446 
iter 5: [0.2835837952117022] 
setting: robustP|rf 
Top-1 Accuracy = 0.24072910119421748 
Top-2 Accuracy = 0.402 
iter 6: [0.24072910119421748] 
setting: standardizev|rf 
Top-1 Accuracy = 0.2835837952117022 
Top-2 Accuracy = 0.446 
iter 7: [0.2835837952117022] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.2595851665619108 
Top-2 Accuracy = 0.442 
iter 8: [0.2595851665619108] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.31032512427861264 
Top-2 Accuracy = 0.484 
iter 9: [0.31032512427861264] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.28381235357979545 
Top-2 Accuracy = 0.455 
iter 10: [0.28381235357979545] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.25861379349751445 
Top-2 Accuracy = 0.443 
iter 11: [0.25861379349751445] 
setting: standardizew|rf 
Top-1 Accuracy = 0.28381235357979545 
Top-2 Accuracy = 0.455 
iter 12: [0.28381235357979545] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.31118221815896235 
Top-2 Accuracy = 0.482 
iter 13: [0.31118221815896235] 
setting: robustd|rf 
Top-1 Accuracy = 0.2597565853379807 
Top-2 Accuracy = 0.438 
iter 14: [0.2597565853379807] 
setting: robustX|rf 
Top-1 Accuracy = 0.3110107993828924 
Top-2 Accuracy = 0.482 
iter 15: [0.3110107993828924] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.28381235357979545 
Top-2 Accuracy = 0.455 
iter 16: [0.28381235357979545] 
setting: robusts|rf 
Top-1 Accuracy = 0.23610079424032912 
Top-2 Accuracy = 0.397 
iter 17: [0.23610079424032912] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.3107251014227758 
Top-2 Accuracy = 0.482 
iter 18: [0.3107251014227758] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.23352951259928004 
Top-2 Accuracy = 0.395 
iter 19: [0.23352951259928004] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.28381235357979545 
Top-2 Accuracy = 0.455 
iter 20: [0.28381235357979545] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.237357865264842 
Top-2 Accuracy = 0.397 
iter 21: [0.237357865264842] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.2855836809325181 
Top-2 Accuracy = 0.457 
iter 22: [0.2855836809325181] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.3130106851037084 
Top-2 Accuracy = 0.485 
iter 23: [0.3130106851037084] 
setting: robustJ|rf 
Top-1 Accuracy = 0.23792926118507512 
Top-2 Accuracy = 0.398 
iter 24: [0.23792926118507512] 
setting: maxabse|rf 
Top-1 Accuracy = 0.312953545511685 
Top-2 Accuracy = 0.486 
iter 25: [0.312953545511685] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.2855836809325181 
Top-2 Accuracy = 0.457 
iter 26: [0.2855836809325181] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.2359865150562825 
Top-2 Accuracy = 0.398 
iter 27: [0.2359865150562825] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.2334152334152334 
Top-2 Accuracy = 0.395 
iter 28: [0.2334152334152334] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.2562139306325353 
Top-2 Accuracy = 0.435 
iter 29: [0.2562139306325353] 
Run # 1 
====== 
setting: maxabsh|rf 
Top-1 Accuracy = 0.25695674532883833 
Top-2 Accuracy = 0.44 
iter 0: [0.25695674532883833] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.28649791440489114 
Top-2 Accuracy = 0.457 
iter 1: [0.28649791440489114] 
setting: robustW|rf 
Top-1 Accuracy = 0.23450088566367636 
Top-2 Accuracy = 0.395 
iter 2: [0.23450088566367636] 
setting: robuste|rf 
Top-1 Accuracy = 0.3119250328552654 
Top-2 Accuracy = 0.482 
iter 3: [0.3119250328552654] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.23324381463916347 
Top-2 Accuracy = 0.396 
iter 4: [0.23324381463916347] 
setting: standardizee|rf 
Top-1 Accuracy = 0.3118678932632421 
Top-2 Accuracy = 0.482 
iter 5: [0.3118678932632421] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.3119821724472887 
Top-2 Accuracy = 0.482 
iter 6: [0.3119821724472887] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.23610079424032912 
Top-2 Accuracy = 0.397 
iter 7: [0.23610079424032912] 
setting: normalizei|rf 
Top-1 Accuracy = 0.3108965201988458 
Top-2 Accuracy = 0.483 
iter 8: [0.3108965201988458] 
setting: standardizea|rf 
Top-1 Accuracy = 0.2576424204331181 
Top-2 Accuracy = 0.44 
iter 9: [0.2576424204331181] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.234615164847723 
Top-2 Accuracy = 0.395 
iter 10: [0.234615164847723] 
setting: robustN|rf 
Top-1 Accuracy = 0.2592994686017942 
Top-2 Accuracy = 0.442 
iter 11: [0.2592994686017942] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.28975487115022 
Top-2 Accuracy = 0.46 
iter 12: [0.28975487115022] 
setting: maxabss|rf 
Top-1 Accuracy = 0.3108965201988458 
Top-2 Accuracy = 0.483 
iter 13: [0.3108965201988458] 
setting: robustF|rf 
Top-1 Accuracy = 0.3108965201988458 
Top-2 Accuracy = 0.483 
iter 14: [0.3108965201988458] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.25667104736872176 
Top-2 Accuracy = 0.435 
iter 15: [0.25667104736872176] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.3110107993828924 
Top-2 Accuracy = 0.483 
iter 16: [0.3110107993828924] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.25215701959888004 
Top-2 Accuracy = 0.431 
iter 17: [0.25215701959888004] 
setting: robustI|rf 
Top-1 Accuracy = 0.2350722815839095 
Top-2 Accuracy = 0.395 
iter 18: [0.2350722815839095] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.2337580709673733 
Top-2 Accuracy = 0.394 
iter 19: [0.2337580709673733] 
setting: robusth|rf 
Top-1 Accuracy = 0.2337580709673733 
Top-2 Accuracy = 0.397 
iter 20: [0.2337580709673733] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.2547283012399291 
Top-2 Accuracy = 0.438 
iter 21: [0.2547283012399291] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.23318667504714016 
Top-2 Accuracy = 0.393 
iter 22: [0.23318667504714016] 
setting: robustQ|rf 
Top-1 Accuracy = 0.28975487115022 
Top-2 Accuracy = 0.46 
iter 23: [0.28975487115022] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.25878521227358436 
Top-2 Accuracy = 0.441 
iter 24: [0.25878521227358436] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.28975487115022 
Top-2 Accuracy = 0.46 
iter 25: [0.28975487115022] 
setting: robustV|rf 
Top-1 Accuracy = 0.25387120735957946 
Top-2 Accuracy = 0.423 
iter 26: [0.25387120735957946] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.23358665219130337 
Top-2 Accuracy = 0.395 
iter 27: [0.23358665219130337] 
setting: normalizep|rf 
Top-1 Accuracy = 0.2533569510313696 
Top-2 Accuracy = 0.437 
iter 28: [0.2533569510313696] 
setting: normalizek|rf 
Top-1 Accuracy = 0.31118221815896235 
Top-2 Accuracy = 0.485 
iter 29: [0.31118221815896235] 
Run # 2 
====== 
setting: standardizeG|rf 
Top-1 Accuracy = 0.25775669961716474 
Top-2 Accuracy = 0.44 
iter 0: [0.25775669961716474] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.31169647448717214 
Top-2 Accuracy = 0.484 
iter 1: [0.31169647448717214] 
setting: robusto|rf 
Top-1 Accuracy = 0.31118221815896235 
Top-2 Accuracy = 0.486 
iter 2: [0.31118221815896235] 
setting: robustm|rf 
Top-1 Accuracy = 0.23530083995200274 
Top-2 Accuracy = 0.395 
iter 3: [0.23530083995200274] 
setting: normalizev|rf 
Top-1 Accuracy = 0.30769670304554025 
Top-2 Accuracy = 0.479 
iter 4: [0.30769670304554025] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.30683960916519054 
Top-2 Accuracy = 0.481 
iter 5: [0.30683960916519054] 
setting: standardizel|rf 
Top-1 Accuracy = 0.30683960916519054 
Top-2 Accuracy = 0.481 
iter 6: [0.30683960916519054] 
setting: robustc|rf 
Top-1 Accuracy = 0.2880978229815439 
Top-2 Accuracy = 0.459 
iter 7: [0.2880978229815439] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.30683960916519054 
Top-2 Accuracy = 0.481 
iter 8: [0.30683960916519054] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.23118678932632422 
Top-2 Accuracy = 0.391 
iter 9: [0.23118678932632422] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.2880978229815439 
Top-2 Accuracy = 0.459 
iter 10: [0.2880978229815439] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.23101537055025428 
Top-2 Accuracy = 0.394 
iter 11: [0.23101537055025428] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.28472658705216847 
Top-2 Accuracy = 0.455 
iter 12: [0.28472658705216847] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.23541511913604937 
Top-2 Accuracy = 0.397 
iter 13: [0.23541511913604937] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.26021370207416716 
Top-2 Accuracy = 0.441 
iter 14: [0.26021370207416716] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.3087252157019599 
Top-2 Accuracy = 0.477 
iter 15: [0.3087252157019599] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.25524255756813896 
Top-2 Accuracy = 0.44 
iter 16: [0.25524255756813896] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.2611279355465402 
Top-2 Accuracy = 0.443 
iter 17: [0.2611279355465402] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.25918518941774754 
Top-2 Accuracy = 0.44 
iter 18: [0.25918518941774754] 
setting: robustK|rf 
Top-1 Accuracy = 0.30683960916519054 
Top-2 Accuracy = 0.479 
iter 19: [0.30683960916519054] 
setting: robusth|rf 
Top-1 Accuracy = 0.23421518770355979 
Top-2 Accuracy = 0.394 
iter 20: [0.23421518770355979] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.27912690703388376 
Top-2 Accuracy = 0.449 
iter 21: [0.27912690703388376] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.30666819038912063 
Top-2 Accuracy = 0.476 
iter 22: [0.30666819038912063] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.27912690703388376 
Top-2 Accuracy = 0.449 
iter 23: [0.27912690703388376] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.26135649391463345 
Top-2 Accuracy = 0.438 
iter 24: [0.26135649391463345] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.27912690703388376 
Top-2 Accuracy = 0.449 
iter 25: [0.27912690703388376] 
setting: normalizey|rf 
Top-1 Accuracy = 0.23661505056853893 
Top-2 Accuracy = 0.396 
iter 26: [0.23661505056853893] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.3052397005885378 
Top-2 Accuracy = 0.478 
iter 27: [0.3052397005885378] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.2760985086566482 
Top-2 Accuracy = 0.442 
iter 28: [0.2760985086566482] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.2760985086566482 
Top-2 Accuracy = 0.442 
iter 29: [0.2760985086566482] 
Run # 3 
====== 
setting: standardizeV|rf 
Top-1 Accuracy = 0.2760985086566482 
Top-2 Accuracy = 0.442 
iter 0: [0.2760985086566482] 
setting: normalizes|rf 
Top-1 Accuracy = 0.23472944403176962 
Top-2 Accuracy = 0.397 
iter 1: [0.23472944403176962] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.2580995371693046 
Top-2 Accuracy = 0.437 
iter 2: [0.2580995371693046] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.27586995028855493 
Top-2 Accuracy = 0.441 
iter 3: [0.27586995028855493] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.27586995028855493 
Top-2 Accuracy = 0.44 
iter 4: [0.27586995028855493] 
setting: robustd|rf 
Top-1 Accuracy = 0.3074110050854237 
Top-2 Accuracy = 0.479 
iter 5: [0.3074110050854237] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.3059825152848409 
Top-2 Accuracy = 0.475 
iter 6: [0.3059825152848409] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.26009942289012056 
Top-2 Accuracy = 0.441 
iter 7: [0.26009942289012056] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.2801554196903034 
Top-2 Accuracy = 0.444 
iter 8: [0.2801554196903034] 
setting: robustz|rf 
Top-1 Accuracy = 0.3058110965087709 
Top-2 Accuracy = 0.475 
iter 9: [0.3058110965087709] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.25769956002514144 
Top-2 Accuracy = 0.436 
iter 10: [0.25769956002514144] 
setting: robustG|rf 
Top-1 Accuracy = 0.2526712759270899 
Top-2 Accuracy = 0.426 
iter 11: [0.2526712759270899] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.30181132506713904 
Top-2 Accuracy = 0.475 
iter 12: [0.30181132506713904] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.30181132506713904 
Top-2 Accuracy = 0.476 
iter 13: [0.30181132506713904] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.25992800411405065 
Top-2 Accuracy = 0.441 
iter 14: [0.25992800411405065] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.30272555853951205 
Top-2 Accuracy = 0.474 
iter 15: [0.30272555853951205] 
setting: normalizer|rf 
Top-1 Accuracy = 0.2770127421290212 
Top-2 Accuracy = 0.443 
iter 16: [0.2770127421290212] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.3030683960916519 
Top-2 Accuracy = 0.476 
iter 17: [0.3030683960916519] 
setting: robustp|rf 
Top-1 Accuracy = 0.30323981486772184 
Top-2 Accuracy = 0.476 
iter 18: [0.30323981486772184] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.3026684189474887 
Top-2 Accuracy = 0.476 
iter 19: [0.3026684189474887] 
setting: robustS|rf 
Top-1 Accuracy = 0.2567281869607451 
Top-2 Accuracy = 0.435 
iter 20: [0.2567281869607451] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.25644248900062855 
Top-2 Accuracy = 0.438 
iter 21: [0.25644248900062855] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.2594137477858408 
Top-2 Accuracy = 0.444 
iter 22: [0.2594137477858408] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.25787097880121135 
Top-2 Accuracy = 0.43 
iter 23: [0.25787097880121135] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.3024970001714188 
Top-2 Accuracy = 0.476 
iter 24: [0.3024970001714188] 
setting: normalizec|rf 
Top-1 Accuracy = 0.2783269527455574 
Top-2 Accuracy = 0.442 
iter 25: [0.2783269527455574] 
setting: normalizev|rf 
Top-1 Accuracy = 0.3008399520027427 
Top-2 Accuracy = 0.473 
iter 26: [0.3008399520027427] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.3034683732358151 
Top-2 Accuracy = 0.477 
iter 27: [0.3034683732358151] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.2770127421290212 
Top-2 Accuracy = 0.443 
iter 28: [0.2770127421290212] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.2770127421290212 
Top-2 Accuracy = 0.443 
iter 29: [0.2770127421290212] 
Run # 4 
====== 
setting: normalizev|rf 
Top-1 Accuracy = 0.27666990457688134 
Top-2 Accuracy = 0.441 
iter 0: [0.27666990457688134] 
setting: robustJ|rf 
Top-1 Accuracy = 0.30855379692588997 
Top-2 Accuracy = 0.478 
iter 1: [0.30855379692588997] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.2333009542311868 
Top-2 Accuracy = 0.393 
iter 2: [0.2333009542311868] 
setting: standardizef|rf 
Top-1 Accuracy = 0.3086680761099366 
Top-2 Accuracy = 0.478 
iter 3: [0.3086680761099366] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.27666990457688134 
Top-2 Accuracy = 0.441 
iter 4: [0.27666990457688134] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.23295811667904692 
Top-2 Accuracy = 0.395 
iter 5: [0.23295811667904692] 
setting: robustq|rf 
Top-1 Accuracy = 0.23924347180161135 
Top-2 Accuracy = 0.401 
iter 6: [0.23924347180161135] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.237357865264842 
Top-2 Accuracy = 0.399 
iter 7: [0.237357865264842] 
setting: standardizee|rf 
Top-1 Accuracy = 0.30803954059768013 
Top-2 Accuracy = 0.477 
iter 8: [0.30803954059768013] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.23604365464830582 
Top-2 Accuracy = 0.397 
iter 9: [0.23604365464830582] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.23472944403176962 
Top-2 Accuracy = 0.395 
iter 10: [0.23472944403176962] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.2751842751842752 
Top-2 Accuracy = 0.439 
iter 11: [0.2751842751842752] 
setting: standardizes|rf 
Top-1 Accuracy = 0.22924404319753158 
Top-2 Accuracy = 0.392 
iter 12: [0.22924404319753158] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.2761556482486715 
Top-2 Accuracy = 0.44 
iter 13: [0.2761556482486715] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.2761556482486715 
Top-2 Accuracy = 0.44 
iter 14: [0.2761556482486715] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.23650077138449233 
Top-2 Accuracy = 0.397 
iter 15: [0.23650077138449233] 
setting: standardizev|rf 
Top-1 Accuracy = 0.3096965887663562 
Top-2 Accuracy = 0.481 
iter 16: [0.3096965887663562] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.309468030398263 
Top-2 Accuracy = 0.48 
iter 17: [0.309468030398263] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.3095251699902863 
Top-2 Accuracy = 0.481 
iter 18: [0.3095251699902863] 
setting: robustS|rf 
Top-1 Accuracy = 0.23427232729558312 
Top-2 Accuracy = 0.394 
iter 19: [0.23427232729558312] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.2761556482486715 
Top-2 Accuracy = 0.44 
iter 20: [0.2761556482486715] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.2761556482486715 
Top-2 Accuracy = 0.44 
iter 21: [0.2761556482486715] 
setting: standardizer|rf 
Top-1 Accuracy = 0.23792926118507512 
Top-2 Accuracy = 0.398 
iter 22: [0.23792926118507512] 
setting: robustE|rf 
Top-1 Accuracy = 0.2761556482486715 
Top-2 Accuracy = 0.44 
iter 23: [0.2761556482486715] 
setting: robustf|rf 
Top-1 Accuracy = 0.2582138163533512 
Top-2 Accuracy = 0.439 
iter 24: [0.2582138163533512] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.2761556482486715 
Top-2 Accuracy = 0.44 
iter 25: [0.2761556482486715] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.23672932975258557 
Top-2 Accuracy = 0.397 
iter 26: [0.23672932975258557] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.23650077138449233 
Top-2 Accuracy = 0.398 
iter 27: [0.23650077138449233] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.3100965659105194 
Top-2 Accuracy = 0.478 
iter 28: [0.3100965659105194] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.2762127878406948 
Top-2 Accuracy = 0.441 
iter 29: [0.2762127878406948] 
Run # 5 
====== 
setting: normalizeB|rf 
Top-1 Accuracy = 0.2760413690646249 
Top-2 Accuracy = 0.442 
iter 0: [0.2760413690646249] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.30461116507628133 
Top-2 Accuracy = 0.476 
iter 1: [0.30461116507628133] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.3047825838523513 
Top-2 Accuracy = 0.475 
iter 2: [0.3047825838523513] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.237357865264842 
Top-2 Accuracy = 0.398 
iter 3: [0.237357865264842] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.2760413690646249 
Top-2 Accuracy = 0.442 
iter 4: [0.2760413690646249] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.3048397234443746 
Top-2 Accuracy = 0.475 
iter 5: [0.3048397234443746] 
setting: robustx|rf 
Top-1 Accuracy = 0.30455402548425803 
Top-2 Accuracy = 0.476 
iter 6: [0.30455402548425803] 
setting: robusty|rf 
Top-1 Accuracy = 0.3044968858922347 
Top-2 Accuracy = 0.476 
iter 7: [0.3044968858922347] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.2760413690646249 
Top-2 Accuracy = 0.442 
iter 8: [0.2760413690646249] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.23444374607165305 
Top-2 Accuracy = 0.395 
iter 9: [0.23444374607165305] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.2760413690646249 
Top-2 Accuracy = 0.442 
iter 10: [0.2760413690646249] 
setting: robustQ|rf 
Top-1 Accuracy = 0.2363293526084224 
Top-2 Accuracy = 0.396 
iter 11: [0.2363293526084224] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.2760413690646249 
Top-2 Accuracy = 0.442 
iter 12: [0.2760413690646249] 
setting: robustP|rf 
Top-1 Accuracy = 0.25998514370607395 
Top-2 Accuracy = 0.442 
iter 13: [0.25998514370607395] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.25689960573681503 
Top-2 Accuracy = 0.44 
iter 14: [0.25689960573681503] 
setting: robustS|rf 
Top-1 Accuracy = 0.23444374607165305 
Top-2 Accuracy = 0.394 
iter 15: [0.23444374607165305] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.29918290383406665 
Top-2 Accuracy = 0.468 
iter 16: [0.29918290383406665] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.26004228329809725 
Top-2 Accuracy = 0.443 
iter 17: [0.26004228329809725] 
setting: robustL|rf 
Top-1 Accuracy = 0.2531855322552997 
Top-2 Accuracy = 0.429 
iter 18: [0.2531855322552997] 
setting: normalizek|rf 
Top-1 Accuracy = 0.27427004171190217 
Top-2 Accuracy = 0.44 
iter 19: [0.27427004171190217] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.23615793383235242 
Top-2 Accuracy = 0.396 
iter 20: [0.23615793383235242] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.27427004171190217 
Top-2 Accuracy = 0.44 
iter 21: [0.27427004171190217] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.23232958116679048 
Top-2 Accuracy = 0.395 
iter 22: [0.23232958116679048] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.27427004171190217 
Top-2 Accuracy = 0.44 
iter 23: [0.27427004171190217] 
setting: robustq|rf 
Top-1 Accuracy = 0.2337580709673733 
Top-2 Accuracy = 0.395 
iter 24: [0.2337580709673733] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.27427004171190217 
Top-2 Accuracy = 0.44 
iter 25: [0.27427004171190217] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.23255813953488372 
Top-2 Accuracy = 0.395 
iter 26: [0.23255813953488372] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.27427004171190217 
Top-2 Accuracy = 0.44 
iter 27: [0.27427004171190217] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.25392834695160277 
Top-2 Accuracy = 0.43 
iter 28: [0.25392834695160277] 
setting: robustn|rf 
Top-1 Accuracy = 0.25878521227358436 
Top-2 Accuracy = 0.428 
iter 29: [0.25878521227358436] 
Run # 6 
====== 
setting: robustO|rf 
Top-1 Accuracy = 0.27427004171190217 
Top-2 Accuracy = 0.44 
iter 0: [0.27427004171190217] 
setting: normalizet|rf 
Top-1 Accuracy = 0.3013542083309525 
Top-2 Accuracy = 0.473 
iter 1: [0.3013542083309525] 
setting: robustg|rf 
Top-1 Accuracy = 0.2583852351294212 
Top-2 Accuracy = 0.442 
iter 2: [0.2583852351294212] 
setting: robusto|rf 
Top-1 Accuracy = 0.3013542083309525 
Top-2 Accuracy = 0.474 
iter 3: [0.3013542083309525] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.23798640077709846 
Top-2 Accuracy = 0.398 
iter 4: [0.23798640077709846] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.27781269641734757 
Top-2 Accuracy = 0.444 
iter 5: [0.27781269641734757] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.23667219016056226 
Top-2 Accuracy = 0.396 
iter 6: [0.23667219016056226] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.30198274384320895 
Top-2 Accuracy = 0.473 
iter 7: [0.30198274384320895] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.3044397463002114 
Top-2 Accuracy = 0.474 
iter 8: [0.3044397463002114] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.2583280955373979 
Top-2 Accuracy = 0.437 
iter 9: [0.2583280955373979] 
setting: robuste|rf 
Top-1 Accuracy = 0.304725444260328 
Top-2 Accuracy = 0.474 
iter 10: [0.304725444260328] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.23592937546425918 
Top-2 Accuracy = 0.396 
iter 11: [0.23592937546425918] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.25918518941774754 
Top-2 Accuracy = 0.442 
iter 12: [0.25918518941774754] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.304725444260328 
Top-2 Accuracy = 0.474 
iter 13: [0.304725444260328] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.3044968858922347 
Top-2 Accuracy = 0.474 
iter 14: [0.3044968858922347] 
setting: standardizer|rf 
Top-1 Accuracy = 0.2737557853836924 
Top-2 Accuracy = 0.44 
iter 15: [0.2737557853836924] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.2737557853836924 
Top-2 Accuracy = 0.44 
iter 16: [0.2737557853836924] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.2737557853836924 
Top-2 Accuracy = 0.44 
iter 17: [0.2737557853836924] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.2315296268784641 
Top-2 Accuracy = 0.395 
iter 18: [0.2315296268784641] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.3044968858922347 
Top-2 Accuracy = 0.474 
iter 19: [0.3044968858922347] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.23724358608079538 
Top-2 Accuracy = 0.399 
iter 20: [0.23724358608079538] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.2737557853836924 
Top-2 Accuracy = 0.44 
iter 21: [0.2737557853836924] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.3044968858922347 
Top-2 Accuracy = 0.474 
iter 22: [0.3044968858922347] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.3044968858922347 
Top-2 Accuracy = 0.474 
iter 23: [0.3044968858922347] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.2737557853836924 
Top-2 Accuracy = 0.44 
iter 24: [0.2737557853836924] 
setting: robustn|rf 
Top-1 Accuracy = 0.2575852808410948 
Top-2 Accuracy = 0.436 
iter 25: [0.2575852808410948] 
setting: normalizep|rf 
Top-1 Accuracy = 0.22912976401348495 
Top-2 Accuracy = 0.392 
iter 26: [0.22912976401348495] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.2598708645220273 
Top-2 Accuracy = 0.438 
iter 27: [0.2598708645220273] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.30198274384320895 
Top-2 Accuracy = 0.474 
iter 28: [0.30198274384320895] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.27684132335295125 
Top-2 Accuracy = 0.441 
iter 29: [0.27684132335295125] 
Run # 7 
====== 
setting: normalizee|rf 
Top-1 Accuracy = 0.2509570881663905 
Top-2 Accuracy = 0.424 
iter 0: [0.2509570881663905] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.25638534940860525 
Top-2 Accuracy = 0.429 
iter 1: [0.25638534940860525] 
setting: standardizex|rf 
Top-1 Accuracy = 0.25889949145763097 
Top-2 Accuracy = 0.437 
iter 2: [0.25889949145763097] 
setting: standardizel|rf 
Top-1 Accuracy = 0.25792811839323465 
Top-2 Accuracy = 0.435 
iter 3: [0.25792811839323465] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.3024970001714188 
Top-2 Accuracy = 0.474 
iter 4: [0.3024970001714188] 
setting: normalizel|rf 
Top-1 Accuracy = 0.23398662933546654 
Top-2 Accuracy = 0.394 
iter 5: [0.23398662933546654] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.26015656248214386 
Top-2 Accuracy = 0.441 
iter 6: [0.26015656248214386] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.256156791040512 
Top-2 Accuracy = 0.43 
iter 7: [0.256156791040512] 
setting: robustM|rf 
Top-1 Accuracy = 0.2562139306325353 
Top-2 Accuracy = 0.432 
iter 8: [0.2562139306325353] 
setting: robustK|rf 
Top-1 Accuracy = 0.30661105079709733 
Top-2 Accuracy = 0.477 
iter 9: [0.30661105079709733] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.29672590137706417 
Top-2 Accuracy = 0.469 
iter 10: [0.29672590137706417] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.25901377064167763 
Top-2 Accuracy = 0.44 
iter 11: [0.25901377064167763] 
setting: normalizez|rf 
Top-1 Accuracy = 0.2547283012399291 
Top-2 Accuracy = 0.435 
iter 12: [0.2547283012399291] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.29586880749671446 
Top-2 Accuracy = 0.468 
iter 13: [0.29586880749671446] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.23352951259928004 
Top-2 Accuracy = 0.394 
iter 14: [0.23352951259928004] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.30409690874807155 
Top-2 Accuracy = 0.476 
iter 15: [0.30409690874807155] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.30421118793211815 
Top-2 Accuracy = 0.476 
iter 16: [0.30421118793211815] 
setting: standardizew|rf 
Top-1 Accuracy = 0.30426832752414146 
Top-2 Accuracy = 0.476 
iter 17: [0.30426832752414146] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.2568424661447917 
Top-2 Accuracy = 0.44 
iter 18: [0.2568424661447917] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.25649962859265185 
Top-2 Accuracy = 0.43 
iter 19: [0.25649962859265185] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.25895663104965433 
Top-2 Accuracy = 0.437 
iter 20: [0.25895663104965433] 
setting: standardized|rf 
Top-1 Accuracy = 0.2568424661447917 
Top-2 Accuracy = 0.429 
iter 21: [0.2568424661447917] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.2334152334152334 
Top-2 Accuracy = 0.395 
iter 22: [0.2334152334152334] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.2563282098165819 
Top-2 Accuracy = 0.428 
iter 23: [0.2563282098165819] 
setting: robustp|rf 
Top-1 Accuracy = 0.25878521227358436 
Top-2 Accuracy = 0.437 
iter 24: [0.25878521227358436] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.2594137477858408 
Top-2 Accuracy = 0.44 
iter 25: [0.2594137477858408] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.2840409119478887 
Top-2 Accuracy = 0.455 
iter 26: [0.2840409119478887] 
setting: robustN|rf 
Top-1 Accuracy = 0.3010113707788126 
Top-2 Accuracy = 0.473 
iter 27: [0.3010113707788126] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.2576424204331181 
Top-2 Accuracy = 0.441 
iter 28: [0.2576424204331181] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.3057539569167476 
Top-2 Accuracy = 0.475 
iter 29: [0.3057539569167476] 
Run # 8 
====== 
setting: maxabsC|rf 
Top-1 Accuracy = 0.27318438946345924 
Top-2 Accuracy = 0.44 
iter 0: [0.27318438946345924] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.30649677161305067 
Top-2 Accuracy = 0.476 
iter 1: [0.30649677161305067] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.30649677161305067 
Top-2 Accuracy = 0.476 
iter 2: [0.30649677161305067] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.3060967944688875 
Top-2 Accuracy = 0.476 
iter 3: [0.3060967944688875] 
setting: robustm|rf 
Top-1 Accuracy = 0.23604365464830582 
Top-2 Accuracy = 0.397 
iter 4: [0.23604365464830582] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.2321010227986972 
Top-2 Accuracy = 0.392 
iter 5: [0.2321010227986972] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.23650077138449233 
Top-2 Accuracy = 0.398 
iter 6: [0.23650077138449233] 
setting: robusta|rf 
Top-1 Accuracy = 0.2986115079138335 
Top-2 Accuracy = 0.47 
iter 7: [0.2986115079138335] 
setting: robustl|rf 
Top-1 Accuracy = 0.23724358608079538 
Top-2 Accuracy = 0.398 
iter 8: [0.23724358608079538] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.25529969716016226 
Top-2 Accuracy = 0.428 
iter 9: [0.25529969716016226] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.25427118450374264 
Top-2 Accuracy = 0.433 
iter 10: [0.25427118450374264] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.23535797954402607 
Top-2 Accuracy = 0.398 
iter 11: [0.23535797954402607] 
setting: robustL|rf 
Top-1 Accuracy = 0.29929718301811326 
Top-2 Accuracy = 0.473 
iter 12: [0.29929718301811326] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.27192731843894635 
Top-2 Accuracy = 0.437 
iter 13: [0.27192731843894635] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.23524370035997944 
Top-2 Accuracy = 0.398 
iter 14: [0.23524370035997944] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.23295811667904692 
Top-2 Accuracy = 0.396 
iter 15: [0.23295811667904692] 
setting: robustY|rf 
Top-1 Accuracy = 0.30278269813153535 
Top-2 Accuracy = 0.475 
iter 16: [0.30278269813153535] 
setting: normalizej|rf 
Top-1 Accuracy = 0.2990114850579967 
Top-2 Accuracy = 0.473 
iter 17: [0.2990114850579967] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.25649962859265185 
Top-2 Accuracy = 0.436 
iter 18: [0.25649962859265185] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.2739272041597623 
Top-2 Accuracy = 0.44 
iter 19: [0.2739272041597623] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.29815439117764697 
Top-2 Accuracy = 0.473 
iter 20: [0.29815439117764697] 
setting: normalizes|rf 
Top-1 Accuracy = 0.2748414376321353 
Top-2 Accuracy = 0.44 
iter 21: [0.2748414376321353] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.2355865379121193 
Top-2 Accuracy = 0.398 
iter 22: [0.2355865379121193] 
setting: robustD|rf 
Top-1 Accuracy = 0.2748414376321353 
Top-2 Accuracy = 0.44 
iter 23: [0.2748414376321353] 
setting: robustT|rf 
Top-1 Accuracy = 0.23478658362379293 
Top-2 Accuracy = 0.396 
iter 24: [0.23478658362379293] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.2748414376321353 
Top-2 Accuracy = 0.44 
iter 25: [0.2748414376321353] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.2991257642420433 
Top-2 Accuracy = 0.472 
iter 26: [0.2991257642420433] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.2748414376321353 
Top-2 Accuracy = 0.44 
iter 27: [0.2748414376321353] 
setting: robustV|rf 
Top-1 Accuracy = 0.2995828809782298 
Top-2 Accuracy = 0.475 
iter 28: [0.2995828809782298] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.2714702017027598 
Top-2 Accuracy = 0.436 
iter 29: [0.2714702017027598] 
Run # 9 
====== 
setting: standardizem|rf 
Top-1 Accuracy = 0.23432946688760642 
Top-2 Accuracy = 0.396 
iter 0: [0.23432946688760642] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.23678646934460887 
Top-2 Accuracy = 0.397 
iter 1: [0.23678646934460887] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.2363293526084224 
Top-2 Accuracy = 0.397 
iter 2: [0.2363293526084224] 
setting: standardizea|rf 
Top-1 Accuracy = 0.3010113707788126 
Top-2 Accuracy = 0.472 
iter 3: [0.3010113707788126] 
setting: robustc|rf 
Top-1 Accuracy = 0.2714130621107365 
Top-2 Accuracy = 0.436 
iter 4: [0.2714130621107365] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.2714130621107365 
Top-2 Accuracy = 0.436 
iter 5: [0.2714130621107365] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.23604365464830582 
Top-2 Accuracy = 0.397 
iter 6: [0.23604365464830582] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.2567281869607451 
Top-2 Accuracy = 0.437 
iter 7: [0.2567281869607451] 
setting: standardizeh|rf 
Top-1 Accuracy = 0.23050111422204445 
Top-2 Accuracy = 0.392 
iter 8: [0.23050111422204445] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.23501514199188617 
Top-2 Accuracy = 0.395 
iter 9: [0.23501514199188617] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.2562710702245586 
Top-2 Accuracy = 0.434 
iter 10: [0.2562710702245586] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.23678646934460887 
Top-2 Accuracy = 0.397 
iter 11: [0.23678646934460887] 
setting: robusto|rf 
Top-1 Accuracy = 0.30329695445974514 
Top-2 Accuracy = 0.474 
iter 12: [0.30329695445974514] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.25689960573681503 
Top-2 Accuracy = 0.436 
iter 13: [0.25689960573681503] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.23547225872807268 
Top-2 Accuracy = 0.395 
iter 14: [0.23547225872807268] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.23490086280783956 
Top-2 Accuracy = 0.396 
iter 15: [0.23490086280783956] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.27312724987143594 
Top-2 Accuracy = 0.441 
iter 16: [0.27312724987143594] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.27312724987143594 
Top-2 Accuracy = 0.441 
iter 17: [0.27312724987143594] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.3039826295640249 
Top-2 Accuracy = 0.475 
iter 18: [0.3039826295640249] 
setting: robustb|rf 
Top-1 Accuracy = 0.30415404834009485 
Top-2 Accuracy = 0.475 
iter 19: [0.30415404834009485] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.25878521227358436 
Top-2 Accuracy = 0.443 
iter 20: [0.25878521227358436] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.234615164847723 
Top-2 Accuracy = 0.395 
iter 21: [0.234615164847723] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.2531855322552997 
Top-2 Accuracy = 0.435 
iter 22: [0.2531855322552997] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.25512827838409236 
Top-2 Accuracy = 0.434 
iter 23: [0.25512827838409236] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.2721558768070396 
Top-2 Accuracy = 0.438 
iter 24: [0.2721558768070396] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.3023255813953488 
Top-2 Accuracy = 0.474 
iter 25: [0.3023255813953488] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.3022113022113022 
Top-2 Accuracy = 0.474 
iter 26: [0.3022113022113022] 
setting: robustR|rf 
Top-1 Accuracy = 0.2533569510313696 
Top-2 Accuracy = 0.433 
iter 27: [0.2533569510313696] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.2563282098165819 
Top-2 Accuracy = 0.437 
iter 28: [0.2563282098165819] 
setting: robustQ|rf 
Top-1 Accuracy = 0.3022684418033255 
Top-2 Accuracy = 0.474 
iter 29: [0.3022684418033255] 
Run # 10 
======= 
setting: robuste|rf 
Top-1 Accuracy = 0.2721558768070396 
Top-2 Accuracy = 0.438 
iter 0: [0.2721558768070396] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.25044283183818067 
Top-2 Accuracy = 0.426 
iter 1: [0.25044283183818067] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.2535855093994629 
Top-2 Accuracy = 0.436 
iter 2: [0.2535855093994629] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.3084966573338666 
Top-2 Accuracy = 0.481 
iter 3: [0.3084966573338666] 
setting: robustb|rf 
Top-1 Accuracy = 0.27289869150334267 
Top-2 Accuracy = 0.441 
iter 4: [0.27289869150334267] 
setting: robusto|rf 
Top-1 Accuracy = 0.23261527912690702 
Top-2 Accuracy = 0.393 
iter 5: [0.23261527912690702] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.27289869150334267 
Top-2 Accuracy = 0.441 
iter 6: [0.27289869150334267] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.27289869150334267 
Top-2 Accuracy = 0.441 
iter 7: [0.27289869150334267] 
setting: normalizef|rf 
Top-1 Accuracy = 0.25872807268156106 
Top-2 Accuracy = 0.44 
iter 8: [0.25872807268156106] 
setting: standardizet|rf 
Top-1 Accuracy = 0.2735272270155991 
Top-2 Accuracy = 0.442 
iter 9: [0.2735272270155991] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.2567853265527684 
Top-2 Accuracy = 0.439 
iter 10: [0.2567853265527684] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.23747214444888864 
Top-2 Accuracy = 0.4 
iter 11: [0.23747214444888864] 
setting: robustu|rf 
Top-1 Accuracy = 0.23918633220958802 
Top-2 Accuracy = 0.402 
iter 12: [0.23918633220958802] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.23621507342437575 
Top-2 Accuracy = 0.398 
iter 13: [0.23621507342437575] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.30632535283698076 
Top-2 Accuracy = 0.479 
iter 14: [0.30632535283698076] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.30655391120507397 
Top-2 Accuracy = 0.479 
iter 15: [0.30655391120507397] 
setting: robustG|rf 
Top-1 Accuracy = 0.30661105079709733 
Top-2 Accuracy = 0.479 
iter 16: [0.30661105079709733] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.27244157476715614 
Top-2 Accuracy = 0.439 
iter 17: [0.27244157476715614] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.25695674532883833 
Top-2 Accuracy = 0.435 
iter 18: [0.25695674532883833] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.23324381463916347 
Top-2 Accuracy = 0.394 
iter 19: [0.23324381463916347] 
setting: robusta|rf 
Top-1 Accuracy = 0.23615793383235242 
Top-2 Accuracy = 0.399 
iter 20: [0.23615793383235242] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.3068967487572139 
Top-2 Accuracy = 0.478 
iter 21: [0.3068967487572139] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.2722701559910862 
Top-2 Accuracy = 0.441 
iter 22: [0.2722701559910862] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.2722701559910862 
Top-2 Accuracy = 0.441 
iter 23: [0.2722701559910862] 
setting: robustS|rf 
Top-1 Accuracy = 0.25558539512027884 
Top-2 Accuracy = 0.439 
iter 24: [0.25558539512027884] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.3068967487572139 
Top-2 Accuracy = 0.478 
iter 25: [0.3068967487572139] 
setting: normalizey|rf 
Top-1 Accuracy = 0.25558539512027884 
Top-2 Accuracy = 0.441 
iter 26: [0.25558539512027884] 
setting: robusth|rf 
Top-1 Accuracy = 0.30883949488600654 
Top-2 Accuracy = 0.479 
iter 27: [0.30883949488600654] 
setting: robustk|rf 
Top-1 Accuracy = 0.23484372321581623 
Top-2 Accuracy = 0.395 
iter 28: [0.23484372321581623] 
setting: robustB|rf 
Top-1 Accuracy = 0.3087823552939832 
Top-2 Accuracy = 0.479 
iter 29: [0.3087823552939832] 
Run # 11 
======= 
setting: robustF|rf 
Top-1 Accuracy = 0.23124392891834752 
Top-2 Accuracy = 0.393 
iter 0: [0.23124392891834752] 
setting: robustq|rf 
Top-1 Accuracy = 0.25604251185646537 
Top-2 Accuracy = 0.433 
iter 1: [0.25604251185646537] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.2547283012399291 
Top-2 Accuracy = 0.437 
iter 2: [0.2547283012399291] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.27444146048797213 
Top-2 Accuracy = 0.441 
iter 3: [0.27444146048797213] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.27444146048797213 
Top-2 Accuracy = 0.441 
iter 4: [0.27444146048797213] 
setting: normalizei|rf 
Top-1 Accuracy = 0.27912690703388376 
Top-2 Accuracy = 0.442 
iter 5: [0.27912690703388376] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.29969716016227643 
Top-2 Accuracy = 0.47 
iter 6: [0.29969716016227643] 
setting: robustW|rf 
Top-1 Accuracy = 0.2787269298897206 
Top-2 Accuracy = 0.447 
iter 7: [0.2787269298897206] 
setting: standardizem|rf 
Top-1 Accuracy = 0.25381406776755616 
Top-2 Accuracy = 0.431 
iter 8: [0.25381406776755616] 
setting: normalizea|rf 
Top-1 Accuracy = 0.2749557168161819 
Top-2 Accuracy = 0.441 
iter 9: [0.2749557168161819] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.25415690531969604 
Top-2 Accuracy = 0.43 
iter 10: [0.25415690531969604] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.23267241871893035 
Top-2 Accuracy = 0.394 
iter 11: [0.23267241871893035] 
setting: robustS|rf 
Top-1 Accuracy = 0.2752414147762985 
Top-2 Accuracy = 0.44 
iter 12: [0.2752414147762985] 
setting: standardizev|rf 
Top-1 Accuracy = 0.2752414147762985 
Top-2 Accuracy = 0.44 
iter 13: [0.2752414147762985] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.2548997200159991 
Top-2 Accuracy = 0.43 
iter 14: [0.2548997200159991] 
setting: standardizep|rf 
Top-1 Accuracy = 0.25421404491171934 
Top-2 Accuracy = 0.436 
iter 15: [0.25421404491171934] 
setting: standardizel|rf 
Top-1 Accuracy = 0.2752414147762985 
Top-2 Accuracy = 0.44 
iter 16: [0.2752414147762985] 
setting: normalizec|rf 
Top-1 Accuracy = 0.3035826524198617 
Top-2 Accuracy = 0.473 
iter 17: [0.3035826524198617] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.25512827838409236 
Top-2 Accuracy = 0.436 
iter 18: [0.25512827838409236] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.25518541797611566 
Top-2 Accuracy = 0.438 
iter 19: [0.25518541797611566] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.3035255128278384 
Top-2 Accuracy = 0.473 
iter 20: [0.3035255128278384] 
setting: standardizer|rf 
Top-1 Accuracy = 0.27455573967201874 
Top-2 Accuracy = 0.44 
iter 21: [0.27455573967201874] 
setting: robustp|rf 
Top-1 Accuracy = 0.2560996514484887 
Top-2 Accuracy = 0.44 
iter 22: [0.2560996514484887] 
setting: robustf|rf 
Top-1 Accuracy = 0.27455573967201874 
Top-2 Accuracy = 0.44 
iter 23: [0.27455573967201874] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.23655791097651563 
Top-2 Accuracy = 0.397 
iter 24: [0.23655791097651563] 
setting: robustb|rf 
Top-1 Accuracy = 0.3035255128278384 
Top-2 Accuracy = 0.473 
iter 25: [0.3035255128278384] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.2771270213130678 
Top-2 Accuracy = 0.442 
iter 26: [0.2771270213130678] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.30626821324495745 
Top-2 Accuracy = 0.475 
iter 27: [0.30626821324495745] 
setting: normalizez|rf 
Top-1 Accuracy = 0.30541111936460774 
Top-2 Accuracy = 0.476 
iter 28: [0.30541111936460774] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.2563282098165819 
Top-2 Accuracy = 0.434 
iter 29: [0.2563282098165819] 
Run # 12 
======= 
setting: maxabsR|rf 
Top-1 Accuracy = 0.27284155191131937 
Top-2 Accuracy = 0.437 
iter 0: [0.27284155191131937] 
setting: robustx|rf 
Top-1 Accuracy = 0.2510713673504371 
Top-2 Accuracy = 0.42 
iter 1: [0.2510713673504371] 
setting: normalizei|rf 
Top-1 Accuracy = 0.3034112336437918 
Top-2 Accuracy = 0.475 
iter 2: [0.3034112336437918] 
setting: standardized|rf 
Top-1 Accuracy = 0.23541511913604937 
Top-2 Accuracy = 0.397 
iter 3: [0.23541511913604937] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.23095823095823095 
Top-2 Accuracy = 0.392 
iter 4: [0.23095823095823095] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.2998114393463231 
Top-2 Accuracy = 0.47 
iter 5: [0.2998114393463231] 
setting: standardizez|rf 
Top-1 Accuracy = 0.25535683675218557 
Top-2 Accuracy = 0.44 
iter 6: [0.25535683675218557] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.2736415061996457 
Top-2 Accuracy = 0.439 
iter 7: [0.2736415061996457] 
setting: robustn|rf 
Top-1 Accuracy = 0.2736415061996457 
Top-2 Accuracy = 0.439 
iter 8: [0.2736415061996457] 
setting: standardizen|rf 
Top-1 Accuracy = 0.23472944403176962 
Top-2 Accuracy = 0.397 
iter 9: [0.23472944403176962] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.2540997657276727 
Top-2 Accuracy = 0.432 
iter 10: [0.2540997657276727] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.25438546368778925 
Top-2 Accuracy = 0.434 
iter 11: [0.25438546368778925] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.2356436775041426 
Top-2 Accuracy = 0.396 
iter 12: [0.2356436775041426] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.2546711616479058 
Top-2 Accuracy = 0.438 
iter 13: [0.2546711616479058] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.23175818524655734 
Top-2 Accuracy = 0.392 
iter 14: [0.23175818524655734] 
setting: robustc|rf 
Top-1 Accuracy = 0.2737557853836924 
Top-2 Accuracy = 0.439 
iter 15: [0.2737557853836924] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.2576424204331181 
Top-2 Accuracy = 0.435 
iter 16: [0.2576424204331181] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.3074110050854237 
Top-2 Accuracy = 0.476 
iter 17: [0.3074110050854237] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.3051825609965145 
Top-2 Accuracy = 0.473 
iter 18: [0.3051825609965145] 
setting: normalizem|rf 
Top-1 Accuracy = 0.27329866864750585 
Top-2 Accuracy = 0.44 
iter 19: [0.27329866864750585] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.23472944403176962 
Top-2 Accuracy = 0.396 
iter 20: [0.23472944403176962] 
setting: robustU|rf 
Top-1 Accuracy = 0.3038683503799783 
Top-2 Accuracy = 0.473 
iter 21: [0.3038683503799783] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.27187017884692305 
Top-2 Accuracy = 0.436 
iter 22: [0.27187017884692305] 
setting: robustV|rf 
Top-1 Accuracy = 0.23090109136620765 
Top-2 Accuracy = 0.391 
iter 23: [0.23090109136620765] 
setting: normalizex|rf 
Top-1 Accuracy = 0.25735672247300156 
Top-2 Accuracy = 0.437 
iter 24: [0.25735672247300156] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.2725558539512028 
Top-2 Accuracy = 0.436 
iter 25: [0.2725558539512028] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.23364379178332667 
Top-2 Accuracy = 0.396 
iter 26: [0.23364379178332667] 
setting: standardizea|rf 
Top-1 Accuracy = 0.2725558539512028 
Top-2 Accuracy = 0.436 
iter 27: [0.2725558539512028] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.2338152105593966 
Top-2 Accuracy = 0.397 
iter 28: [0.2338152105593966] 
setting: normalizen|rf 
Top-1 Accuracy = 0.27546997314439176 
Top-2 Accuracy = 0.441 
iter 29: [0.27546997314439176] 
Run # 13 
======= 
setting: minmaxy|rf 
Top-1 Accuracy = 0.23472944403176962 
Top-2 Accuracy = 0.396 
iter 0: [0.23472944403176962] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.27409862293583226 
Top-2 Accuracy = 0.44 
iter 1: [0.27409862293583226] 
setting: normalizef|rf 
Top-1 Accuracy = 0.2595851665619108 
Top-2 Accuracy = 0.44 
iter 2: [0.2595851665619108] 
setting: normalizer|rf 
Top-1 Accuracy = 0.27592708988057824 
Top-2 Accuracy = 0.442 
iter 3: [0.27592708988057824] 
setting: standardizei|rf 
Top-1 Accuracy = 0.2547283012399291 
Top-2 Accuracy = 0.437 
iter 4: [0.2547283012399291] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.2531855322552997 
Top-2 Accuracy = 0.436 
iter 5: [0.2531855322552997] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.27592708988057824 
Top-2 Accuracy = 0.442 
iter 6: [0.27592708988057824] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.22707273870064568 
Top-2 Accuracy = 0.388 
iter 7: [0.22707273870064568] 
setting: normalized|rf 
Top-1 Accuracy = 0.25341409062339293 
Top-2 Accuracy = 0.436 
iter 8: [0.25341409062339293] 
setting: robustr|rf 
Top-1 Accuracy = 0.2355865379121193 
Top-2 Accuracy = 0.398 
iter 9: [0.2355865379121193] 
setting: standardizey|rf 
Top-1 Accuracy = 0.2747271584480887 
Top-2 Accuracy = 0.44 
iter 10: [0.2747271584480887] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.2540997657276727 
Top-2 Accuracy = 0.43 
iter 11: [0.2540997657276727] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.23135820810239416 
Top-2 Accuracy = 0.393 
iter 12: [0.23135820810239416] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.25438546368778925 
Top-2 Accuracy = 0.432 
iter 13: [0.25438546368778925] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.23272955831095365 
Top-2 Accuracy = 0.393 
iter 14: [0.23272955831095365] 
setting: standardizer|rf 
Top-1 Accuracy = 0.3003828352665562 
Top-2 Accuracy = 0.474 
iter 15: [0.3003828352665562] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.3007828124107194 
Top-2 Accuracy = 0.474 
iter 16: [0.3007828124107194] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.25769956002514144 
Top-2 Accuracy = 0.437 
iter 17: [0.25769956002514144] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.25307125307125306 
Top-2 Accuracy = 0.434 
iter 18: [0.25307125307125306] 
setting: standardizec|rf 
Top-1 Accuracy = 0.23667219016056226 
Top-2 Accuracy = 0.396 
iter 19: [0.23667219016056226] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.23347237300725673 
Top-2 Accuracy = 0.393 
iter 20: [0.23347237300725673] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.3024970001714188 
Top-2 Accuracy = 0.475 
iter 21: [0.3024970001714188] 
setting: standardizea|rf 
Top-1 Accuracy = 0.23232958116679048 
Top-2 Accuracy = 0.392 
iter 22: [0.23232958116679048] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.27449860007999544 
Top-2 Accuracy = 0.439 
iter 23: [0.27449860007999544] 
setting: robustc|rf 
Top-1 Accuracy = 0.23450088566367636 
Top-2 Accuracy = 0.395 
iter 24: [0.23450088566367636] 
setting: robustT|rf 
Top-1 Accuracy = 0.27449860007999544 
Top-2 Accuracy = 0.439 
iter 25: [0.27449860007999544] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.2351294211759328 
Top-2 Accuracy = 0.396 
iter 26: [0.2351294211759328] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.27289869150334267 
Top-2 Accuracy = 0.438 
iter 27: [0.27289869150334267] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.25209988000685674 
Top-2 Accuracy = 0.439 
iter 28: [0.25209988000685674] 
setting: robustz|rf 
Top-1 Accuracy = 0.27289869150334267 
Top-2 Accuracy = 0.438 
iter 29: [0.27289869150334267] 
Run # 14 
======= 
setting: robustd|rf 
Top-1 Accuracy = 0.27289869150334267 
Top-2 Accuracy = 0.438 
iter 0: [0.27289869150334267] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.3047825838523513 
Top-2 Accuracy = 0.476 
iter 1: [0.3047825838523513] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.2333009542311868 
Top-2 Accuracy = 0.395 
iter 2: [0.2333009542311868] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.253242671847323 
Top-2 Accuracy = 0.436 
iter 3: [0.253242671847323] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.23307239586309353 
Top-2 Accuracy = 0.395 
iter 4: [0.23307239586309353] 
setting: robustl|rf 
Top-1 Accuracy = 0.30643963202102736 
Top-2 Accuracy = 0.477 
iter 5: [0.30643963202102736] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.30638249242900406 
Top-2 Accuracy = 0.477 
iter 6: [0.30638249242900406] 
setting: robustZ|rf 
Top-1 Accuracy = 0.2363864922004457 
Top-2 Accuracy = 0.397 
iter 7: [0.2363864922004457] 
setting: robusti|rf 
Top-1 Accuracy = 0.27232729558310953 
Top-2 Accuracy = 0.438 
iter 8: [0.27232729558310953] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.30638249242900406 
Top-2 Accuracy = 0.477 
iter 9: [0.30638249242900406] 
setting: robustH|rf 
Top-1 Accuracy = 0.2333009542311868 
Top-2 Accuracy = 0.394 
iter 10: [0.2333009542311868] 
setting: standardizel|rf 
Top-1 Accuracy = 0.30643963202102736 
Top-2 Accuracy = 0.477 
iter 11: [0.30643963202102736] 
setting: robustN|rf 
Top-1 Accuracy = 0.30655391120507397 
Top-2 Accuracy = 0.477 
iter 12: [0.30655391120507397] 
setting: robustn|rf 
Top-1 Accuracy = 0.2356436775041426 
Top-2 Accuracy = 0.398 
iter 13: [0.2356436775041426] 
setting: normalizes|rf 
Top-1 Accuracy = 0.2704988286383635 
Top-2 Accuracy = 0.435 
iter 14: [0.2704988286383635] 
setting: robustg|rf 
Top-1 Accuracy = 0.29935432261013656 
Top-2 Accuracy = 0.472 
iter 15: [0.29935432261013656] 
setting: robustJ|rf 
Top-1 Accuracy = 0.2704988286383635 
Top-2 Accuracy = 0.435 
iter 16: [0.2704988286383635] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.2704988286383635 
Top-2 Accuracy = 0.435 
iter 17: [0.2704988286383635] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.25427118450374264 
Top-2 Accuracy = 0.434 
iter 18: [0.25427118450374264] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.27335580823952915 
Top-2 Accuracy = 0.437 
iter 19: [0.27335580823952915] 
setting: standardizex|rf 
Top-1 Accuracy = 0.2333009542311868 
Top-2 Accuracy = 0.395 
iter 20: [0.2333009542311868] 
setting: robustV|rf 
Top-1 Accuracy = 0.23295811667904692 
Top-2 Accuracy = 0.394 
iter 21: [0.23295811667904692] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.3016970458830924 
Top-2 Accuracy = 0.474 
iter 22: [0.3016970458830924] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.3011827895548826 
Top-2 Accuracy = 0.471 
iter 23: [0.3011827895548826] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.25432832409576595 
Top-2 Accuracy = 0.438 
iter 24: [0.25432832409576595] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.23650077138449233 
Top-2 Accuracy = 0.397 
iter 25: [0.23650077138449233] 
setting: normalizef|rf 
Top-1 Accuracy = 0.23501514199188617 
Top-2 Accuracy = 0.397 
iter 26: [0.23501514199188617] 
setting: minmaxw|rf 
Top-1 Accuracy = 0.2998685789383464 
Top-2 Accuracy = 0.47 
iter 27: [0.2998685789383464] 
setting: robustQ|rf 
Top-1 Accuracy = 0.2533569510313696 
Top-2 Accuracy = 0.435 
iter 28: [0.2533569510313696] 
setting: robustB|rf 
Top-1 Accuracy = 0.251414204902577 
Top-2 Accuracy = 0.428 
iter 29: [0.251414204902577] 
Run # 15 
======= 
setting: normalizeM|rf 
Top-1 Accuracy = 0.2715273412947832 
Top-2 Accuracy = 0.438 
iter 0: [0.2715273412947832] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.2715273412947832 
Top-2 Accuracy = 0.438 
iter 1: [0.2715273412947832] 
setting: robustZ|rf 
Top-1 Accuracy = 0.2715273412947832 
Top-2 Accuracy = 0.438 
iter 2: [0.2715273412947832] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.257071024512885 
Top-2 Accuracy = 0.439 
iter 3: [0.257071024512885] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.2752985543683218 
Top-2 Accuracy = 0.439 
iter 4: [0.2752985543683218] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.2752985543683218 
Top-2 Accuracy = 0.439 
iter 5: [0.2752985543683218] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.2752985543683218 
Top-2 Accuracy = 0.439 
iter 6: [0.2752985543683218] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.2545568824638592 
Top-2 Accuracy = 0.44 
iter 7: [0.2545568824638592] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.2482715273412948 
Top-2 Accuracy = 0.418 
iter 8: [0.2482715273412948] 
setting: robustx|rf 
Top-1 Accuracy = 0.23227244157476715 
Top-2 Accuracy = 0.392 
iter 9: [0.23227244157476715] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.2752985543683218 
Top-2 Accuracy = 0.439 
iter 10: [0.2752985543683218] 
setting: robustC|rf 
Top-1 Accuracy = 0.2752985543683218 
Top-2 Accuracy = 0.439 
iter 11: [0.2752985543683218] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.29924004342608995 
Top-2 Accuracy = 0.47 
iter 12: [0.29924004342608995] 
setting: standardizek|rf 
Top-1 Accuracy = 0.2752985543683218 
Top-2 Accuracy = 0.439 
iter 13: [0.2752985543683218] 
setting: robusto|rf 
Top-1 Accuracy = 0.2345580252556997 
Top-2 Accuracy = 0.397 
iter 14: [0.2345580252556997] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.23255813953488372 
Top-2 Accuracy = 0.396 
iter 15: [0.23255813953488372] 
setting: normalizex|rf 
Top-1 Accuracy = 0.27415576252785556 
Top-2 Accuracy = 0.437 
iter 16: [0.27415576252785556] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.27415576252785556 
Top-2 Accuracy = 0.437 
iter 17: [0.27415576252785556] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.27415576252785556 
Top-2 Accuracy = 0.437 
iter 18: [0.27415576252785556] 
setting: robustp|rf 
Top-1 Accuracy = 0.29821153076967033 
Top-2 Accuracy = 0.467 
iter 19: [0.29821153076967033] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.23752928404091195 
Top-2 Accuracy = 0.397 
iter 20: [0.23752928404091195] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.23707216730472544 
Top-2 Accuracy = 0.397 
iter 21: [0.23707216730472544] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.2583280955373979 
Top-2 Accuracy = 0.439 
iter 22: [0.2583280955373979] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.256156791040512 
Top-2 Accuracy = 0.44 
iter 23: [0.256156791040512] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.25889949145763097 
Top-2 Accuracy = 0.436 
iter 24: [0.25889949145763097] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.23250099994286041 
Top-2 Accuracy = 0.393 
iter 25: [0.23250099994286041] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.29792583280955376 
Top-2 Accuracy = 0.467 
iter 26: [0.29792583280955376] 
setting: normalizea|rf 
Top-1 Accuracy = 0.2558710930803954 
Top-2 Accuracy = 0.435 
iter 27: [0.2558710930803954] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.2572424432889549 
Top-2 Accuracy = 0.436 
iter 28: [0.2572424432889549] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.27552711273641506 
Top-2 Accuracy = 0.439 
iter 29: [0.27552711273641506] 
Run # 16 
======= 
setting: normalizeh|rf 
Top-1 Accuracy = 0.27312724987143594 
Top-2 Accuracy = 0.437 
iter 0: [0.27312724987143594] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.25695674532883833 
Top-2 Accuracy = 0.432 
iter 1: [0.25695674532883833] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.2986686475058568 
Top-2 Accuracy = 0.467 
iter 2: [0.2986686475058568] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.23610079424032912 
Top-2 Accuracy = 0.398 
iter 3: [0.23610079424032912] 
setting: robusto|rf 
Top-1 Accuracy = 0.2986115079138335 
Top-2 Accuracy = 0.467 
iter 4: [0.2986115079138335] 
setting: maxabss|rf 
Top-1 Accuracy = 0.23844351751328496 
Top-2 Accuracy = 0.398 
iter 5: [0.23844351751328496] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.25867093308953776 
Top-2 Accuracy = 0.442 
iter 6: [0.25867093308953776] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.27312724987143594 
Top-2 Accuracy = 0.437 
iter 7: [0.27312724987143594] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.23404376892748985 
Top-2 Accuracy = 0.395 
iter 8: [0.23404376892748985] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.256156791040512 
Top-2 Accuracy = 0.436 
iter 9: [0.256156791040512] 
setting: robustm|rf 
Top-1 Accuracy = 0.23415804811153648 
Top-2 Accuracy = 0.395 
iter 10: [0.23415804811153648] 
setting: standardizee|rf 
Top-1 Accuracy = 0.272955831095366 
Top-2 Accuracy = 0.438 
iter 11: [0.272955831095366] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.29849722872978685 
Top-2 Accuracy = 0.472 
iter 12: [0.29849722872978685] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.25507113879206905 
Top-2 Accuracy = 0.431 
iter 13: [0.25507113879206905] 
setting: standardizev|rf 
Top-1 Accuracy = 0.272955831095366 
Top-2 Accuracy = 0.438 
iter 14: [0.272955831095366] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.29844008913776354 
Top-2 Accuracy = 0.472 
iter 15: [0.29844008913776354] 
setting: standardizel|rf 
Top-1 Accuracy = 0.23147248728644076 
Top-2 Accuracy = 0.394 
iter 16: [0.23147248728644076] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.23627221301639906 
Top-2 Accuracy = 0.398 
iter 17: [0.23627221301639906] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.2547283012399291 
Top-2 Accuracy = 0.438 
iter 18: [0.2547283012399291] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.29821153076967033 
Top-2 Accuracy = 0.471 
iter 19: [0.29821153076967033] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.2991257642420433 
Top-2 Accuracy = 0.471 
iter 20: [0.2991257642420433] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.2715273412947832 
Top-2 Accuracy = 0.436 
iter 21: [0.2715273412947832] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.25689960573681503 
Top-2 Accuracy = 0.439 
iter 22: [0.25689960573681503] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.25741386206502487 
Top-2 Accuracy = 0.44 
iter 23: [0.25741386206502487] 
setting: normalizep|rf 
Top-1 Accuracy = 0.2703274098622936 
Top-2 Accuracy = 0.437 
iter 24: [0.2703274098622936] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.2987829266899034 
Top-2 Accuracy = 0.471 
iter 25: [0.2987829266899034] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.2989543454659734 
Top-2 Accuracy = 0.471 
iter 26: [0.2989543454659734] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.2703274098622936 
Top-2 Accuracy = 0.437 
iter 27: [0.2703274098622936] 
setting: robustz|rf 
Top-1 Accuracy = 0.29906862465002 
Top-2 Accuracy = 0.471 
iter 28: [0.29906862465002] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.2703274098622936 
Top-2 Accuracy = 0.437 
iter 29: [0.2703274098622936] 
Run # 17 
======= 
setting: standardizej|rf 
Top-1 Accuracy = 0.23718644648877207 
Top-2 Accuracy = 0.399 
iter 0: [0.23718644648877207] 
setting: robustx|rf 
Top-1 Accuracy = 0.2369578881206788 
Top-2 Accuracy = 0.398 
iter 1: [0.2369578881206788] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.29838294954574024 
Top-2 Accuracy = 0.469 
iter 2: [0.29838294954574024] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.2714702017027598 
Top-2 Accuracy = 0.436 
iter 3: [0.2714702017027598] 
setting: normalizef|rf 
Top-1 Accuracy = 0.2999257185303697 
Top-2 Accuracy = 0.468 
iter 4: [0.2999257185303697] 
setting: robustZ|rf 
Top-1 Accuracy = 0.23587223587223588 
Top-2 Accuracy = 0.397 
iter 5: [0.23587223587223588] 
setting: normalizez|rf 
Top-1 Accuracy = 0.23712930689674877 
Top-2 Accuracy = 0.397 
iter 6: [0.23712930689674877] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.25667104736872176 
Top-2 Accuracy = 0.434 
iter 7: [0.25667104736872176] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.2536426489914862 
Top-2 Accuracy = 0.437 
iter 8: [0.2536426489914862] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.2571281641049083 
Top-2 Accuracy = 0.44 
iter 9: [0.2571281641049083] 
setting: standardizes|rf 
Top-1 Accuracy = 0.26884178046968743 
Top-2 Accuracy = 0.431 
iter 10: [0.26884178046968743] 
setting: normalizey|rf 
Top-1 Accuracy = 0.29929718301811326 
Top-2 Accuracy = 0.469 
iter 11: [0.29929718301811326] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.26964173475801384 
Top-2 Accuracy = 0.432 
iter 12: [0.26964173475801384] 
setting: standardizew|rf 
Top-1 Accuracy = 0.23232958116679048 
Top-2 Accuracy = 0.392 
iter 13: [0.23232958116679048] 
setting: robustC|rf 
Top-1 Accuracy = 0.29935432261013656 
Top-2 Accuracy = 0.469 
iter 14: [0.29935432261013656] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.23261527912690702 
Top-2 Accuracy = 0.393 
iter 15: [0.23261527912690702] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.23667219016056226 
Top-2 Accuracy = 0.397 
iter 16: [0.23667219016056226] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.270213130678247 
Top-2 Accuracy = 0.434 
iter 17: [0.270213130678247] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.270213130678247 
Top-2 Accuracy = 0.434 
iter 18: [0.270213130678247] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.270213130678247 
Top-2 Accuracy = 0.434 
iter 19: [0.270213130678247] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.270213130678247 
Top-2 Accuracy = 0.434 
iter 20: [0.270213130678247] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.29832580995371694 
Top-2 Accuracy = 0.468 
iter 21: [0.29832580995371694] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.23495800239986286 
Top-2 Accuracy = 0.397 
iter 22: [0.23495800239986286] 
setting: robusto|rf 
Top-1 Accuracy = 0.23438660647962972 
Top-2 Accuracy = 0.395 
iter 23: [0.23438660647962972] 
setting: standardizen|rf 
Top-1 Accuracy = 0.2704988286383635 
Top-2 Accuracy = 0.434 
iter 24: [0.2704988286383635] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.2704988286383635 
Top-2 Accuracy = 0.434 
iter 25: [0.2704988286383635] 
setting: robustE|rf 
Top-1 Accuracy = 0.23524370035997944 
Top-2 Accuracy = 0.397 
iter 26: [0.23524370035997944] 
setting: robustd|rf 
Top-1 Accuracy = 0.2704988286383635 
Top-2 Accuracy = 0.434 
iter 27: [0.2704988286383635] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.29592594708873776 
Top-2 Accuracy = 0.465 
iter 28: [0.29592594708873776] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.2512999257185304 
Top-2 Accuracy = 0.434 
iter 29: [0.2512999257185304] 
Run # 18 
======= 
setting: robustQ|rf 
Top-1 Accuracy = 0.29621164504885433 
Top-2 Accuracy = 0.463 
iter 0: [0.29621164504885433] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.29592594708873776 
Top-2 Accuracy = 0.465 
iter 1: [0.29592594708873776] 
setting: standardizea|rf 
Top-1 Accuracy = 0.2547283012399291 
Top-2 Accuracy = 0.434 
iter 2: [0.2547283012399291] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.2704988286383635 
Top-2 Accuracy = 0.434 
iter 3: [0.2704988286383635] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.2704988286383635 
Top-2 Accuracy = 0.434 
iter 4: [0.2704988286383635] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.2310725101422776 
Top-2 Accuracy = 0.392 
iter 5: [0.2310725101422776] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.2338723501514199 
Top-2 Accuracy = 0.397 
iter 6: [0.2338723501514199] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.29592594708873776 
Top-2 Accuracy = 0.465 
iter 7: [0.29592594708873776] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.23244386035083708 
Top-2 Accuracy = 0.394 
iter 8: [0.23244386035083708] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.27055596823038686 
Top-2 Accuracy = 0.437 
iter 9: [0.27055596823038686] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.25655676818467515 
Top-2 Accuracy = 0.438 
iter 10: [0.25655676818467515] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.27055596823038686 
Top-2 Accuracy = 0.437 
iter 11: [0.27055596823038686] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.27055596823038686 
Top-2 Accuracy = 0.437 
iter 12: [0.27055596823038686] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.29312610707959547 
Top-2 Accuracy = 0.467 
iter 13: [0.29312610707959547] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.27055596823038686 
Top-2 Accuracy = 0.437 
iter 14: [0.27055596823038686] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.23181532483858067 
Top-2 Accuracy = 0.394 
iter 15: [0.23181532483858067] 
setting: normalizek|rf 
Top-1 Accuracy = 0.270213130678247 
Top-2 Accuracy = 0.435 
iter 16: [0.270213130678247] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.270213130678247 
Top-2 Accuracy = 0.435 
iter 17: [0.270213130678247] 
setting: robustv|rf 
Top-1 Accuracy = 0.299982858122393 
Top-2 Accuracy = 0.473 
iter 18: [0.299982858122393] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.29924004342608995 
Top-2 Accuracy = 0.473 
iter 19: [0.29924004342608995] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.29832580995371694 
Top-2 Accuracy = 0.471 
iter 20: [0.29832580995371694] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.270213130678247 
Top-2 Accuracy = 0.435 
iter 21: [0.270213130678247] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.29318324667161877 
Top-2 Accuracy = 0.467 
iter 22: [0.29318324667161877] 
setting: normalizev|rf 
Top-1 Accuracy = 0.2704988286383635 
Top-2 Accuracy = 0.434 
iter 23: [0.2704988286383635] 
setting: robustk|rf 
Top-1 Accuracy = 0.23592937546425918 
Top-2 Accuracy = 0.395 
iter 24: [0.23592937546425918] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.2959830866807611 
Top-2 Accuracy = 0.465 
iter 25: [0.2959830866807611] 
setting: normalizem|rf 
Top-1 Accuracy = 0.29701159933718074 
Top-2 Accuracy = 0.472 
iter 26: [0.29701159933718074] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.2522141591909034 
Top-2 Accuracy = 0.423 
iter 27: [0.2522141591909034] 
setting: normalizes|rf 
Top-1 Accuracy = 0.2700988514942003 
Top-2 Accuracy = 0.436 
iter 28: [0.2700988514942003] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.25695674532883833 
Top-2 Accuracy = 0.429 
iter 29: [0.25695674532883833] 
Run # 19 
======= 
setting: standardizen|rf 
Top-1 Accuracy = 0.25507113879206905 
Top-2 Accuracy = 0.433 
iter 0: [0.25507113879206905] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.27209873721501626 
Top-2 Accuracy = 0.437 
iter 1: [0.27209873721501626] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.3009542311867893 
Top-2 Accuracy = 0.469 
iter 2: [0.3009542311867893] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.27209873721501626 
Top-2 Accuracy = 0.437 
iter 3: [0.27209873721501626] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.30021141649048627 
Top-2 Accuracy = 0.471 
iter 4: [0.30021141649048627] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.2527284155191132 
Top-2 Accuracy = 0.435 
iter 5: [0.2527284155191132] 
setting: standardizec|rf 
Top-1 Accuracy = 0.2351294211759328 
Top-2 Accuracy = 0.396 
iter 6: [0.2351294211759328] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.23272955831095365 
Top-2 Accuracy = 0.395 
iter 7: [0.23272955831095365] 
setting: normalizew|rf 
Top-1 Accuracy = 0.23604365464830582 
Top-2 Accuracy = 0.398 
iter 8: [0.23604365464830582] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.2536426489914862 
Top-2 Accuracy = 0.436 
iter 9: [0.2536426489914862] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.23495800239986286 
Top-2 Accuracy = 0.397 
iter 10: [0.23495800239986286] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.30106851037083593 
Top-2 Accuracy = 0.471 
iter 11: [0.30106851037083593] 
setting: robustQ|rf 
Top-1 Accuracy = 0.27238443517513283 
Top-2 Accuracy = 0.436 
iter 12: [0.27238443517513283] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.27238443517513283 
Top-2 Accuracy = 0.436 
iter 13: [0.27238443517513283] 
setting: maxabse|rf 
Top-1 Accuracy = 0.2549568596080224 
Top-2 Accuracy = 0.437 
iter 14: [0.2549568596080224] 
setting: robustH|rf 
Top-1 Accuracy = 0.2537569281755328 
Top-2 Accuracy = 0.435 
iter 15: [0.2537569281755328] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.25741386206502487 
Top-2 Accuracy = 0.434 
iter 16: [0.25741386206502487] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.2531855322552997 
Top-2 Accuracy = 0.427 
iter 17: [0.2531855322552997] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.3009542311867893 
Top-2 Accuracy = 0.469 
iter 18: [0.3009542311867893] 
setting: robustF|rf 
Top-1 Accuracy = 0.2346723044397463 
Top-2 Accuracy = 0.397 
iter 19: [0.2346723044397463] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.27238443517513283 
Top-2 Accuracy = 0.436 
iter 20: [0.27238443517513283] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.3011256499628593 
Top-2 Accuracy = 0.471 
iter 21: [0.3011256499628593] 
setting: normalizee|rf 
Top-1 Accuracy = 0.2548425804239758 
Top-2 Accuracy = 0.434 
iter 22: [0.2548425804239758] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.23444374607165305 
Top-2 Accuracy = 0.395 
iter 23: [0.23444374607165305] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.30181132506713904 
Top-2 Accuracy = 0.471 
iter 24: [0.30181132506713904] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.30181132506713904 
Top-2 Accuracy = 0.472 
iter 25: [0.30181132506713904] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.2532998114393463 
Top-2 Accuracy = 0.434 
iter 26: [0.2532998114393463] 
setting: robustz|rf 
Top-1 Accuracy = 0.2715844808868065 
Top-2 Accuracy = 0.436 
iter 27: [0.2715844808868065] 
setting: robustn|rf 
Top-1 Accuracy = 0.30192560425118564 
Top-2 Accuracy = 0.472 
iter 28: [0.30192560425118564] 
setting: robustK|rf 
Top-1 Accuracy = 0.30152562710702246 
Top-2 Accuracy = 0.471 
iter 29: [0.30152562710702246] 
 
Median top-1 = 0.2704988286383635 
Median top-2 = 0.439 
9 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=29), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=94), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=90), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=44), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=41), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=53), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=28), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=39), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=27), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=19), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=72), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=78), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=91), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=13), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=33), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=90), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=31), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=93), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=32), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=46), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=39), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=16), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=62), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=20), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=36), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=83), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=21), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=18), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=29), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=95), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=83), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=92), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=61), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=53), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=61), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=89), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=28), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=80), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=67), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=46), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=69), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=46), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=69), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=56), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: normalizef|rf 
Top-1 Accuracy = 0.24718587509285184 
Top-2 Accuracy = 0.402 
iter 0: [0.24718587509285184] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.24798582938117822 
Top-2 Accuracy = 0.4 
iter 1: [0.24798582938117822] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.2632421004514028 
Top-2 Accuracy = 0.388 
iter 2: [0.2632421004514028] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.2880406833895206 
Top-2 Accuracy = 0.443 
iter 3: [0.2880406833895206] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.2937546425918519 
Top-2 Accuracy = 0.449 
iter 4: [0.2937546425918519] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.2937546425918519 
Top-2 Accuracy = 0.449 
iter 5: [0.2937546425918519] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.21947317296154506 
Top-2 Accuracy = 0.368 
iter 6: [0.21947317296154506] 
setting: robustE|rf 
Top-1 Accuracy = 0.2505571110222273 
Top-2 Accuracy = 0.393 
iter 7: [0.2505571110222273] 
setting: normalizej|rf 
Top-1 Accuracy = 0.29935432261013656 
Top-2 Accuracy = 0.459 
iter 8: [0.29935432261013656] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.217816124792869 
Top-2 Accuracy = 0.368 
iter 9: [0.217816124792869] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.2673561510770813 
Top-2 Accuracy = 0.414 
iter 10: [0.2673561510770813] 
setting: robusti|rf 
Top-1 Accuracy = 0.29821153076967033 
Top-2 Accuracy = 0.456 
iter 11: [0.29821153076967033] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.2673561510770813 
Top-2 Accuracy = 0.414 
iter 12: [0.2673561510770813] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.2673561510770813 
Top-2 Accuracy = 0.414 
iter 13: [0.2673561510770813] 
setting: normalizex|rf 
Top-1 Accuracy = 0.2694131763899206 
Top-2 Accuracy = 0.42 
iter 14: [0.2694131763899206] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.2166161933603794 
Top-2 Accuracy = 0.367 
iter 15: [0.2166161933603794] 
setting: robustI|rf 
Top-1 Accuracy = 0.30301125649962857 
Top-2 Accuracy = 0.463 
iter 16: [0.30301125649962857] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.2694131763899206 
Top-2 Accuracy = 0.42 
iter 17: [0.2694131763899206] 
setting: standardizev|rf 
Top-1 Accuracy = 0.3024970001714188 
Top-2 Accuracy = 0.463 
iter 18: [0.3024970001714188] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.3014113479229758 
Top-2 Accuracy = 0.462 
iter 19: [0.3014113479229758] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.2165590537683561 
Top-2 Accuracy = 0.364 
iter 20: [0.2165590537683561] 
setting: robustu|rf 
Top-1 Accuracy = 0.25232843837495 
Top-2 Accuracy = 0.403 
iter 21: [0.25232843837495] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.217816124792869 
Top-2 Accuracy = 0.367 
iter 22: [0.217816124792869] 
setting: robustR|rf 
Top-1 Accuracy = 0.21913033540940519 
Top-2 Accuracy = 0.369 
iter 23: [0.21913033540940519] 
setting: robustA|rf 
Top-1 Accuracy = 0.3024398605793955 
Top-2 Accuracy = 0.463 
iter 24: [0.3024398605793955] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.25312839266327636 
Top-2 Accuracy = 0.405 
iter 25: [0.25312839266327636] 
setting: robustf|rf 
Top-1 Accuracy = 0.21295925947088737 
Top-2 Accuracy = 0.361 
iter 26: [0.21295925947088737] 
setting: standardizec|rf 
Top-1 Accuracy = 0.21227358436660762 
Top-2 Accuracy = 0.362 
iter 27: [0.21227358436660762] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.25307125307125306 
Top-2 Accuracy = 0.407 
iter 28: [0.25307125307125306] 
setting: robustL|rf 
Top-1 Accuracy = 0.21998742928975487 
Top-2 Accuracy = 0.369 
iter 29: [0.21998742928975487] 
Run # 1 
====== 
setting: robustT|rf 
Top-1 Accuracy = 0.3023255813953488 
Top-2 Accuracy = 0.463 
iter 0: [0.3023255813953488] 
setting: robustR|rf 
Top-1 Accuracy = 0.21690189132049598 
Top-2 Accuracy = 0.366 
iter 1: [0.21690189132049598] 
setting: robustF|rf 
Top-1 Accuracy = 0.2694131763899206 
Top-2 Accuracy = 0.42 
iter 2: [0.2694131763899206] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.2694131763899206 
Top-2 Accuracy = 0.42 
iter 3: [0.2694131763899206] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.25067139020627394 
Top-2 Accuracy = 0.402 
iter 4: [0.25067139020627394] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.30283983772355866 
Top-2 Accuracy = 0.463 
iter 5: [0.30283983772355866] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.2699845723101537 
Top-2 Accuracy = 0.421 
iter 6: [0.2699845723101537] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.25072852979829724 
Top-2 Accuracy = 0.404 
iter 7: [0.25072852979829724] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.2493000399977144 
Top-2 Accuracy = 0.4 
iter 8: [0.2493000399977144] 
setting: robustp|rf 
Top-1 Accuracy = 0.21467344723158677 
Top-2 Accuracy = 0.363 
iter 9: [0.21467344723158677] 
setting: normalizea|rf 
Top-1 Accuracy = 0.2134735157990972 
Top-2 Accuracy = 0.364 
iter 10: [0.2134735157990972] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.21387349294326038 
Top-2 Accuracy = 0.362 
iter 11: [0.21387349294326038] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.2714702017027598 
Top-2 Accuracy = 0.422 
iter 12: [0.2714702017027598] 
setting: robustX|rf 
Top-1 Accuracy = 0.2714702017027598 
Top-2 Accuracy = 0.422 
iter 13: [0.2714702017027598] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.2714702017027598 
Top-2 Accuracy = 0.422 
iter 14: [0.2714702017027598] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.2714702017027598 
Top-2 Accuracy = 0.422 
iter 15: [0.2714702017027598] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.24941431918176105 
Top-2 Accuracy = 0.399 
iter 16: [0.24941431918176105] 
setting: standardizex|rf 
Top-1 Accuracy = 0.28295525969944574 
Top-2 Accuracy = 0.452 
iter 17: [0.28295525969944574] 
setting: standardizeh|rf 
Top-1 Accuracy = 0.24587166447631564 
Top-2 Accuracy = 0.397 
iter 18: [0.24587166447631564] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.27238443517513283 
Top-2 Accuracy = 0.422 
iter 19: [0.27238443517513283] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.2880406833895206 
Top-2 Accuracy = 0.457 
iter 20: [0.2880406833895206] 
setting: robustD|rf 
Top-1 Accuracy = 0.24301468487515 
Top-2 Accuracy = 0.396 
iter 21: [0.24301468487515] 
setting: normalizel|rf 
Top-1 Accuracy = 0.21598765784812296 
Top-2 Accuracy = 0.364 
iter 22: [0.21598765784812296] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.2465573395805954 
Top-2 Accuracy = 0.397 
iter 23: [0.2465573395805954] 
setting: standardizea|rf 
Top-1 Accuracy = 0.24712873550082853 
Top-2 Accuracy = 0.397 
iter 24: [0.24712873550082853] 
setting: robustA|rf 
Top-1 Accuracy = 0.2722130163990629 
Top-2 Accuracy = 0.421 
iter 25: [0.2722130163990629] 
setting: normalizee|rf 
Top-1 Accuracy = 0.29489743443231814 
Top-2 Accuracy = 0.457 
iter 26: [0.29489743443231814] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.29661162219301757 
Top-2 Accuracy = 0.462 
iter 27: [0.29661162219301757] 
setting: robustE|rf 
Top-1 Accuracy = 0.2511285069424604 
Top-2 Accuracy = 0.406 
iter 28: [0.2511285069424604] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.245757385292269 
Top-2 Accuracy = 0.393 
iter 29: [0.245757385292269] 
Run # 2 
====== 
setting: standardizen|rf 
Top-1 Accuracy = 0.2975258556653905 
Top-2 Accuracy = 0.461 
iter 0: [0.2975258556653905] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.27095594537455003 
Top-2 Accuracy = 0.423 
iter 1: [0.27095594537455003] 
setting: robustD|rf 
Top-1 Accuracy = 0.2976401348494372 
Top-2 Accuracy = 0.461 
iter 2: [0.2976401348494372] 
setting: robustx|rf 
Top-1 Accuracy = 0.2501571338780641 
Top-2 Accuracy = 0.4 
iter 3: [0.2501571338780641] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.21370207416719045 
Top-2 Accuracy = 0.363 
iter 4: [0.21370207416719045] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.2975829952574139 
Top-2 Accuracy = 0.461 
iter 5: [0.2975829952574139] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.21638763499228617 
Top-2 Accuracy = 0.367 
iter 6: [0.21638763499228617] 
setting: robustw|rf 
Top-1 Accuracy = 0.21495914519170334 
Top-2 Accuracy = 0.365 
iter 7: [0.21495914519170334] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.213073538654934 
Top-2 Accuracy = 0.364 
iter 8: [0.213073538654934] 
setting: robustR|rf 
Top-1 Accuracy = 0.2975258556653905 
Top-2 Accuracy = 0.461 
iter 9: [0.2975258556653905] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.24592880406833895 
Top-2 Accuracy = 0.398 
iter 10: [0.24592880406833895] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.2854122621564482 
Top-2 Accuracy = 0.449 
iter 11: [0.2854122621564482] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.21535912233586652 
Top-2 Accuracy = 0.365 
iter 12: [0.21535912233586652] 
setting: robustz|rf 
Top-1 Accuracy = 0.2736415061996457 
Top-2 Accuracy = 0.425 
iter 13: [0.2736415061996457] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.2946688760642249 
Top-2 Accuracy = 0.458 
iter 14: [0.2946688760642249] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.29489743443231814 
Top-2 Accuracy = 0.458 
iter 15: [0.29489743443231814] 
setting: standardizef|rf 
Top-1 Accuracy = 0.243928918347523 
Top-2 Accuracy = 0.393 
iter 16: [0.243928918347523] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.25032855265413406 
Top-2 Accuracy = 0.402 
iter 17: [0.25032855265413406] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.2187874978572653 
Top-2 Accuracy = 0.368 
iter 18: [0.2187874978572653] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.2736415061996457 
Top-2 Accuracy = 0.425 
iter 19: [0.2736415061996457] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.21375921375921375 
Top-2 Accuracy = 0.363 
iter 20: [0.21375921375921375] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.2736415061996457 
Top-2 Accuracy = 0.425 
iter 21: [0.2736415061996457] 
setting: robuste|rf 
Top-1 Accuracy = 0.2483858065253414 
Top-2 Accuracy = 0.397 
iter 22: [0.2483858065253414] 
setting: robustp|rf 
Top-1 Accuracy = 0.21444488886349353 
Top-2 Accuracy = 0.362 
iter 23: [0.21444488886349353] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.2736415061996457 
Top-2 Accuracy = 0.425 
iter 24: [0.2736415061996457] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.22061596480201132 
Top-2 Accuracy = 0.369 
iter 25: [0.22061596480201132] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.2736415061996457 
Top-2 Accuracy = 0.425 
iter 26: [0.2736415061996457] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.2736415061996457 
Top-2 Accuracy = 0.425 
iter 27: [0.2736415061996457] 
setting: robustF|rf 
Top-1 Accuracy = 0.212159305182561 
Top-2 Accuracy = 0.363 
iter 28: [0.212159305182561] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.24935717958973774 
Top-2 Accuracy = 0.401 
iter 29: [0.24935717958973774] 
Run # 3 
====== 
setting: robustz|rf 
Top-1 Accuracy = 0.21541626192788985 
Top-2 Accuracy = 0.366 
iter 0: [0.21541626192788985] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.2736415061996457 
Top-2 Accuracy = 0.425 
iter 1: [0.2736415061996457] 
setting: standardizes|rf 
Top-1 Accuracy = 0.21455916804754013 
Top-2 Accuracy = 0.364 
iter 2: [0.21455916804754013] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.21330209702302724 
Top-2 Accuracy = 0.364 
iter 3: [0.21330209702302724] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.24861436489343466 
Top-2 Accuracy = 0.405 
iter 4: [0.24861436489343466] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.2946688760642249 
Top-2 Accuracy = 0.458 
iter 5: [0.2946688760642249] 
setting: robustC|rf 
Top-1 Accuracy = 0.2736415061996457 
Top-2 Accuracy = 0.425 
iter 6: [0.2736415061996457] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.2725558539512028 
Top-2 Accuracy = 0.423 
iter 7: [0.2725558539512028] 
setting: normalizen|rf 
Top-1 Accuracy = 0.2725558539512028 
Top-2 Accuracy = 0.423 
iter 8: [0.2725558539512028] 
setting: robustw|rf 
Top-1 Accuracy = 0.2725558539512028 
Top-2 Accuracy = 0.423 
iter 9: [0.2725558539512028] 
setting: robustg|rf 
Top-1 Accuracy = 0.2725558539512028 
Top-2 Accuracy = 0.423 
iter 10: [0.2725558539512028] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.2524427175589966 
Top-2 Accuracy = 0.403 
iter 11: [0.2524427175589966] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.2848408662362151 
Top-2 Accuracy = 0.454 
iter 12: [0.2848408662362151] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.2832980972515856 
Top-2 Accuracy = 0.454 
iter 13: [0.2832980972515856] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.24941431918176105 
Top-2 Accuracy = 0.4 
iter 14: [0.24941431918176105] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.2125592823267242 
Top-2 Accuracy = 0.364 
iter 15: [0.2125592823267242] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.29712587852122735 
Top-2 Accuracy = 0.46 
iter 16: [0.29712587852122735] 
setting: robustU|rf 
Top-1 Accuracy = 0.24952859836580768 
Top-2 Accuracy = 0.397 
iter 17: [0.24952859836580768] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.2161019370321696 
Top-2 Accuracy = 0.366 
iter 18: [0.2161019370321696] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.2724987143591795 
Top-2 Accuracy = 0.424 
iter 19: [0.2724987143591795] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.29586880749671446 
Top-2 Accuracy = 0.461 
iter 20: [0.29586880749671446] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.24587166447631564 
Top-2 Accuracy = 0.402 
iter 21: [0.24587166447631564] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.2482715273412948 
Top-2 Accuracy = 0.4 
iter 22: [0.2482715273412948] 
setting: robustu|rf 
Top-1 Accuracy = 0.29581166790469116 
Top-2 Accuracy = 0.461 
iter 23: [0.29581166790469116] 
setting: standardizew|rf 
Top-1 Accuracy = 0.2959830866807611 
Top-2 Accuracy = 0.461 
iter 24: [0.2959830866807611] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.24890006285355123 
Top-2 Accuracy = 0.397 
iter 25: [0.24890006285355123] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.21907319581738185 
Top-2 Accuracy = 0.37 
iter 26: [0.21907319581738185] 
setting: normalizei|rf 
Top-1 Accuracy = 0.2466144791726187 
Top-2 Accuracy = 0.396 
iter 27: [0.2466144791726187] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.29695445974515744 
Top-2 Accuracy = 0.459 
iter 28: [0.29695445974515744] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.24895720244557454 
Top-2 Accuracy = 0.402 
iter 29: [0.24895720244557454] 
Run # 4 
====== 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.27238443517513283 
Top-2 Accuracy = 0.429 
iter 0: [0.27238443517513283] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.3004399748585795 
Top-2 Accuracy = 0.462 
iter 1: [0.3004399748585795] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.30021141649048627 
Top-2 Accuracy = 0.462 
iter 2: [0.30021141649048627] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.27238443517513283 
Top-2 Accuracy = 0.429 
iter 3: [0.27238443517513283] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.3043254671161648 
Top-2 Accuracy = 0.464 
iter 4: [0.3043254671161648] 
setting: normalizef|rf 
Top-1 Accuracy = 0.24958573795783098 
Top-2 Accuracy = 0.401 
iter 5: [0.24958573795783098] 
setting: robustg|rf 
Top-1 Accuracy = 0.24935717958973774 
Top-2 Accuracy = 0.401 
iter 6: [0.24935717958973774] 
setting: standardizem|rf 
Top-1 Accuracy = 0.21713044968858922 
Top-2 Accuracy = 0.367 
iter 7: [0.21713044968858922] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.27238443517513283 
Top-2 Accuracy = 0.429 
iter 8: [0.27238443517513283] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.2510713673504371 
Top-2 Accuracy = 0.405 
iter 9: [0.2510713673504371] 
setting: robustN|rf 
Top-1 Accuracy = 0.30049711445060284 
Top-2 Accuracy = 0.462 
iter 10: [0.30049711445060284] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.24952859836580768 
Top-2 Accuracy = 0.405 
iter 11: [0.24952859836580768] 
setting: standardizej|rf 
Top-1 Accuracy = 0.30049711445060284 
Top-2 Accuracy = 0.462 
iter 12: [0.30049711445060284] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.2453002685560825 
Top-2 Accuracy = 0.401 
iter 13: [0.2453002685560825] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.2178732643848923 
Top-2 Accuracy = 0.37 
iter 14: [0.2178732643848923] 
setting: robustI|rf 
Top-1 Accuracy = 0.27238443517513283 
Top-2 Accuracy = 0.429 
iter 15: [0.27238443517513283] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.27238443517513283 
Top-2 Accuracy = 0.429 
iter 16: [0.27238443517513283] 
setting: robustL|rf 
Top-1 Accuracy = 0.27238443517513283 
Top-2 Accuracy = 0.429 
iter 17: [0.27238443517513283] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.24895720244557454 
Top-2 Accuracy = 0.401 
iter 18: [0.24895720244557454] 
setting: robustR|rf 
Top-1 Accuracy = 0.24804296897320152 
Top-2 Accuracy = 0.405 
iter 19: [0.24804296897320152] 
setting: robustG|rf 
Top-1 Accuracy = 0.2447288726358494 
Top-2 Accuracy = 0.391 
iter 20: [0.2447288726358494] 
setting: robustQ|rf 
Top-1 Accuracy = 0.30049711445060284 
Top-2 Accuracy = 0.462 
iter 21: [0.30049711445060284] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.2166161933603794 
Top-2 Accuracy = 0.366 
iter 22: [0.2166161933603794] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.27238443517513283 
Top-2 Accuracy = 0.429 
iter 23: [0.27238443517513283] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.27238443517513283 
Top-2 Accuracy = 0.429 
iter 24: [0.27238443517513283] 
setting: standardizea|rf 
Top-1 Accuracy = 0.2166161933603794 
Top-2 Accuracy = 0.367 
iter 25: [0.2166161933603794] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.3004399748585795 
Top-2 Accuracy = 0.462 
iter 26: [0.3004399748585795] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.245757385292269 
Top-2 Accuracy = 0.393 
iter 27: [0.245757385292269] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.21273070110279413 
Top-2 Accuracy = 0.363 
iter 28: [0.21273070110279413] 
setting: robustV|rf 
Top-1 Accuracy = 0.27324152905548255 
Top-2 Accuracy = 0.425 
iter 29: [0.27324152905548255] 
Run # 5 
====== 
setting: standardizex|rf 
Top-1 Accuracy = 0.27324152905548255 
Top-2 Accuracy = 0.425 
iter 0: [0.27324152905548255] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.21381635335123708 
Top-2 Accuracy = 0.364 
iter 1: [0.21381635335123708] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.24770013142106165 
Top-2 Accuracy = 0.401 
iter 2: [0.24770013142106165] 
setting: robustR|rf 
Top-1 Accuracy = 0.27324152905548255 
Top-2 Accuracy = 0.425 
iter 3: [0.27324152905548255] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.21541626192788985 
Top-2 Accuracy = 0.364 
iter 4: [0.21541626192788985] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.27324152905548255 
Top-2 Accuracy = 0.425 
iter 5: [0.27324152905548255] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.29924004342608995 
Top-2 Accuracy = 0.463 
iter 6: [0.29924004342608995] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.27341294783155246 
Top-2 Accuracy = 0.426 
iter 7: [0.27341294783155246] 
setting: maxabsK|rf 
Top-1 Accuracy = 0.27341294783155246 
Top-2 Accuracy = 0.426 
iter 8: [0.27341294783155246] 
setting: normalizey|rf 
Top-1 Accuracy = 0.21673047254442604 
Top-2 Accuracy = 0.365 
iter 9: [0.21673047254442604] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.27192731843894635 
Top-2 Accuracy = 0.426 
iter 10: [0.27192731843894635] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.3057539569167476 
Top-2 Accuracy = 0.465 
iter 11: [0.3057539569167476] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.24598594366036228 
Top-2 Accuracy = 0.395 
iter 12: [0.24598594366036228] 
setting: standardized|rf 
Top-1 Accuracy = 0.21278784069481743 
Top-2 Accuracy = 0.363 
iter 13: [0.21278784069481743] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.27089880578252673 
Top-2 Accuracy = 0.427 
iter 14: [0.27089880578252673] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.27089880578252673 
Top-2 Accuracy = 0.427 
iter 15: [0.27089880578252673] 
setting: normalizel|rf 
Top-1 Accuracy = 0.2134735157990972 
Top-2 Accuracy = 0.362 
iter 16: [0.2134735157990972] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.30683960916519054 
Top-2 Accuracy = 0.465 
iter 17: [0.30683960916519054] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.30672532998114393 
Top-2 Accuracy = 0.465 
iter 18: [0.30672532998114393] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.30678246957316724 
Top-2 Accuracy = 0.465 
iter 19: [0.30678246957316724] 
setting: standardizeh|rf 
Top-1 Accuracy = 0.24495743100394263 
Top-2 Accuracy = 0.395 
iter 20: [0.24495743100394263] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.25027141306211076 
Top-2 Accuracy = 0.402 
iter 21: [0.25027141306211076] 
setting: robustE|rf 
Top-1 Accuracy = 0.26981315353408375 
Top-2 Accuracy = 0.424 
iter 22: [0.26981315353408375] 
setting: robusth|rf 
Top-1 Accuracy = 0.21587337866407633 
Top-2 Accuracy = 0.366 
iter 23: [0.21587337866407633] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.24467173304382606 
Top-2 Accuracy = 0.392 
iter 24: [0.24467173304382606] 
setting: standardizey|rf 
Top-1 Accuracy = 0.26981315353408375 
Top-2 Accuracy = 0.424 
iter 25: [0.26981315353408375] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.2156448202959831 
Top-2 Accuracy = 0.365 
iter 26: [0.2156448202959831] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.26981315353408375 
Top-2 Accuracy = 0.424 
iter 27: [0.26981315353408375] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.2143877492714702 
Top-2 Accuracy = 0.365 
iter 28: [0.2143877492714702] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.30506828181246787 
Top-2 Accuracy = 0.466 
iter 29: [0.30506828181246787] 
Run # 6 
====== 
setting: robustt|rf 
Top-1 Accuracy = 0.24770013142106165 
Top-2 Accuracy = 0.4 
iter 0: [0.24770013142106165] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.30552539854865435 
Top-2 Accuracy = 0.464 
iter 1: [0.30552539854865435] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.24490029141191932 
Top-2 Accuracy = 0.391 
iter 2: [0.24490029141191932] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.30649677161305067 
Top-2 Accuracy = 0.464 
iter 3: [0.30649677161305067] 
setting: normalizex|rf 
Top-1 Accuracy = 0.3058110965087709 
Top-2 Accuracy = 0.464 
iter 4: [0.3058110965087709] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.21855893948917204 
Top-2 Accuracy = 0.366 
iter 5: [0.21855893948917204] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.30426832752414146 
Top-2 Accuracy = 0.464 
iter 6: [0.30426832752414146] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.21821610193703217 
Top-2 Accuracy = 0.366 
iter 7: [0.21821610193703217] 
setting: robustG|rf 
Top-1 Accuracy = 0.21501628478372664 
Top-2 Accuracy = 0.364 
iter 8: [0.21501628478372664] 
setting: robustk|rf 
Top-1 Accuracy = 0.27238443517513283 
Top-2 Accuracy = 0.427 
iter 9: [0.27238443517513283] 
setting: robustz|rf 
Top-1 Accuracy = 0.24787155019713158 
Top-2 Accuracy = 0.395 
iter 10: [0.24787155019713158] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.2726701331352494 
Top-2 Accuracy = 0.423 
iter 11: [0.2726701331352494] 
setting: robustn|rf 
Top-1 Accuracy = 0.2726701331352494 
Top-2 Accuracy = 0.423 
iter 12: [0.2726701331352494] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.24798582938117822 
Top-2 Accuracy = 0.399 
iter 13: [0.24798582938117822] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.24667161876464203 
Top-2 Accuracy = 0.397 
iter 14: [0.24667161876464203] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.295240271984458 
Top-2 Accuracy = 0.458 
iter 15: [0.295240271984458] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.29792583280955376 
Top-2 Accuracy = 0.458 
iter 16: [0.29792583280955376] 
setting: standardizez|rf 
Top-1 Accuracy = 0.2458145248842923 
Top-2 Accuracy = 0.395 
iter 17: [0.2458145248842923] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.2470144563167819 
Top-2 Accuracy = 0.387 
iter 18: [0.2470144563167819] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.24632878121250215 
Top-2 Accuracy = 0.39 
iter 19: [0.24632878121250215] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.2147877264156334 
Top-2 Accuracy = 0.365 
iter 20: [0.2147877264156334] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.27278441231929607 
Top-2 Accuracy = 0.422 
iter 21: [0.27278441231929607] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.21467344723158677 
Top-2 Accuracy = 0.364 
iter 22: [0.21467344723158677] 
setting: standardizem|rf 
Top-1 Accuracy = 0.29815439117764697 
Top-2 Accuracy = 0.461 
iter 23: [0.29815439117764697] 
setting: robustV|rf 
Top-1 Accuracy = 0.27278441231929607 
Top-2 Accuracy = 0.422 
iter 24: [0.27278441231929607] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.2470144563167819 
Top-2 Accuracy = 0.399 
iter 25: [0.2470144563167819] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.2153019827438432 
Top-2 Accuracy = 0.365 
iter 26: [0.2153019827438432] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.29815439117764697 
Top-2 Accuracy = 0.461 
iter 27: [0.29815439117764697] 
setting: robustM|rf 
Top-1 Accuracy = 0.29815439117764697 
Top-2 Accuracy = 0.461 
iter 28: [0.29815439117764697] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.2951259928004114 
Top-2 Accuracy = 0.456 
iter 29: [0.2951259928004114] 
Run # 7 
====== 
setting: robuste|rf 
Top-1 Accuracy = 0.2740414833438089 
Top-2 Accuracy = 0.422 
iter 0: [0.2740414833438089] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.24621450202845552 
Top-2 Accuracy = 0.393 
iter 1: [0.24621450202845552] 
setting: standardizep|rf 
Top-1 Accuracy = 0.21501628478372664 
Top-2 Accuracy = 0.365 
iter 2: [0.21501628478372664] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.24370035997942974 
Top-2 Accuracy = 0.396 
iter 3: [0.24370035997942974] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.2740414833438089 
Top-2 Accuracy = 0.422 
iter 4: [0.2740414833438089] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.29586880749671446 
Top-2 Accuracy = 0.457 
iter 5: [0.29586880749671446] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.29478315524827153 
Top-2 Accuracy = 0.456 
iter 6: [0.29478315524827153] 
setting: robustR|rf 
Top-1 Accuracy = 0.24507171018798926 
Top-2 Accuracy = 0.396 
iter 7: [0.24507171018798926] 
setting: robustL|rf 
Top-1 Accuracy = 0.21404491171933032 
Top-2 Accuracy = 0.362 
iter 8: [0.21404491171933032] 
setting: robustb|rf 
Top-1 Accuracy = 0.2740414833438089 
Top-2 Accuracy = 0.422 
iter 9: [0.2740414833438089] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.29586880749671446 
Top-2 Accuracy = 0.456 
iter 10: [0.29586880749671446] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.29592594708873776 
Top-2 Accuracy = 0.456 
iter 11: [0.29592594708873776] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.21318781783898064 
Top-2 Accuracy = 0.363 
iter 12: [0.21318781783898064] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.27284155191131937 
Top-2 Accuracy = 0.423 
iter 13: [0.27284155191131937] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.2976972744414605 
Top-2 Accuracy = 0.46 
iter 14: [0.2976972744414605] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.27284155191131937 
Top-2 Accuracy = 0.423 
iter 15: [0.27284155191131937] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.2430718244671733 
Top-2 Accuracy = 0.392 
iter 16: [0.2430718244671733] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.3011827895548826 
Top-2 Accuracy = 0.458 
iter 17: [0.3011827895548826] 
setting: robustu|rf 
Top-1 Accuracy = 0.27415576252785556 
Top-2 Accuracy = 0.425 
iter 18: [0.27415576252785556] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.21775898520084566 
Top-2 Accuracy = 0.367 
iter 19: [0.21775898520084566] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.3011827895548826 
Top-2 Accuracy = 0.458 
iter 20: [0.3011827895548826] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.3008399520027427 
Top-2 Accuracy = 0.458 
iter 21: [0.3008399520027427] 
setting: robustk|rf 
Top-1 Accuracy = 0.24621450202845552 
Top-2 Accuracy = 0.399 
iter 22: [0.24621450202845552] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.24598594366036228 
Top-2 Accuracy = 0.397 
iter 23: [0.24598594366036228] 
setting: robustn|rf 
Top-1 Accuracy = 0.27415576252785556 
Top-2 Accuracy = 0.425 
iter 24: [0.27415576252785556] 
setting: standardizev|rf 
Top-1 Accuracy = 0.24690017713273527 
Top-2 Accuracy = 0.398 
iter 25: [0.24690017713273527] 
setting: robustg|rf 
Top-1 Accuracy = 0.21575909948002972 
Top-2 Accuracy = 0.366 
iter 26: [0.21575909948002972] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.3011256499628593 
Top-2 Accuracy = 0.458 
iter 27: [0.3011256499628593] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.27415576252785556 
Top-2 Accuracy = 0.425 
iter 28: [0.27415576252785556] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.3008399520027427 
Top-2 Accuracy = 0.458 
iter 29: [0.3008399520027427] 
Run # 8 
====== 
setting: standardizeR|rf 
Top-1 Accuracy = 0.27415576252785556 
Top-2 Accuracy = 0.425 
iter 0: [0.27415576252785556] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.24690017713273527 
Top-2 Accuracy = 0.398 
iter 1: [0.24690017713273527] 
setting: robusta|rf 
Top-1 Accuracy = 0.3011827895548826 
Top-2 Accuracy = 0.458 
iter 2: [0.3011827895548826] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.27415576252785556 
Top-2 Accuracy = 0.425 
iter 3: [0.27415576252785556] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.3011256499628593 
Top-2 Accuracy = 0.458 
iter 4: [0.3011256499628593] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.21627335580823953 
Top-2 Accuracy = 0.366 
iter 5: [0.21627335580823953] 
setting: robustM|rf 
Top-1 Accuracy = 0.27415576252785556 
Top-2 Accuracy = 0.425 
iter 6: [0.27415576252785556] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.27415576252785556 
Top-2 Accuracy = 0.425 
iter 7: [0.27415576252785556] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.27415576252785556 
Top-2 Accuracy = 0.425 
iter 8: [0.27415576252785556] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.27415576252785556 
Top-2 Accuracy = 0.425 
iter 9: [0.27415576252785556] 
setting: robustm|rf 
Top-1 Accuracy = 0.3011256499628593 
Top-2 Accuracy = 0.458 
iter 10: [0.3011256499628593] 
setting: robustV|rf 
Top-1 Accuracy = 0.3010113707788126 
Top-2 Accuracy = 0.458 
iter 11: [0.3010113707788126] 
setting: robusty|rf 
Top-1 Accuracy = 0.27415576252785556 
Top-2 Accuracy = 0.425 
iter 12: [0.27415576252785556] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.24672875835666533 
Top-2 Accuracy = 0.4 
iter 13: [0.24672875835666533] 
setting: standardizex|rf 
Top-1 Accuracy = 0.27415576252785556 
Top-2 Accuracy = 0.425 
iter 14: [0.27415576252785556] 
setting: normalizew|rf 
Top-1 Accuracy = 0.2990114850579967 
Top-2 Accuracy = 0.459 
iter 15: [0.2990114850579967] 
setting: robusth|rf 
Top-1 Accuracy = 0.27284155191131937 
Top-2 Accuracy = 0.423 
iter 16: [0.27284155191131937] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.21381635335123708 
Top-2 Accuracy = 0.364 
iter 17: [0.21381635335123708] 
setting: robustl|rf 
Top-1 Accuracy = 0.2447860122278727 
Top-2 Accuracy = 0.391 
iter 18: [0.2447860122278727] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.24461459345180275 
Top-2 Accuracy = 0.395 
iter 19: [0.24461459345180275] 
setting: robustb|rf 
Top-1 Accuracy = 0.3000971373064396 
Top-2 Accuracy = 0.46 
iter 20: [0.3000971373064396] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.27284155191131937 
Top-2 Accuracy = 0.423 
iter 21: [0.27284155191131937] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.27324152905548255 
Top-2 Accuracy = 0.424 
iter 22: [0.27324152905548255] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.27324152905548255 
Top-2 Accuracy = 0.424 
iter 23: [0.27324152905548255] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.2430718244671733 
Top-2 Accuracy = 0.391 
iter 24: [0.2430718244671733] 
setting: robustw|rf 
Top-1 Accuracy = 0.24844294611736473 
Top-2 Accuracy = 0.401 
iter 25: [0.24844294611736473] 
setting: standardizei|rf 
Top-1 Accuracy = 0.21455916804754013 
Top-2 Accuracy = 0.363 
iter 26: [0.21455916804754013] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.24724301468487514 
Top-2 Accuracy = 0.399 
iter 27: [0.24724301468487514] 
setting: normalizen|rf 
Top-1 Accuracy = 0.29489743443231814 
Top-2 Accuracy = 0.458 
iter 28: [0.29489743443231814] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.27107022455859664 
Top-2 Accuracy = 0.423 
iter 29: [0.27107022455859664] 
Run # 9 
====== 
setting: normalizeT|rf 
Top-1 Accuracy = 0.21953031255356836 
Top-2 Accuracy = 0.368 
iter 0: [0.21953031255356836] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.29918290383406665 
Top-2 Accuracy = 0.459 
iter 1: [0.29918290383406665] 
setting: robustg|rf 
Top-1 Accuracy = 0.2725558539512028 
Top-2 Accuracy = 0.423 
iter 2: [0.2725558539512028] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.2725558539512028 
Top-2 Accuracy = 0.423 
iter 3: [0.2725558539512028] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.24541454774012914 
Top-2 Accuracy = 0.398 
iter 4: [0.24541454774012914] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.2465573395805954 
Top-2 Accuracy = 0.402 
iter 5: [0.2465573395805954] 
setting: robustZ|rf 
Top-1 Accuracy = 0.2458145248842923 
Top-2 Accuracy = 0.392 
iter 6: [0.2458145248842923] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.2995828809782298 
Top-2 Accuracy = 0.458 
iter 7: [0.2995828809782298] 
setting: robustD|rf 
Top-1 Accuracy = 0.2725558539512028 
Top-2 Accuracy = 0.423 
iter 8: [0.2725558539512028] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.29946860179418316 
Top-2 Accuracy = 0.458 
iter 9: [0.29946860179418316] 
setting: normalizel|rf 
Top-1 Accuracy = 0.24798582938117822 
Top-2 Accuracy = 0.396 
iter 10: [0.24798582938117822] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.29472601565624823 
Top-2 Accuracy = 0.458 
iter 11: [0.29472601565624823] 
setting: robustt|rf 
Top-1 Accuracy = 0.2722130163990629 
Top-2 Accuracy = 0.423 
iter 12: [0.2722130163990629] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.29941146220215986 
Top-2 Accuracy = 0.459 
iter 13: [0.29941146220215986] 
setting: normalizew|rf 
Top-1 Accuracy = 0.2998685789383464 
Top-2 Accuracy = 0.459 
iter 14: [0.2998685789383464] 
setting: standardizev|rf 
Top-1 Accuracy = 0.213073538654934 
Top-2 Accuracy = 0.363 
iter 15: [0.213073538654934] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.24815724815724816 
Top-2 Accuracy = 0.397 
iter 16: [0.24815724815724816] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.24730015427689847 
Top-2 Accuracy = 0.394 
iter 17: [0.24730015427689847] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.27278441231929607 
Top-2 Accuracy = 0.424 
iter 18: [0.27278441231929607] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.27278441231929607 
Top-2 Accuracy = 0.424 
iter 19: [0.27278441231929607] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.27278441231929607 
Top-2 Accuracy = 0.424 
iter 20: [0.27278441231929607] 
setting: normalizek|rf 
Top-1 Accuracy = 0.2998685789383464 
Top-2 Accuracy = 0.459 
iter 21: [0.2998685789383464] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.245757385292269 
Top-2 Accuracy = 0.396 
iter 22: [0.245757385292269] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.2998685789383464 
Top-2 Accuracy = 0.459 
iter 23: [0.2998685789383464] 
setting: robustf|rf 
Top-1 Accuracy = 0.2998685789383464 
Top-2 Accuracy = 0.459 
iter 24: [0.2998685789383464] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.27289869150334267 
Top-2 Accuracy = 0.424 
iter 25: [0.27289869150334267] 
setting: standardized|rf 
Top-1 Accuracy = 0.27289869150334267 
Top-2 Accuracy = 0.424 
iter 26: [0.27289869150334267] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.27289869150334267 
Top-2 Accuracy = 0.424 
iter 27: [0.27289869150334267] 
setting: robuste|rf 
Top-1 Accuracy = 0.27289869150334267 
Top-2 Accuracy = 0.424 
iter 28: [0.27289869150334267] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.2985543683218102 
Top-2 Accuracy = 0.459 
iter 29: [0.2985543683218102] 
Run # 10 
======= 
setting: normalizeK|rf 
Top-1 Accuracy = 0.21798754356893893 
Top-2 Accuracy = 0.367 
iter 0: [0.21798754356893893] 
setting: normalizev|rf 
Top-1 Accuracy = 0.29969716016227643 
Top-2 Accuracy = 0.46 
iter 1: [0.29969716016227643] 
setting: normalizes|rf 
Top-1 Accuracy = 0.27278441231929607 
Top-2 Accuracy = 0.422 
iter 2: [0.27278441231929607] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.21627335580823953 
Top-2 Accuracy = 0.365 
iter 3: [0.21627335580823953] 
setting: robustr|rf 
Top-1 Accuracy = 0.3003828352665562 
Top-2 Accuracy = 0.459 
iter 4: [0.3003828352665562] 
setting: standardizea|rf 
Top-1 Accuracy = 0.2713559225187132 
Top-2 Accuracy = 0.424 
iter 5: [0.2713559225187132] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.2713559225187132 
Top-2 Accuracy = 0.424 
iter 6: [0.2713559225187132] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.25078566939032054 
Top-2 Accuracy = 0.4 
iter 7: [0.25078566939032054] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.24141477629849722 
Top-2 Accuracy = 0.39 
iter 8: [0.24141477629849722] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.27278441231929607 
Top-2 Accuracy = 0.422 
iter 9: [0.27278441231929607] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.2713559225187132 
Top-2 Accuracy = 0.424 
iter 10: [0.2713559225187132] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.25175704245471686 
Top-2 Accuracy = 0.4 
iter 11: [0.25175704245471686] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.27278441231929607 
Top-2 Accuracy = 0.422 
iter 12: [0.27278441231929607] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.30021141649048627 
Top-2 Accuracy = 0.461 
iter 13: [0.30021141649048627] 
setting: robustG|rf 
Top-1 Accuracy = 0.27278441231929607 
Top-2 Accuracy = 0.422 
iter 14: [0.27278441231929607] 
setting: robustb|rf 
Top-1 Accuracy = 0.24541454774012914 
Top-2 Accuracy = 0.398 
iter 15: [0.24541454774012914] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.21501628478372664 
Top-2 Accuracy = 0.363 
iter 16: [0.21501628478372664] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.29918290383406665 
Top-2 Accuracy = 0.46 
iter 17: [0.29918290383406665] 
setting: robustl|rf 
Top-1 Accuracy = 0.27278441231929607 
Top-2 Accuracy = 0.422 
iter 18: [0.27278441231929607] 
setting: standardizec|rf 
Top-1 Accuracy = 0.24598594366036228 
Top-2 Accuracy = 0.401 
iter 19: [0.24598594366036228] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.27244157476715614 
Top-2 Accuracy = 0.424 
iter 20: [0.27244157476715614] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.2130163990629107 
Top-2 Accuracy = 0.363 
iter 21: [0.2130163990629107] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.2466144791726187 
Top-2 Accuracy = 0.399 
iter 22: [0.2466144791726187] 
setting: robustD|rf 
Top-1 Accuracy = 0.2713559225187132 
Top-2 Accuracy = 0.421 
iter 23: [0.2713559225187132] 
setting: normalizel|rf 
Top-1 Accuracy = 0.29712587852122735 
Top-2 Accuracy = 0.456 
iter 24: [0.29712587852122735] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.2447288726358494 
Top-2 Accuracy = 0.396 
iter 25: [0.2447288726358494] 
setting: normalizek|rf 
Top-1 Accuracy = 0.2986686475058568 
Top-2 Accuracy = 0.458 
iter 26: [0.2986686475058568] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.2712416433346666 
Top-2 Accuracy = 0.424 
iter 27: [0.2712416433346666] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.21381635335123708 
Top-2 Accuracy = 0.362 
iter 28: [0.21381635335123708] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.2987257870978801 
Top-2 Accuracy = 0.458 
iter 29: [0.2987257870978801] 
Run # 11 
======= 
setting: maxabsN|rf 
Top-1 Accuracy = 0.24558596651619907 
Top-2 Accuracy = 0.388 
iter 0: [0.24558596651619907] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.28609793726072796 
Top-2 Accuracy = 0.442 
iter 1: [0.28609793726072796] 
setting: robustr|rf 
Top-1 Accuracy = 0.24501457059596596 
Top-2 Accuracy = 0.398 
iter 2: [0.24501457059596596] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.2453002685560825 
Top-2 Accuracy = 0.396 
iter 3: [0.2453002685560825] 
setting: robustC|rf 
Top-1 Accuracy = 0.24512884978001256 
Top-2 Accuracy = 0.397 
iter 4: [0.24512884978001256] 
setting: maxabst|rf 
Top-1 Accuracy = 0.24604308325238558 
Top-2 Accuracy = 0.396 
iter 5: [0.24604308325238558] 
setting: robustN|rf 
Top-1 Accuracy = 0.2734700874235758 
Top-2 Accuracy = 0.425 
iter 6: [0.2734700874235758] 
setting: normalizen|rf 
Top-1 Accuracy = 0.2153019827438432 
Top-2 Accuracy = 0.365 
iter 7: [0.2153019827438432] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.273870064567739 
Top-2 Accuracy = 0.424 
iter 8: [0.273870064567739] 
setting: standardizec|rf 
Top-1 Accuracy = 0.2148448660076567 
Top-2 Accuracy = 0.364 
iter 9: [0.2148448660076567] 
setting: robusta|rf 
Top-1 Accuracy = 0.273870064567739 
Top-2 Accuracy = 0.424 
iter 10: [0.273870064567739] 
setting: normalizem|rf 
Top-1 Accuracy = 0.21735900805668248 
Top-2 Accuracy = 0.368 
iter 11: [0.21735900805668248] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.2730701102794126 
Top-2 Accuracy = 0.423 
iter 12: [0.2730701102794126] 
setting: standardizet|rf 
Top-1 Accuracy = 0.2435289412033598 
Top-2 Accuracy = 0.396 
iter 13: [0.2435289412033598] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.2730701102794126 
Top-2 Accuracy = 0.423 
iter 14: [0.2730701102794126] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.21238786355065425 
Top-2 Accuracy = 0.363 
iter 15: [0.21238786355065425] 
setting: normalizep|rf 
Top-1 Accuracy = 0.21558768070395978 
Top-2 Accuracy = 0.365 
iter 16: [0.21558768070395978] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.30049711445060284 
Top-2 Accuracy = 0.464 
iter 17: [0.30049711445060284] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.2416433346665905 
Top-2 Accuracy = 0.388 
iter 18: [0.2416433346665905] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.30066853322667275 
Top-2 Accuracy = 0.464 
iter 19: [0.30066853322667275] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.2730701102794126 
Top-2 Accuracy = 0.422 
iter 20: [0.2730701102794126] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.2730701102794126 
Top-2 Accuracy = 0.422 
iter 21: [0.2730701102794126] 
setting: standardizes|rf 
Top-1 Accuracy = 0.2730701102794126 
Top-2 Accuracy = 0.422 
iter 22: [0.2730701102794126] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.3003828352665562 
Top-2 Accuracy = 0.464 
iter 23: [0.3003828352665562] 
setting: robustB|rf 
Top-1 Accuracy = 0.30066853322667275 
Top-2 Accuracy = 0.464 
iter 24: [0.30066853322667275] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.2148448660076567 
Top-2 Accuracy = 0.364 
iter 25: [0.2148448660076567] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.24638592080452545 
Top-2 Accuracy = 0.392 
iter 26: [0.24638592080452545] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.2730701102794126 
Top-2 Accuracy = 0.422 
iter 27: [0.2730701102794126] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.2730701102794126 
Top-2 Accuracy = 0.422 
iter 28: [0.2730701102794126] 
setting: standardizex|rf 
Top-1 Accuracy = 0.2730701102794126 
Top-2 Accuracy = 0.422 
iter 29: [0.2730701102794126] 
Run # 12 
======= 
setting: normalizeh|rf 
Top-1 Accuracy = 0.3004399748585795 
Top-2 Accuracy = 0.459 
iter 0: [0.3004399748585795] 
setting: robustk|rf 
Top-1 Accuracy = 0.24730015427689847 
Top-2 Accuracy = 0.401 
iter 1: [0.24730015427689847] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.30158276669904577 
Top-2 Accuracy = 0.461 
iter 2: [0.30158276669904577] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.21724472887263585 
Top-2 Accuracy = 0.368 
iter 3: [0.21724472887263585] 
setting: robustx|rf 
Top-1 Accuracy = 0.27432718130392547 
Top-2 Accuracy = 0.425 
iter 4: [0.27432718130392547] 
setting: robustw|rf 
Top-1 Accuracy = 0.27432718130392547 
Top-2 Accuracy = 0.425 
iter 5: [0.27432718130392547] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.2952974115764813 
Top-2 Accuracy = 0.454 
iter 6: [0.2952974115764813] 
setting: robustd|rf 
Top-1 Accuracy = 0.21415919090337696 
Top-2 Accuracy = 0.365 
iter 7: [0.21415919090337696] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.29935432261013656 
Top-2 Accuracy = 0.463 
iter 8: [0.29935432261013656] 
setting: robusty|rf 
Top-1 Accuracy = 0.2995257413862065 
Top-2 Accuracy = 0.463 
iter 9: [0.2995257413862065] 
setting: robustM|rf 
Top-1 Accuracy = 0.2717558996628764 
Top-2 Accuracy = 0.422 
iter 10: [0.2717558996628764] 
setting: normalizey|rf 
Top-1 Accuracy = 0.21444488886349353 
Top-2 Accuracy = 0.366 
iter 11: [0.21444488886349353] 
setting: normalizef|rf 
Top-1 Accuracy = 0.24592880406833895 
Top-2 Accuracy = 0.401 
iter 12: [0.24592880406833895] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.2153019827438432 
Top-2 Accuracy = 0.365 
iter 13: [0.2153019827438432] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.29906862465002 
Top-2 Accuracy = 0.463 
iter 14: [0.29906862465002] 
setting: standardizez|rf 
Top-1 Accuracy = 0.29906862465002 
Top-2 Accuracy = 0.463 
iter 15: [0.29906862465002] 
setting: standardizea|rf 
Top-1 Accuracy = 0.27198445803096966 
Top-2 Accuracy = 0.422 
iter 16: [0.27198445803096966] 
setting: robustq|rf 
Top-1 Accuracy = 0.27198445803096966 
Top-2 Accuracy = 0.422 
iter 17: [0.27198445803096966] 
setting: robustc|rf 
Top-1 Accuracy = 0.24135763670647392 
Top-2 Accuracy = 0.393 
iter 18: [0.24135763670647392] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.29924004342608995 
Top-2 Accuracy = 0.463 
iter 19: [0.29924004342608995] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.2990114850579967 
Top-2 Accuracy = 0.463 
iter 20: [0.2990114850579967] 
setting: robusts|rf 
Top-1 Accuracy = 0.29906862465002 
Top-2 Accuracy = 0.463 
iter 21: [0.29906862465002] 
setting: robusta|rf 
Top-1 Accuracy = 0.27198445803096966 
Top-2 Accuracy = 0.422 
iter 22: [0.27198445803096966] 
setting: robustn|rf 
Top-1 Accuracy = 0.24667161876464203 
Top-2 Accuracy = 0.401 
iter 23: [0.24667161876464203] 
setting: normalizep|rf 
Top-1 Accuracy = 0.2147877264156334 
Top-2 Accuracy = 0.364 
iter 24: [0.2147877264156334] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.2940974801439918 
Top-2 Accuracy = 0.457 
iter 25: [0.2940974801439918] 
setting: robustu|rf 
Top-1 Accuracy = 0.2447288726358494 
Top-2 Accuracy = 0.4 
iter 26: [0.2447288726358494] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.2148448660076567 
Top-2 Accuracy = 0.366 
iter 27: [0.2148448660076567] 
setting: normalizer|rf 
Top-1 Accuracy = 0.27204159762299296 
Top-2 Accuracy = 0.422 
iter 28: [0.27204159762299296] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.2447288726358494 
Top-2 Accuracy = 0.399 
iter 29: [0.2447288726358494] 
Run # 13 
======= 
setting: robustI|rf 
Top-1 Accuracy = 0.24535740814810583 
Top-2 Accuracy = 0.399 
iter 0: [0.24535740814810583] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.21541626192788985 
Top-2 Accuracy = 0.366 
iter 1: [0.21541626192788985] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.2985543683218102 
Top-2 Accuracy = 0.462 
iter 2: [0.2985543683218102] 
setting: standardizep|rf 
Top-1 Accuracy = 0.29844008913776354 
Top-2 Accuracy = 0.462 
iter 3: [0.29844008913776354] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.24330038283526656 
Top-2 Accuracy = 0.399 
iter 4: [0.24330038283526656] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.20970230272555854 
Top-2 Accuracy = 0.359 
iter 5: [0.20970230272555854] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.245757385292269 
Top-2 Accuracy = 0.398 
iter 6: [0.245757385292269] 
setting: normalizem|rf 
Top-1 Accuracy = 0.2715844808868065 
Top-2 Accuracy = 0.422 
iter 7: [0.2715844808868065] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.21341637620707388 
Top-2 Accuracy = 0.363 
iter 8: [0.21341637620707388] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.29838294954574024 
Top-2 Accuracy = 0.458 
iter 9: [0.29838294954574024] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.21627335580823953 
Top-2 Accuracy = 0.367 
iter 10: [0.21627335580823953] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.21673047254442604 
Top-2 Accuracy = 0.367 
iter 11: [0.21673047254442604] 
setting: robustF|rf 
Top-1 Accuracy = 0.27209873721501626 
Top-2 Accuracy = 0.422 
iter 12: [0.27209873721501626] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.21684475172847265 
Top-2 Accuracy = 0.365 
iter 13: [0.21684475172847265] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.21387349294326038 
Top-2 Accuracy = 0.363 
iter 14: [0.21387349294326038] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.27198445803096966 
Top-2 Accuracy = 0.421 
iter 15: [0.27198445803096966] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.27198445803096966 
Top-2 Accuracy = 0.421 
iter 16: [0.27198445803096966] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.2482715273412948 
Top-2 Accuracy = 0.397 
iter 17: [0.2482715273412948] 
setting: standardizez|rf 
Top-1 Accuracy = 0.27198445803096966 
Top-2 Accuracy = 0.421 
iter 18: [0.27198445803096966] 
setting: robustA|rf 
Top-1 Accuracy = 0.29101194217473286 
Top-2 Accuracy = 0.456 
iter 19: [0.29101194217473286] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.21810182275298554 
Top-2 Accuracy = 0.367 
iter 20: [0.21810182275298554] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.24467173304382606 
Top-2 Accuracy = 0.395 
iter 21: [0.24467173304382606] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.27198445803096966 
Top-2 Accuracy = 0.421 
iter 22: [0.27198445803096966] 
setting: robustK|rf 
Top-1 Accuracy = 0.29101194217473286 
Top-2 Accuracy = 0.456 
iter 23: [0.29101194217473286] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.29101194217473286 
Top-2 Accuracy = 0.456 
iter 24: [0.29101194217473286] 
setting: normalizek|rf 
Top-1 Accuracy = 0.21804468316096223 
Top-2 Accuracy = 0.368 
iter 25: [0.21804468316096223] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.2905548254385464 
Top-2 Accuracy = 0.457 
iter 26: [0.2905548254385464] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.27198445803096966 
Top-2 Accuracy = 0.421 
iter 27: [0.27198445803096966] 
setting: robustm|rf 
Top-1 Accuracy = 0.21250214273470086 
Top-2 Accuracy = 0.362 
iter 28: [0.21250214273470086] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.24278612650705675 
Top-2 Accuracy = 0.397 
iter 29: [0.24278612650705675] 
Run # 14 
======= 
setting: standardizeG|rf 
Top-1 Accuracy = 0.2919833152391292 
Top-2 Accuracy = 0.457 
iter 0: [0.2919833152391292] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.2919261756471059 
Top-2 Accuracy = 0.457 
iter 1: [0.2919261756471059] 
setting: robustH|rf 
Top-1 Accuracy = 0.27198445803096966 
Top-2 Accuracy = 0.421 
iter 2: [0.27198445803096966] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.27198445803096966 
Top-2 Accuracy = 0.421 
iter 3: [0.27198445803096966] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.2166161933603794 
Top-2 Accuracy = 0.365 
iter 4: [0.2166161933603794] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.24455745385977945 
Top-2 Accuracy = 0.401 
iter 5: [0.24455745385977945] 
setting: normalizer|rf 
Top-1 Accuracy = 0.2898120107422433 
Top-2 Accuracy = 0.454 
iter 6: [0.2898120107422433] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.272955831095366 
Top-2 Accuracy = 0.422 
iter 7: [0.272955831095366] 
setting: normalizem|rf 
Top-1 Accuracy = 0.21290211987886407 
Top-2 Accuracy = 0.364 
iter 8: [0.21290211987886407] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.2965544826009942 
Top-2 Accuracy = 0.457 
iter 9: [0.2965544826009942] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.2135877949831438 
Top-2 Accuracy = 0.363 
iter 10: [0.2135877949831438] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.27209873721501626 
Top-2 Accuracy = 0.421 
iter 11: [0.27209873721501626] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.29661162219301757 
Top-2 Accuracy = 0.456 
iter 12: [0.29661162219301757] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.24621450202845552 
Top-2 Accuracy = 0.396 
iter 13: [0.24621450202845552] 
setting: standardizea|rf 
Top-1 Accuracy = 0.29666876178504087 
Top-2 Accuracy = 0.457 
iter 14: [0.29666876178504087] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.24432889549168618 
Top-2 Accuracy = 0.395 
iter 15: [0.24432889549168618] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.27095594537455003 
Top-2 Accuracy = 0.422 
iter 16: [0.27095594537455003] 
setting: standardizex|rf 
Top-1 Accuracy = 0.21427347008742356 
Top-2 Accuracy = 0.364 
iter 17: [0.21427347008742356] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.27095594537455003 
Top-2 Accuracy = 0.422 
iter 18: [0.27095594537455003] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.24935717958973774 
Top-2 Accuracy = 0.399 
iter 19: [0.24935717958973774] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.29695445974515744 
Top-2 Accuracy = 0.46 
iter 20: [0.29695445974515744] 
setting: maxabso|rf 
Top-1 Accuracy = 0.27055596823038686 
Top-2 Accuracy = 0.423 
iter 21: [0.27055596823038686] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.27055596823038686 
Top-2 Accuracy = 0.423 
iter 22: [0.27055596823038686] 
setting: maxabss|rf 
Top-1 Accuracy = 0.29701159933718074 
Top-2 Accuracy = 0.459 
iter 23: [0.29701159933718074] 
setting: robusti|rf 
Top-1 Accuracy = 0.27055596823038686 
Top-2 Accuracy = 0.423 
iter 24: [0.27055596823038686] 
setting: normalizet|rf 
Top-1 Accuracy = 0.285926518484658 
Top-2 Accuracy = 0.455 
iter 25: [0.285926518484658] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.27055596823038686 
Top-2 Accuracy = 0.422 
iter 26: [0.27055596823038686] 
setting: robustA|rf 
Top-1 Accuracy = 0.2470144563167819 
Top-2 Accuracy = 0.4 
iter 27: [0.2470144563167819] 
setting: robustL|rf 
Top-1 Accuracy = 0.28615507685275127 
Top-2 Accuracy = 0.455 
iter 28: [0.28615507685275127] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.2730129706873893 
Top-2 Accuracy = 0.423 
iter 29: [0.2730129706873893] 
Run # 15 
======= 
setting: minmaxv|rf 
Top-1 Accuracy = 0.29346894463173534 
Top-2 Accuracy = 0.457 
iter 0: [0.29346894463173534] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.21598765784812296 
Top-2 Accuracy = 0.364 
iter 1: [0.21598765784812296] 
setting: normalizex|rf 
Top-1 Accuracy = 0.217816124792869 
Top-2 Accuracy = 0.366 
iter 2: [0.217816124792869] 
setting: robustR|rf 
Top-1 Accuracy = 0.2458145248842923 
Top-2 Accuracy = 0.396 
iter 3: [0.2458145248842923] 
setting: robustq|rf 
Top-1 Accuracy = 0.27244157476715614 
Top-2 Accuracy = 0.422 
iter 4: [0.27244157476715614] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.24238614936289354 
Top-2 Accuracy = 0.398 
iter 5: [0.24238614936289354] 
setting: normalizel|rf 
Top-1 Accuracy = 0.29666876178504087 
Top-2 Accuracy = 0.458 
iter 6: [0.29666876178504087] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.21364493457516714 
Top-2 Accuracy = 0.364 
iter 7: [0.21364493457516714] 
setting: normalizes|rf 
Top-1 Accuracy = 0.21107365293411806 
Top-2 Accuracy = 0.362 
iter 8: [0.21107365293411806] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.29592594708873776 
Top-2 Accuracy = 0.458 
iter 9: [0.29592594708873776] 
setting: robuste|rf 
Top-1 Accuracy = 0.29592594708873776 
Top-2 Accuracy = 0.458 
iter 10: [0.29592594708873776] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.24598594366036228 
Top-2 Accuracy = 0.397 
iter 11: [0.24598594366036228] 
setting: robustm|rf 
Top-1 Accuracy = 0.2699845723101537 
Top-2 Accuracy = 0.422 
iter 12: [0.2699845723101537] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.29586880749671446 
Top-2 Accuracy = 0.459 
iter 13: [0.29586880749671446] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.2713559225187132 
Top-2 Accuracy = 0.42 
iter 14: [0.2713559225187132] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.24604308325238558 
Top-2 Accuracy = 0.402 
iter 15: [0.24604308325238558] 
setting: robustf|rf 
Top-1 Accuracy = 0.24615736243643221 
Top-2 Accuracy = 0.397 
iter 16: [0.24615736243643221] 
setting: normalizej|rf 
Top-1 Accuracy = 0.2974115764813439 
Top-2 Accuracy = 0.461 
iter 17: [0.2974115764813439] 
setting: standardizew|rf 
Top-1 Accuracy = 0.27107022455859664 
Top-2 Accuracy = 0.418 
iter 18: [0.27107022455859664] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.24610022284440888 
Top-2 Accuracy = 0.401 
iter 19: [0.24610022284440888] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.24724301468487514 
Top-2 Accuracy = 0.4 
iter 20: [0.24724301468487514] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.24632878121250215 
Top-2 Accuracy = 0.399 
iter 21: [0.24632878121250215] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.27427004171190217 
Top-2 Accuracy = 0.421 
iter 22: [0.27427004171190217] 
setting: robustk|rf 
Top-1 Accuracy = 0.21581623907205302 
Top-2 Accuracy = 0.365 
iter 23: [0.21581623907205302] 
setting: robustW|rf 
Top-1 Accuracy = 0.27427004171190217 
Top-2 Accuracy = 0.421 
iter 24: [0.27427004171190217] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.2440431975315696 
Top-2 Accuracy = 0.399 
iter 25: [0.2440431975315696] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.29918290383406665 
Top-2 Accuracy = 0.461 
iter 26: [0.29918290383406665] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.2434146620193132 
Top-2 Accuracy = 0.395 
iter 27: [0.2434146620193132] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.21227358436660762 
Top-2 Accuracy = 0.362 
iter 28: [0.21227358436660762] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.27095594537455003 
Top-2 Accuracy = 0.421 
iter 29: [0.27095594537455003] 
Run # 16 
======= 
setting: normalizeb|rf 
Top-1 Accuracy = 0.21581623907205302 
Top-2 Accuracy = 0.365 
iter 0: [0.21581623907205302] 
setting: normalizel|rf 
Top-1 Accuracy = 0.24501457059596596 
Top-2 Accuracy = 0.397 
iter 1: [0.24501457059596596] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.27095594537455003 
Top-2 Accuracy = 0.421 
iter 2: [0.27095594537455003] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.21593051825609966 
Top-2 Accuracy = 0.366 
iter 3: [0.21593051825609966] 
setting: standardizez|rf 
Top-1 Accuracy = 0.21444488886349353 
Top-2 Accuracy = 0.365 
iter 4: [0.21444488886349353] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.29792583280955376 
Top-2 Accuracy = 0.461 
iter 5: [0.29792583280955376] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.27095594537455003 
Top-2 Accuracy = 0.421 
iter 6: [0.27095594537455003] 
setting: normalizen|rf 
Top-1 Accuracy = 0.2157019598880064 
Top-2 Accuracy = 0.365 
iter 7: [0.2157019598880064] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.21581623907205302 
Top-2 Accuracy = 0.364 
iter 8: [0.21581623907205302] 
setting: standardizee|rf 
Top-1 Accuracy = 0.270041711902177 
Top-2 Accuracy = 0.422 
iter 9: [0.270041711902177] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.21284498028684076 
Top-2 Accuracy = 0.362 
iter 10: [0.21284498028684076] 
setting: robustN|rf 
Top-1 Accuracy = 0.2174161476487058 
Top-2 Accuracy = 0.367 
iter 11: [0.2174161476487058] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.2143306096794469 
Top-2 Accuracy = 0.364 
iter 12: [0.2143306096794469] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.27278441231929607 
Top-2 Accuracy = 0.422 
iter 13: [0.27278441231929607] 
setting: standardizeh|rf 
Top-1 Accuracy = 0.24844294611736473 
Top-2 Accuracy = 0.401 
iter 14: [0.24844294611736473] 
setting: normalizek|rf 
Top-1 Accuracy = 0.2965544826009942 
Top-2 Accuracy = 0.457 
iter 15: [0.2965544826009942] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.2152448431518199 
Top-2 Accuracy = 0.366 
iter 16: [0.2152448431518199] 
setting: robustu|rf 
Top-1 Accuracy = 0.29661162219301757 
Top-2 Accuracy = 0.457 
iter 17: [0.29661162219301757] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.29718301811325065 
Top-2 Accuracy = 0.457 
iter 18: [0.29718301811325065] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.29712587852122735 
Top-2 Accuracy = 0.457 
iter 19: [0.29712587852122735] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.2134735157990972 
Top-2 Accuracy = 0.365 
iter 20: [0.2134735157990972] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.2715844808868065 
Top-2 Accuracy = 0.422 
iter 21: [0.2715844808868065] 
setting: robustA|rf 
Top-1 Accuracy = 0.29718301811325065 
Top-2 Accuracy = 0.457 
iter 22: [0.29718301811325065] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.2967830409690875 
Top-2 Accuracy = 0.457 
iter 23: [0.2967830409690875] 
setting: robustV|rf 
Top-1 Accuracy = 0.29718301811325065 
Top-2 Accuracy = 0.457 
iter 24: [0.29718301811325065] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.29718301811325065 
Top-2 Accuracy = 0.457 
iter 25: [0.29718301811325065] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.2715844808868065 
Top-2 Accuracy = 0.422 
iter 26: [0.2715844808868065] 
setting: maxabso|rf 
Top-1 Accuracy = 0.21638763499228617 
Top-2 Accuracy = 0.366 
iter 27: [0.21638763499228617] 
setting: normalizer|rf 
Top-1 Accuracy = 0.2135877949831438 
Top-2 Accuracy = 0.364 
iter 28: [0.2135877949831438] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.27244157476715614 
Top-2 Accuracy = 0.424 
iter 29: [0.27244157476715614] 
Run # 17 
======= 
setting: normalizeG|rf 
Top-1 Accuracy = 0.24512884978001256 
Top-2 Accuracy = 0.399 
iter 0: [0.24512884978001256] 
setting: normalizei|rf 
Top-1 Accuracy = 0.2978115536255071 
Top-2 Accuracy = 0.459 
iter 1: [0.2978115536255071] 
setting: robustI|rf 
Top-1 Accuracy = 0.24718587509285184 
Top-2 Accuracy = 0.402 
iter 2: [0.24718587509285184] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.2978115536255071 
Top-2 Accuracy = 0.459 
iter 3: [0.2978115536255071] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.27244157476715614 
Top-2 Accuracy = 0.424 
iter 4: [0.27244157476715614] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.2946688760642249 
Top-2 Accuracy = 0.457 
iter 5: [0.2946688760642249] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.2725558539512028 
Top-2 Accuracy = 0.421 
iter 6: [0.2725558539512028] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.29478315524827153 
Top-2 Accuracy = 0.456 
iter 7: [0.29478315524827153] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.2135877949831438 
Top-2 Accuracy = 0.363 
iter 8: [0.2135877949831438] 
setting: robustH|rf 
Top-1 Accuracy = 0.2475287126449917 
Top-2 Accuracy = 0.398 
iter 9: [0.2475287126449917] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.21455916804754013 
Top-2 Accuracy = 0.363 
iter 10: [0.21455916804754013] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.2447288726358494 
Top-2 Accuracy = 0.395 
iter 11: [0.2447288726358494] 
setting: standardizew|rf 
Top-1 Accuracy = 0.21553054111193645 
Top-2 Accuracy = 0.364 
iter 12: [0.21553054111193645] 
setting: normalizek|rf 
Top-1 Accuracy = 0.27112736415061994 
Top-2 Accuracy = 0.422 
iter 13: [0.27112736415061994] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.21284498028684076 
Top-2 Accuracy = 0.364 
iter 14: [0.21284498028684076] 
setting: maxabst|rf 
Top-1 Accuracy = 0.2113022113022113 
Top-2 Accuracy = 0.362 
iter 15: [0.2113022113022113] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.27112736415061994 
Top-2 Accuracy = 0.422 
iter 16: [0.27112736415061994] 
setting: standardizei|rf 
Top-1 Accuracy = 0.2165590537683561 
Top-2 Accuracy = 0.368 
iter 17: [0.2165590537683561] 
setting: standardizet|rf 
Top-1 Accuracy = 0.2988972058739501 
Top-2 Accuracy = 0.461 
iter 18: [0.2988972058739501] 
setting: normalizez|rf 
Top-1 Accuracy = 0.2166161933603794 
Top-2 Accuracy = 0.366 
iter 19: [0.2166161933603794] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.2989543454659734 
Top-2 Accuracy = 0.462 
iter 20: [0.2989543454659734] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.24512884978001256 
Top-2 Accuracy = 0.395 
iter 21: [0.24512884978001256] 
setting: robustv|rf 
Top-1 Accuracy = 0.2700988514942003 
Top-2 Accuracy = 0.421 
iter 22: [0.2700988514942003] 
setting: standardizea|rf 
Top-1 Accuracy = 0.2700988514942003 
Top-2 Accuracy = 0.421 
iter 23: [0.2700988514942003] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.2166733329524027 
Top-2 Accuracy = 0.364 
iter 24: [0.2166733329524027] 
setting: standardizex|rf 
Top-1 Accuracy = 0.21695903091251928 
Top-2 Accuracy = 0.367 
iter 25: [0.21695903091251928] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.2989543454659734 
Top-2 Accuracy = 0.462 
iter 26: [0.2989543454659734] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.24627164162047882 
Top-2 Accuracy = 0.394 
iter 27: [0.24627164162047882] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.2988400662819267 
Top-2 Accuracy = 0.462 
iter 28: [0.2988400662819267] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.2469573167247586 
Top-2 Accuracy = 0.401 
iter 29: [0.2469573167247586] 
Run # 18 
======= 
setting: maxabsi|rf 
Top-1 Accuracy = 0.21598765784812296 
Top-2 Accuracy = 0.364 
iter 0: [0.21598765784812296] 
setting: robustn|rf 
Top-1 Accuracy = 0.26975601394206045 
Top-2 Accuracy = 0.422 
iter 1: [0.26975601394206045] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.2965544826009942 
Top-2 Accuracy = 0.461 
iter 2: [0.2965544826009942] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.26975601394206045 
Top-2 Accuracy = 0.422 
iter 3: [0.26975601394206045] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.2183303811210788 
Top-2 Accuracy = 0.366 
iter 4: [0.2183303811210788] 
setting: robustE|rf 
Top-1 Accuracy = 0.26975601394206045 
Top-2 Accuracy = 0.422 
iter 5: [0.26975601394206045] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.24552882692417577 
Top-2 Accuracy = 0.398 
iter 6: [0.24552882692417577] 
setting: standardized|rf 
Top-1 Accuracy = 0.21210216559053768 
Top-2 Accuracy = 0.363 
iter 7: [0.21210216559053768] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.244843151819896 
Top-2 Accuracy = 0.4 
iter 8: [0.244843151819896] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.2453002685560825 
Top-2 Accuracy = 0.401 
iter 9: [0.2453002685560825] 
setting: normalizei|rf 
Top-1 Accuracy = 0.29575452831266785 
Top-2 Accuracy = 0.459 
iter 10: [0.29575452831266785] 
setting: robustx|rf 
Top-1 Accuracy = 0.21444488886349353 
Top-2 Accuracy = 0.364 
iter 11: [0.21444488886349353] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.21553054111193645 
Top-2 Accuracy = 0.365 
iter 12: [0.21553054111193645] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.2964402034169476 
Top-2 Accuracy = 0.462 
iter 13: [0.2964402034169476] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.27061310782241016 
Top-2 Accuracy = 0.421 
iter 14: [0.27061310782241016] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.29615450545683103 
Top-2 Accuracy = 0.458 
iter 15: [0.29615450545683103] 
setting: standardizez|rf 
Top-1 Accuracy = 0.29792583280955376 
Top-2 Accuracy = 0.46 
iter 16: [0.29792583280955376] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.24821438774927146 
Top-2 Accuracy = 0.396 
iter 17: [0.24821438774927146] 
setting: robustK|rf 
Top-1 Accuracy = 0.21238786355065425 
Top-2 Accuracy = 0.362 
iter 18: [0.21238786355065425] 
setting: standardizec|rf 
Top-1 Accuracy = 0.2131306782469573 
Top-2 Accuracy = 0.361 
iter 19: [0.2131306782469573] 
setting: robusts|rf 
Top-1 Accuracy = 0.24632878121250215 
Top-2 Accuracy = 0.394 
iter 20: [0.24632878121250215] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.24495743100394263 
Top-2 Accuracy = 0.399 
iter 21: [0.24495743100394263] 
setting: robustV|rf 
Top-1 Accuracy = 0.29792583280955376 
Top-2 Accuracy = 0.46 
iter 22: [0.29792583280955376] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.2972972972972973 
Top-2 Accuracy = 0.459 
iter 23: [0.2972972972972973] 
setting: normalizek|rf 
Top-1 Accuracy = 0.27072738700645677 
Top-2 Accuracy = 0.421 
iter 24: [0.27072738700645677] 
setting: standardizew|rf 
Top-1 Accuracy = 0.24598594366036228 
Top-2 Accuracy = 0.398 
iter 25: [0.24598594366036228] 
setting: robuste|rf 
Top-1 Accuracy = 0.21370207416719045 
Top-2 Accuracy = 0.365 
iter 26: [0.21370207416719045] 
setting: robustO|rf 
Top-1 Accuracy = 0.2976972744414605 
Top-2 Accuracy = 0.459 
iter 27: [0.2976972744414605] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.2976972744414605 
Top-2 Accuracy = 0.459 
iter 28: [0.2976972744414605] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.21455916804754013 
Top-2 Accuracy = 0.366 
iter 29: [0.21455916804754013] 
Run # 19 
======= 
setting: standardizeY|rf 
Top-1 Accuracy = 0.24427175589966288 
Top-2 Accuracy = 0.396 
iter 0: [0.24427175589966288] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.21370207416719045 
Top-2 Accuracy = 0.362 
iter 1: [0.21370207416719045] 
setting: robustt|rf 
Top-1 Accuracy = 0.2964402034169476 
Top-2 Accuracy = 0.459 
iter 2: [0.2964402034169476] 
setting: robustM|rf 
Top-1 Accuracy = 0.2977544140334838 
Top-2 Accuracy = 0.459 
iter 3: [0.2977544140334838] 
setting: standardizec|rf 
Top-1 Accuracy = 0.24587166447631564 
Top-2 Accuracy = 0.396 
iter 4: [0.24587166447631564] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.2474715730529684 
Top-2 Accuracy = 0.4 
iter 5: [0.2474715730529684] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.2978686932175304 
Top-2 Accuracy = 0.459 
iter 6: [0.2978686932175304] 
setting: robustU|rf 
Top-1 Accuracy = 0.2977544140334838 
Top-2 Accuracy = 0.459 
iter 7: [0.2977544140334838] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.2977544140334838 
Top-2 Accuracy = 0.459 
iter 8: [0.2977544140334838] 
setting: robustp|rf 
Top-1 Accuracy = 0.2118164676304211 
Top-2 Accuracy = 0.361 
iter 9: [0.2118164676304211] 
setting: robustq|rf 
Top-1 Accuracy = 0.2976972744414605 
Top-2 Accuracy = 0.459 
iter 10: [0.2976972744414605] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.2978115536255071 
Top-2 Accuracy = 0.459 
iter 11: [0.2978115536255071] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.2147877264156334 
Top-2 Accuracy = 0.365 
iter 12: [0.2147877264156334] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.2426147077309868 
Top-2 Accuracy = 0.397 
iter 13: [0.2426147077309868] 
setting: normalizez|rf 
Top-1 Accuracy = 0.29712587852122735 
Top-2 Accuracy = 0.458 
iter 14: [0.29712587852122735] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.2965544826009942 
Top-2 Accuracy = 0.459 
iter 15: [0.2965544826009942] 
setting: robustk|rf 
Top-1 Accuracy = 0.29666876178504087 
Top-2 Accuracy = 0.459 
iter 16: [0.29666876178504087] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.24267184732301011 
Top-2 Accuracy = 0.386 
iter 17: [0.24267184732301011] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.24467173304382606 
Top-2 Accuracy = 0.4 
iter 18: [0.24467173304382606] 
setting: robusth|rf 
Top-1 Accuracy = 0.21713044968858922 
Top-2 Accuracy = 0.366 
iter 19: [0.21713044968858922] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.21381635335123708 
Top-2 Accuracy = 0.364 
iter 20: [0.21381635335123708] 
setting: robustH|rf 
Top-1 Accuracy = 0.21444488886349353 
Top-2 Accuracy = 0.365 
iter 21: [0.21444488886349353] 
setting: robustx|rf 
Top-1 Accuracy = 0.27112736415061994 
Top-2 Accuracy = 0.42 
iter 22: [0.27112736415061994] 
setting: normalizes|rf 
Top-1 Accuracy = 0.24244328895491687 
Top-2 Accuracy = 0.396 
iter 23: [0.24244328895491687] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.21473058682361007 
Top-2 Accuracy = 0.366 
iter 24: [0.21473058682361007] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.2964402034169476 
Top-2 Accuracy = 0.461 
iter 25: [0.2964402034169476] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.21210216559053768 
Top-2 Accuracy = 0.361 
iter 26: [0.21210216559053768] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.24255756813896348 
Top-2 Accuracy = 0.385 
iter 27: [0.24255756813896348] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.2117021884463745 
Top-2 Accuracy = 0.363 
iter 28: [0.2117021884463745] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.21381635335123708 
Top-2 Accuracy = 0.362 
iter 29: [0.21381635335123708] 
 
Median top-1 = 0.2705845380263985 
Median top-2 = 0.421 
Running: chromium 
============================== 
2 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=77), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=30), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=69), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=13), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=74), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=41), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=70), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=66), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=62), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=68), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=34), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=56), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=52), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=42), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=82), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=86), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=28), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=24), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=90), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=41), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=81), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=64), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=89), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=82), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=23), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=96), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=83), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=82), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=69), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=50), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=84), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=26), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=31), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=33), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=42), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=17), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=90), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=15), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=50), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=11), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=63), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=30), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: maxabsc|rf 
Top-1 Accuracy = 0.6705902519856008 
Top-2 Accuracy = 1.0 
iter 0: [0.6705902519856008] 
setting: robustt|rf 
Top-1 Accuracy = 0.6085937946403063 
Top-2 Accuracy = 1.0 
iter 1: [0.6085937946403063] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.6349351465630535 
Top-2 Accuracy = 1.0 
iter 2: [0.6349351465630535] 
setting: robustG|rf 
Top-1 Accuracy = 0.5239700588537798 
Top-2 Accuracy = 1.0 
iter 3: [0.5239700588537798] 
setting: robustA|rf 
Top-1 Accuracy = 0.5239700588537798 
Top-2 Accuracy = 1.0 
iter 4: [0.5239700588537798] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.6371635906519627 
Top-2 Accuracy = 1.0 
iter 5: [0.6371635906519627] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.6111650762813553 
Top-2 Accuracy = 1.0 
iter 6: [0.6111650762813553] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.6128221244500315 
Top-2 Accuracy = 1.0 
iter 7: [0.6128221244500315] 
setting: normalizej|rf 
Top-1 Accuracy = 0.6113364950574253 
Top-2 Accuracy = 1.0 
iter 8: [0.6113364950574253] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.6160219416033369 
Top-2 Accuracy = 1.0 
iter 9: [0.6160219416033369] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.6349351465630535 
Top-2 Accuracy = 1.0 
iter 10: [0.6349351465630535] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.6706473915776241 
Top-2 Accuracy = 1.0 
iter 11: [0.6706473915776241] 
setting: robustP|rf 
Top-1 Accuracy = 0.5564253471230215 
Top-2 Accuracy = 1.0 
iter 12: [0.5564253471230215] 
setting: robustN|rf 
Top-1 Accuracy = 0.6349351465630535 
Top-2 Accuracy = 1.0 
iter 13: [0.6349351465630535] 
setting: robustn|rf 
Top-1 Accuracy = 0.6707045311696475 
Top-2 Accuracy = 1.0 
iter 14: [0.6707045311696475] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.6706473915776241 
Top-2 Accuracy = 1.0 
iter 15: [0.6706473915776241] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.6349351465630535 
Top-2 Accuracy = 1.0 
iter 16: [0.6349351465630535] 
setting: minmaxw|rf 
Top-1 Accuracy = 0.6349351465630535 
Top-2 Accuracy = 1.0 
iter 17: [0.6349351465630535] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.6341351922747271 
Top-2 Accuracy = 1.0 
iter 18: [0.6341351922747271] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.6336780755385406 
Top-2 Accuracy = 1.0 
iter 19: [0.6336780755385406] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.6114507742414719 
Top-2 Accuracy = 1.0 
iter 20: [0.6114507742414719] 
setting: robuste|rf 
Top-1 Accuracy = 0.6681903891206217 
Top-2 Accuracy = 1.0 
iter 21: [0.6681903891206217] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.6372778698360094 
Top-2 Accuracy = 1.0 
iter 22: [0.6372778698360094] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.6447631563910634 
Top-2 Accuracy = 1.0 
iter 23: [0.6447631563910634] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.6676189932003885 
Top-2 Accuracy = 1.0 
iter 24: [0.6676189932003885] 
setting: standardized|rf 
Top-1 Accuracy = 0.6142506142506142 
Top-2 Accuracy = 1.0 
iter 25: [0.6142506142506142] 
setting: standardizep|rf 
Top-1 Accuracy = 0.6313353522655848 
Top-2 Accuracy = 1.0 
iter 26: [0.6313353522655848] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.6104222615850523 
Top-2 Accuracy = 1.0 
iter 27: [0.6104222615850523] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.657105308268099 
Top-2 Accuracy = 1.0 
iter 28: [0.657105308268099] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.6672190160562254 
Top-2 Accuracy = 1.0 
iter 29: [0.6672190160562254] 
Run # 1 
====== 
setting: maxabsR|rf 
Top-1 Accuracy = 0.657105308268099 
Top-2 Accuracy = 1.0 
iter 0: [0.657105308268099] 
setting: robustI|rf 
Top-1 Accuracy = 0.6081938174961431 
Top-2 Accuracy = 1.0 
iter 1: [0.6081938174961431] 
setting: normalizel|rf 
Top-1 Accuracy = 0.6554482600994229 
Top-2 Accuracy = 1.0 
iter 2: [0.6554482600994229] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.6071653048397234 
Top-2 Accuracy = 1.0 
iter 3: [0.6071653048397234] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.606708188103537 
Top-2 Accuracy = 1.0 
iter 4: [0.606708188103537] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.6660190846237358 
Top-2 Accuracy = 1.0 
iter 5: [0.6660190846237358] 
setting: robustS|rf 
Top-1 Accuracy = 0.6655619678875493 
Top-2 Accuracy = 1.0 
iter 6: [0.6655619678875493] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.6660190846237358 
Top-2 Accuracy = 1.0 
iter 7: [0.6660190846237358] 
setting: robustg|rf 
Top-1 Accuracy = 0.6587052168447517 
Top-2 Accuracy = 1.0 
iter 8: [0.6587052168447517] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.604879721158791 
Top-2 Accuracy = 1.0 
iter 9: [0.604879721158791] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.6660190846237358 
Top-2 Accuracy = 1.0 
iter 10: [0.6660190846237358] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.6513913490657677 
Top-2 Accuracy = 1.0 
iter 11: [0.6513913490657677] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.6613907776698474 
Top-2 Accuracy = 1.0 
iter 12: [0.6613907776698474] 
setting: normalizej|rf 
Top-1 Accuracy = 0.6611622193017542 
Top-2 Accuracy = 1.0 
iter 13: [0.6611622193017542] 
setting: robusta|rf 
Top-1 Accuracy = 0.6369921718758929 
Top-2 Accuracy = 1.0 
iter 14: [0.6369921718758929] 
setting: standardizen|rf 
Top-1 Accuracy = 0.6106508199531455 
Top-2 Accuracy = 1.0 
iter 15: [0.6106508199531455] 
setting: normalizei|rf 
Top-1 Accuracy = 0.6313353522655848 
Top-2 Accuracy = 1.0 
iter 16: [0.6313353522655848] 
setting: robustO|rf 
Top-1 Accuracy = 0.6553339809153763 
Top-2 Accuracy = 1.0 
iter 17: [0.6553339809153763] 
setting: robustY|rf 
Top-1 Accuracy = 0.6052225587109308 
Top-2 Accuracy = 1.0 
iter 18: [0.6052225587109308] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.6352208445231701 
Top-2 Accuracy = 1.0 
iter 19: [0.6352208445231701] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.6106508199531455 
Top-2 Accuracy = 1.0 
iter 20: [0.6106508199531455] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.6110507970973087 
Top-2 Accuracy = 1.0 
iter 21: [0.6110507970973087] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.6324781441060511 
Top-2 Accuracy = 1.0 
iter 22: [0.6324781441060511] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.6601337066453346 
Top-2 Accuracy = 1.0 
iter 23: [0.6601337066453346] 
setting: maxabss|rf 
Top-1 Accuracy = 0.6416204788297811 
Top-2 Accuracy = 1.0 
iter 24: [0.6416204788297811] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.6509913719216045 
Top-2 Accuracy = 1.0 
iter 25: [0.6509913719216045] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.6601337066453346 
Top-2 Accuracy = 1.0 
iter 26: [0.6601337066453346] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.6338494943146106 
Top-2 Accuracy = 1.0 
iter 27: [0.6338494943146106] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.6509913719216045 
Top-2 Accuracy = 1.0 
iter 28: [0.6509913719216045] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.6509913719216045 
Top-2 Accuracy = 1.0 
iter 29: [0.6509913719216045] 
Run # 2 
====== 
setting: robustG|rf 
Top-1 Accuracy = 0.6087080738243529 
Top-2 Accuracy = 1.0 
iter 0: [0.6087080738243529] 
setting: maxabso|rf 
Top-1 Accuracy = 0.6509913719216045 
Top-2 Accuracy = 1.0 
iter 1: [0.6509913719216045] 
setting: robusth|rf 
Top-1 Accuracy = 0.6509913719216045 
Top-2 Accuracy = 1.0 
iter 2: [0.6509913719216045] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.6509913719216045 
Top-2 Accuracy = 1.0 
iter 3: [0.6509913719216045] 
setting: standardizem|rf 
Top-1 Accuracy = 0.6117364722015884 
Top-2 Accuracy = 1.0 
iter 4: [0.6117364722015884] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.6601337066453346 
Top-2 Accuracy = 1.0 
iter 5: [0.6601337066453346] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.6489343466087653 
Top-2 Accuracy = 1.0 
iter 6: [0.6489343466087653] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.6635620821667333 
Top-2 Accuracy = 1.0 
iter 7: [0.6635620821667333] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.6631621050225701 
Top-2 Accuracy = 1.0 
iter 8: [0.6631621050225701] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.6370493114679161 
Top-2 Accuracy = 1.0 
iter 9: [0.6370493114679161] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.6067653276955602 
Top-2 Accuracy = 1.0 
iter 10: [0.6067653276955602] 
setting: robustz|rf 
Top-1 Accuracy = 0.6061367921833039 
Top-2 Accuracy = 1.0 
iter 11: [0.6061367921833039] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.6368207530998229 
Top-2 Accuracy = 1.0 
iter 12: [0.6368207530998229] 
setting: robustq|rf 
Top-1 Accuracy = 0.60727958402377 
Top-2 Accuracy = 1.0 
iter 13: [0.60727958402377] 
setting: normalizek|rf 
Top-1 Accuracy = 0.6617907548140106 
Top-2 Accuracy = 1.0 
iter 14: [0.6617907548140106] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.6319067481858179 
Top-2 Accuracy = 1.0 
iter 15: [0.6319067481858179] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.6627049882863837 
Top-2 Accuracy = 1.0 
iter 16: [0.6627049882863837] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.66350494257471 
Top-2 Accuracy = 1.0 
iter 17: [0.66350494257471] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.6497914404891149 
Top-2 Accuracy = 1.0 
iter 18: [0.6497914404891149] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.6429346894463174 
Top-2 Accuracy = 1.0 
iter 19: [0.6429346894463174] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.6063653505513971 
Top-2 Accuracy = 1.0 
iter 20: [0.6063653505513971] 
setting: robustH|rf 
Top-1 Accuracy = 0.6497914404891149 
Top-2 Accuracy = 1.0 
iter 21: [0.6497914404891149] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.6088223530083995 
Top-2 Accuracy = 1.0 
iter 22: [0.6088223530083995] 
setting: robusty|rf 
Top-1 Accuracy = 0.6631049654305469 
Top-2 Accuracy = 1.0 
iter 23: [0.6631049654305469] 
setting: normalizem|rf 
Top-1 Accuracy = 0.6488772070167419 
Top-2 Accuracy = 1.0 
iter 24: [0.6488772070167419] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.6316781898177247 
Top-2 Accuracy = 1.0 
iter 25: [0.6316781898177247] 
setting: robustp|rf 
Top-1 Accuracy = 0.6627621278784069 
Top-2 Accuracy = 1.0 
iter 26: [0.6627621278784069] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.6629335466544769 
Top-2 Accuracy = 1.0 
iter 27: [0.6629335466544769] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.6075081423918633 
Top-2 Accuracy = 1.0 
iter 28: [0.6075081423918633] 
setting: robustd|rf 
Top-1 Accuracy = 0.6393920347408719 
Top-2 Accuracy = 1.0 
iter 29: [0.6393920347408719] 
Run # 3 
====== 
setting: minmaxC|rf 
Top-1 Accuracy = 0.6647620135992229 
Top-2 Accuracy = 1.0 
iter 0: [0.6647620135992229] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.6625335695103137 
Top-2 Accuracy = 1.0 
iter 1: [0.6625335695103137] 
setting: normalizey|rf 
Top-1 Accuracy = 0.6110507970973087 
Top-2 Accuracy = 1.0 
iter 2: [0.6110507970973087] 
setting: robustZ|rf 
Top-1 Accuracy = 0.652191303354094 
Top-2 Accuracy = 1.0 
iter 3: [0.652191303354094] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.6121364493457516 
Top-2 Accuracy = 1.0 
iter 4: [0.6121364493457516] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.6403634078052682 
Top-2 Accuracy = 1.0 
iter 5: [0.6403634078052682] 
setting: normalized|rf 
Top-1 Accuracy = 0.6392206159648021 
Top-2 Accuracy = 1.0 
iter 6: [0.6392206159648021] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.6296211645048855 
Top-2 Accuracy = 1.0 
iter 7: [0.6296211645048855] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.6374492886120793 
Top-2 Accuracy = 1.0 
iter 8: [0.6374492886120793] 
setting: robusto|rf 
Top-1 Accuracy = 0.6406491057653848 
Top-2 Accuracy = 1.0 
iter 9: [0.6406491057653848] 
setting: robustj|rf 
Top-1 Accuracy = 0.6520198845780241 
Top-2 Accuracy = 1.0 
iter 10: [0.6520198845780241] 
setting: robustW|rf 
Top-1 Accuracy = 0.6067653276955602 
Top-2 Accuracy = 1.0 
iter 11: [0.6067653276955602] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.6075652819838866 
Top-2 Accuracy = 1.0 
iter 12: [0.6075652819838866] 
setting: normalizec|rf 
Top-1 Accuracy = 0.6613336380778241 
Top-2 Accuracy = 1.0 
iter 13: [0.6613336380778241] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.6100794240329124 
Top-2 Accuracy = 1.0 
iter 14: [0.6100794240329124] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.6621335923661505 
Top-2 Accuracy = 1.0 
iter 15: [0.6621335923661505] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.6621335923661505 
Top-2 Accuracy = 1.0 
iter 16: [0.6621335923661505] 
setting: normalizex|rf 
Top-1 Accuracy = 0.6340209130906805 
Top-2 Accuracy = 1.0 
iter 17: [0.6340209130906805] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.6052225587109308 
Top-2 Accuracy = 1.0 
iter 18: [0.6052225587109308] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.6061367921833039 
Top-2 Accuracy = 1.0 
iter 19: [0.6061367921833039] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.6101365636249357 
Top-2 Accuracy = 1.0 
iter 20: [0.6101365636249357] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.6502485572253014 
Top-2 Accuracy = 1.0 
iter 21: [0.6502485572253014] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.6497914404891149 
Top-2 Accuracy = 1.0 
iter 22: [0.6497914404891149] 
setting: robusty|rf 
Top-1 Accuracy = 0.6497914404891149 
Top-2 Accuracy = 1.0 
iter 23: [0.6497914404891149] 
setting: normalizee|rf 
Top-1 Accuracy = 0.649448602936975 
Top-2 Accuracy = 1.0 
iter 24: [0.649448602936975] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.6405919661733616 
Top-2 Accuracy = 1.0 
iter 25: [0.6405919661733616] 
setting: robustV|rf 
Top-1 Accuracy = 0.6125364264899149 
Top-2 Accuracy = 1.0 
iter 26: [0.6125364264899149] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.6068224672875836 
Top-2 Accuracy = 1.0 
iter 27: [0.6068224672875836] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.6356208216673332 
Top-2 Accuracy = 1.0 
iter 28: [0.6356208216673332] 
setting: normalizek|rf 
Top-1 Accuracy = 0.6376778469801726 
Top-2 Accuracy = 1.0 
iter 29: [0.6376778469801726] 
Run # 4 
====== 
setting: standardizew|rf 
Top-1 Accuracy = 0.6629906862465001 
Top-2 Accuracy = 1.0 
iter 0: [0.6629906862465001] 
setting: normalizew|rf 
Top-1 Accuracy = 0.606708188103537 
Top-2 Accuracy = 1.0 
iter 1: [0.606708188103537] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.6070510256556768 
Top-2 Accuracy = 1.0 
iter 2: [0.6070510256556768] 
setting: standardizef|rf 
Top-1 Accuracy = 0.6368778926918461 
Top-2 Accuracy = 1.0 
iter 3: [0.6368778926918461] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.6397920118850351 
Top-2 Accuracy = 1.0 
iter 4: [0.6397920118850351] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.6639620593108965 
Top-2 Accuracy = 1.0 
iter 5: [0.6639620593108965] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.6511627906976745 
Top-2 Accuracy = 1.0 
iter 6: [0.6511627906976745] 
setting: normalizev|rf 
Top-1 Accuracy = 0.6107079595451689 
Top-2 Accuracy = 1.0 
iter 7: [0.6107079595451689] 
setting: robusts|rf 
Top-1 Accuracy = 0.6080223987200731 
Top-2 Accuracy = 1.0 
iter 8: [0.6080223987200731] 
setting: robustX|rf 
Top-1 Accuracy = 0.6637906405348266 
Top-2 Accuracy = 1.0 
iter 9: [0.6637906405348266] 
setting: normalizec|rf 
Top-1 Accuracy = 0.6329352608422376 
Top-2 Accuracy = 1.0 
iter 10: [0.6329352608422376] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.6470487400719959 
Top-2 Accuracy = 1.0 
iter 11: [0.6470487400719959] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.6104794011770756 
Top-2 Accuracy = 1.0 
iter 12: [0.6104794011770756] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.641049082909548 
Top-2 Accuracy = 1.0 
iter 13: [0.641049082909548] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.6633335237986401 
Top-2 Accuracy = 1.0 
iter 14: [0.6633335237986401] 
setting: robustc|rf 
Top-1 Accuracy = 0.6370493114679161 
Top-2 Accuracy = 1.0 
iter 15: [0.6370493114679161] 
setting: robustW|rf 
Top-1 Accuracy = 0.6633335237986401 
Top-2 Accuracy = 1.0 
iter 16: [0.6633335237986401] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.6640763384949432 
Top-2 Accuracy = 1.0 
iter 17: [0.6640763384949432] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.6388777784126621 
Top-2 Accuracy = 1.0 
iter 18: [0.6388777784126621] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.6335066567624708 
Top-2 Accuracy = 1.0 
iter 19: [0.6335066567624708] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.6097937260727958 
Top-2 Accuracy = 1.0 
iter 20: [0.6097937260727958] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.6641334780869664 
Top-2 Accuracy = 1.0 
iter 21: [0.6641334780869664] 
setting: robustT|rf 
Top-1 Accuracy = 0.664247757271013 
Top-2 Accuracy = 1.0 
iter 22: [0.664247757271013] 
setting: robustq|rf 
Top-1 Accuracy = 0.6385349408605222 
Top-2 Accuracy = 1.0 
iter 23: [0.6385349408605222] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.6381921033083824 
Top-2 Accuracy = 1.0 
iter 24: [0.6381921033083824] 
setting: standardizev|rf 
Top-1 Accuracy = 0.651448488657791 
Top-2 Accuracy = 1.0 
iter 25: [0.651448488657791] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.6110507970973087 
Top-2 Accuracy = 1.0 
iter 26: [0.6110507970973087] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.6479629735443689 
Top-2 Accuracy = 1.0 
iter 27: [0.6479629735443689] 
setting: robustg|rf 
Top-1 Accuracy = 0.6631621050225701 
Top-2 Accuracy = 1.0 
iter 28: [0.6631621050225701] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.6102508428089823 
Top-2 Accuracy = 1.0 
iter 29: [0.6102508428089823] 
Run # 5 
====== 
setting: normalizem|rf 
Top-1 Accuracy = 0.6634478029826867 
Top-2 Accuracy = 1.0 
iter 0: [0.6634478029826867] 
setting: robustK|rf 
Top-1 Accuracy = 0.6381921033083824 
Top-2 Accuracy = 1.0 
iter 1: [0.6381921033083824] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.6375635677961259 
Top-2 Accuracy = 1.0 
iter 2: [0.6375635677961259] 
setting: standardizem|rf 
Top-1 Accuracy = 0.6461345065996229 
Top-2 Accuracy = 1.0 
iter 3: [0.6461345065996229] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.6445917376149934 
Top-2 Accuracy = 1.0 
iter 4: [0.6445917376149934] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.6418490371978745 
Top-2 Accuracy = 1.0 
iter 5: [0.6418490371978745] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.6445917376149934 
Top-2 Accuracy = 1.0 
iter 6: [0.6445917376149934] 
setting: maxabse|rf 
Top-1 Accuracy = 0.6384206616764756 
Top-2 Accuracy = 1.0 
iter 7: [0.6384206616764756] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.6402491286212216 
Top-2 Accuracy = 1.0 
iter 8: [0.6402491286212216] 
setting: robustr|rf 
Top-1 Accuracy = 0.6445917376149934 
Top-2 Accuracy = 1.0 
iter 9: [0.6445917376149934] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.6646477344151763 
Top-2 Accuracy = 1.0 
iter 10: [0.6646477344151763] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.6643620364550598 
Top-2 Accuracy = 1.0 
iter 11: [0.6643620364550598] 
setting: standardizet|rf 
Top-1 Accuracy = 0.6445345980229701 
Top-2 Accuracy = 1.0 
iter 12: [0.6445345980229701] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.6648762927832695 
Top-2 Accuracy = 1.0 
iter 13: [0.6648762927832695] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.638477801268499 
Top-2 Accuracy = 1.0 
iter 14: [0.638477801268499] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.6438489229186903 
Top-2 Accuracy = 1.0 
iter 15: [0.6438489229186903] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.6369921718758929 
Top-2 Accuracy = 1.0 
iter 16: [0.6369921718758929] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.6093366093366094 
Top-2 Accuracy = 1.0 
iter 17: [0.6093366093366094] 
setting: standardized|rf 
Top-1 Accuracy = 0.6632192446145935 
Top-2 Accuracy = 1.0 
iter 18: [0.6632192446145935] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.6632192446145935 
Top-2 Accuracy = 1.0 
iter 19: [0.6632192446145935] 
setting: maxabst|rf 
Top-1 Accuracy = 0.6458488086395063 
Top-2 Accuracy = 1.0 
iter 20: [0.6458488086395063] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.6458488086395063 
Top-2 Accuracy = 1.0 
iter 21: [0.6458488086395063] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.6100794240329124 
Top-2 Accuracy = 1.0 
iter 22: [0.6100794240329124] 
setting: robustq|rf 
Top-1 Accuracy = 0.6458488086395063 
Top-2 Accuracy = 1.0 
iter 23: [0.6458488086395063] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.6632192446145935 
Top-2 Accuracy = 1.0 
iter 24: [0.6632192446145935] 
setting: standardizen|rf 
Top-1 Accuracy = 0.6119078909776584 
Top-2 Accuracy = 1.0 
iter 25: [0.6119078909776584] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.6632192446145935 
Top-2 Accuracy = 1.0 
iter 26: [0.6632192446145935] 
setting: robustU|rf 
Top-1 Accuracy = 0.6458488086395063 
Top-2 Accuracy = 1.0 
iter 27: [0.6458488086395063] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.6084223758642363 
Top-2 Accuracy = 1.0 
iter 28: [0.6084223758642363] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.6663619221758756 
Top-2 Accuracy = 1.0 
iter 29: [0.6663619221758756] 
Run # 6 
====== 
setting: robuste|rf 
Top-1 Accuracy = 0.6458488086395063 
Top-2 Accuracy = 1.0 
iter 0: [0.6458488086395063] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.6378492657562425 
Top-2 Accuracy = 1.0 
iter 1: [0.6378492657562425] 
setting: standardizek|rf 
Top-1 Accuracy = 0.66367636135078 
Top-2 Accuracy = 1.0 
iter 2: [0.66367636135078] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.6055653962630707 
Top-2 Accuracy = 1.0 
iter 3: [0.6055653962630707] 
setting: normalizep|rf 
Top-1 Accuracy = 0.6077367007599566 
Top-2 Accuracy = 1.0 
iter 4: [0.6077367007599566] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.6091651905605394 
Top-2 Accuracy = 1.0 
iter 5: [0.6091651905605394] 
setting: robustX|rf 
Top-1 Accuracy = 0.6443060396548769 
Top-2 Accuracy = 1.0 
iter 6: [0.6443060396548769] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.638306382492429 
Top-2 Accuracy = 1.0 
iter 7: [0.638306382492429] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.6656762470715959 
Top-2 Accuracy = 1.0 
iter 8: [0.6656762470715959] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.6133935203702645 
Top-2 Accuracy = 1.0 
iter 9: [0.6133935203702645] 
setting: standardizei|rf 
Top-1 Accuracy = 0.6080795383120965 
Top-2 Accuracy = 1.0 
iter 10: [0.6080795383120965] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.6443060396548769 
Top-2 Accuracy = 1.0 
iter 11: [0.6443060396548769] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.6443060396548769 
Top-2 Accuracy = 1.0 
iter 12: [0.6443060396548769] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.6084223758642363 
Top-2 Accuracy = 1.0 
iter 13: [0.6084223758642363] 
setting: maxabss|rf 
Top-1 Accuracy = 0.664247757271013 
Top-2 Accuracy = 1.0 
iter 14: [0.664247757271013] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.6419061767898977 
Top-2 Accuracy = 1.0 
iter 15: [0.6419061767898977] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.6100794240329124 
Top-2 Accuracy = 1.0 
iter 16: [0.6100794240329124] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.6460773670075995 
Top-2 Accuracy = 1.0 
iter 17: [0.6460773670075995] 
setting: robustn|rf 
Top-1 Accuracy = 0.6087652134163762 
Top-2 Accuracy = 1.0 
iter 18: [0.6087652134163762] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.645791669047483 
Top-2 Accuracy = 1.0 
iter 19: [0.645791669047483] 
setting: standardizet|rf 
Top-1 Accuracy = 0.6404205473972916 
Top-2 Accuracy = 1.0 
iter 20: [0.6404205473972916] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.6456773898634364 
Top-2 Accuracy = 1.0 
iter 21: [0.6456773898634364] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.6069938860636535 
Top-2 Accuracy = 1.0 
iter 22: [0.6069938860636535] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.664247757271013 
Top-2 Accuracy = 1.0 
iter 23: [0.664247757271013] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.6468201817039027 
Top-2 Accuracy = 1.0 
iter 24: [0.6468201817039027] 
setting: normalizew|rf 
Top-1 Accuracy = 0.6420204559739443 
Top-2 Accuracy = 1.0 
iter 25: [0.6420204559739443] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.6643620364550598 
Top-2 Accuracy = 1.0 
iter 26: [0.6643620364550598] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.6093937489286326 
Top-2 Accuracy = 1.0 
iter 27: [0.6093937489286326] 
setting: standardized|rf 
Top-1 Accuracy = 0.6643048968630364 
Top-2 Accuracy = 1.0 
iter 28: [0.6643048968630364] 
setting: standardizey|rf 
Top-1 Accuracy = 0.6443631792469002 
Top-2 Accuracy = 1.0 
iter 29: [0.6443631792469002] 
Run # 7 
====== 
setting: minmaxw|rf 
Top-1 Accuracy = 0.641220501685618 
Top-2 Accuracy = 1.0 
iter 0: [0.641220501685618] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.6643048968630364 
Top-2 Accuracy = 1.0 
iter 1: [0.6643048968630364] 
setting: standardizem|rf 
Top-1 Accuracy = 0.6431632478144106 
Top-2 Accuracy = 1.0 
iter 2: [0.6431632478144106] 
setting: normalizez|rf 
Top-1 Accuracy = 0.6455059710873664 
Top-2 Accuracy = 1.0 
iter 3: [0.6455059710873664] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.6455059710873664 
Top-2 Accuracy = 1.0 
iter 4: [0.6455059710873664] 
setting: normalizes|rf 
Top-1 Accuracy = 0.6071653048397234 
Top-2 Accuracy = 1.0 
iter 5: [0.6071653048397234] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.6641906176789898 
Top-2 Accuracy = 1.0 
iter 6: [0.6641906176789898] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.6460773670075995 
Top-2 Accuracy = 1.0 
iter 7: [0.6460773670075995] 
setting: robustc|rf 
Top-1 Accuracy = 0.6436203645505971 
Top-2 Accuracy = 1.0 
iter 8: [0.6436203645505971] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.6423632935260842 
Top-2 Accuracy = 1.0 
iter 9: [0.6423632935260842] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.6460773670075995 
Top-2 Accuracy = 1.0 
iter 10: [0.6460773670075995] 
setting: maxabse|rf 
Top-1 Accuracy = 0.6385349408605222 
Top-2 Accuracy = 1.0 
iter 11: [0.6385349408605222] 
setting: standardizew|rf 
Top-1 Accuracy = 0.6093366093366094 
Top-2 Accuracy = 1.0 
iter 12: [0.6093366093366094] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.6046511627906976 
Top-2 Accuracy = 1.0 
iter 13: [0.6046511627906976] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.6109365179132621 
Top-2 Accuracy = 1.0 
iter 14: [0.6109365179132621] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.6048225815667676 
Top-2 Accuracy = 1.0 
iter 15: [0.6048225815667676] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.6144220330266842 
Top-2 Accuracy = 1.0 
iter 16: [0.6144220330266842] 
setting: robustR|rf 
Top-1 Accuracy = 0.6060796525912805 
Top-2 Accuracy = 1.0 
iter 17: [0.6060796525912805] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.6384206616764756 
Top-2 Accuracy = 1.0 
iter 18: [0.6384206616764756] 
setting: robustj|rf 
Top-1 Accuracy = 0.6095651677047026 
Top-2 Accuracy = 1.0 
iter 19: [0.6095651677047026] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.6405348265813382 
Top-2 Accuracy = 1.0 
iter 20: [0.6405348265813382] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.638477801268499 
Top-2 Accuracy = 1.0 
iter 21: [0.638477801268499] 
setting: robusti|rf 
Top-1 Accuracy = 0.6417918976058511 
Top-2 Accuracy = 1.0 
iter 22: [0.6417918976058511] 
setting: robustI|rf 
Top-1 Accuracy = 0.6633335237986401 
Top-2 Accuracy = 1.0 
iter 23: [0.6633335237986401] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.6468773212959259 
Top-2 Accuracy = 1.0 
iter 24: [0.6468773212959259] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.6632763842066167 
Top-2 Accuracy = 1.0 
iter 25: [0.6632763842066167] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.6632763842066167 
Top-2 Accuracy = 1.0 
iter 26: [0.6632763842066167] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.6118507513856352 
Top-2 Accuracy = 1.0 
iter 27: [0.6118507513856352] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.6468773212959259 
Top-2 Accuracy = 1.0 
iter 28: [0.6468773212959259] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.6464773441517627 
Top-2 Accuracy = 1.0 
iter 29: [0.6464773441517627] 
Run # 8 
====== 
setting: minmaxD|rf 
Top-1 Accuracy = 0.6091651905605394 
Top-2 Accuracy = 1.0 
iter 0: [0.6091651905605394] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.6464773441517627 
Top-2 Accuracy = 1.0 
iter 1: [0.6464773441517627] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.6071081652477002 
Top-2 Accuracy = 1.0 
iter 2: [0.6071081652477002] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.6464773441517627 
Top-2 Accuracy = 1.0 
iter 3: [0.6464773441517627] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.6075081423918633 
Top-2 Accuracy = 1.0 
iter 4: [0.6075081423918633] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.6464773441517627 
Top-2 Accuracy = 1.0 
iter 5: [0.6464773441517627] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.6632763842066167 
Top-2 Accuracy = 1.0 
iter 6: [0.6632763842066167] 
setting: robustM|rf 
Top-1 Accuracy = 0.6390491971887321 
Top-2 Accuracy = 1.0 
iter 7: [0.6390491971887321] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.6633335237986401 
Top-2 Accuracy = 1.0 
iter 8: [0.6633335237986401] 
setting: robustK|rf 
Top-1 Accuracy = 0.6631621050225701 
Top-2 Accuracy = 1.0 
iter 9: [0.6631621050225701] 
setting: robustt|rf 
Top-1 Accuracy = 0.6088223530083995 
Top-2 Accuracy = 1.0 
iter 10: [0.6088223530083995] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.6099651448488658 
Top-2 Accuracy = 1.0 
iter 11: [0.6099651448488658] 
setting: normalizep|rf 
Top-1 Accuracy = 0.6479058339523456 
Top-2 Accuracy = 1.0 
iter 12: [0.6479058339523456] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.606708188103537 
Top-2 Accuracy = 1.0 
iter 13: [0.606708188103537] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.6633335237986401 
Top-2 Accuracy = 1.0 
iter 14: [0.6633335237986401] 
setting: robustN|rf 
Top-1 Accuracy = 0.6444203188389235 
Top-2 Accuracy = 1.0 
iter 15: [0.6444203188389235] 
setting: maxabsK|rf 
Top-1 Accuracy = 0.6084223758642363 
Top-2 Accuracy = 1.0 
iter 16: [0.6084223758642363] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.6633906633906634 
Top-2 Accuracy = 1.0 
iter 17: [0.6633906633906634] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.6479058339523456 
Top-2 Accuracy = 1.0 
iter 18: [0.6479058339523456] 
setting: standardizes|rf 
Top-1 Accuracy = 0.6060796525912805 
Top-2 Accuracy = 1.0 
iter 19: [0.6060796525912805] 
setting: standardizej|rf 
Top-1 Accuracy = 0.6070510256556768 
Top-2 Accuracy = 1.0 
iter 20: [0.6070510256556768] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.6633906633906634 
Top-2 Accuracy = 1.0 
iter 21: [0.6633906633906634] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.6097365864807726 
Top-2 Accuracy = 1.0 
iter 22: [0.6097365864807726] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.6633906633906634 
Top-2 Accuracy = 1.0 
iter 23: [0.6633906633906634] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.6479058339523456 
Top-2 Accuracy = 1.0 
iter 24: [0.6479058339523456] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.63556368207531 
Top-2 Accuracy = 1.0 
iter 25: [0.63556368207531] 
setting: robustC|rf 
Top-1 Accuracy = 0.6479058339523456 
Top-2 Accuracy = 1.0 
iter 26: [0.6479058339523456] 
setting: robustI|rf 
Top-1 Accuracy = 0.6479058339523456 
Top-2 Accuracy = 1.0 
iter 27: [0.6479058339523456] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.664590594823153 
Top-2 Accuracy = 1.0 
iter 28: [0.664590594823153] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.6636192217587566 
Top-2 Accuracy = 1.0 
iter 29: [0.6636192217587566] 
Run # 9 
====== 
setting: standardizeT|rf 
Top-1 Accuracy = 0.63539226329924 
Top-2 Accuracy = 1.0 
iter 0: [0.63539226329924] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.6099651448488658 
Top-2 Accuracy = 1.0 
iter 1: [0.6099651448488658] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.6458488086395063 
Top-2 Accuracy = 1.0 
iter 2: [0.6458488086395063] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.6406491057653848 
Top-2 Accuracy = 1.0 
iter 3: [0.6406491057653848] 
setting: robustI|rf 
Top-1 Accuracy = 0.6640191989029198 
Top-2 Accuracy = 1.0 
iter 4: [0.6640191989029198] 
setting: normalized|rf 
Top-1 Accuracy = 0.6100222844408891 
Top-2 Accuracy = 1.0 
iter 5: [0.6100222844408891] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.6492771841609051 
Top-2 Accuracy = 1.0 
iter 6: [0.6492771841609051] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.6328781212502143 
Top-2 Accuracy = 1.0 
iter 7: [0.6328781212502143] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.6359065196274498 
Top-2 Accuracy = 1.0 
iter 8: [0.6359065196274498] 
setting: robustg|rf 
Top-1 Accuracy = 0.6063653505513971 
Top-2 Accuracy = 1.0 
iter 9: [0.6063653505513971] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.6125935660819382 
Top-2 Accuracy = 1.0 
iter 10: [0.6125935660819382] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.6483058110965088 
Top-2 Accuracy = 1.0 
iter 11: [0.6483058110965088] 
setting: robustS|rf 
Top-1 Accuracy = 0.642877549854294 
Top-2 Accuracy = 1.0 
iter 12: [0.642877549854294] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.6352208445231701 
Top-2 Accuracy = 1.0 
iter 13: [0.6352208445231701] 
setting: robusta|rf 
Top-1 Accuracy = 0.6517341866179075 
Top-2 Accuracy = 1.0 
iter 14: [0.6517341866179075] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.6517341866179075 
Top-2 Accuracy = 1.0 
iter 15: [0.6517341866179075] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.6452202731272498 
Top-2 Accuracy = 1.0 
iter 16: [0.6452202731272498] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.6389349180046855 
Top-2 Accuracy = 1.0 
iter 17: [0.6389349180046855] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.6452202731272498 
Top-2 Accuracy = 1.0 
iter 18: [0.6452202731272498] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.6432775269984572 
Top-2 Accuracy = 1.0 
iter 19: [0.6432775269984572] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.6451059939432032 
Top-2 Accuracy = 1.0 
iter 20: [0.6451059939432032] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.6451059939432032 
Top-2 Accuracy = 1.0 
iter 21: [0.6451059939432032] 
setting: robustw|rf 
Top-1 Accuracy = 0.6400777098451517 
Top-2 Accuracy = 1.0 
iter 22: [0.6400777098451517] 
setting: standardizei|rf 
Top-1 Accuracy = 0.606708188103537 
Top-2 Accuracy = 1.0 
iter 23: [0.606708188103537] 
setting: robustu|rf 
Top-1 Accuracy = 0.6451059939432032 
Top-2 Accuracy = 1.0 
iter 24: [0.6451059939432032] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.609279469744586 
Top-2 Accuracy = 1.0 
iter 25: [0.609279469744586] 
setting: robustU|rf 
Top-1 Accuracy = 0.6397348722930118 
Top-2 Accuracy = 1.0 
iter 26: [0.6397348722930118] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.6416204788297811 
Top-2 Accuracy = 1.0 
iter 27: [0.6416204788297811] 
setting: robustk|rf 
Top-1 Accuracy = 0.6095651677047026 
Top-2 Accuracy = 1.0 
iter 28: [0.6095651677047026] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.6651619907433861 
Top-2 Accuracy = 1.0 
iter 29: [0.6651619907433861] 
Run # 10 
======= 
setting: robustp|rf 
Top-1 Accuracy = 0.6125364264899149 
Top-2 Accuracy = 1.0 
iter 0: [0.6125364264899149] 
setting: normalizez|rf 
Top-1 Accuracy = 0.6033369521741615 
Top-2 Accuracy = 1.0 
iter 1: [0.6033369521741615] 
setting: robustV|rf 
Top-1 Accuracy = 0.6104794011770756 
Top-2 Accuracy = 1.0 
iter 2: [0.6104794011770756] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.609450888520656 
Top-2 Accuracy = 1.0 
iter 3: [0.609450888520656] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.6418490371978745 
Top-2 Accuracy = 1.0 
iter 4: [0.6418490371978745] 
setting: normalizel|rf 
Top-1 Accuracy = 0.6619050339980572 
Top-2 Accuracy = 1.0 
iter 5: [0.6619050339980572] 
setting: standardizen|rf 
Top-1 Accuracy = 0.6332780983943774 
Top-2 Accuracy = 1.0 
iter 6: [0.6332780983943774] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.6489914862007885 
Top-2 Accuracy = 1.0 
iter 7: [0.6489914862007885] 
setting: robustE|rf 
Top-1 Accuracy = 0.6425347123021542 
Top-2 Accuracy = 1.0 
iter 8: [0.6425347123021542] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.6347065881949603 
Top-2 Accuracy = 1.0 
iter 9: [0.6347065881949603] 
setting: standardizel|rf 
Top-1 Accuracy = 0.6059653734072339 
Top-2 Accuracy = 1.0 
iter 10: [0.6059653734072339] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.6619050339980572 
Top-2 Accuracy = 1.0 
iter 11: [0.6619050339980572] 
setting: maxabst|rf 
Top-1 Accuracy = 0.6619621735900806 
Top-2 Accuracy = 1.0 
iter 12: [0.6619621735900806] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.6633906633906634 
Top-2 Accuracy = 1.0 
iter 13: [0.6633906633906634] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.6446488772070167 
Top-2 Accuracy = 1.0 
iter 14: [0.6446488772070167] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.6619050339980572 
Top-2 Accuracy = 1.0 
iter 15: [0.6619050339980572] 
setting: robustT|rf 
Top-1 Accuracy = 0.6619050339980572 
Top-2 Accuracy = 1.0 
iter 16: [0.6619050339980572] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.6348208673790069 
Top-2 Accuracy = 1.0 
iter 17: [0.6348208673790069] 
setting: normalized|rf 
Top-1 Accuracy = 0.6441917604708303 
Top-2 Accuracy = 1.0 
iter 18: [0.6441917604708303] 
setting: robustt|rf 
Top-1 Accuracy = 0.6441917604708303 
Top-2 Accuracy = 1.0 
iter 19: [0.6441917604708303] 
setting: normalizey|rf 
Top-1 Accuracy = 0.6086509342323296 
Top-2 Accuracy = 1.0 
iter 20: [0.6086509342323296] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.6383635220844524 
Top-2 Accuracy = 1.0 
iter 21: [0.6383635220844524] 
setting: robustq|rf 
Top-1 Accuracy = 0.6078509799440032 
Top-2 Accuracy = 1.0 
iter 22: [0.6078509799440032] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.6468201817039027 
Top-2 Accuracy = 1.0 
iter 23: [0.6468201817039027] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.609622307296726 
Top-2 Accuracy = 1.0 
iter 24: [0.609622307296726] 
setting: standardizes|rf 
Top-1 Accuracy = 0.6092223301525627 
Top-2 Accuracy = 1.0 
iter 25: [0.6092223301525627] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.6360207988114965 
Top-2 Accuracy = 1.0 
iter 26: [0.6360207988114965] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.6468201817039027 
Top-2 Accuracy = 1.0 
iter 27: [0.6468201817039027] 
setting: robustD|rf 
Top-1 Accuracy = 0.6621907319581738 
Top-2 Accuracy = 1.0 
iter 28: [0.6621907319581738] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.6385349408605222 
Top-2 Accuracy = 1.0 
iter 29: [0.6385349408605222] 
Run # 11 
======= 
setting: normalizeU|rf 
Top-1 Accuracy = 0.6323638649220045 
Top-2 Accuracy = 1.0 
iter 0: [0.6323638649220045] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.6321353065539113 
Top-2 Accuracy = 1.0 
iter 1: [0.6321353065539113] 
setting: standardizea|rf 
Top-1 Accuracy = 0.662590709102337 
Top-2 Accuracy = 1.0 
iter 2: [0.662590709102337] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.6393348951488487 
Top-2 Accuracy = 1.0 
iter 3: [0.6393348951488487] 
setting: normalizen|rf 
Top-1 Accuracy = 0.6073367236157934 
Top-2 Accuracy = 1.0 
iter 4: [0.6073367236157934] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.650362836409348 
Top-2 Accuracy = 1.0 
iter 5: [0.650362836409348] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.650362836409348 
Top-2 Accuracy = 1.0 
iter 6: [0.650362836409348] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.6466487629278327 
Top-2 Accuracy = 1.0 
iter 7: [0.6466487629278327] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.6371635906519627 
Top-2 Accuracy = 1.0 
iter 8: [0.6371635906519627] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.6395634535169419 
Top-2 Accuracy = 1.0 
iter 9: [0.6395634535169419] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.6057368150391407 
Top-2 Accuracy = 1.0 
iter 10: [0.6057368150391407] 
setting: robustx|rf 
Top-1 Accuracy = 0.6057939546311639 
Top-2 Accuracy = 1.0 
iter 11: [0.6057939546311639] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.6330495400262842 
Top-2 Accuracy = 1.0 
iter 12: [0.6330495400262842] 
setting: maxabso|rf 
Top-1 Accuracy = 0.6621335923661505 
Top-2 Accuracy = 1.0 
iter 13: [0.6621335923661505] 
setting: normalizey|rf 
Top-1 Accuracy = 0.6634478029826867 
Top-2 Accuracy = 1.0 
iter 14: [0.6634478029826867] 
setting: robustP|rf 
Top-1 Accuracy = 0.6640191989029198 
Top-2 Accuracy = 1.0 
iter 15: [0.6640191989029198] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.6029941146220216 
Top-2 Accuracy = 1.0 
iter 16: [0.6029941146220216] 
setting: robustL|rf 
Top-1 Accuracy = 0.6090509113764928 
Top-2 Accuracy = 1.0 
iter 17: [0.6090509113764928] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.6427632706702474 
Top-2 Accuracy = 1.0 
iter 18: [0.6427632706702474] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.6639620593108965 
Top-2 Accuracy = 1.0 
iter 19: [0.6639620593108965] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.6427632706702474 
Top-2 Accuracy = 1.0 
iter 20: [0.6427632706702474] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.6427632706702474 
Top-2 Accuracy = 1.0 
iter 21: [0.6427632706702474] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.60745100279984 
Top-2 Accuracy = 1.0 
iter 22: [0.60745100279984] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.6090509113764928 
Top-2 Accuracy = 1.0 
iter 23: [0.6090509113764928] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.6073938632078167 
Top-2 Accuracy = 1.0 
iter 24: [0.6073938632078167] 
setting: normalizej|rf 
Top-1 Accuracy = 0.6429346894463174 
Top-2 Accuracy = 1.0 
iter 25: [0.6429346894463174] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.6429346894463174 
Top-2 Accuracy = 1.0 
iter 26: [0.6429346894463174] 
setting: robustr|rf 
Top-1 Accuracy = 0.6395634535169419 
Top-2 Accuracy = 1.0 
iter 27: [0.6395634535169419] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.6640191989029198 
Top-2 Accuracy = 1.0 
iter 28: [0.6640191989029198] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.6641906176789898 
Top-2 Accuracy = 1.0 
iter 29: [0.6641906176789898] 
Run # 12 
======= 
setting: robustl|rf 
Top-1 Accuracy = 0.6637906405348266 
Top-2 Accuracy = 1.0 
iter 0: [0.6637906405348266] 
setting: robustv|rf 
Top-1 Accuracy = 0.6107650991371921 
Top-2 Accuracy = 1.0 
iter 1: [0.6107650991371921] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.6617907548140106 
Top-2 Accuracy = 1.0 
iter 2: [0.6617907548140106] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.6617336152219874 
Top-2 Accuracy = 1.0 
iter 3: [0.6617336152219874] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.6484772298725787 
Top-2 Accuracy = 1.0 
iter 4: [0.6484772298725787] 
setting: standardizer|rf 
Top-1 Accuracy = 0.6617907548140106 
Top-2 Accuracy = 1.0 
iter 5: [0.6617907548140106] 
setting: robusto|rf 
Top-1 Accuracy = 0.6376778469801726 
Top-2 Accuracy = 1.0 
iter 6: [0.6376778469801726] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.6063653505513971 
Top-2 Accuracy = 1.0 
iter 7: [0.6063653505513971] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.6625335695103137 
Top-2 Accuracy = 1.0 
iter 8: [0.6625335695103137] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.6393348951488487 
Top-2 Accuracy = 1.0 
iter 9: [0.6393348951488487] 
setting: normalizep|rf 
Top-1 Accuracy = 0.6625335695103137 
Top-2 Accuracy = 1.0 
iter 10: [0.6625335695103137] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.6485915090566253 
Top-2 Accuracy = 1.0 
iter 11: [0.6485915090566253] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.6485915090566253 
Top-2 Accuracy = 1.0 
iter 12: [0.6485915090566253] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.6485915090566253 
Top-2 Accuracy = 1.0 
iter 13: [0.6485915090566253] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.606708188103537 
Top-2 Accuracy = 1.0 
iter 14: [0.606708188103537] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.6403634078052682 
Top-2 Accuracy = 1.0 
iter 15: [0.6403634078052682] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.6485915090566253 
Top-2 Accuracy = 1.0 
iter 16: [0.6485915090566253] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.6485915090566253 
Top-2 Accuracy = 1.0 
iter 17: [0.6485915090566253] 
setting: robustu|rf 
Top-1 Accuracy = 0.6372778698360094 
Top-2 Accuracy = 1.0 
iter 18: [0.6372778698360094] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.6097365864807726 
Top-2 Accuracy = 1.0 
iter 19: [0.6097365864807726] 
setting: standardizel|rf 
Top-1 Accuracy = 0.6451059939432032 
Top-2 Accuracy = 1.0 
iter 20: [0.6451059939432032] 
setting: robustb|rf 
Top-1 Accuracy = 0.6050511399348608 
Top-2 Accuracy = 1.0 
iter 21: [0.6050511399348608] 
setting: robusts|rf 
Top-1 Accuracy = 0.6451059939432032 
Top-2 Accuracy = 1.0 
iter 22: [0.6451059939432032] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.6102508428089823 
Top-2 Accuracy = 1.0 
iter 23: [0.6102508428089823] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.6612764984858008 
Top-2 Accuracy = 1.0 
iter 24: [0.6612764984858008] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.604879721158791 
Top-2 Accuracy = 1.0 
iter 25: [0.604879721158791] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.6449917147591566 
Top-2 Accuracy = 1.0 
iter 26: [0.6449917147591566] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.6449917147591566 
Top-2 Accuracy = 1.0 
iter 27: [0.6449917147591566] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.6623621507342438 
Top-2 Accuracy = 1.0 
iter 28: [0.6623621507342438] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.637392149020056 
Top-2 Accuracy = 1.0 
iter 29: [0.637392149020056] 
Run # 13 
======= 
setting: minmaxE|rf 
Top-1 Accuracy = 0.6331066796183076 
Top-2 Accuracy = 1.0 
iter 0: [0.6331066796183076] 
setting: robustg|rf 
Top-1 Accuracy = 0.6621335923661505 
Top-2 Accuracy = 1.0 
iter 1: [0.6621335923661505] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.6600765670533112 
Top-2 Accuracy = 1.0 
iter 2: [0.6600765670533112] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.6105936803611223 
Top-2 Accuracy = 1.0 
iter 3: [0.6105936803611223] 
setting: standardizeh|rf 
Top-1 Accuracy = 0.6377921261642192 
Top-2 Accuracy = 1.0 
iter 4: [0.6377921261642192] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.6623621507342438 
Top-2 Accuracy = 1.0 
iter 5: [0.6623621507342438] 
setting: robustn|rf 
Top-1 Accuracy = 0.6647620135992229 
Top-2 Accuracy = 1.0 
iter 6: [0.6647620135992229] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.6647620135992229 
Top-2 Accuracy = 1.0 
iter 7: [0.6647620135992229] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.6070510256556768 
Top-2 Accuracy = 1.0 
iter 8: [0.6070510256556768] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.6080795383120965 
Top-2 Accuracy = 1.0 
iter 9: [0.6080795383120965] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.63556368207531 
Top-2 Accuracy = 1.0 
iter 10: [0.63556368207531] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.6442489000628535 
Top-2 Accuracy = 1.0 
iter 11: [0.6442489000628535] 
setting: normalizez|rf 
Top-1 Accuracy = 0.6639049197188732 
Top-2 Accuracy = 1.0 
iter 12: [0.6639049197188732] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.6457345294554597 
Top-2 Accuracy = 1.0 
iter 13: [0.6457345294554597] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.664419176047083 
Top-2 Accuracy = 1.0 
iter 14: [0.664419176047083] 
setting: maxabse|rf 
Top-1 Accuracy = 0.6643048968630364 
Top-2 Accuracy = 1.0 
iter 15: [0.6643048968630364] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.6363636363636364 
Top-2 Accuracy = 1.0 
iter 16: [0.6363636363636364] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.6457345294554597 
Top-2 Accuracy = 1.0 
iter 17: [0.6457345294554597] 
setting: standardizec|rf 
Top-1 Accuracy = 0.6107650991371921 
Top-2 Accuracy = 1.0 
iter 18: [0.6107650991371921] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.6351637049311468 
Top-2 Accuracy = 1.0 
iter 19: [0.6351637049311468] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.6457345294554597 
Top-2 Accuracy = 1.0 
iter 20: [0.6457345294554597] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.6457345294554597 
Top-2 Accuracy = 1.0 
iter 21: [0.6457345294554597] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.6081366779041197 
Top-2 Accuracy = 1.0 
iter 22: [0.6081366779041197] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.6387634992286155 
Top-2 Accuracy = 1.0 
iter 23: [0.6387634992286155] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.6115079138334952 
Top-2 Accuracy = 1.0 
iter 24: [0.6115079138334952] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.6358493800354266 
Top-2 Accuracy = 1.0 
iter 25: [0.6358493800354266] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.6639620593108965 
Top-2 Accuracy = 1.0 
iter 26: [0.6639620593108965] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.6044226044226044 
Top-2 Accuracy = 1.0 
iter 27: [0.6044226044226044] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.6652191303354094 
Top-2 Accuracy = 1.0 
iter 28: [0.6652191303354094] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.64504885435118 
Top-2 Accuracy = 1.0 
iter 29: [0.64504885435118] 
Run # 14 
======= 
setting: normalizeH|rf 
Top-1 Accuracy = 0.6127649848580081 
Top-2 Accuracy = 1.0 
iter 0: [0.6127649848580081] 
setting: robusto|rf 
Top-1 Accuracy = 0.6122507285297983 
Top-2 Accuracy = 1.0 
iter 1: [0.6122507285297983] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.6655048282955259 
Top-2 Accuracy = 1.0 
iter 2: [0.6655048282955259] 
setting: standardizen|rf 
Top-1 Accuracy = 0.6647620135992229 
Top-2 Accuracy = 1.0 
iter 3: [0.6647620135992229] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.6087652134163762 
Top-2 Accuracy = 1.0 
iter 4: [0.6087652134163762] 
setting: standardizes|rf 
Top-1 Accuracy = 0.6122507285297983 
Top-2 Accuracy = 1.0 
iter 5: [0.6122507285297983] 
setting: robusti|rf 
Top-1 Accuracy = 0.6053939774870007 
Top-2 Accuracy = 1.0 
iter 6: [0.6053939774870007] 
setting: standardizez|rf 
Top-1 Accuracy = 0.6106508199531455 
Top-2 Accuracy = 1.0 
iter 7: [0.6106508199531455] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.64487743557511 
Top-2 Accuracy = 1.0 
iter 8: [0.64487743557511] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.6653905491114793 
Top-2 Accuracy = 1.0 
iter 9: [0.6653905491114793] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.6648191531912462 
Top-2 Accuracy = 1.0 
iter 10: [0.6648191531912462] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.6098508656648192 
Top-2 Accuracy = 1.0 
iter 11: [0.6098508656648192] 
setting: normalizek|rf 
Top-1 Accuracy = 0.6386492200445689 
Top-2 Accuracy = 1.0 
iter 12: [0.6386492200445689] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.6407062453574082 
Top-2 Accuracy = 1.0 
iter 13: [0.6407062453574082] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.6641334780869664 
Top-2 Accuracy = 1.0 
iter 14: [0.6641334780869664] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.6043083252385578 
Top-2 Accuracy = 1.0 
iter 15: [0.6043083252385578] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.6658476658476659 
Top-2 Accuracy = 1.0 
iter 16: [0.6658476658476659] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.6437917833266671 
Top-2 Accuracy = 1.0 
iter 17: [0.6437917833266671] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.6451059939432032 
Top-2 Accuracy = 1.0 
iter 18: [0.6451059939432032] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.641220501685618 
Top-2 Accuracy = 1.0 
iter 19: [0.641220501685618] 
setting: standardizej|rf 
Top-1 Accuracy = 0.6389349180046855 
Top-2 Accuracy = 1.0 
iter 20: [0.6389349180046855] 
setting: robusts|rf 
Top-1 Accuracy = 0.6451059939432032 
Top-2 Accuracy = 1.0 
iter 21: [0.6451059939432032] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.664419176047083 
Top-2 Accuracy = 1.0 
iter 22: [0.664419176047083] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.6119078909776584 
Top-2 Accuracy = 1.0 
iter 23: [0.6119078909776584] 
setting: normalizey|rf 
Top-1 Accuracy = 0.6436775041426204 
Top-2 Accuracy = 1.0 
iter 24: [0.6436775041426204] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.6436775041426204 
Top-2 Accuracy = 1.0 
iter 25: [0.6436775041426204] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.6436775041426204 
Top-2 Accuracy = 1.0 
iter 26: [0.6436775041426204] 
setting: robustI|rf 
Top-1 Accuracy = 0.6436775041426204 
Top-2 Accuracy = 1.0 
iter 27: [0.6436775041426204] 
setting: robustH|rf 
Top-1 Accuracy = 0.6375064282041026 
Top-2 Accuracy = 1.0 
iter 28: [0.6375064282041026] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.6316781898177247 
Top-2 Accuracy = 1.0 
iter 29: [0.6316781898177247] 
Run # 15 
======= 
setting: minmaxM|rf 
Top-1 Accuracy = 0.6644763156391064 
Top-2 Accuracy = 1.0 
iter 0: [0.6644763156391064] 
setting: robustt|rf 
Top-1 Accuracy = 0.6368778926918461 
Top-2 Accuracy = 1.0 
iter 1: [0.6368778926918461] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.6385920804525456 
Top-2 Accuracy = 1.0 
iter 2: [0.6385920804525456] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.633392377578424 
Top-2 Accuracy = 1.0 
iter 3: [0.633392377578424] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.6133363807782413 
Top-2 Accuracy = 1.0 
iter 4: [0.6133363807782413] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.642706131078224 
Top-2 Accuracy = 1.0 
iter 5: [0.642706131078224] 
setting: normalizec|rf 
Top-1 Accuracy = 0.6643620364550598 
Top-2 Accuracy = 1.0 
iter 6: [0.6643620364550598] 
setting: standardizes|rf 
Top-1 Accuracy = 0.63539226329924 
Top-2 Accuracy = 1.0 
iter 7: [0.63539226329924] 
setting: robustD|rf 
Top-1 Accuracy = 0.6420775955659677 
Top-2 Accuracy = 1.0 
iter 8: [0.6420775955659677] 
setting: robustT|rf 
Top-1 Accuracy = 0.6102508428089823 
Top-2 Accuracy = 1.0 
iter 9: [0.6102508428089823] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.6044797440146278 
Top-2 Accuracy = 1.0 
iter 10: [0.6044797440146278] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.6633335237986401 
Top-2 Accuracy = 1.0 
iter 11: [0.6633335237986401] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.63573510085138 
Top-2 Accuracy = 1.0 
iter 12: [0.63573510085138] 
setting: robustK|rf 
Top-1 Accuracy = 0.6633335237986401 
Top-2 Accuracy = 1.0 
iter 13: [0.6633335237986401] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.6409348037255014 
Top-2 Accuracy = 1.0 
iter 14: [0.6409348037255014] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.6368207530998229 
Top-2 Accuracy = 1.0 
iter 15: [0.6368207530998229] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.642134735157991 
Top-2 Accuracy = 1.0 
iter 16: [0.642134735157991] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.642134735157991 
Top-2 Accuracy = 1.0 
iter 17: [0.642134735157991] 
setting: normalizek|rf 
Top-1 Accuracy = 0.6629906862465001 
Top-2 Accuracy = 1.0 
iter 18: [0.6629906862465001] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.6627049882863837 
Top-2 Accuracy = 1.0 
iter 19: [0.6627049882863837] 
setting: robustO|rf 
Top-1 Accuracy = 0.6426489914862008 
Top-2 Accuracy = 1.0 
iter 20: [0.6426489914862008] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.6392777555568253 
Top-2 Accuracy = 1.0 
iter 21: [0.6392777555568253] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.6426489914862008 
Top-2 Accuracy = 1.0 
iter 22: [0.6426489914862008] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.6336209359465174 
Top-2 Accuracy = 1.0 
iter 23: [0.6336209359465174] 
setting: robustN|rf 
Top-1 Accuracy = 0.6426489914862008 
Top-2 Accuracy = 1.0 
iter 24: [0.6426489914862008] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.6445345980229701 
Top-2 Accuracy = 1.0 
iter 25: [0.6445345980229701] 
setting: robustP|rf 
Top-1 Accuracy = 0.6083080966801897 
Top-2 Accuracy = 1.0 
iter 26: [0.6083080966801897] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.6096794468887492 
Top-2 Accuracy = 1.0 
iter 27: [0.6096794468887492] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.6388206388206388 
Top-2 Accuracy = 1.0 
iter 28: [0.6388206388206388] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.6600194274612879 
Top-2 Accuracy = 1.0 
iter 29: [0.6600194274612879] 
Run # 16 
======= 
setting: minmaxv|rf 
Top-1 Accuracy = 0.6367636135077995 
Top-2 Accuracy = 1.0 
iter 0: [0.6367636135077995] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.6090509113764928 
Top-2 Accuracy = 1.0 
iter 1: [0.6090509113764928] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.605622535855094 
Top-2 Accuracy = 1.0 
iter 2: [0.605622535855094] 
setting: normalizet|rf 
Top-1 Accuracy = 0.6438489229186903 
Top-2 Accuracy = 1.0 
iter 3: [0.6438489229186903] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.6378492657562425 
Top-2 Accuracy = 1.0 
iter 4: [0.6378492657562425] 
setting: standardizes|rf 
Top-1 Accuracy = 0.60745100279984 
Top-2 Accuracy = 1.0 
iter 5: [0.60745100279984] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.6334495171704474 
Top-2 Accuracy = 1.0 
iter 6: [0.6334495171704474] 
setting: robustP|rf 
Top-1 Accuracy = 0.6063082109593737 
Top-2 Accuracy = 1.0 
iter 7: [0.6063082109593737] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.6629906862465001 
Top-2 Accuracy = 1.0 
iter 8: [0.6629906862465001] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.6438489229186903 
Top-2 Accuracy = 1.0 
iter 9: [0.6438489229186903] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.6629335466544769 
Top-2 Accuracy = 1.0 
iter 10: [0.6629335466544769] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.6320781669618879 
Top-2 Accuracy = 1.0 
iter 11: [0.6320781669618879] 
setting: robusti|rf 
Top-1 Accuracy = 0.6629335466544769 
Top-2 Accuracy = 1.0 
iter 12: [0.6629335466544769] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.6071653048397234 
Top-2 Accuracy = 1.0 
iter 13: [0.6071653048397234] 
setting: standardizex|rf 
Top-1 Accuracy = 0.6629906862465001 
Top-2 Accuracy = 1.0 
iter 14: [0.6629906862465001] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.6330495400262842 
Top-2 Accuracy = 1.0 
iter 15: [0.6330495400262842] 
setting: robuste|rf 
Top-1 Accuracy = 0.6063653505513971 
Top-2 Accuracy = 1.0 
iter 16: [0.6063653505513971] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.6629906862465001 
Top-2 Accuracy = 1.0 
iter 17: [0.6629906862465001] 
setting: robustH|rf 
Top-1 Accuracy = 0.6341923318667505 
Top-2 Accuracy = 1.0 
iter 18: [0.6341923318667505] 
setting: standardizel|rf 
Top-1 Accuracy = 0.628992628992629 
Top-2 Accuracy = 1.0 
iter 19: [0.628992628992629] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.638477801268499 
Top-2 Accuracy = 1.0 
iter 20: [0.638477801268499] 
setting: robustI|rf 
Top-1 Accuracy = 0.6438489229186903 
Top-2 Accuracy = 1.0 
iter 21: [0.6438489229186903] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.6438489229186903 
Top-2 Accuracy = 1.0 
iter 22: [0.6438489229186903] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.638477801268499 
Top-2 Accuracy = 1.0 
iter 23: [0.638477801268499] 
setting: robustF|rf 
Top-1 Accuracy = 0.6645334552311296 
Top-2 Accuracy = 1.0 
iter 24: [0.6645334552311296] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.6101365636249357 
Top-2 Accuracy = 1.0 
iter 25: [0.6101365636249357] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.6069367464716302 
Top-2 Accuracy = 1.0 
iter 26: [0.6069367464716302] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.6431632478144106 
Top-2 Accuracy = 1.0 
iter 27: [0.6431632478144106] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.6125935660819382 
Top-2 Accuracy = 1.0 
iter 28: [0.6125935660819382] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.6431632478144106 
Top-2 Accuracy = 1.0 
iter 29: [0.6431632478144106] 
Run # 17 
======= 
setting: normalizeA|rf 
Top-1 Accuracy = 0.6480772527284155 
Top-2 Accuracy = 1.0 
iter 0: [0.6480772527284155] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.6648762927832695 
Top-2 Accuracy = 1.0 
iter 1: [0.6648762927832695] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.6077938403519799 
Top-2 Accuracy = 1.0 
iter 2: [0.6077938403519799] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.6348208673790069 
Top-2 Accuracy = 1.0 
iter 3: [0.6348208673790069] 
setting: normalizem|rf 
Top-1 Accuracy = 0.6483629506885321 
Top-2 Accuracy = 1.0 
iter 4: [0.6483629506885321] 
setting: standardizer|rf 
Top-1 Accuracy = 0.6649334323752928 
Top-2 Accuracy = 1.0 
iter 5: [0.6649334323752928] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.6483629506885321 
Top-2 Accuracy = 1.0 
iter 6: [0.6483629506885321] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.6091080509685161 
Top-2 Accuracy = 1.0 
iter 7: [0.6091080509685161] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.6483629506885321 
Top-2 Accuracy = 1.0 
iter 8: [0.6483629506885321] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.6090509113764928 
Top-2 Accuracy = 1.0 
iter 9: [0.6090509113764928] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.6441917604708303 
Top-2 Accuracy = 1.0 
iter 10: [0.6441917604708303] 
setting: robustO|rf 
Top-1 Accuracy = 0.6657905262556425 
Top-2 Accuracy = 1.0 
iter 11: [0.6657905262556425] 
setting: robustW|rf 
Top-1 Accuracy = 0.6392206159648021 
Top-2 Accuracy = 1.0 
iter 12: [0.6392206159648021] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.6441917604708303 
Top-2 Accuracy = 1.0 
iter 13: [0.6441917604708303] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.6655048282955259 
Top-2 Accuracy = 1.0 
iter 14: [0.6655048282955259] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.6091651905605394 
Top-2 Accuracy = 1.0 
iter 15: [0.6091651905605394] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.6088223530083995 
Top-2 Accuracy = 1.0 
iter 16: [0.6088223530083995] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.6441917604708303 
Top-2 Accuracy = 1.0 
iter 17: [0.6441917604708303] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.6129935432261013 
Top-2 Accuracy = 1.0 
iter 18: [0.6129935432261013] 
setting: minmaxw|rf 
Top-1 Accuracy = 0.6097937260727958 
Top-2 Accuracy = 1.0 
iter 19: [0.6097937260727958] 
setting: robustl|rf 
Top-1 Accuracy = 0.6060796525912805 
Top-2 Accuracy = 1.0 
iter 20: [0.6060796525912805] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.6315639106336781 
Top-2 Accuracy = 1.0 
iter 21: [0.6315639106336781] 
setting: normalizee|rf 
Top-1 Accuracy = 0.6643048968630364 
Top-2 Accuracy = 1.0 
iter 22: [0.6643048968630364] 
setting: normalized|rf 
Top-1 Accuracy = 0.6030512542140449 
Top-2 Accuracy = 1.0 
iter 23: [0.6030512542140449] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.6639049197188732 
Top-2 Accuracy = 1.0 
iter 24: [0.6639049197188732] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.6648191531912462 
Top-2 Accuracy = 1.0 
iter 25: [0.6648191531912462] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.6405919661733616 
Top-2 Accuracy = 1.0 
iter 26: [0.6405919661733616] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.6107079595451689 
Top-2 Accuracy = 1.0 
iter 27: [0.6107079595451689] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.6384206616764756 
Top-2 Accuracy = 1.0 
iter 28: [0.6384206616764756] 
setting: robustx|rf 
Top-1 Accuracy = 0.6055082566710474 
Top-2 Accuracy = 1.0 
iter 29: [0.6055082566710474] 
Run # 18 
======= 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.6090509113764928 
Top-2 Accuracy = 1.0 
iter 0: [0.6090509113764928] 
setting: normalizek|rf 
Top-1 Accuracy = 0.642134735157991 
Top-2 Accuracy = 1.0 
iter 1: [0.642134735157991] 
setting: standardizey|rf 
Top-1 Accuracy = 0.642134735157991 
Top-2 Accuracy = 1.0 
iter 2: [0.642134735157991] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.6125935660819382 
Top-2 Accuracy = 1.0 
iter 3: [0.6125935660819382] 
setting: standardizet|rf 
Top-1 Accuracy = 0.6415633392377579 
Top-2 Accuracy = 1.0 
iter 4: [0.6415633392377579] 
setting: robustu|rf 
Top-1 Accuracy = 0.6378492657562425 
Top-2 Accuracy = 1.0 
iter 5: [0.6378492657562425] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.6398491514770585 
Top-2 Accuracy = 1.0 
iter 6: [0.6398491514770585] 
setting: robustP|rf 
Top-1 Accuracy = 0.6107079595451689 
Top-2 Accuracy = 1.0 
iter 7: [0.6107079595451689] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.664590594823153 
Top-2 Accuracy = 1.0 
iter 8: [0.664590594823153] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.642134735157991 
Top-2 Accuracy = 1.0 
iter 9: [0.642134735157991] 
setting: robustS|rf 
Top-1 Accuracy = 0.664590594823153 
Top-2 Accuracy = 1.0 
iter 10: [0.664590594823153] 
setting: robustT|rf 
Top-1 Accuracy = 0.6392777555568253 
Top-2 Accuracy = 1.0 
iter 11: [0.6392777555568253] 
setting: robusti|rf 
Top-1 Accuracy = 0.6376778469801726 
Top-2 Accuracy = 1.0 
iter 12: [0.6376778469801726] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.6101365636249357 
Top-2 Accuracy = 1.0 
iter 13: [0.6101365636249357] 
setting: robustQ|rf 
Top-1 Accuracy = 0.664590594823153 
Top-2 Accuracy = 1.0 
iter 14: [0.664590594823153] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.638134963716359 
Top-2 Accuracy = 1.0 
iter 15: [0.638134963716359] 
setting: normalizez|rf 
Top-1 Accuracy = 0.6347065881949603 
Top-2 Accuracy = 1.0 
iter 16: [0.6347065881949603] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.6397348722930118 
Top-2 Accuracy = 1.0 
iter 17: [0.6397348722930118] 
setting: standardizee|rf 
Top-1 Accuracy = 0.637392149020056 
Top-2 Accuracy = 1.0 
iter 18: [0.637392149020056] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.6378492657562425 
Top-2 Accuracy = 1.0 
iter 19: [0.6378492657562425] 
setting: robustH|rf 
Top-1 Accuracy = 0.6403634078052682 
Top-2 Accuracy = 1.0 
iter 20: [0.6403634078052682] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.6643048968630364 
Top-2 Accuracy = 1.0 
iter 21: [0.6643048968630364] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.6080795383120965 
Top-2 Accuracy = 1.0 
iter 22: [0.6080795383120965] 
setting: standardizen|rf 
Top-1 Accuracy = 0.6341923318667505 
Top-2 Accuracy = 1.0 
iter 23: [0.6341923318667505] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.6397348722930118 
Top-2 Accuracy = 1.0 
iter 24: [0.6397348722930118] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.664247757271013 
Top-2 Accuracy = 1.0 
iter 25: [0.664247757271013] 
setting: robustr|rf 
Top-1 Accuracy = 0.6641906176789898 
Top-2 Accuracy = 1.0 
iter 26: [0.6641906176789898] 
setting: robustW|rf 
Top-1 Accuracy = 0.6397348722930118 
Top-2 Accuracy = 1.0 
iter 27: [0.6397348722930118] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.6653334095194561 
Top-2 Accuracy = 1.0 
iter 28: [0.6653334095194561] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.63573510085138 
Top-2 Accuracy = 1.0 
iter 29: [0.63573510085138] 
Run # 19 
======= 
setting: normalizeC|rf 
Top-1 Accuracy = 0.6304211187932118 
Top-2 Accuracy = 1.0 
iter 0: [0.6304211187932118] 
setting: standardizef|rf 
Top-1 Accuracy = 0.6645334552311296 
Top-2 Accuracy = 1.0 
iter 1: [0.6645334552311296] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.664419176047083 
Top-2 Accuracy = 1.0 
iter 2: [0.664419176047083] 
setting: standardizea|rf 
Top-1 Accuracy = 0.6389920575967087 
Top-2 Accuracy = 1.0 
iter 3: [0.6389920575967087] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.6403634078052682 
Top-2 Accuracy = 1.0 
iter 4: [0.6403634078052682] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.664419176047083 
Top-2 Accuracy = 1.0 
iter 5: [0.664419176047083] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.6321353065539113 
Top-2 Accuracy = 1.0 
iter 6: [0.6321353065539113] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.6380206845323124 
Top-2 Accuracy = 1.0 
iter 7: [0.6380206845323124] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.6077367007599566 
Top-2 Accuracy = 1.0 
iter 8: [0.6077367007599566] 
setting: robustZ|rf 
Top-1 Accuracy = 0.6099080052568424 
Top-2 Accuracy = 1.0 
iter 9: [0.6099080052568424] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.6411062225015713 
Top-2 Accuracy = 1.0 
iter 10: [0.6411062225015713] 
setting: robustX|rf 
Top-1 Accuracy = 0.6379064053482658 
Top-2 Accuracy = 1.0 
iter 11: [0.6379064053482658] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.6652191303354094 
Top-2 Accuracy = 1.0 
iter 12: [0.6652191303354094] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.6647048740071996 
Top-2 Accuracy = 1.0 
iter 13: [0.6647048740071996] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.6069367464716302 
Top-2 Accuracy = 1.0 
iter 14: [0.6069367464716302] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.6360207988114965 
Top-2 Accuracy = 1.0 
iter 15: [0.6360207988114965] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.63556368207531 
Top-2 Accuracy = 1.0 
iter 16: [0.63556368207531] 
setting: robustP|rf 
Top-1 Accuracy = 0.6379064053482658 
Top-2 Accuracy = 1.0 
iter 17: [0.6379064053482658] 
setting: standardizey|rf 
Top-1 Accuracy = 0.6379064053482658 
Top-2 Accuracy = 1.0 
iter 18: [0.6379064053482658] 
setting: normalizem|rf 
Top-1 Accuracy = 0.6394491743328953 
Top-2 Accuracy = 1.0 
iter 19: [0.6394491743328953] 
setting: robustg|rf 
Top-1 Accuracy = 0.6643620364550598 
Top-2 Accuracy = 1.0 
iter 20: [0.6643620364550598] 
setting: maxabsK|rf 
Top-1 Accuracy = 0.664590594823153 
Top-2 Accuracy = 1.0 
iter 21: [0.664590594823153] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.6394491743328953 
Top-2 Accuracy = 1.0 
iter 22: [0.6394491743328953] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.6396777327009885 
Top-2 Accuracy = 1.0 
iter 23: [0.6396777327009885] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.6078509799440032 
Top-2 Accuracy = 1.0 
iter 24: [0.6078509799440032] 
setting: normalizet|rf 
Top-1 Accuracy = 0.6395063139249185 
Top-2 Accuracy = 1.0 
iter 25: [0.6395063139249185] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.6395063139249185 
Top-2 Accuracy = 1.0 
iter 26: [0.6395063139249185] 
setting: maxabso|rf 
Top-1 Accuracy = 0.6644763156391064 
Top-2 Accuracy = 1.0 
iter 27: [0.6644763156391064] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.6395063139249185 
Top-2 Accuracy = 1.0 
iter 28: [0.6395063139249185] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.66350494257471 
Top-2 Accuracy = 1.0 
iter 29: [0.66350494257471] 
 
Median top-1 = 0.6406491057653848 
Median top-2 = 1.0 
3 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=24), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=13), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=94), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=38), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=70), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=56), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=55), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=71), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=82), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=36), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=81), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=20), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=12), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=97), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=82), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=26), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=98), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=61), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=29), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=57), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=67), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=34), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=93), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=50), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=46), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=17), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=26), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=48), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=89), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=20), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=16), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=10), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=32), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=71), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=94), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=91), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=15), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=53), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=79), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=23), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=13), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=54), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=79), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=57), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: robustO|rf 
Top-1 Accuracy = 0.499000057139592 
Top-2 Accuracy = 0.817 
iter 0: [0.499000057139592] 
setting: robustb|rf 
Top-1 Accuracy = 0.5041997600137135 
Top-2 Accuracy = 0.801 
iter 1: [0.5041997600137135] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.5012856408205245 
Top-2 Accuracy = 0.819 
iter 2: [0.5012856408205245] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.4723730072567282 
Top-2 Accuracy = 0.782 
iter 3: [0.4723730072567282] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.5228272670133135 
Top-2 Accuracy = 0.821 
iter 4: [0.5228272670133135] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.5197988686360779 
Top-2 Accuracy = 0.815 
iter 5: [0.5197988686360779] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.502656991029084 
Top-2 Accuracy = 0.816 
iter 6: [0.502656991029084] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.46968744643163246 
Top-2 Accuracy = 0.781 
iter 7: [0.46968744643163246] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.5017998971487344 
Top-2 Accuracy = 0.818 
iter 8: [0.5017998971487344] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.5051139934860865 
Top-2 Accuracy = 0.806 
iter 9: [0.5051139934860865] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.5227701274212903 
Top-2 Accuracy = 0.821 
iter 10: [0.5227701274212903] 
setting: standardizef|rf 
Top-1 Accuracy = 0.46974458602365576 
Top-2 Accuracy = 0.78 
iter 11: [0.46974458602365576] 
setting: robustr|rf 
Top-1 Accuracy = 0.5051139934860865 
Top-2 Accuracy = 0.806 
iter 12: [0.5051139934860865] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.4655162562139306 
Top-2 Accuracy = 0.782 
iter 13: [0.4655162562139306] 
setting: standardizea|rf 
Top-1 Accuracy = 0.5013427804125479 
Top-2 Accuracy = 0.816 
iter 14: [0.5013427804125479] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.5228272670133135 
Top-2 Accuracy = 0.821 
iter 15: [0.5228272670133135] 
setting: standardizev|rf 
Top-1 Accuracy = 0.5228272670133135 
Top-2 Accuracy = 0.82 
iter 16: [0.5228272670133135] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.4984858008113822 
Top-2 Accuracy = 0.801 
iter 17: [0.4984858008113822] 
setting: robustf|rf 
Top-1 Accuracy = 0.5032855265413405 
Top-2 Accuracy = 0.816 
iter 18: [0.5032855265413405] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.47094451745614535 
Top-2 Accuracy = 0.784 
iter 19: [0.47094451745614535] 
setting: standardizej|rf 
Top-1 Accuracy = 0.4678589794868865 
Top-2 Accuracy = 0.785 
iter 20: [0.4678589794868865] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.5005999657162448 
Top-2 Accuracy = 0.817 
iter 21: [0.5005999657162448] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.5029426889892006 
Top-2 Accuracy = 0.814 
iter 22: [0.5029426889892006] 
setting: robustP|rf 
Top-1 Accuracy = 0.5039712016456203 
Top-2 Accuracy = 0.818 
iter 23: [0.5039712016456203] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.4691160505113994 
Top-2 Accuracy = 0.783 
iter 24: [0.4691160505113994] 
setting: robusti|rf 
Top-1 Accuracy = 0.4985429404034055 
Top-2 Accuracy = 0.799 
iter 25: [0.4985429404034055] 
setting: normalizen|rf 
Top-1 Accuracy = 0.47094451745614535 
Top-2 Accuracy = 0.784 
iter 26: [0.47094451745614535] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.4759156619621736 
Top-2 Accuracy = 0.785 
iter 27: [0.4759156619621736] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.5020284555168276 
Top-2 Accuracy = 0.799 
iter 28: [0.5020284555168276] 
setting: robustt|rf 
Top-1 Accuracy = 0.5020284555168276 
Top-2 Accuracy = 0.799 
iter 29: [0.5020284555168276] 
Run # 1 
====== 
setting: standardizes|rf 
Top-1 Accuracy = 0.470144563167819 
Top-2 Accuracy = 0.787 
iter 0: [0.470144563167819] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.46814467744700305 
Top-2 Accuracy = 0.784 
iter 1: [0.46814467744700305] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.5020284555168276 
Top-2 Accuracy = 0.799 
iter 2: [0.5020284555168276] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.4760870807382435 
Top-2 Accuracy = 0.788 
iter 3: [0.4760870807382435] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.49585737957830983 
Top-2 Accuracy = 0.812 
iter 4: [0.49585737957830983] 
setting: normalizel|rf 
Top-1 Accuracy = 0.49197188732072455 
Top-2 Accuracy = 0.785 
iter 5: [0.49197188732072455] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.49197188732072455 
Top-2 Accuracy = 0.785 
iter 6: [0.49197188732072455] 
setting: robustX|rf 
Top-1 Accuracy = 0.4703731215359122 
Top-2 Accuracy = 0.781 
iter 7: [0.4703731215359122] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.5302554139763442 
Top-2 Accuracy = 0.821 
iter 8: [0.5302554139763442] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.5030569681732472 
Top-2 Accuracy = 0.819 
iter 9: [0.5030569681732472] 
setting: normalized|rf 
Top-1 Accuracy = 0.5013999200045711 
Top-2 Accuracy = 0.813 
iter 10: [0.5013999200045711] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.4712873550082852 
Top-2 Accuracy = 0.782 
iter 11: [0.4712873550082852] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.48408662362150734 
Top-2 Accuracy = 0.784 
iter 12: [0.48408662362150734] 
setting: robustG|rf 
Top-1 Accuracy = 0.5017998971487344 
Top-2 Accuracy = 0.813 
iter 13: [0.5017998971487344] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.46871607336723614 
Top-2 Accuracy = 0.782 
iter 14: [0.46871607336723614] 
setting: robustJ|rf 
Top-1 Accuracy = 0.5270555968230387 
Top-2 Accuracy = 0.821 
iter 15: [0.5270555968230387] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.4711730758242386 
Top-2 Accuracy = 0.784 
iter 16: [0.4711730758242386] 
setting: standardizew|rf 
Top-1 Accuracy = 0.47094451745614535 
Top-2 Accuracy = 0.785 
iter 17: [0.47094451745614535] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.4989429175475687 
Top-2 Accuracy = 0.812 
iter 18: [0.4989429175475687] 
setting: robustV|rf 
Top-1 Accuracy = 0.5049425747100166 
Top-2 Accuracy = 0.817 
iter 19: [0.5049425747100166] 
setting: robustS|rf 
Top-1 Accuracy = 0.5271698760070853 
Top-2 Accuracy = 0.822 
iter 20: [0.5271698760070853] 
setting: robustj|rf 
Top-1 Accuracy = 0.5270555968230387 
Top-2 Accuracy = 0.821 
iter 21: [0.5270555968230387] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.47134449460030853 
Top-2 Accuracy = 0.785 
iter 22: [0.47134449460030853] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.4918004685446546 
Top-2 Accuracy = 0.792 
iter 23: [0.4918004685446546] 
setting: standardizez|rf 
Top-1 Accuracy = 0.4690017713273527 
Top-2 Accuracy = 0.784 
iter 24: [0.4690017713273527] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.5019713159248043 
Top-2 Accuracy = 0.819 
iter 25: [0.5019713159248043] 
setting: robustl|rf 
Top-1 Accuracy = 0.4700874235757957 
Top-2 Accuracy = 0.785 
iter 26: [0.4700874235757957] 
setting: robustp|rf 
Top-1 Accuracy = 0.4703159819438889 
Top-2 Accuracy = 0.783 
iter 27: [0.4703159819438889] 
setting: maxabsK|rf 
Top-1 Accuracy = 0.4868864636306497 
Top-2 Accuracy = 0.79 
iter 28: [0.4868864636306497] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.49482886692189015 
Top-2 Accuracy = 0.808 
iter 29: [0.49482886692189015] 
Run # 2 
====== 
setting: robustl|rf 
Top-1 Accuracy = 0.4679161190789098 
Top-2 Accuracy = 0.783 
iter 0: [0.4679161190789098] 
setting: normalizem|rf 
Top-1 Accuracy = 0.47785840809096625 
Top-2 Accuracy = 0.783 
iter 1: [0.47785840809096625] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.47785840809096625 
Top-2 Accuracy = 0.783 
iter 2: [0.47785840809096625] 
setting: robustq|rf 
Top-1 Accuracy = 0.47785840809096625 
Top-2 Accuracy = 0.783 
iter 3: [0.47785840809096625] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.5306553911205074 
Top-2 Accuracy = 0.823 
iter 4: [0.5306553911205074] 
setting: robustZ|rf 
Top-1 Accuracy = 0.47785840809096625 
Top-2 Accuracy = 0.783 
iter 5: [0.47785840809096625] 
setting: standardizej|rf 
Top-1 Accuracy = 0.5308268098965774 
Top-2 Accuracy = 0.823 
iter 6: [0.5308268098965774] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.530941089080624 
Top-2 Accuracy = 0.823 
iter 7: [0.530941089080624] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.46871607336723614 
Top-2 Accuracy = 0.783 
iter 8: [0.46871607336723614] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.5308839494886006 
Top-2 Accuracy = 0.824 
iter 9: [0.5308839494886006] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.47785840809096625 
Top-2 Accuracy = 0.783 
iter 10: [0.47785840809096625] 
setting: standardizes|rf 
Top-1 Accuracy = 0.47785840809096625 
Top-2 Accuracy = 0.783 
iter 11: [0.47785840809096625] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.5304268327524142 
Top-2 Accuracy = 0.822 
iter 12: [0.5304268327524142] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.47220158848065824 
Top-2 Accuracy = 0.784 
iter 13: [0.47220158848065824] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.5033426661333638 
Top-2 Accuracy = 0.816 
iter 14: [0.5033426661333638] 
setting: robustK|rf 
Top-1 Accuracy = 0.49254328324095764 
Top-2 Accuracy = 0.81 
iter 15: [0.49254328324095764] 
setting: robustD|rf 
Top-1 Accuracy = 0.5312267870407406 
Top-2 Accuracy = 0.822 
iter 16: [0.5312267870407406] 
setting: robusts|rf 
Top-1 Accuracy = 0.5312839266327638 
Top-2 Accuracy = 0.822 
iter 17: [0.5312839266327638] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.4866007656705331 
Top-2 Accuracy = 0.789 
iter 18: [0.4866007656705331] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.5317981829609737 
Top-2 Accuracy = 0.822 
iter 19: [0.5317981829609737] 
setting: standardizee|rf 
Top-1 Accuracy = 0.4870007428146963 
Top-2 Accuracy = 0.79 
iter 20: [0.4870007428146963] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.5323695788812068 
Top-2 Accuracy = 0.821 
iter 21: [0.5323695788812068] 
setting: robusto|rf 
Top-1 Accuracy = 0.4667733272384435 
Top-2 Accuracy = 0.782 
iter 22: [0.4667733272384435] 
setting: robustX|rf 
Top-1 Accuracy = 0.5013999200045711 
Top-2 Accuracy = 0.817 
iter 23: [0.5013999200045711] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.4690017713273527 
Top-2 Accuracy = 0.781 
iter 24: [0.4690017713273527] 
setting: normalizei|rf 
Top-1 Accuracy = 0.4987714987714988 
Top-2 Accuracy = 0.817 
iter 25: [0.4987714987714988] 
setting: standardizev|rf 
Top-1 Accuracy = 0.5312267870407406 
Top-2 Accuracy = 0.82 
iter 26: [0.5312267870407406] 
setting: standardized|rf 
Top-1 Accuracy = 0.4645448831495343 
Top-2 Accuracy = 0.777 
iter 27: [0.4645448831495343] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.4679732586709331 
Top-2 Accuracy = 0.782 
iter 28: [0.4679732586709331] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.5001428489800582 
Top-2 Accuracy = 0.814 
iter 29: [0.5001428489800582] 
Run # 3 
====== 
setting: maxabsS|rf 
Top-1 Accuracy = 0.4858008113822067 
Top-2 Accuracy = 0.793 
iter 0: [0.4858008113822067] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.4858008113822067 
Top-2 Accuracy = 0.793 
iter 1: [0.4858008113822067] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.47071595908805214 
Top-2 Accuracy = 0.781 
iter 2: [0.47071595908805214] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.4858008113822067 
Top-2 Accuracy = 0.793 
iter 3: [0.4858008113822067] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.5295697388720645 
Top-2 Accuracy = 0.82 
iter 4: [0.5295697388720645] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.530941089080624 
Top-2 Accuracy = 0.82 
iter 5: [0.530941089080624] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.531112507856694 
Top-2 Accuracy = 0.82 
iter 6: [0.531112507856694] 
setting: normalizey|rf 
Top-1 Accuracy = 0.4859722301582767 
Top-2 Accuracy = 0.792 
iter 7: [0.4859722301582767] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.5290554825438546 
Top-2 Accuracy = 0.819 
iter 8: [0.5290554825438546] 
setting: normalizel|rf 
Top-1 Accuracy = 0.5011142220444545 
Top-2 Accuracy = 0.813 
iter 9: [0.5011142220444545] 
setting: robustX|rf 
Top-1 Accuracy = 0.4871150219987429 
Top-2 Accuracy = 0.785 
iter 10: [0.4871150219987429] 
setting: standardizem|rf 
Top-1 Accuracy = 0.4680875378549797 
Top-2 Accuracy = 0.782 
iter 11: [0.4680875378549797] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.4852294154619736 
Top-2 Accuracy = 0.786 
iter 12: [0.4852294154619736] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.4852294154619736 
Top-2 Accuracy = 0.786 
iter 13: [0.4852294154619736] 
setting: robustW|rf 
Top-1 Accuracy = 0.5315124850008571 
Top-2 Accuracy = 0.82 
iter 14: [0.5315124850008571] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.5021998742928976 
Top-2 Accuracy = 0.817 
iter 15: [0.5021998742928976] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.5315696245928804 
Top-2 Accuracy = 0.82 
iter 16: [0.5315696245928804] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.5315124850008571 
Top-2 Accuracy = 0.821 
iter 17: [0.5315124850008571] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.5302554139763442 
Top-2 Accuracy = 0.821 
iter 18: [0.5302554139763442] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.5007713844923147 
Top-2 Accuracy = 0.814 
iter 19: [0.5007713844923147] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.5024284326609908 
Top-2 Accuracy = 0.817 
iter 20: [0.5024284326609908] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.46597337295011715 
Top-2 Accuracy = 0.78 
iter 21: [0.46597337295011715] 
setting: robustp|rf 
Top-1 Accuracy = 0.483115250557111 
Top-2 Accuracy = 0.782 
iter 22: [0.483115250557111] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.483115250557111 
Top-2 Accuracy = 0.782 
iter 23: [0.483115250557111] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.5010570824524313 
Top-2 Accuracy = 0.817 
iter 24: [0.5010570824524313] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.503742643277527 
Top-2 Accuracy = 0.816 
iter 25: [0.503742643277527] 
setting: maxabso|rf 
Top-1 Accuracy = 0.4868293240386264 
Top-2 Accuracy = 0.783 
iter 26: [0.4868293240386264] 
setting: robustH|rf 
Top-1 Accuracy = 0.5317981829609737 
Top-2 Accuracy = 0.82 
iter 27: [0.5317981829609737] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.5022570138849208 
Top-2 Accuracy = 0.816 
iter 28: [0.5022570138849208] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.4950002856979601 
Top-2 Accuracy = 0.813 
iter 29: [0.4950002856979601] 
Run # 4 
====== 
setting: maxabst|rf 
Top-1 Accuracy = 0.46814467744700305 
Top-2 Accuracy = 0.783 
iter 0: [0.46814467744700305] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.4715730529684018 
Top-2 Accuracy = 0.783 
iter 1: [0.4715730529684018] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.48380092566139077 
Top-2 Accuracy = 0.788 
iter 2: [0.48380092566139077] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.48380092566139077 
Top-2 Accuracy = 0.788 
iter 3: [0.48380092566139077] 
setting: normalizes|rf 
Top-1 Accuracy = 0.5308268098965774 
Top-2 Accuracy = 0.82 
iter 4: [0.5308268098965774] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.5323695788812068 
Top-2 Accuracy = 0.821 
iter 5: [0.5323695788812068] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.5308839494886006 
Top-2 Accuracy = 0.82 
iter 6: [0.5308839494886006] 
setting: standardizei|rf 
Top-1 Accuracy = 0.47425861379349754 
Top-2 Accuracy = 0.787 
iter 7: [0.47425861379349754] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.5325981372493 
Top-2 Accuracy = 0.821 
iter 8: [0.5325981372493] 
setting: normalizek|rf 
Top-1 Accuracy = 0.5312839266327638 
Top-2 Accuracy = 0.82 
iter 9: [0.5312839266327638] 
setting: robustF|rf 
Top-1 Accuracy = 0.48620078852636994 
Top-2 Accuracy = 0.79 
iter 10: [0.48620078852636994] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.48620078852636994 
Top-2 Accuracy = 0.79 
iter 11: [0.48620078852636994] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.5324267184732301 
Top-2 Accuracy = 0.82 
iter 12: [0.5324267184732301] 
setting: normalizev|rf 
Top-1 Accuracy = 0.48385806525341407 
Top-2 Accuracy = 0.789 
iter 13: [0.48385806525341407] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.46865893377521284 
Top-2 Accuracy = 0.783 
iter 14: [0.46865893377521284] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.5030569681732472 
Top-2 Accuracy = 0.816 
iter 15: [0.5030569681732472] 
setting: robusti|rf 
Top-1 Accuracy = 0.5319124621450203 
Top-2 Accuracy = 0.821 
iter 16: [0.5319124621450203] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.49911433632363866 
Top-2 Accuracy = 0.814 
iter 17: [0.49911433632363866] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.48385806525341407 
Top-2 Accuracy = 0.789 
iter 18: [0.48385806525341407] 
setting: maxabso|rf 
Top-1 Accuracy = 0.48385806525341407 
Top-2 Accuracy = 0.789 
iter 19: [0.48385806525341407] 
setting: standardizex|rf 
Top-1 Accuracy = 0.48385806525341407 
Top-2 Accuracy = 0.789 
iter 20: [0.48385806525341407] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.4964859150905663 
Top-2 Accuracy = 0.813 
iter 21: [0.4964859150905663] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.5016856179646877 
Top-2 Accuracy = 0.82 
iter 22: [0.5016856179646877] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.46963030683960916 
Top-2 Accuracy = 0.783 
iter 23: [0.46963030683960916] 
setting: robustr|rf 
Top-1 Accuracy = 0.4694017484715159 
Top-2 Accuracy = 0.785 
iter 24: [0.4694017484715159] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.47088737786412205 
Top-2 Accuracy = 0.784 
iter 25: [0.47088737786412205] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.4857436717901834 
Top-2 Accuracy = 0.791 
iter 26: [0.4857436717901834] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.5313410662247872 
Top-2 Accuracy = 0.819 
iter 27: [0.5313410662247872] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.5314553454088338 
Top-2 Accuracy = 0.82 
iter 28: [0.5314553454088338] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.5013999200045711 
Top-2 Accuracy = 0.812 
iter 29: [0.5013999200045711] 
Run # 5 
====== 
setting: standardizeF|rf 
Top-1 Accuracy = 0.46963030683960916 
Top-2 Accuracy = 0.782 
iter 0: [0.46963030683960916] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.5317410433689503 
Top-2 Accuracy = 0.821 
iter 1: [0.5317410433689503] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.46997314439174903 
Top-2 Accuracy = 0.783 
iter 2: [0.46997314439174903] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.4675732815267699 
Top-2 Accuracy = 0.783 
iter 3: [0.4675732815267699] 
setting: robustv|rf 
Top-1 Accuracy = 0.49220044568881777 
Top-2 Accuracy = 0.79 
iter 4: [0.49220044568881777] 
setting: robustf|rf 
Top-1 Accuracy = 0.5011142220444545 
Top-2 Accuracy = 0.813 
iter 5: [0.5011142220444545] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.4679161190789098 
Top-2 Accuracy = 0.782 
iter 6: [0.4679161190789098] 
setting: robustj|rf 
Top-1 Accuracy = 0.4679161190789098 
Top-2 Accuracy = 0.78 
iter 7: [0.4679161190789098] 
setting: robustg|rf 
Top-1 Accuracy = 0.49220044568881777 
Top-2 Accuracy = 0.79 
iter 8: [0.49220044568881777] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.49220044568881777 
Top-2 Accuracy = 0.79 
iter 9: [0.49220044568881777] 
setting: normalizen|rf 
Top-1 Accuracy = 0.46997314439174903 
Top-2 Accuracy = 0.784 
iter 10: [0.46997314439174903] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.5301982743843209 
Top-2 Accuracy = 0.821 
iter 11: [0.5301982743843209] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.48505799668590366 
Top-2 Accuracy = 0.79 
iter 12: [0.48505799668590366] 
setting: normalizej|rf 
Top-1 Accuracy = 0.4913433518084681 
Top-2 Accuracy = 0.792 
iter 13: [0.4913433518084681] 
setting: robustl|rf 
Top-1 Accuracy = 0.5008856636763613 
Top-2 Accuracy = 0.816 
iter 14: [0.5008856636763613] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.46997314439174903 
Top-2 Accuracy = 0.782 
iter 15: [0.46997314439174903] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.46991600479972573 
Top-2 Accuracy = 0.78 
iter 16: [0.46991600479972573] 
setting: robustc|rf 
Top-1 Accuracy = 0.49562882121021656 
Top-2 Accuracy = 0.811 
iter 17: [0.49562882121021656] 
setting: standardizen|rf 
Top-1 Accuracy = 0.4913433518084681 
Top-2 Accuracy = 0.792 
iter 18: [0.4913433518084681] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.5008285240843381 
Top-2 Accuracy = 0.813 
iter 19: [0.5008285240843381] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.5021427347008742 
Top-2 Accuracy = 0.817 
iter 20: [0.5021427347008742] 
setting: standardizep|rf 
Top-1 Accuracy = 0.5317410433689503 
Top-2 Accuracy = 0.822 
iter 21: [0.5317410433689503] 
setting: minmaxw|rf 
Top-1 Accuracy = 0.4940860522255871 
Top-2 Accuracy = 0.806 
iter 22: [0.4940860522255871] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.4913433518084681 
Top-2 Accuracy = 0.792 
iter 23: [0.4913433518084681] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.4913433518084681 
Top-2 Accuracy = 0.792 
iter 24: [0.4913433518084681] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.47208730929661163 
Top-2 Accuracy = 0.781 
iter 25: [0.47208730929661163] 
setting: robustL|rf 
Top-1 Accuracy = 0.5014570595965945 
Top-2 Accuracy = 0.815 
iter 26: [0.5014570595965945] 
setting: standardizef|rf 
Top-1 Accuracy = 0.5315124850008571 
Top-2 Accuracy = 0.823 
iter 27: [0.5315124850008571] 
setting: robusti|rf 
Top-1 Accuracy = 0.5315696245928804 
Top-2 Accuracy = 0.823 
iter 28: [0.5315696245928804] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.4913433518084681 
Top-2 Accuracy = 0.792 
iter 29: [0.4913433518084681] 
Run # 6 
====== 
setting: minmaxr|rf 
Top-1 Accuracy = 0.5304839723444374 
Top-2 Accuracy = 0.822 
iter 0: [0.5304839723444374] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.4679732586709331 
Top-2 Accuracy = 0.782 
iter 1: [0.4679732586709331] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.4913433518084681 
Top-2 Accuracy = 0.792 
iter 2: [0.4913433518084681] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.4913433518084681 
Top-2 Accuracy = 0.792 
iter 3: [0.4913433518084681] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.4913433518084681 
Top-2 Accuracy = 0.792 
iter 4: [0.4913433518084681] 
setting: robusty|rf 
Top-1 Accuracy = 0.4913433518084681 
Top-2 Accuracy = 0.792 
iter 5: [0.4913433518084681] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.5315124850008571 
Top-2 Accuracy = 0.823 
iter 6: [0.5315124850008571] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.4913433518084681 
Top-2 Accuracy = 0.792 
iter 7: [0.4913433518084681] 
setting: robustE|rf 
Top-1 Accuracy = 0.47088737786412205 
Top-2 Accuracy = 0.781 
iter 8: [0.47088737786412205] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.4716301925604251 
Top-2 Accuracy = 0.784 
iter 9: [0.4716301925604251] 
setting: robustR|rf 
Top-1 Accuracy = 0.4976287069310325 
Top-2 Accuracy = 0.813 
iter 10: [0.4976287069310325] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.48231529626878467 
Top-2 Accuracy = 0.782 
iter 11: [0.48231529626878467] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.48231529626878467 
Top-2 Accuracy = 0.782 
iter 12: [0.48231529626878467] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.48231529626878467 
Top-2 Accuracy = 0.782 
iter 13: [0.48231529626878467] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.4952288440660534 
Top-2 Accuracy = 0.811 
iter 14: [0.4952288440660534] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.48231529626878467 
Top-2 Accuracy = 0.782 
iter 15: [0.48231529626878467] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.4671161647905834 
Top-2 Accuracy = 0.783 
iter 16: [0.4671161647905834] 
setting: robustN|rf 
Top-1 Accuracy = 0.5248842923261527 
Top-2 Accuracy = 0.82 
iter 17: [0.5248842923261527] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.4702588423518656 
Top-2 Accuracy = 0.781 
iter 18: [0.4702588423518656] 
setting: robustA|rf 
Top-1 Accuracy = 0.48231529626878467 
Top-2 Accuracy = 0.782 
iter 19: [0.48231529626878467] 
setting: maxabse|rf 
Top-1 Accuracy = 0.48231529626878467 
Top-2 Accuracy = 0.782 
iter 20: [0.48231529626878467] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.48065824810010854 
Top-2 Accuracy = 0.781 
iter 21: [0.48065824810010854] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.48065824810010854 
Top-2 Accuracy = 0.781 
iter 22: [0.48065824810010854] 
setting: robustz|rf 
Top-1 Accuracy = 0.48065824810010854 
Top-2 Accuracy = 0.781 
iter 23: [0.48065824810010854] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.5003142677561282 
Top-2 Accuracy = 0.814 
iter 24: [0.5003142677561282] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.5300268556082509 
Top-2 Accuracy = 0.82 
iter 25: [0.5300268556082509] 
setting: normalizep|rf 
Top-1 Accuracy = 0.47168733215244846 
Top-2 Accuracy = 0.784 
iter 26: [0.47168733215244846] 
setting: robustm|rf 
Top-1 Accuracy = 0.5310553682646706 
Top-2 Accuracy = 0.822 
iter 27: [0.5310553682646706] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.4693446088794926 
Top-2 Accuracy = 0.785 
iter 28: [0.4693446088794926] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.5008285240843381 
Top-2 Accuracy = 0.816 
iter 29: [0.5008285240843381] 
Run # 7 
====== 
setting: maxabsh|rf 
Top-1 Accuracy = 0.4702588423518656 
Top-2 Accuracy = 0.782 
iter 0: [0.4702588423518656] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.5325981372493 
Top-2 Accuracy = 0.819 
iter 1: [0.5325981372493] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.48505799668590366 
Top-2 Accuracy = 0.785 
iter 2: [0.48505799668590366] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.48505799668590366 
Top-2 Accuracy = 0.785 
iter 3: [0.48505799668590366] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.48505799668590366 
Top-2 Accuracy = 0.785 
iter 4: [0.48505799668590366] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.49597165876235644 
Top-2 Accuracy = 0.809 
iter 5: [0.49597165876235644] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.48505799668590366 
Top-2 Accuracy = 0.785 
iter 6: [0.48505799668590366] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.48505799668590366 
Top-2 Accuracy = 0.785 
iter 7: [0.48505799668590366] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.5335695103136964 
Top-2 Accuracy = 0.819 
iter 8: [0.5335695103136964] 
setting: standardizev|rf 
Top-1 Accuracy = 0.533512370721673 
Top-2 Accuracy = 0.819 
iter 9: [0.533512370721673] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.49682875264270615 
Top-2 Accuracy = 0.811 
iter 10: [0.49682875264270615] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.48545797383006684 
Top-2 Accuracy = 0.791 
iter 11: [0.48545797383006684] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.48545797383006684 
Top-2 Accuracy = 0.791 
iter 12: [0.48545797383006684] 
setting: robustX|rf 
Top-1 Accuracy = 0.48545797383006684 
Top-2 Accuracy = 0.791 
iter 13: [0.48545797383006684] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.46488772070167417 
Top-2 Accuracy = 0.782 
iter 14: [0.46488772070167417] 
setting: standardizeh|rf 
Top-1 Accuracy = 0.46837323581509627 
Top-2 Accuracy = 0.782 
iter 15: [0.46837323581509627] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.4906576767041883 
Top-2 Accuracy = 0.809 
iter 16: [0.4906576767041883] 
setting: standardizew|rf 
Top-1 Accuracy = 0.46945888806353925 
Top-2 Accuracy = 0.782 
iter 17: [0.46945888806353925] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.5336266499057196 
Top-2 Accuracy = 0.82 
iter 18: [0.5336266499057196] 
setting: robusty|rf 
Top-1 Accuracy = 0.48500085709388036 
Top-2 Accuracy = 0.785 
iter 19: [0.48500085709388036] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.46597337295011715 
Top-2 Accuracy = 0.779 
iter 20: [0.46597337295011715] 
setting: robustz|rf 
Top-1 Accuracy = 0.48500085709388036 
Top-2 Accuracy = 0.785 
iter 21: [0.48500085709388036] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.48500085709388036 
Top-2 Accuracy = 0.785 
iter 22: [0.48500085709388036] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.48500085709388036 
Top-2 Accuracy = 0.785 
iter 23: [0.48500085709388036] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.4678589794868865 
Top-2 Accuracy = 0.784 
iter 24: [0.4678589794868865] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.5316267641849037 
Top-2 Accuracy = 0.82 
iter 25: [0.5316267641849037] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.47003028398377233 
Top-2 Accuracy = 0.782 
iter 26: [0.47003028398377233] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.46825895663104966 
Top-2 Accuracy = 0.781 
iter 27: [0.46825895663104966] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.5324267184732301 
Top-2 Accuracy = 0.819 
iter 28: [0.5324267184732301] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.5316267641849037 
Top-2 Accuracy = 0.82 
iter 29: [0.5316267641849037] 
Run # 8 
====== 
setting: standardizeO|rf 
Top-1 Accuracy = 0.5022570138849208 
Top-2 Accuracy = 0.816 
iter 0: [0.5022570138849208] 
setting: standardizen|rf 
Top-1 Accuracy = 0.4679161190789098 
Top-2 Accuracy = 0.781 
iter 1: [0.4679161190789098] 
setting: standardizei|rf 
Top-1 Accuracy = 0.4831723901491343 
Top-2 Accuracy = 0.785 
iter 2: [0.4831723901491343] 
setting: normalizek|rf 
Top-1 Accuracy = 0.4645448831495343 
Top-2 Accuracy = 0.781 
iter 3: [0.4645448831495343] 
setting: maxabse|rf 
Top-1 Accuracy = 0.53276955602537 
Top-2 Accuracy = 0.821 
iter 4: [0.53276955602537] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.53276955602537 
Top-2 Accuracy = 0.821 
iter 5: [0.53276955602537] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.5016284783726644 
Top-2 Accuracy = 0.815 
iter 6: [0.5016284783726644] 
setting: robusti|rf 
Top-1 Accuracy = 0.53276955602537 
Top-2 Accuracy = 0.821 
iter 7: [0.53276955602537] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.4835723672932975 
Top-2 Accuracy = 0.786 
iter 8: [0.4835723672932975] 
setting: robustq|rf 
Top-1 Accuracy = 0.4835723672932975 
Top-2 Accuracy = 0.786 
iter 9: [0.4835723672932975] 
setting: robustI|rf 
Top-1 Accuracy = 0.5022570138849208 
Top-2 Accuracy = 0.815 
iter 10: [0.5022570138849208] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.46843037540711957 
Top-2 Accuracy = 0.781 
iter 11: [0.46843037540711957] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.500257128164105 
Top-2 Accuracy = 0.813 
iter 12: [0.500257128164105] 
setting: standardizet|rf 
Top-1 Accuracy = 0.46820181703902636 
Top-2 Accuracy = 0.781 
iter 13: [0.46820181703902636] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.49597165876235644 
Top-2 Accuracy = 0.811 
iter 14: [0.49597165876235644] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.4835723672932975 
Top-2 Accuracy = 0.786 
iter 15: [0.4835723672932975] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.4835723672932975 
Top-2 Accuracy = 0.786 
iter 16: [0.4835723672932975] 
setting: robustz|rf 
Top-1 Accuracy = 0.5325409976572767 
Top-2 Accuracy = 0.821 
iter 17: [0.5325409976572767] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.4835723672932975 
Top-2 Accuracy = 0.786 
iter 18: [0.4835723672932975] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.4986572195874521 
Top-2 Accuracy = 0.814 
iter 19: [0.4986572195874521] 
setting: normalizel|rf 
Top-1 Accuracy = 0.48391520484543743 
Top-2 Accuracy = 0.786 
iter 20: [0.48391520484543743] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.48391520484543743 
Top-2 Accuracy = 0.786 
iter 21: [0.48391520484543743] 
setting: robustt|rf 
Top-1 Accuracy = 0.4906576767041883 
Top-2 Accuracy = 0.809 
iter 22: [0.4906576767041883] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.5006571053082681 
Top-2 Accuracy = 0.816 
iter 23: [0.5006571053082681] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.48591509056625337 
Top-2 Accuracy = 0.789 
iter 24: [0.48591509056625337] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.4698017256156791 
Top-2 Accuracy = 0.784 
iter 25: [0.4698017256156791] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.5317410433689503 
Top-2 Accuracy = 0.82 
iter 26: [0.5317410433689503] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.5328266956173933 
Top-2 Accuracy = 0.82 
iter 27: [0.5328266956173933] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.5037997828695503 
Top-2 Accuracy = 0.82 
iter 28: [0.5037997828695503] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.4680875378549797 
Top-2 Accuracy = 0.781 
iter 29: [0.4680875378549797] 
Run # 9 
====== 
setting: minmaxo|rf 
Top-1 Accuracy = 0.4971144506028227 
Top-2 Accuracy = 0.814 
iter 0: [0.4971144506028227] 
setting: standardizey|rf 
Top-1 Accuracy = 0.48591509056625337 
Top-2 Accuracy = 0.789 
iter 1: [0.48591509056625337] 
setting: robusth|rf 
Top-1 Accuracy = 0.48591509056625337 
Top-2 Accuracy = 0.789 
iter 2: [0.48591509056625337] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.5316267641849037 
Top-2 Accuracy = 0.82 
iter 3: [0.5316267641849037] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.531683903776927 
Top-2 Accuracy = 0.82 
iter 4: [0.531683903776927] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.48591509056625337 
Top-2 Accuracy = 0.789 
iter 5: [0.48591509056625337] 
setting: normalizem|rf 
Top-1 Accuracy = 0.5328266956173933 
Top-2 Accuracy = 0.82 
iter 6: [0.5328266956173933] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.5345408833780927 
Top-2 Accuracy = 0.819 
iter 7: [0.5345408833780927] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.49597165876235644 
Top-2 Accuracy = 0.813 
iter 8: [0.49597165876235644] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.46351637049311467 
Top-2 Accuracy = 0.779 
iter 9: [0.46351637049311467] 
setting: normalizez|rf 
Top-1 Accuracy = 0.46243071824467175 
Top-2 Accuracy = 0.779 
iter 10: [0.46243071824467175] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.5018570367407577 
Top-2 Accuracy = 0.817 
iter 11: [0.5018570367407577] 
setting: normalizej|rf 
Top-1 Accuracy = 0.53276955602537 
Top-2 Accuracy = 0.821 
iter 12: [0.53276955602537] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.4978572652991258 
Top-2 Accuracy = 0.815 
iter 13: [0.4978572652991258] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.47585852237015025 
Top-2 Accuracy = 0.789 
iter 14: [0.47585852237015025] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.5294554596880179 
Top-2 Accuracy = 0.818 
iter 15: [0.5294554596880179] 
setting: robustP|rf 
Top-1 Accuracy = 0.4894577452716988 
Top-2 Accuracy = 0.792 
iter 16: [0.4894577452716988] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.5043140391977601 
Top-2 Accuracy = 0.817 
iter 17: [0.5043140391977601] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.4894577452716988 
Top-2 Accuracy = 0.792 
iter 18: [0.4894577452716988] 
setting: maxabse|rf 
Top-1 Accuracy = 0.4715730529684018 
Top-2 Accuracy = 0.786 
iter 19: [0.4715730529684018] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.47214444888863494 
Top-2 Accuracy = 0.787 
iter 20: [0.47214444888863494] 
setting: robusts|rf 
Top-1 Accuracy = 0.4930575395691675 
Top-2 Accuracy = 0.809 
iter 21: [0.4930575395691675] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.4894577452716988 
Top-2 Accuracy = 0.792 
iter 22: [0.4894577452716988] 
setting: maxabso|rf 
Top-1 Accuracy = 0.49471458773784355 
Top-2 Accuracy = 0.81 
iter 23: [0.49471458773784355] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.5321981601051369 
Top-2 Accuracy = 0.821 
iter 24: [0.5321981601051369] 
setting: normalizef|rf 
Top-1 Accuracy = 0.46734472315867664 
Top-2 Accuracy = 0.781 
iter 25: [0.46734472315867664] 
setting: robustF|rf 
Top-1 Accuracy = 0.49780012570710247 
Top-2 Accuracy = 0.813 
iter 26: [0.49780012570710247] 
setting: standardizev|rf 
Top-1 Accuracy = 0.4679732586709331 
Top-2 Accuracy = 0.781 
iter 27: [0.4679732586709331] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.49460030855379694 
Top-2 Accuracy = 0.806 
iter 28: [0.49460030855379694] 
setting: standardizec|rf 
Top-1 Accuracy = 0.48774355751099935 
Top-2 Accuracy = 0.793 
iter 29: [0.48774355751099935] 
Run # 10 
======= 
setting: normalizet|rf 
Top-1 Accuracy = 0.5341980458259528 
Top-2 Accuracy = 0.821 
iter 0: [0.5341980458259528] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.46820181703902636 
Top-2 Accuracy = 0.78 
iter 1: [0.46820181703902636] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.4847722987257871 
Top-2 Accuracy = 0.786 
iter 2: [0.4847722987257871] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.4676304211187932 
Top-2 Accuracy = 0.78 
iter 3: [0.4676304211187932] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.5031712473572939 
Top-2 Accuracy = 0.815 
iter 4: [0.5031712473572939] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.470144563167819 
Top-2 Accuracy = 0.782 
iter 5: [0.470144563167819] 
setting: robustc|rf 
Top-1 Accuracy = 0.4847722987257871 
Top-2 Accuracy = 0.786 
iter 6: [0.4847722987257871] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.5305411119364608 
Top-2 Accuracy = 0.822 
iter 7: [0.5305411119364608] 
setting: standardized|rf 
Top-1 Accuracy = 0.47088737786412205 
Top-2 Accuracy = 0.78 
iter 8: [0.47088737786412205] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.469230329695446 
Top-2 Accuracy = 0.781 
iter 9: [0.469230329695446] 
setting: standardizel|rf 
Top-1 Accuracy = 0.4692874692874693 
Top-2 Accuracy = 0.784 
iter 10: [0.4692874692874693] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.4847722987257871 
Top-2 Accuracy = 0.786 
iter 11: [0.4847722987257871] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.502656991029084 
Top-2 Accuracy = 0.82 
iter 12: [0.502656991029084] 
setting: normalizek|rf 
Top-1 Accuracy = 0.48625792811839325 
Top-2 Accuracy = 0.786 
iter 13: [0.48625792811839325] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.5304268327524142 
Top-2 Accuracy = 0.822 
iter 14: [0.5304268327524142] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.5013427804125479 
Top-2 Accuracy = 0.816 
iter 15: [0.5013427804125479] 
setting: normalizev|rf 
Top-1 Accuracy = 0.4842580423975773 
Top-2 Accuracy = 0.785 
iter 16: [0.4842580423975773] 
setting: robustl|rf 
Top-1 Accuracy = 0.5021998742928976 
Top-2 Accuracy = 0.816 
iter 17: [0.5021998742928976] 
setting: robuste|rf 
Top-1 Accuracy = 0.5051139934860865 
Top-2 Accuracy = 0.816 
iter 18: [0.5051139934860865] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.4689446317353294 
Top-2 Accuracy = 0.783 
iter 19: [0.4689446317353294] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.5300839952002743 
Top-2 Accuracy = 0.821 
iter 20: [0.5300839952002743] 
setting: robustQ|rf 
Top-1 Accuracy = 0.5300839952002743 
Top-2 Accuracy = 0.821 
iter 21: [0.5300839952002743] 
setting: standardizep|rf 
Top-1 Accuracy = 0.5044283183818068 
Top-2 Accuracy = 0.815 
iter 22: [0.5044283183818068] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.4842580423975773 
Top-2 Accuracy = 0.785 
iter 23: [0.4842580423975773] 
setting: robustr|rf 
Top-1 Accuracy = 0.4679161190789098 
Top-2 Accuracy = 0.781 
iter 24: [0.4679161190789098] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.469058910919376 
Top-2 Accuracy = 0.781 
iter 25: [0.469058910919376] 
setting: robustM|rf 
Top-1 Accuracy = 0.4842580423975773 
Top-2 Accuracy = 0.785 
iter 26: [0.4842580423975773] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.5300839952002743 
Top-2 Accuracy = 0.822 
iter 27: [0.5300839952002743] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.5300839952002743 
Top-2 Accuracy = 0.821 
iter 28: [0.5300839952002743] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.4679732586709331 
Top-2 Accuracy = 0.782 
iter 29: [0.4679732586709331] 
Run # 11 
======= 
setting: normalizee|rf 
Top-1 Accuracy = 0.5294554596880179 
Top-2 Accuracy = 0.822 
iter 0: [0.5294554596880179] 
setting: standardizep|rf 
Top-1 Accuracy = 0.4842580423975773 
Top-2 Accuracy = 0.785 
iter 1: [0.4842580423975773] 
setting: standardizev|rf 
Top-1 Accuracy = 0.4842580423975773 
Top-2 Accuracy = 0.785 
iter 2: [0.4842580423975773] 
setting: maxabss|rf 
Top-1 Accuracy = 0.4842580423975773 
Top-2 Accuracy = 0.785 
iter 3: [0.4842580423975773] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.4842580423975773 
Top-2 Accuracy = 0.785 
iter 4: [0.4842580423975773] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.5297411576481343 
Top-2 Accuracy = 0.822 
iter 5: [0.5297411576481343] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.48974344323181535 
Top-2 Accuracy = 0.791 
iter 6: [0.48974344323181535] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.46945888806353925 
Top-2 Accuracy = 0.785 
iter 7: [0.46945888806353925] 
setting: standardizes|rf 
Top-1 Accuracy = 0.48974344323181535 
Top-2 Accuracy = 0.791 
iter 8: [0.48974344323181535] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.4900291411919319 
Top-2 Accuracy = 0.791 
iter 9: [0.4900291411919319] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.4715159133763785 
Top-2 Accuracy = 0.783 
iter 10: [0.4715159133763785] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.4900291411919319 
Top-2 Accuracy = 0.791 
iter 11: [0.4900291411919319] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.46557339580595397 
Top-2 Accuracy = 0.778 
iter 12: [0.46557339580595397] 
setting: robustZ|rf 
Top-1 Accuracy = 0.4900291411919319 
Top-2 Accuracy = 0.791 
iter 13: [0.4900291411919319] 
setting: robustO|rf 
Top-1 Accuracy = 0.4711159362322153 
Top-2 Accuracy = 0.783 
iter 14: [0.4711159362322153] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.5328266956173933 
Top-2 Accuracy = 0.82 
iter 15: [0.5328266956173933] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.4900291411919319 
Top-2 Accuracy = 0.791 
iter 16: [0.4900291411919319] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.4900291411919319 
Top-2 Accuracy = 0.791 
iter 17: [0.4900291411919319] 
setting: standardizej|rf 
Top-1 Accuracy = 0.471973030112565 
Top-2 Accuracy = 0.782 
iter 18: [0.471973030112565] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.4900291411919319 
Top-2 Accuracy = 0.791 
iter 19: [0.4900291411919319] 
setting: robustL|rf 
Top-1 Accuracy = 0.4900291411919319 
Top-2 Accuracy = 0.791 
iter 20: [0.4900291411919319] 
setting: robustC|rf 
Top-1 Accuracy = 0.4988857779555454 
Top-2 Accuracy = 0.818 
iter 21: [0.4988857779555454] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.46717330438260674 
Top-2 Accuracy = 0.78 
iter 22: [0.46717330438260674] 
setting: normalizem|rf 
Top-1 Accuracy = 0.4900862807839552 
Top-2 Accuracy = 0.792 
iter 23: [0.4900862807839552] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.4998000114279184 
Top-2 Accuracy = 0.813 
iter 24: [0.4998000114279184] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.46814467744700305 
Top-2 Accuracy = 0.778 
iter 25: [0.46814467744700305] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.4909433746643049 
Top-2 Accuracy = 0.79 
iter 26: [0.4909433746643049] 
setting: robustg|rf 
Top-1 Accuracy = 0.5037997828695503 
Top-2 Accuracy = 0.817 
iter 27: [0.5037997828695503] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.5312267870407406 
Top-2 Accuracy = 0.822 
iter 28: [0.5312267870407406] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.5312839266327638 
Top-2 Accuracy = 0.822 
iter 29: [0.5312839266327638] 
Run # 12 
======= 
setting: robusth|rf 
Top-1 Accuracy = 0.5312267870407406 
Top-2 Accuracy = 0.822 
iter 0: [0.5312267870407406] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.502656991029084 
Top-2 Accuracy = 0.815 
iter 1: [0.502656991029084] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.4997428718358951 
Top-2 Accuracy = 0.817 
iter 2: [0.4997428718358951] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.46837323581509627 
Top-2 Accuracy = 0.78 
iter 3: [0.46837323581509627] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.5306553911205074 
Top-2 Accuracy = 0.821 
iter 4: [0.5306553911205074] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.47083023827209874 
Top-2 Accuracy = 0.783 
iter 5: [0.47083023827209874] 
setting: robustb|rf 
Top-1 Accuracy = 0.4844866007656705 
Top-2 Accuracy = 0.789 
iter 6: [0.4844866007656705] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.4844866007656705 
Top-2 Accuracy = 0.789 
iter 7: [0.4844866007656705] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.46860179418318954 
Top-2 Accuracy = 0.785 
iter 8: [0.46860179418318954] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.5335695103136964 
Top-2 Accuracy = 0.821 
iter 9: [0.5335695103136964] 
setting: normalizem|rf 
Top-1 Accuracy = 0.5321981601051369 
Top-2 Accuracy = 0.821 
iter 10: [0.5321981601051369] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.49225758528084107 
Top-2 Accuracy = 0.792 
iter 11: [0.49225758528084107] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.4965430546825896 
Top-2 Accuracy = 0.811 
iter 12: [0.4965430546825896] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.49477172732986685 
Top-2 Accuracy = 0.814 
iter 13: [0.49477172732986685] 
setting: standardizet|rf 
Top-1 Accuracy = 0.46860179418318954 
Top-2 Accuracy = 0.784 
iter 14: [0.46860179418318954] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.5322552996971601 
Top-2 Accuracy = 0.822 
iter 15: [0.5322552996971601] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.5321981601051369 
Top-2 Accuracy = 0.821 
iter 16: [0.5321981601051369] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.5321981601051369 
Top-2 Accuracy = 0.821 
iter 17: [0.5321981601051369] 
setting: robustv|rf 
Top-1 Accuracy = 0.49225758528084107 
Top-2 Accuracy = 0.792 
iter 18: [0.49225758528084107] 
setting: robustC|rf 
Top-1 Accuracy = 0.49225758528084107 
Top-2 Accuracy = 0.792 
iter 19: [0.49225758528084107] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.5320838809210903 
Top-2 Accuracy = 0.821 
iter 20: [0.5320838809210903] 
setting: robustn|rf 
Top-1 Accuracy = 0.4966573338666362 
Top-2 Accuracy = 0.807 
iter 21: [0.4966573338666362] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.49225758528084107 
Top-2 Accuracy = 0.792 
iter 22: [0.49225758528084107] 
setting: standardizej|rf 
Top-1 Accuracy = 0.500257128164105 
Top-2 Accuracy = 0.815 
iter 23: [0.500257128164105] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.49225758528084107 
Top-2 Accuracy = 0.792 
iter 24: [0.49225758528084107] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.46825895663104966 
Top-2 Accuracy = 0.782 
iter 25: [0.46825895663104966] 
setting: robustB|rf 
Top-1 Accuracy = 0.4913433518084681 
Top-2 Accuracy = 0.793 
iter 26: [0.4913433518084681] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.4913433518084681 
Top-2 Accuracy = 0.793 
iter 27: [0.4913433518084681] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.48900062853551224 
Top-2 Accuracy = 0.792 
iter 28: [0.48900062853551224] 
setting: robustz|rf 
Top-1 Accuracy = 0.5334552311296498 
Top-2 Accuracy = 0.82 
iter 29: [0.5334552311296498] 
Run # 13 
======= 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.48900062853551224 
Top-2 Accuracy = 0.792 
iter 0: [0.48900062853551224] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.5335695103136964 
Top-2 Accuracy = 0.82 
iter 1: [0.5335695103136964] 
setting: robustS|rf 
Top-1 Accuracy = 0.48900062853551224 
Top-2 Accuracy = 0.792 
iter 2: [0.48900062853551224] 
setting: robustj|rf 
Top-1 Accuracy = 0.5333409519456032 
Top-2 Accuracy = 0.82 
iter 3: [0.5333409519456032] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.5334552311296498 
Top-2 Accuracy = 0.82 
iter 4: [0.5334552311296498] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.5328266956173933 
Top-2 Accuracy = 0.82 
iter 5: [0.5328266956173933] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.5010570824524313 
Top-2 Accuracy = 0.819 
iter 6: [0.5010570824524313] 
setting: normalizew|rf 
Top-1 Accuracy = 0.46974458602365576 
Top-2 Accuracy = 0.782 
iter 7: [0.46974458602365576] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.49780012570710247 
Top-2 Accuracy = 0.809 
iter 8: [0.49780012570710247] 
setting: standardizez|rf 
Top-1 Accuracy = 0.4891720473115822 
Top-2 Accuracy = 0.793 
iter 9: [0.4891720473115822] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.5332266727615564 
Top-2 Accuracy = 0.819 
iter 10: [0.5332266727615564] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.46865893377521284 
Top-2 Accuracy = 0.781 
iter 11: [0.46865893377521284] 
setting: robustH|rf 
Top-1 Accuracy = 0.5020284555168276 
Top-2 Accuracy = 0.817 
iter 12: [0.5020284555168276] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.4891720473115822 
Top-2 Accuracy = 0.793 
iter 13: [0.4891720473115822] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.5333980915376264 
Top-2 Accuracy = 0.819 
iter 14: [0.5333980915376264] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.5337409290897663 
Top-2 Accuracy = 0.82 
iter 15: [0.5337409290897663] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.5333980915376264 
Top-2 Accuracy = 0.819 
iter 16: [0.5333980915376264] 
setting: robustC|rf 
Top-1 Accuracy = 0.4891720473115822 
Top-2 Accuracy = 0.793 
iter 17: [0.4891720473115822] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.49031483915204843 
Top-2 Accuracy = 0.792 
iter 18: [0.49031483915204843] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.5004285469401748 
Top-2 Accuracy = 0.814 
iter 19: [0.5004285469401748] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.4723730072567282 
Top-2 Accuracy = 0.785 
iter 20: [0.4723730072567282] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.49597165876235644 
Top-2 Accuracy = 0.812 
iter 21: [0.49597165876235644] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.5320267413290669 
Top-2 Accuracy = 0.821 
iter 22: [0.5320267413290669] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.5312267870407406 
Top-2 Accuracy = 0.821 
iter 23: [0.5312267870407406] 
setting: robustZ|rf 
Top-1 Accuracy = 0.5319696017370436 
Top-2 Accuracy = 0.82 
iter 24: [0.5319696017370436] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.4913433518084681 
Top-2 Accuracy = 0.791 
iter 25: [0.4913433518084681] 
setting: robustQ|rf 
Top-1 Accuracy = 0.4692874692874693 
Top-2 Accuracy = 0.782 
iter 26: [0.4692874692874693] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.47174447174447176 
Top-2 Accuracy = 0.784 
iter 27: [0.47174447174447176] 
setting: normalizea|rf 
Top-1 Accuracy = 0.48288669218901775 
Top-2 Accuracy = 0.787 
iter 28: [0.48288669218901775] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.46877321295925944 
Top-2 Accuracy = 0.783 
iter 29: [0.46877321295925944] 
Run # 14 
======= 
setting: minmaxi|rf 
Top-1 Accuracy = 0.5000285697960116 
Top-2 Accuracy = 0.814 
iter 0: [0.5000285697960116] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.46825895663104966 
Top-2 Accuracy = 0.782 
iter 1: [0.46825895663104966] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.46517341866179074 
Top-2 Accuracy = 0.778 
iter 2: [0.46517341866179074] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.48288669218901775 
Top-2 Accuracy = 0.787 
iter 3: [0.48288669218901775] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.48288669218901775 
Top-2 Accuracy = 0.787 
iter 4: [0.48288669218901775] 
setting: standardizee|rf 
Top-1 Accuracy = 0.5330552539854866 
Top-2 Accuracy = 0.819 
iter 5: [0.5330552539854866] 
setting: robustq|rf 
Top-1 Accuracy = 0.5032855265413405 
Top-2 Accuracy = 0.817 
iter 6: [0.5032855265413405] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.4726587052168448 
Top-2 Accuracy = 0.783 
iter 7: [0.4726587052168448] 
setting: robustA|rf 
Top-1 Accuracy = 0.48288669218901775 
Top-2 Accuracy = 0.787 
iter 8: [0.48288669218901775] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.48288669218901775 
Top-2 Accuracy = 0.787 
iter 9: [0.48288669218901775] 
setting: normalizei|rf 
Top-1 Accuracy = 0.48277241300497115 
Top-2 Accuracy = 0.785 
iter 10: [0.48277241300497115] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.49917147591566197 
Top-2 Accuracy = 0.813 
iter 11: [0.49917147591566197] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.4986572195874521 
Top-2 Accuracy = 0.811 
iter 12: [0.4986572195874521] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.5337980686817896 
Top-2 Accuracy = 0.819 
iter 13: [0.5337980686817896] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.46974458602365576 
Top-2 Accuracy = 0.781 
iter 14: [0.46974458602365576] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.531112507856694 
Top-2 Accuracy = 0.816 
iter 15: [0.531112507856694] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.5345408833780927 
Top-2 Accuracy = 0.818 
iter 16: [0.5345408833780927] 
setting: robustt|rf 
Top-1 Accuracy = 0.5345408833780927 
Top-2 Accuracy = 0.819 
iter 17: [0.5345408833780927] 
setting: normalizew|rf 
Top-1 Accuracy = 0.5029426889892006 
Top-2 Accuracy = 0.814 
iter 18: [0.5029426889892006] 
setting: standardizez|rf 
Top-1 Accuracy = 0.46345923090109137 
Top-2 Accuracy = 0.778 
iter 19: [0.46345923090109137] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.500257128164105 
Top-2 Accuracy = 0.816 
iter 20: [0.500257128164105] 
setting: robustC|rf 
Top-1 Accuracy = 0.5288840637677847 
Top-2 Accuracy = 0.816 
iter 21: [0.5288840637677847] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.5039140620535969 
Top-2 Accuracy = 0.817 
iter 22: [0.5039140620535969] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.5337409290897663 
Top-2 Accuracy = 0.819 
iter 23: [0.5337409290897663] 
setting: normalizef|rf 
Top-1 Accuracy = 0.5297411576481343 
Top-2 Accuracy = 0.819 
iter 24: [0.5297411576481343] 
setting: robustz|rf 
Top-1 Accuracy = 0.4666019084623736 
Top-2 Accuracy = 0.78 
iter 25: [0.4666019084623736] 
setting: normalizez|rf 
Top-1 Accuracy = 0.4750014284898006 
Top-2 Accuracy = 0.79 
iter 26: [0.4750014284898006] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.5314553454088338 
Top-2 Accuracy = 0.817 
iter 27: [0.5314553454088338] 
setting: robustH|rf 
Top-1 Accuracy = 0.4653448374378607 
Top-2 Accuracy = 0.779 
iter 28: [0.4653448374378607] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.4833438089252043 
Top-2 Accuracy = 0.786 
iter 29: [0.4833438089252043] 
Run # 15 
======= 
setting: normalizeb|rf 
Top-1 Accuracy = 0.4688303525512828 
Top-2 Accuracy = 0.782 
iter 0: [0.4688303525512828] 
setting: robusts|rf 
Top-1 Accuracy = 0.5304268327524142 
Top-2 Accuracy = 0.821 
iter 1: [0.5304268327524142] 
setting: standardizea|rf 
Top-1 Accuracy = 0.530598251528484 
Top-2 Accuracy = 0.82 
iter 2: [0.530598251528484] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.471058796640192 
Top-2 Accuracy = 0.785 
iter 3: [0.471058796640192] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.5299697160162277 
Top-2 Accuracy = 0.821 
iter 4: [0.5299697160162277] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.47077309868007544 
Top-2 Accuracy = 0.785 
iter 5: [0.47077309868007544] 
setting: standardizek|rf 
Top-1 Accuracy = 0.48385806525341407 
Top-2 Accuracy = 0.787 
iter 6: [0.48385806525341407] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.5305411119364608 
Top-2 Accuracy = 0.82 
iter 7: [0.5305411119364608] 
setting: robustV|rf 
Top-1 Accuracy = 0.46820181703902636 
Top-2 Accuracy = 0.78 
iter 8: [0.46820181703902636] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.529112622135878 
Top-2 Accuracy = 0.821 
iter 9: [0.529112622135878] 
setting: normalizei|rf 
Top-1 Accuracy = 0.5305411119364608 
Top-2 Accuracy = 0.82 
iter 10: [0.5305411119364608] 
setting: robustw|rf 
Top-1 Accuracy = 0.48385806525341407 
Top-2 Accuracy = 0.787 
iter 11: [0.48385806525341407] 
setting: normalizex|rf 
Top-1 Accuracy = 0.47225872807268154 
Top-2 Accuracy = 0.785 
iter 12: [0.47225872807268154] 
setting: standardizet|rf 
Top-1 Accuracy = 0.4943717501857037 
Top-2 Accuracy = 0.79 
iter 13: [0.4943717501857037] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.5006571053082681 
Top-2 Accuracy = 0.818 
iter 14: [0.5006571053082681] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.5312267870407406 
Top-2 Accuracy = 0.817 
iter 15: [0.5312267870407406] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.47048740071995887 
Top-2 Accuracy = 0.781 
iter 16: [0.47048740071995887] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.4834009485172276 
Top-2 Accuracy = 0.786 
iter 17: [0.4834009485172276] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.4834009485172276 
Top-2 Accuracy = 0.786 
iter 18: [0.4834009485172276] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.4927718416090509 
Top-2 Accuracy = 0.791 
iter 19: [0.4927718416090509] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.4927718416090509 
Top-2 Accuracy = 0.791 
iter 20: [0.4927718416090509] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.47043026112793557 
Top-2 Accuracy = 0.784 
iter 21: [0.47043026112793557] 
setting: normalizej|rf 
Top-1 Accuracy = 0.5332838123535798 
Top-2 Accuracy = 0.82 
iter 22: [0.5332838123535798] 
setting: standardizer|rf 
Top-1 Accuracy = 0.5332838123535798 
Top-2 Accuracy = 0.82 
iter 23: [0.5332838123535798] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.4656876749900006 
Top-2 Accuracy = 0.78 
iter 24: [0.4656876749900006] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.4658590937660705 
Top-2 Accuracy = 0.781 
iter 25: [0.4658590937660705] 
setting: standardizew|rf 
Top-1 Accuracy = 0.4926575624250043 
Top-2 Accuracy = 0.791 
iter 26: [0.4926575624250043] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.47043026112793557 
Top-2 Accuracy = 0.784 
iter 27: [0.47043026112793557] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.5332838123535798 
Top-2 Accuracy = 0.82 
iter 28: [0.5332838123535798] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.49477172732986685 
Top-2 Accuracy = 0.809 
iter 29: [0.49477172732986685] 
Run # 16 
======= 
setting: minmaxs|rf 
Top-1 Accuracy = 0.5007142449002914 
Top-2 Accuracy = 0.812 
iter 0: [0.5007142449002914] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.4928861207930975 
Top-2 Accuracy = 0.804 
iter 1: [0.4928861207930975] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.5010570824524313 
Top-2 Accuracy = 0.815 
iter 2: [0.5010570824524313] 
setting: robustv|rf 
Top-1 Accuracy = 0.48637220730243985 
Top-2 Accuracy = 0.792 
iter 3: [0.48637220730243985] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.4932289583452374 
Top-2 Accuracy = 0.809 
iter 4: [0.4932289583452374] 
setting: standardizew|rf 
Top-1 Accuracy = 0.4691160505113994 
Top-2 Accuracy = 0.782 
iter 5: [0.4691160505113994] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.5282555282555282 
Top-2 Accuracy = 0.822 
iter 6: [0.5282555282555282] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.48637220730243985 
Top-2 Accuracy = 0.792 
iter 7: [0.48637220730243985] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.48637220730243985 
Top-2 Accuracy = 0.792 
iter 8: [0.48637220730243985] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.48637220730243985 
Top-2 Accuracy = 0.792 
iter 9: [0.48637220730243985] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.48637220730243985 
Top-2 Accuracy = 0.792 
iter 10: [0.48637220730243985] 
setting: normalizep|rf 
Top-1 Accuracy = 0.46951602765556255 
Top-2 Accuracy = 0.783 
iter 11: [0.46951602765556255] 
setting: robustN|rf 
Top-1 Accuracy = 0.4882006742471859 
Top-2 Accuracy = 0.791 
iter 12: [0.4882006742471859] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.4882006742471859 
Top-2 Accuracy = 0.791 
iter 13: [0.4882006742471859] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.4882006742471859 
Top-2 Accuracy = 0.791 
iter 14: [0.4882006742471859] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.4979715444831724 
Top-2 Accuracy = 0.818 
iter 15: [0.4979715444831724] 
setting: robustF|rf 
Top-1 Accuracy = 0.4856865321981601 
Top-2 Accuracy = 0.79 
iter 16: [0.4856865321981601] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.4856865321981601 
Top-2 Accuracy = 0.79 
iter 17: [0.4856865321981601] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.5310553682646706 
Top-2 Accuracy = 0.82 
iter 18: [0.5310553682646706] 
setting: normalizez|rf 
Top-1 Accuracy = 0.47071595908805214 
Top-2 Accuracy = 0.781 
iter 19: [0.47071595908805214] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.530769670304554 
Top-2 Accuracy = 0.82 
iter 20: [0.530769670304554] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.5016284783726644 
Top-2 Accuracy = 0.817 
iter 21: [0.5016284783726644] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.46471630192560426 
Top-2 Accuracy = 0.777 
iter 22: [0.46471630192560426] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.49922861550768527 
Top-2 Accuracy = 0.817 
iter 23: [0.49922861550768527] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.46500199988572083 
Top-2 Accuracy = 0.779 
iter 24: [0.46500199988572083] 
setting: robusti|rf 
Top-1 Accuracy = 0.487857836695046 
Top-2 Accuracy = 0.792 
iter 25: [0.487857836695046] 
setting: standardizei|rf 
Top-1 Accuracy = 0.5321410205131135 
Top-2 Accuracy = 0.819 
iter 26: [0.5321410205131135] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.49694303182675276 
Top-2 Accuracy = 0.809 
iter 27: [0.49694303182675276] 
setting: robustf|rf 
Top-1 Accuracy = 0.4726015656248214 
Top-2 Accuracy = 0.784 
iter 28: [0.4726015656248214] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.5280841094794583 
Top-2 Accuracy = 0.822 
iter 29: [0.5280841094794583] 
Run # 17 
======= 
setting: maxabsD|rf 
Top-1 Accuracy = 0.499000057139592 
Top-2 Accuracy = 0.819 
iter 0: [0.499000057139592] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.5007713844923147 
Top-2 Accuracy = 0.815 
iter 1: [0.5007713844923147] 
setting: standardizei|rf 
Top-1 Accuracy = 0.4702017027598423 
Top-2 Accuracy = 0.78 
iter 2: [0.4702017027598423] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.5009428032683847 
Top-2 Accuracy = 0.817 
iter 3: [0.5009428032683847] 
setting: normalizek|rf 
Top-1 Accuracy = 0.4964287754985429 
Top-2 Accuracy = 0.812 
iter 4: [0.4964287754985429] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.466316210502257 
Top-2 Accuracy = 0.781 
iter 5: [0.466316210502257] 
setting: robustr|rf 
Top-1 Accuracy = 0.5272270155991087 
Top-2 Accuracy = 0.821 
iter 6: [0.5272270155991087] 
setting: maxabso|rf 
Top-1 Accuracy = 0.5272270155991087 
Top-2 Accuracy = 0.821 
iter 7: [0.5272270155991087] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.5278555511113651 
Top-2 Accuracy = 0.822 
iter 8: [0.5278555511113651] 
setting: robustg|rf 
Top-1 Accuracy = 0.5279126907033884 
Top-2 Accuracy = 0.822 
iter 9: [0.5279126907033884] 
setting: normalizem|rf 
Top-1 Accuracy = 0.4760299411462202 
Top-2 Accuracy = 0.78 
iter 10: [0.4760299411462202] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.46854465459116623 
Top-2 Accuracy = 0.782 
iter 11: [0.46854465459116623] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.4760299411462202 
Top-2 Accuracy = 0.78 
iter 12: [0.4760299411462202] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.4760299411462202 
Top-2 Accuracy = 0.78 
iter 13: [0.4760299411462202] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.4760299411462202 
Top-2 Accuracy = 0.78 
iter 14: [0.4760299411462202] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.4760299411462202 
Top-2 Accuracy = 0.78 
iter 15: [0.4760299411462202] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.4760299411462202 
Top-2 Accuracy = 0.78 
iter 16: [0.4760299411462202] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.5004285469401748 
Top-2 Accuracy = 0.817 
iter 17: [0.5004285469401748] 
setting: robustX|rf 
Top-1 Accuracy = 0.5008285240843381 
Top-2 Accuracy = 0.817 
iter 18: [0.5008285240843381] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.4760299411462202 
Top-2 Accuracy = 0.78 
iter 19: [0.4760299411462202] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.5043711787897834 
Top-2 Accuracy = 0.815 
iter 20: [0.5043711787897834] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.5215130563967774 
Top-2 Accuracy = 0.819 
iter 21: [0.5215130563967774] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.46745900234272325 
Top-2 Accuracy = 0.781 
iter 22: [0.46745900234272325] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.4680303982629564 
Top-2 Accuracy = 0.78 
iter 23: [0.4680303982629564] 
setting: robustb|rf 
Top-1 Accuracy = 0.5004285469401748 
Top-2 Accuracy = 0.815 
iter 24: [0.5004285469401748] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.4800297125878521 
Top-2 Accuracy = 0.78 
iter 25: [0.4800297125878521] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.5270555968230387 
Top-2 Accuracy = 0.821 
iter 26: [0.5270555968230387] 
setting: normalizec|rf 
Top-1 Accuracy = 0.5284840866236216 
Top-2 Accuracy = 0.82 
iter 27: [0.5284840866236216] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.491514770584538 
Top-2 Accuracy = 0.809 
iter 28: [0.491514770584538] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.4733443803211245 
Top-2 Accuracy = 0.785 
iter 29: [0.4733443803211245] 
Run # 18 
======= 
setting: robustk|rf 
Top-1 Accuracy = 0.5297411576481343 
Top-2 Accuracy = 0.82 
iter 0: [0.5297411576481343] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.502828409805154 
Top-2 Accuracy = 0.817 
iter 1: [0.502828409805154] 
setting: robustl|rf 
Top-1 Accuracy = 0.4667161876464202 
Top-2 Accuracy = 0.78 
iter 2: [0.4667161876464202] 
setting: robustM|rf 
Top-1 Accuracy = 0.4844294611736472 
Top-2 Accuracy = 0.79 
iter 3: [0.4844294611736472] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.4844294611736472 
Top-2 Accuracy = 0.79 
iter 4: [0.4844294611736472] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.5015713387806411 
Top-2 Accuracy = 0.816 
iter 5: [0.5015713387806411] 
setting: standardizee|rf 
Top-1 Accuracy = 0.4844294611736472 
Top-2 Accuracy = 0.79 
iter 6: [0.4844294611736472] 
setting: standardizem|rf 
Top-1 Accuracy = 0.46723044397463004 
Top-2 Accuracy = 0.779 
iter 7: [0.46723044397463004] 
setting: robusti|rf 
Top-1 Accuracy = 0.5297982972401577 
Top-2 Accuracy = 0.82 
iter 8: [0.5297982972401577] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.5009428032683847 
Top-2 Accuracy = 0.818 
iter 9: [0.5009428032683847] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.4844294611736472 
Top-2 Accuracy = 0.79 
iter 10: [0.4844294611736472] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.46643048968630363 
Top-2 Accuracy = 0.778 
iter 11: [0.46643048968630363] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.5288840637677847 
Top-2 Accuracy = 0.816 
iter 12: [0.5288840637677847] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.48620078852636994 
Top-2 Accuracy = 0.791 
iter 13: [0.48620078852636994] 
setting: robustw|rf 
Top-1 Accuracy = 0.5302554139763442 
Top-2 Accuracy = 0.82 
iter 14: [0.5302554139763442] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.4645448831495343 
Top-2 Accuracy = 0.781 
iter 15: [0.4645448831495343] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.5016856179646877 
Top-2 Accuracy = 0.816 
iter 16: [0.5016856179646877] 
setting: normalizev|rf 
Top-1 Accuracy = 0.46974458602365576 
Top-2 Accuracy = 0.785 
iter 17: [0.46974458602365576] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.48534369464602023 
Top-2 Accuracy = 0.785 
iter 18: [0.48534369464602023] 
setting: normalizee|rf 
Top-1 Accuracy = 0.4861436489343466 
Top-2 Accuracy = 0.792 
iter 19: [0.4861436489343466] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.47180161133649506 
Top-2 Accuracy = 0.782 
iter 20: [0.47180161133649506] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.5302554139763442 
Top-2 Accuracy = 0.82 
iter 21: [0.5302554139763442] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.469230329695446 
Top-2 Accuracy = 0.782 
iter 22: [0.469230329695446] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.5023712930689674 
Top-2 Accuracy = 0.818 
iter 23: [0.5023712930689674] 
setting: robustf|rf 
Top-1 Accuracy = 0.49454316896177364 
Top-2 Accuracy = 0.813 
iter 24: [0.49454316896177364] 
setting: standardizer|rf 
Top-1 Accuracy = 0.5307125307125307 
Top-2 Accuracy = 0.819 
iter 25: [0.5307125307125307] 
setting: robustS|rf 
Top-1 Accuracy = 0.4954002628421233 
Top-2 Accuracy = 0.809 
iter 26: [0.4954002628421233] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.5305411119364608 
Top-2 Accuracy = 0.819 
iter 27: [0.5305411119364608] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.46831609622307296 
Top-2 Accuracy = 0.782 
iter 28: [0.46831609622307296] 
setting: robustI|rf 
Top-1 Accuracy = 0.47100165704816865 
Top-2 Accuracy = 0.781 
iter 29: [0.47100165704816865] 
Run # 19 
======= 
setting: maxabsd|rf 
Top-1 Accuracy = 0.4692874692874693 
Top-2 Accuracy = 0.782 
iter 0: [0.4692874692874693] 
setting: robustN|rf 
Top-1 Accuracy = 0.4961430775384264 
Top-2 Accuracy = 0.814 
iter 1: [0.4961430775384264] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.4640306268213245 
Top-2 Accuracy = 0.78 
iter 2: [0.4640306268213245] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.48511513627792696 
Top-2 Accuracy = 0.79 
iter 3: [0.48511513627792696] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.5307125307125307 
Top-2 Accuracy = 0.818 
iter 4: [0.5307125307125307] 
setting: maxabso|rf 
Top-1 Accuracy = 0.48511513627792696 
Top-2 Accuracy = 0.79 
iter 5: [0.48511513627792696] 
setting: robustZ|rf 
Top-1 Accuracy = 0.49100051425632824 
Top-2 Accuracy = 0.809 
iter 6: [0.49100051425632824] 
setting: robustS|rf 
Top-1 Accuracy = 0.4693446088794926 
Top-2 Accuracy = 0.781 
iter 7: [0.4693446088794926] 
setting: maxabst|rf 
Top-1 Accuracy = 0.4657448145820239 
Top-2 Accuracy = 0.779 
iter 8: [0.4657448145820239] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.530598251528484 
Top-2 Accuracy = 0.82 
iter 9: [0.530598251528484] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.46997314439174903 
Top-2 Accuracy = 0.782 
iter 10: [0.46997314439174903] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.4881435346551626 
Top-2 Accuracy = 0.791 
iter 11: [0.4881435346551626] 
setting: standardizem|rf 
Top-1 Accuracy = 0.46877321295925944 
Top-2 Accuracy = 0.781 
iter 12: [0.46877321295925944] 
setting: robusts|rf 
Top-1 Accuracy = 0.5301982743843209 
Top-2 Accuracy = 0.82 
iter 13: [0.5301982743843209] 
setting: robustI|rf 
Top-1 Accuracy = 0.49722872978686933 
Top-2 Accuracy = 0.815 
iter 14: [0.49722872978686933] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.4667161876464202 
Top-2 Accuracy = 0.782 
iter 15: [0.4667161876464202] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.471973030112565 
Top-2 Accuracy = 0.783 
iter 16: [0.471973030112565] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.5298554368321811 
Top-2 Accuracy = 0.819 
iter 17: [0.5298554368321811] 
setting: normalizes|rf 
Top-1 Accuracy = 0.4750014284898006 
Top-2 Accuracy = 0.786 
iter 18: [0.4750014284898006] 
setting: robustM|rf 
Top-1 Accuracy = 0.4861436489343466 
Top-2 Accuracy = 0.792 
iter 19: [0.4861436489343466] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.5319696017370436 
Top-2 Accuracy = 0.819 
iter 20: [0.5319696017370436] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.47300154276898465 
Top-2 Accuracy = 0.783 
iter 21: [0.47300154276898465] 
setting: robusto|rf 
Top-1 Accuracy = 0.46974458602365576 
Top-2 Accuracy = 0.784 
iter 22: [0.46974458602365576] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.4865436260785098 
Top-2 Accuracy = 0.792 
iter 23: [0.4865436260785098] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.4865436260785098 
Top-2 Accuracy = 0.792 
iter 24: [0.4865436260785098] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.4865436260785098 
Top-2 Accuracy = 0.792 
iter 25: [0.4865436260785098] 
setting: robustz|rf 
Top-1 Accuracy = 0.5321410205131135 
Top-2 Accuracy = 0.82 
iter 26: [0.5321410205131135] 
setting: standardizev|rf 
Top-1 Accuracy = 0.501914176332781 
Top-2 Accuracy = 0.817 
iter 27: [0.501914176332781] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.4870007428146963 
Top-2 Accuracy = 0.792 
iter 28: [0.4870007428146963] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.49780012570710247 
Top-2 Accuracy = 0.814 
iter 29: [0.49780012570710247] 
 
Median top-1 = 0.4913433518084681 
Median top-2 = 0.792 
5 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=48), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=31), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=26), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=94), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=69), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=21), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=93), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=97), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=82), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=60), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=96), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=26), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=15), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=38), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=15), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=81), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=96), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=96), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=30), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=16), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=35), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=90), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=54), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=92), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=70), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=65), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=48), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=29), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=79), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=45), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=63), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=89), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=74), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=70), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=33), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=68), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=68), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=80), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=87), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=48), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=52), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=54), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=35), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=44), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=28), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: standardizeS|rf 
Top-1 Accuracy = 0.33746643048968633 
Top-2 Accuracy = 0.591 
iter 0: [0.33746643048968633] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.3010113707788126 
Top-2 Accuracy = 0.55 
iter 1: [0.3010113707788126] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.30181132506713904 
Top-2 Accuracy = 0.571 
iter 2: [0.30181132506713904] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.2894691731901034 
Top-2 Accuracy = 0.477 
iter 3: [0.2894691731901034] 
setting: standardizez|rf 
Top-1 Accuracy = 0.30181132506713904 
Top-2 Accuracy = 0.556 
iter 4: [0.30181132506713904] 
setting: robustX|rf 
Top-1 Accuracy = 0.3034683732358151 
Top-2 Accuracy = 0.552 
iter 5: [0.3034683732358151] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.3039826295640249 
Top-2 Accuracy = 0.556 
iter 6: [0.3039826295640249] 
setting: maxabss|rf 
Top-1 Accuracy = 0.2894120335980801 
Top-2 Accuracy = 0.475 
iter 7: [0.2894120335980801] 
setting: robustj|rf 
Top-1 Accuracy = 0.30181132506713904 
Top-2 Accuracy = 0.571 
iter 8: [0.30181132506713904] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.29129764013484943 
Top-2 Accuracy = 0.478 
iter 9: [0.29129764013484943] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.28518370378835495 
Top-2 Accuracy = 0.474 
iter 10: [0.28518370378835495] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.30198274384320895 
Top-2 Accuracy = 0.556 
iter 11: [0.30198274384320895] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.3048397234443746 
Top-2 Accuracy = 0.558 
iter 12: [0.3048397234443746] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.33266670475972804 
Top-2 Accuracy = 0.6 
iter 13: [0.33266670475972804] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.33380949660019427 
Top-2 Accuracy = 0.6 
iter 14: [0.33380949660019427] 
setting: robusth|rf 
Top-1 Accuracy = 0.28735500828524085 
Top-2 Accuracy = 0.564 
iter 15: [0.28735500828524085] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.2905548254385464 
Top-2 Accuracy = 0.478 
iter 16: [0.2905548254385464] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.3345523112964973 
Top-2 Accuracy = 0.6 
iter 17: [0.3345523112964973] 
setting: robustd|rf 
Top-1 Accuracy = 0.3334666590480544 
Top-2 Accuracy = 0.599 
iter 18: [0.3334666590480544] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.28775498542940403 
Top-2 Accuracy = 0.475 
iter 19: [0.28775498542940403] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.28735500828524085 
Top-2 Accuracy = 0.564 
iter 20: [0.28735500828524085] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.3013542083309525 
Top-2 Accuracy = 0.554 
iter 21: [0.3013542083309525] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.2869550311410777 
Top-2 Accuracy = 0.474 
iter 22: [0.2869550311410777] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.333580938232101 
Top-2 Accuracy = 0.6 
iter 23: [0.333580938232101] 
setting: robustR|rf 
Top-1 Accuracy = 0.2867836123650077 
Top-2 Accuracy = 0.563 
iter 24: [0.2867836123650077] 
setting: robustC|rf 
Top-1 Accuracy = 0.3011827895548826 
Top-2 Accuracy = 0.554 
iter 25: [0.3011827895548826] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.2867836123650077 
Top-2 Accuracy = 0.563 
iter 26: [0.2867836123650077] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.2855265413404948 
Top-2 Accuracy = 0.475 
iter 27: [0.2855265413404948] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.3023255813953488 
Top-2 Accuracy = 0.555 
iter 28: [0.3023255813953488] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.2975258556653905 
Top-2 Accuracy = 0.57 
iter 29: [0.2975258556653905] 
Run # 1 
====== 
setting: normalizep|rf 
Top-1 Accuracy = 0.2809553739786298 
Top-2 Accuracy = 0.469 
iter 0: [0.2809553739786298] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.29215473401519915 
Top-2 Accuracy = 0.561 
iter 1: [0.29215473401519915] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.28655505399691444 
Top-2 Accuracy = 0.473 
iter 2: [0.28655505399691444] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.29215473401519915 
Top-2 Accuracy = 0.561 
iter 3: [0.29215473401519915] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.30678246957316724 
Top-2 Accuracy = 0.563 
iter 4: [0.30678246957316724] 
setting: standardizeh|rf 
Top-1 Accuracy = 0.3480372550139992 
Top-2 Accuracy = 0.602 
iter 5: [0.3480372550139992] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.30541111936460774 
Top-2 Accuracy = 0.553 
iter 6: [0.30541111936460774] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.3079252614136335 
Top-2 Accuracy = 0.559 
iter 7: [0.3079252614136335] 
setting: robustA|rf 
Top-1 Accuracy = 0.29135477972687274 
Top-2 Accuracy = 0.563 
iter 8: [0.29135477972687274] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.29135477972687274 
Top-2 Accuracy = 0.563 
iter 9: [0.29135477972687274] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.30769670304554025 
Top-2 Accuracy = 0.561 
iter 10: [0.30769670304554025] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.28644077481286784 
Top-2 Accuracy = 0.474 
iter 11: [0.28644077481286784] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.2834695160276556 
Top-2 Accuracy = 0.471 
iter 12: [0.2834695160276556] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.2975258556653905 
Top-2 Accuracy = 0.565 
iter 13: [0.2975258556653905] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.28564082052454143 
Top-2 Accuracy = 0.474 
iter 14: [0.28564082052454143] 
setting: robuste|rf 
Top-1 Accuracy = 0.2975258556653905 
Top-2 Accuracy = 0.565 
iter 15: [0.2975258556653905] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.2894120335980801 
Top-2 Accuracy = 0.477 
iter 16: [0.2894120335980801] 
setting: robustw|rf 
Top-1 Accuracy = 0.2975258556653905 
Top-2 Accuracy = 0.565 
iter 17: [0.2975258556653905] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.2975258556653905 
Top-2 Accuracy = 0.565 
iter 18: [0.2975258556653905] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.2975258556653905 
Top-2 Accuracy = 0.565 
iter 19: [0.2975258556653905] 
setting: maxabss|rf 
Top-1 Accuracy = 0.2901548482943832 
Top-2 Accuracy = 0.479 
iter 20: [0.2901548482943832] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.30369693160390837 
Top-2 Accuracy = 0.564 
iter 21: [0.30369693160390837] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.3499228615507685 
Top-2 Accuracy = 0.603 
iter 22: [0.3499228615507685] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.30369693160390837 
Top-2 Accuracy = 0.564 
iter 23: [0.30369693160390837] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.30072567281869605 
Top-2 Accuracy = 0.558 
iter 24: [0.30072567281869605] 
setting: standardizee|rf 
Top-1 Accuracy = 0.35272270155991087 
Top-2 Accuracy = 0.604 
iter 25: [0.35272270155991087] 
setting: robustG|rf 
Top-1 Accuracy = 0.30369693160390837 
Top-2 Accuracy = 0.564 
iter 26: [0.30369693160390837] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.2872407291011942 
Top-2 Accuracy = 0.474 
iter 27: [0.2872407291011942] 
setting: robustr|rf 
Top-1 Accuracy = 0.30546825895663104 
Top-2 Accuracy = 0.559 
iter 28: [0.30546825895663104] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.30369693160390837 
Top-2 Accuracy = 0.564 
iter 29: [0.30369693160390837] 
Run # 2 
====== 
setting: minmaxi|rf 
Top-1 Accuracy = 0.30529684018056114 
Top-2 Accuracy = 0.556 
iter 0: [0.30529684018056114] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.35266556196788756 
Top-2 Accuracy = 0.604 
iter 1: [0.35266556196788756] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.35266556196788756 
Top-2 Accuracy = 0.604 
iter 2: [0.35266556196788756] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.35272270155991087 
Top-2 Accuracy = 0.604 
iter 3: [0.35272270155991087] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.3454659733729501 
Top-2 Accuracy = 0.601 
iter 4: [0.3454659733729501] 
setting: normalizew|rf 
Top-1 Accuracy = 0.3025541397634421 
Top-2 Accuracy = 0.561 
iter 5: [0.3025541397634421] 
setting: standardizea|rf 
Top-1 Accuracy = 0.35295125992800414 
Top-2 Accuracy = 0.602 
iter 6: [0.35295125992800414] 
setting: standardizef|rf 
Top-1 Accuracy = 0.30066853322667275 
Top-2 Accuracy = 0.56 
iter 7: [0.30066853322667275] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.35037997828695505 
Top-2 Accuracy = 0.604 
iter 8: [0.35037997828695505] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.30152562710702246 
Top-2 Accuracy = 0.557 
iter 9: [0.30152562710702246] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.28266956173932917 
Top-2 Accuracy = 0.471 
iter 10: [0.28266956173932917] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.30152562710702246 
Top-2 Accuracy = 0.554 
iter 11: [0.30152562710702246] 
setting: standardizes|rf 
Top-1 Accuracy = 0.3528941203359808 
Top-2 Accuracy = 0.602 
iter 12: [0.3528941203359808] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.28175532826695615 
Top-2 Accuracy = 0.47 
iter 13: [0.28175532826695615] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.2862693560367979 
Top-2 Accuracy = 0.474 
iter 14: [0.2862693560367979] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.3114107765270556 
Top-2 Accuracy = 0.557 
iter 15: [0.3114107765270556] 
setting: robuste|rf 
Top-1 Accuracy = 0.3114107765270556 
Top-2 Accuracy = 0.557 
iter 16: [0.3114107765270556] 
setting: normalizee|rf 
Top-1 Accuracy = 0.34963716359065194 
Top-2 Accuracy = 0.605 
iter 17: [0.34963716359065194] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.2880978229815439 
Top-2 Accuracy = 0.476 
iter 18: [0.2880978229815439] 
setting: standardized|rf 
Top-1 Accuracy = 0.30655391120507397 
Top-2 Accuracy = 0.559 
iter 19: [0.30655391120507397] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.312210730815382 
Top-2 Accuracy = 0.556 
iter 20: [0.312210730815382] 
setting: robustY|rf 
Top-1 Accuracy = 0.30426832752414146 
Top-2 Accuracy = 0.556 
iter 21: [0.30426832752414146] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.312210730815382 
Top-2 Accuracy = 0.556 
iter 22: [0.312210730815382] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.312210730815382 
Top-2 Accuracy = 0.556 
iter 23: [0.312210730815382] 
setting: standardizep|rf 
Top-1 Accuracy = 0.30666819038912063 
Top-2 Accuracy = 0.559 
iter 24: [0.30666819038912063] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.35037997828695505 
Top-2 Accuracy = 0.603 
iter 25: [0.35037997828695505] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.300897091594766 
Top-2 Accuracy = 0.554 
iter 26: [0.300897091594766] 
setting: standardizem|rf 
Top-1 Accuracy = 0.300897091594766 
Top-2 Accuracy = 0.554 
iter 27: [0.300897091594766] 
setting: normalizep|rf 
Top-1 Accuracy = 0.3012970687389292 
Top-2 Accuracy = 0.553 
iter 28: [0.3012970687389292] 
setting: maxabsK|rf 
Top-1 Accuracy = 0.3012970687389292 
Top-2 Accuracy = 0.553 
iter 29: [0.3012970687389292] 
Run # 3 
====== 
setting: robustV|rf 
Top-1 Accuracy = 0.3012970687389292 
Top-2 Accuracy = 0.553 
iter 0: [0.3012970687389292] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.3012970687389292 
Top-2 Accuracy = 0.553 
iter 1: [0.3012970687389292] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.30512542140449117 
Top-2 Accuracy = 0.556 
iter 2: [0.30512542140449117] 
setting: robustQ|rf 
Top-1 Accuracy = 0.2870693103251243 
Top-2 Accuracy = 0.473 
iter 3: [0.2870693103251243] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.3479801154219759 
Top-2 Accuracy = 0.602 
iter 4: [0.3479801154219759] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.3012970687389292 
Top-2 Accuracy = 0.553 
iter 5: [0.3012970687389292] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.3012970687389292 
Top-2 Accuracy = 0.553 
iter 6: [0.3012970687389292] 
setting: robustD|rf 
Top-1 Accuracy = 0.3044397463002114 
Top-2 Accuracy = 0.558 
iter 7: [0.3044397463002114] 
setting: robustL|rf 
Top-1 Accuracy = 0.3071253071253071 
Top-2 Accuracy = 0.556 
iter 8: [0.3071253071253071] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.3012970687389292 
Top-2 Accuracy = 0.553 
iter 9: [0.3012970687389292] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.3078681218216102 
Top-2 Accuracy = 0.561 
iter 10: [0.3078681218216102] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.2858122393006114 
Top-2 Accuracy = 0.476 
iter 11: [0.2858122393006114] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.30312553568367523 
Top-2 Accuracy = 0.557 
iter 12: [0.30312553568367523] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.3034683732358151 
Top-2 Accuracy = 0.558 
iter 13: [0.3034683732358151] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.3497514427746986 
Top-2 Accuracy = 0.604 
iter 14: [0.3497514427746986] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.3150105708245243 
Top-2 Accuracy = 0.56 
iter 15: [0.3150105708245243] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.3009542311867893 
Top-2 Accuracy = 0.549 
iter 16: [0.3009542311867893] 
setting: robusta|rf 
Top-1 Accuracy = 0.3489514884863722 
Top-2 Accuracy = 0.603 
iter 17: [0.3489514884863722] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.30301125649962857 
Top-2 Accuracy = 0.555 
iter 18: [0.30301125649962857] 
setting: standardizer|rf 
Top-1 Accuracy = 0.286840751957031 
Top-2 Accuracy = 0.474 
iter 19: [0.286840751957031] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.28655505399691444 
Top-2 Accuracy = 0.474 
iter 20: [0.28655505399691444] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.3474658590937661 
Top-2 Accuracy = 0.602 
iter 21: [0.3474658590937661] 
setting: robustx|rf 
Top-1 Accuracy = 0.3489514884863722 
Top-2 Accuracy = 0.603 
iter 22: [0.3489514884863722] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.3022113022113022 
Top-2 Accuracy = 0.562 
iter 23: [0.3022113022113022] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.3024398605793955 
Top-2 Accuracy = 0.558 
iter 24: [0.3024398605793955] 
setting: robustU|rf 
Top-1 Accuracy = 0.3022113022113022 
Top-2 Accuracy = 0.562 
iter 25: [0.3022113022113022] 
setting: robustF|rf 
Top-1 Accuracy = 0.2888977772698703 
Top-2 Accuracy = 0.476 
iter 26: [0.2888977772698703] 
setting: robustd|rf 
Top-1 Accuracy = 0.34912290726244216 
Top-2 Accuracy = 0.603 
iter 27: [0.34912290726244216] 
setting: standardizew|rf 
Top-1 Accuracy = 0.34912290726244216 
Top-2 Accuracy = 0.603 
iter 28: [0.34912290726244216] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.3025541397634421 
Top-2 Accuracy = 0.56 
iter 29: [0.3025541397634421] 
Run # 4 
====== 
setting: minmaxj|rf 
Top-1 Accuracy = 0.30278269813153535 
Top-2 Accuracy = 0.557 
iter 0: [0.30278269813153535] 
setting: robustU|rf 
Top-1 Accuracy = 0.2867836123650077 
Top-2 Accuracy = 0.472 
iter 1: [0.2867836123650077] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.3493514656305354 
Top-2 Accuracy = 0.602 
iter 2: [0.3493514656305354] 
setting: normalizev|rf 
Top-1 Accuracy = 0.3078681218216102 
Top-2 Accuracy = 0.558 
iter 3: [0.3078681218216102] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.3493514656305354 
Top-2 Accuracy = 0.603 
iter 4: [0.3493514656305354] 
setting: standardizew|rf 
Top-1 Accuracy = 0.30512542140449117 
Top-2 Accuracy = 0.555 
iter 5: [0.30512542140449117] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.3023827209873722 
Top-2 Accuracy = 0.555 
iter 6: [0.3023827209873722] 
setting: robustG|rf 
Top-1 Accuracy = 0.3023827209873722 
Top-2 Accuracy = 0.555 
iter 7: [0.3023827209873722] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.2862693560367979 
Top-2 Accuracy = 0.474 
iter 8: [0.2862693560367979] 
setting: robustX|rf 
Top-1 Accuracy = 0.3023827209873722 
Top-2 Accuracy = 0.555 
iter 9: [0.3023827209873722] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.2854694017484715 
Top-2 Accuracy = 0.472 
iter 10: [0.2854694017484715] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.3023827209873722 
Top-2 Accuracy = 0.555 
iter 11: [0.3023827209873722] 
setting: robusti|rf 
Top-1 Accuracy = 0.34820867379006915 
Top-2 Accuracy = 0.602 
iter 12: [0.34820867379006915] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.34815153419804584 
Top-2 Accuracy = 0.602 
iter 13: [0.34815153419804584] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.30638249242900406 
Top-2 Accuracy = 0.557 
iter 14: [0.30638249242900406] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.3465516256213931 
Top-2 Accuracy = 0.602 
iter 15: [0.3465516256213931] 
setting: standardizer|rf 
Top-1 Accuracy = 0.28746928746928746 
Top-2 Accuracy = 0.475 
iter 16: [0.28746928746928746] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.3462659276612765 
Top-2 Accuracy = 0.602 
iter 17: [0.3462659276612765] 
setting: robustK|rf 
Top-1 Accuracy = 0.2843837495000286 
Top-2 Accuracy = 0.474 
iter 18: [0.2843837495000286] 
setting: robustD|rf 
Top-1 Accuracy = 0.3465516256213931 
Top-2 Accuracy = 0.602 
iter 19: [0.3465516256213931] 
setting: robusty|rf 
Top-1 Accuracy = 0.30775384263756356 
Top-2 Accuracy = 0.559 
iter 20: [0.30775384263756356] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.3465516256213931 
Top-2 Accuracy = 0.602 
iter 21: [0.3465516256213931] 
setting: standardizea|rf 
Top-1 Accuracy = 0.3070681675332838 
Top-2 Accuracy = 0.554 
iter 22: [0.3070681675332838] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.28255528255528256 
Top-2 Accuracy = 0.471 
iter 23: [0.28255528255528256] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.28781212502142733 
Top-2 Accuracy = 0.475 
iter 24: [0.28781212502142733] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.3024970001714188 
Top-2 Accuracy = 0.557 
iter 25: [0.3024970001714188] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.30158276669904577 
Top-2 Accuracy = 0.555 
iter 26: [0.30158276669904577] 
setting: robustc|rf 
Top-1 Accuracy = 0.3024970001714188 
Top-2 Accuracy = 0.557 
iter 27: [0.3024970001714188] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.2881549625735672 
Top-2 Accuracy = 0.476 
iter 28: [0.2881549625735672] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.2911262213587795 
Top-2 Accuracy = 0.479 
iter 29: [0.2911262213587795] 
Run # 5 
====== 
setting: standardizek|rf 
Top-1 Accuracy = 0.3060396548768642 
Top-2 Accuracy = 0.555 
iter 0: [0.3060396548768642] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.30426832752414146 
Top-2 Accuracy = 0.558 
iter 1: [0.30426832752414146] 
setting: standardizee|rf 
Top-1 Accuracy = 0.3497514427746986 
Top-2 Accuracy = 0.604 
iter 2: [0.3497514427746986] 
setting: robustw|rf 
Top-1 Accuracy = 0.3497514427746986 
Top-2 Accuracy = 0.604 
iter 3: [0.3497514427746986] 
setting: normalizew|rf 
Top-1 Accuracy = 0.28518370378835495 
Top-2 Accuracy = 0.473 
iter 4: [0.28518370378835495] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.2954688303525513 
Top-2 Accuracy = 0.555 
iter 5: [0.2954688303525513] 
setting: robustf|rf 
Top-1 Accuracy = 0.3047825838523513 
Top-2 Accuracy = 0.56 
iter 6: [0.3047825838523513] 
setting: robustc|rf 
Top-1 Accuracy = 0.2844408890920519 
Top-2 Accuracy = 0.473 
iter 7: [0.2844408890920519] 
setting: robustU|rf 
Top-1 Accuracy = 0.3044968858922347 
Top-2 Accuracy = 0.556 
iter 8: [0.3044968858922347] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.2954688303525513 
Top-2 Accuracy = 0.555 
iter 9: [0.2954688303525513] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.3033540940517685 
Top-2 Accuracy = 0.554 
iter 10: [0.3033540940517685] 
setting: robustp|rf 
Top-1 Accuracy = 0.28398377235586536 
Top-2 Accuracy = 0.47 
iter 11: [0.28398377235586536] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.3454659733729501 
Top-2 Accuracy = 0.6 
iter 12: [0.3454659733729501] 
setting: robustl|rf 
Top-1 Accuracy = 0.3454659733729501 
Top-2 Accuracy = 0.6 
iter 13: [0.3454659733729501] 
setting: robustj|rf 
Top-1 Accuracy = 0.3034112336437918 
Top-2 Accuracy = 0.56 
iter 14: [0.3034112336437918] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.2848980058282384 
Top-2 Accuracy = 0.473 
iter 15: [0.2848980058282384] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.2954688303525513 
Top-2 Accuracy = 0.555 
iter 16: [0.2954688303525513] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.2954688303525513 
Top-2 Accuracy = 0.555 
iter 17: [0.2954688303525513] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.29666876178504087 
Top-2 Accuracy = 0.552 
iter 18: [0.29666876178504087] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.3039254899720016 
Top-2 Accuracy = 0.56 
iter 19: [0.3039254899720016] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.282269584595166 
Top-2 Accuracy = 0.469 
iter 20: [0.282269584595166] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.28021255928232675 
Top-2 Accuracy = 0.469 
iter 21: [0.28021255928232675] 
setting: robusty|rf 
Top-1 Accuracy = 0.29666876178504087 
Top-2 Accuracy = 0.552 
iter 22: [0.29666876178504087] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.3070681675332838 
Top-2 Accuracy = 0.56 
iter 23: [0.3070681675332838] 
setting: normalizev|rf 
Top-1 Accuracy = 0.29941146220215986 
Top-2 Accuracy = 0.558 
iter 24: [0.29941146220215986] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.30529684018056114 
Top-2 Accuracy = 0.557 
iter 25: [0.30529684018056114] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.30152562710702246 
Top-2 Accuracy = 0.555 
iter 26: [0.30152562710702246] 
setting: robustC|rf 
Top-1 Accuracy = 0.30529684018056114 
Top-2 Accuracy = 0.557 
iter 27: [0.30529684018056114] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.2836980743957488 
Top-2 Accuracy = 0.472 
iter 28: [0.2836980743957488] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.2866693331809611 
Top-2 Accuracy = 0.473 
iter 29: [0.2866693331809611] 
Run # 6 
====== 
setting: minmaxH|rf 
Top-1 Accuracy = 0.3043254671161648 
Top-2 Accuracy = 0.558 
iter 0: [0.3043254671161648] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.28769784583738073 
Top-2 Accuracy = 0.475 
iter 1: [0.28769784583738073] 
setting: robustd|rf 
Top-1 Accuracy = 0.30529684018056114 
Top-2 Accuracy = 0.557 
iter 2: [0.30529684018056114] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.3453516941889035 
Top-2 Accuracy = 0.6 
iter 3: [0.3453516941889035] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.28129821153076967 
Top-2 Accuracy = 0.469 
iter 4: [0.28129821153076967] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.3466659048054397 
Top-2 Accuracy = 0.6 
iter 5: [0.3466659048054397] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.3048397234443746 
Top-2 Accuracy = 0.553 
iter 6: [0.3048397234443746] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.3466659048054397 
Top-2 Accuracy = 0.6 
iter 7: [0.3466659048054397] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.3466087652134164 
Top-2 Accuracy = 0.6 
iter 8: [0.3466087652134164] 
setting: robustA|rf 
Top-1 Accuracy = 0.285926518484658 
Top-2 Accuracy = 0.472 
iter 9: [0.285926518484658] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.2872407291011942 
Top-2 Accuracy = 0.474 
iter 10: [0.2872407291011942] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.3070681675332838 
Top-2 Accuracy = 0.561 
iter 11: [0.3070681675332838] 
setting: maxabss|rf 
Top-1 Accuracy = 0.3084966573338666 
Top-2 Accuracy = 0.555 
iter 12: [0.3084966573338666] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.3514084909433747 
Top-2 Accuracy = 0.603 
iter 13: [0.3514084909433747] 
setting: normalizec|rf 
Top-1 Accuracy = 0.3056968173247243 
Top-2 Accuracy = 0.561 
iter 14: [0.3056968173247243] 
setting: standardizew|rf 
Top-1 Accuracy = 0.30203988343523225 
Top-2 Accuracy = 0.559 
iter 15: [0.30203988343523225] 
setting: normalizev|rf 
Top-1 Accuracy = 0.2844980286840752 
Top-2 Accuracy = 0.472 
iter 16: [0.2844980286840752] 
setting: standardizes|rf 
Top-1 Accuracy = 0.3520370264556311 
Top-2 Accuracy = 0.602 
iter 17: [0.3520370264556311] 
setting: robustj|rf 
Top-1 Accuracy = 0.3521513056396777 
Top-2 Accuracy = 0.602 
iter 18: [0.3521513056396777] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.35163704931146794 
Top-2 Accuracy = 0.602 
iter 19: [0.35163704931146794] 
setting: robustz|rf 
Top-1 Accuracy = 0.2998685789383464 
Top-2 Accuracy = 0.556 
iter 20: [0.2998685789383464] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.30403976915604825 
Top-2 Accuracy = 0.561 
iter 21: [0.30403976915604825] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.2836980743957488 
Top-2 Accuracy = 0.472 
iter 22: [0.2836980743957488] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.3521513056396777 
Top-2 Accuracy = 0.602 
iter 23: [0.3521513056396777] 
setting: normalized|rf 
Top-1 Accuracy = 0.30015427689846297 
Top-2 Accuracy = 0.556 
iter 24: [0.30015427689846297] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.3520370264556311 
Top-2 Accuracy = 0.603 
iter 25: [0.3520370264556311] 
setting: standardizet|rf 
Top-1 Accuracy = 0.30015427689846297 
Top-2 Accuracy = 0.556 
iter 26: [0.30015427689846297] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.2819838866350494 
Top-2 Accuracy = 0.47 
iter 27: [0.2819838866350494] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.3003256956745329 
Top-2 Accuracy = 0.556 
iter 28: [0.3003256956745329] 
setting: robustF|rf 
Top-1 Accuracy = 0.3520370264556311 
Top-2 Accuracy = 0.603 
iter 29: [0.3520370264556311] 
Run # 7 
====== 
setting: robusta|rf 
Top-1 Accuracy = 0.35175132849551455 
Top-2 Accuracy = 0.602 
iter 0: [0.35175132849551455] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.3003256956745329 
Top-2 Accuracy = 0.556 
iter 1: [0.3003256956745329] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.3003256956745329 
Top-2 Accuracy = 0.556 
iter 2: [0.3003256956745329] 
setting: standardizef|rf 
Top-1 Accuracy = 0.28518370378835495 
Top-2 Accuracy = 0.473 
iter 3: [0.28518370378835495] 
setting: standardizep|rf 
Top-1 Accuracy = 0.28752642706131076 
Top-2 Accuracy = 0.474 
iter 4: [0.28752642706131076] 
setting: robustd|rf 
Top-1 Accuracy = 0.3525512827838409 
Top-2 Accuracy = 0.602 
iter 5: [0.3525512827838409] 
setting: maxabso|rf 
Top-1 Accuracy = 0.28381235357979545 
Top-2 Accuracy = 0.471 
iter 6: [0.28381235357979545] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.3003256956745329 
Top-2 Accuracy = 0.556 
iter 7: [0.3003256956745329] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.30643963202102736 
Top-2 Accuracy = 0.559 
iter 8: [0.30643963202102736] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.2869550311410777 
Top-2 Accuracy = 0.474 
iter 9: [0.2869550311410777] 
setting: robustB|rf 
Top-1 Accuracy = 0.30021141649048627 
Top-2 Accuracy = 0.556 
iter 10: [0.30021141649048627] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.30021141649048627 
Top-2 Accuracy = 0.556 
iter 11: [0.30021141649048627] 
setting: robustL|rf 
Top-1 Accuracy = 0.30021141649048627 
Top-2 Accuracy = 0.556 
iter 12: [0.30021141649048627] 
setting: robustP|rf 
Top-1 Accuracy = 0.30021141649048627 
Top-2 Accuracy = 0.556 
iter 13: [0.30021141649048627] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.2848408662362151 
Top-2 Accuracy = 0.472 
iter 14: [0.2848408662362151] 
setting: robustl|rf 
Top-1 Accuracy = 0.3511799325752814 
Top-2 Accuracy = 0.604 
iter 15: [0.3511799325752814] 
setting: maxabst|rf 
Top-1 Accuracy = 0.2866121935889378 
Top-2 Accuracy = 0.476 
iter 16: [0.2866121935889378] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.3510085137992115 
Top-2 Accuracy = 0.604 
iter 17: [0.3510085137992115] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.3051825609965145 
Top-2 Accuracy = 0.557 
iter 18: [0.3051825609965145] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.3022684418033255 
Top-2 Accuracy = 0.556 
iter 19: [0.3022684418033255] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.3022684418033255 
Top-2 Accuracy = 0.556 
iter 20: [0.3022684418033255] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.3022684418033255 
Top-2 Accuracy = 0.556 
iter 21: [0.3022684418033255] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.28255528255528256 
Top-2 Accuracy = 0.469 
iter 22: [0.28255528255528256] 
setting: robustX|rf 
Top-1 Accuracy = 0.30546825895663104 
Top-2 Accuracy = 0.559 
iter 23: [0.30546825895663104] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.3047825838523513 
Top-2 Accuracy = 0.56 
iter 24: [0.3047825838523513] 
setting: robustf|rf 
Top-1 Accuracy = 0.2821553054111194 
Top-2 Accuracy = 0.47 
iter 25: [0.2821553054111194] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.2987829266899034 
Top-2 Accuracy = 0.559 
iter 26: [0.2987829266899034] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.2987829266899034 
Top-2 Accuracy = 0.559 
iter 27: [0.2987829266899034] 
setting: normalizel|rf 
Top-1 Accuracy = 0.2999257185303697 
Top-2 Accuracy = 0.557 
iter 28: [0.2999257185303697] 
setting: normalizep|rf 
Top-1 Accuracy = 0.3464373464373464 
Top-2 Accuracy = 0.6 
iter 29: [0.3464373464373464] 
Run # 8 
====== 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.2888977772698703 
Top-2 Accuracy = 0.475 
iter 0: [0.2888977772698703] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.3464373464373464 
Top-2 Accuracy = 0.601 
iter 1: [0.3464373464373464] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.2835266556196789 
Top-2 Accuracy = 0.473 
iter 2: [0.2835266556196789] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.28524084338037825 
Top-2 Accuracy = 0.473 
iter 3: [0.28524084338037825] 
setting: standardizee|rf 
Top-1 Accuracy = 0.28398377235586536 
Top-2 Accuracy = 0.471 
iter 4: [0.28398377235586536] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.28746928746928746 
Top-2 Accuracy = 0.476 
iter 5: [0.28746928746928746] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.34609450888520654 
Top-2 Accuracy = 0.6 
iter 6: [0.34609450888520654] 
setting: robustz|rf 
Top-1 Accuracy = 0.28518370378835495 
Top-2 Accuracy = 0.475 
iter 7: [0.28518370378835495] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.28752642706131076 
Top-2 Accuracy = 0.477 
iter 8: [0.28752642706131076] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.34609450888520654 
Top-2 Accuracy = 0.6 
iter 9: [0.34609450888520654] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.2976401348494372 
Top-2 Accuracy = 0.558 
iter 10: [0.2976401348494372] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.2976401348494372 
Top-2 Accuracy = 0.558 
iter 11: [0.2976401348494372] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.2976401348494372 
Top-2 Accuracy = 0.558 
iter 12: [0.2976401348494372] 
setting: standardizem|rf 
Top-1 Accuracy = 0.30535397977258444 
Top-2 Accuracy = 0.562 
iter 13: [0.30535397977258444] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.3047825838523513 
Top-2 Accuracy = 0.561 
iter 14: [0.3047825838523513] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.29712587852122735 
Top-2 Accuracy = 0.557 
iter 15: [0.29712587852122735] 
setting: robuste|rf 
Top-1 Accuracy = 0.3034683732358151 
Top-2 Accuracy = 0.558 
iter 16: [0.3034683732358151] 
setting: robustr|rf 
Top-1 Accuracy = 0.2869550311410777 
Top-2 Accuracy = 0.475 
iter 17: [0.2869550311410777] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.3441517627564139 
Top-2 Accuracy = 0.6 
iter 18: [0.3441517627564139] 
setting: robusty|rf 
Top-1 Accuracy = 0.3426661333638078 
Top-2 Accuracy = 0.599 
iter 19: [0.3426661333638078] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.28918347522998683 
Top-2 Accuracy = 0.476 
iter 20: [0.28918347522998683] 
setting: robustF|rf 
Top-1 Accuracy = 0.34780869664590597 
Top-2 Accuracy = 0.603 
iter 21: [0.34780869664590597] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.34786583623792927 
Top-2 Accuracy = 0.603 
iter 22: [0.34786583623792927] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.34963716359065194 
Top-2 Accuracy = 0.602 
iter 23: [0.34963716359065194] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.2857550997085881 
Top-2 Accuracy = 0.473 
iter 24: [0.2857550997085881] 
setting: robustj|rf 
Top-1 Accuracy = 0.2831266784755157 
Top-2 Accuracy = 0.472 
iter 25: [0.2831266784755157] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.30541111936460774 
Top-2 Accuracy = 0.56 
iter 26: [0.30541111936460774] 
setting: robustD|rf 
Top-1 Accuracy = 0.30546825895663104 
Top-2 Accuracy = 0.554 
iter 27: [0.30546825895663104] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.29472601565624823 
Top-2 Accuracy = 0.548 
iter 28: [0.29472601565624823] 
setting: robustI|rf 
Top-1 Accuracy = 0.34198045825952805 
Top-2 Accuracy = 0.6 
iter 29: [0.34198045825952805] 
Run # 9 
====== 
setting: standardizee|rf 
Top-1 Accuracy = 0.29472601565624823 
Top-2 Accuracy = 0.548 
iter 0: [0.29472601565624823] 
setting: normalizer|rf 
Top-1 Accuracy = 0.3440374835723673 
Top-2 Accuracy = 0.601 
iter 1: [0.3440374835723673] 
setting: robustu|rf 
Top-1 Accuracy = 0.3437517856122507 
Top-2 Accuracy = 0.601 
iter 2: [0.3437517856122507] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.2953545511685047 
Top-2 Accuracy = 0.554 
iter 3: [0.2953545511685047] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.30192560425118564 
Top-2 Accuracy = 0.557 
iter 4: [0.30192560425118564] 
setting: normalizei|rf 
Top-1 Accuracy = 0.2854122621564482 
Top-2 Accuracy = 0.474 
iter 5: [0.2854122621564482] 
setting: normalizey|rf 
Top-1 Accuracy = 0.30552539854865435 
Top-2 Accuracy = 0.56 
iter 6: [0.30552539854865435] 
setting: robustl|rf 
Top-1 Accuracy = 0.3488943488943489 
Top-2 Accuracy = 0.604 
iter 7: [0.3488943488943489] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.3480372550139992 
Top-2 Accuracy = 0.603 
iter 8: [0.3480372550139992] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.29586880749671446 
Top-2 Accuracy = 0.556 
iter 9: [0.29586880749671446] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.29586880749671446 
Top-2 Accuracy = 0.556 
iter 10: [0.29586880749671446] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.3480372550139992 
Top-2 Accuracy = 0.603 
iter 11: [0.3480372550139992] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.3484943717501857 
Top-2 Accuracy = 0.601 
iter 12: [0.3484943717501857] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.2972972972972973 
Top-2 Accuracy = 0.556 
iter 13: [0.2972972972972973] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.2972972972972973 
Top-2 Accuracy = 0.556 
iter 14: [0.2972972972972973] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.3498085823667219 
Top-2 Accuracy = 0.601 
iter 15: [0.3498085823667219] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.30683960916519054 
Top-2 Accuracy = 0.562 
iter 16: [0.30683960916519054] 
setting: standardizem|rf 
Top-1 Accuracy = 0.2822124450031427 
Top-2 Accuracy = 0.47 
iter 17: [0.2822124450031427] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.28301239929146904 
Top-2 Accuracy = 0.471 
iter 18: [0.28301239929146904] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.3072967259013771 
Top-2 Accuracy = 0.562 
iter 19: [0.3072967259013771] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.2972972972972973 
Top-2 Accuracy = 0.556 
iter 20: [0.2972972972972973] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.3471801611336495 
Top-2 Accuracy = 0.603 
iter 21: [0.3471801611336495] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.296325924232901 
Top-2 Accuracy = 0.554 
iter 22: [0.296325924232901] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.3430089709159477 
Top-2 Accuracy = 0.601 
iter 23: [0.3430089709159477] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.2854122621564482 
Top-2 Accuracy = 0.473 
iter 24: [0.2854122621564482] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.30541111936460774 
Top-2 Accuracy = 0.56 
iter 25: [0.30541111936460774] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.30661105079709733 
Top-2 Accuracy = 0.562 
iter 26: [0.30661105079709733] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.282098165819096 
Top-2 Accuracy = 0.473 
iter 27: [0.282098165819096] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.3048968630363979 
Top-2 Accuracy = 0.559 
iter 28: [0.3048968630363979] 
setting: robustN|rf 
Top-1 Accuracy = 0.3024970001714188 
Top-2 Accuracy = 0.549 
iter 29: [0.3024970001714188] 
Run # 10 
======= 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.286840751957031 
Top-2 Accuracy = 0.476 
iter 0: [0.286840751957031] 
setting: normalizey|rf 
Top-1 Accuracy = 0.299982858122393 
Top-2 Accuracy = 0.553 
iter 1: [0.299982858122393] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.34952288440660534 
Top-2 Accuracy = 0.604 
iter 2: [0.34952288440660534] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.2822124450031427 
Top-2 Accuracy = 0.471 
iter 3: [0.2822124450031427] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.2818696074510028 
Top-2 Accuracy = 0.47 
iter 4: [0.2818696074510028] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.2960402262727844 
Top-2 Accuracy = 0.55 
iter 5: [0.2960402262727844] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.2960402262727844 
Top-2 Accuracy = 0.55 
iter 6: [0.2960402262727844] 
setting: robustQ|rf 
Top-1 Accuracy = 0.28752642706131076 
Top-2 Accuracy = 0.475 
iter 7: [0.28752642706131076] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.2960402262727844 
Top-2 Accuracy = 0.55 
iter 8: [0.2960402262727844] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.3038683503799783 
Top-2 Accuracy = 0.556 
iter 9: [0.3038683503799783] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.2960973658648077 
Top-2 Accuracy = 0.556 
iter 10: [0.2960973658648077] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.2960973658648077 
Top-2 Accuracy = 0.556 
iter 11: [0.2960973658648077] 
setting: robustl|rf 
Top-1 Accuracy = 0.34815153419804584 
Top-2 Accuracy = 0.603 
iter 12: [0.34815153419804584] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.34815153419804584 
Top-2 Accuracy = 0.603 
iter 13: [0.34815153419804584] 
setting: normalizer|rf 
Top-1 Accuracy = 0.3070110279412605 
Top-2 Accuracy = 0.564 
iter 14: [0.3070110279412605] 
setting: normalizec|rf 
Top-1 Accuracy = 0.3476944174618593 
Top-2 Accuracy = 0.603 
iter 15: [0.3476944174618593] 
setting: standardizex|rf 
Top-1 Accuracy = 0.3004399748585795 
Top-2 Accuracy = 0.554 
iter 16: [0.3004399748585795] 
setting: normalizet|rf 
Top-1 Accuracy = 0.2833552368436089 
Top-2 Accuracy = 0.472 
iter 17: [0.2833552368436089] 
setting: robustD|rf 
Top-1 Accuracy = 0.30461116507628133 
Top-2 Accuracy = 0.563 
iter 18: [0.30461116507628133] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.2831266784755157 
Top-2 Accuracy = 0.472 
iter 19: [0.2831266784755157] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.30409690874807155 
Top-2 Accuracy = 0.558 
iter 20: [0.30409690874807155] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.297240157705274 
Top-2 Accuracy = 0.549 
iter 21: [0.297240157705274] 
setting: robustj|rf 
Top-1 Accuracy = 0.30289697731558196 
Top-2 Accuracy = 0.557 
iter 22: [0.30289697731558196] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.3465516256213931 
Top-2 Accuracy = 0.603 
iter 23: [0.3465516256213931] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.3463230672532998 
Top-2 Accuracy = 0.603 
iter 24: [0.3463230672532998] 
setting: standardizet|rf 
Top-1 Accuracy = 0.3043826067081881 
Top-2 Accuracy = 0.558 
iter 25: [0.3043826067081881] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.3039254899720016 
Top-2 Accuracy = 0.556 
iter 26: [0.3039254899720016] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.3082109593737501 
Top-2 Accuracy = 0.558 
iter 27: [0.3082109593737501] 
setting: normalizev|rf 
Top-1 Accuracy = 0.30535397977258444 
Top-2 Accuracy = 0.561 
iter 28: [0.30535397977258444] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.3044397463002114 
Top-2 Accuracy = 0.556 
iter 29: [0.3044397463002114] 
Run # 11 
======= 
setting: normalizeu|rf 
Top-1 Accuracy = 0.2973544368893206 
Top-2 Accuracy = 0.548 
iter 0: [0.2973544368893206] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.34689446317353295 
Top-2 Accuracy = 0.603 
iter 1: [0.34689446317353295] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.2973544368893206 
Top-2 Accuracy = 0.548 
iter 2: [0.2973544368893206] 
setting: robusty|rf 
Top-1 Accuracy = 0.3043254671161648 
Top-2 Accuracy = 0.558 
iter 3: [0.3043254671161648] 
setting: maxabss|rf 
Top-1 Accuracy = 0.2880978229815439 
Top-2 Accuracy = 0.476 
iter 4: [0.2880978229815439] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.2849551454202617 
Top-2 Accuracy = 0.472 
iter 5: [0.2849551454202617] 
setting: robustk|rf 
Top-1 Accuracy = 0.3011827895548826 
Top-2 Accuracy = 0.553 
iter 6: [0.3011827895548826] 
setting: standardizea|rf 
Top-1 Accuracy = 0.2856979601165648 
Top-2 Accuracy = 0.472 
iter 7: [0.2856979601165648] 
setting: standardizef|rf 
Top-1 Accuracy = 0.34929432603851207 
Top-2 Accuracy = 0.605 
iter 8: [0.34929432603851207] 
setting: standardizes|rf 
Top-1 Accuracy = 0.2998114393463231 
Top-2 Accuracy = 0.55 
iter 9: [0.2998114393463231] 
setting: robustX|rf 
Top-1 Accuracy = 0.28506942460430834 
Top-2 Accuracy = 0.473 
iter 10: [0.28506942460430834] 
setting: standardizem|rf 
Top-1 Accuracy = 0.34946574481458204 
Top-2 Accuracy = 0.605 
iter 11: [0.34946574481458204] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.34946574481458204 
Top-2 Accuracy = 0.605 
iter 12: [0.34946574481458204] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.3489514884863722 
Top-2 Accuracy = 0.605 
iter 13: [0.3489514884863722] 
setting: robusth|rf 
Top-1 Accuracy = 0.2998114393463231 
Top-2 Accuracy = 0.55 
iter 14: [0.2998114393463231] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.2835266556196789 
Top-2 Accuracy = 0.474 
iter 15: [0.2835266556196789] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.30638249242900406 
Top-2 Accuracy = 0.553 
iter 16: [0.30638249242900406] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.2871264499171476 
Top-2 Accuracy = 0.475 
iter 17: [0.2871264499171476] 
setting: standardizen|rf 
Top-1 Accuracy = 0.34940860522255873 
Top-2 Accuracy = 0.605 
iter 18: [0.34940860522255873] 
setting: minmaxw|rf 
Top-1 Accuracy = 0.3499800011427918 
Top-2 Accuracy = 0.605 
iter 19: [0.3499800011427918] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.2823838637792126 
Top-2 Accuracy = 0.472 
iter 20: [0.2823838637792126] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.30883949488600654 
Top-2 Accuracy = 0.559 
iter 21: [0.30883949488600654] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.34958002399862864 
Top-2 Accuracy = 0.605 
iter 22: [0.34958002399862864] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.285926518484658 
Top-2 Accuracy = 0.472 
iter 23: [0.285926518484658] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.2846123078681218 
Top-2 Accuracy = 0.472 
iter 24: [0.2846123078681218] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.3502656991029084 
Top-2 Accuracy = 0.605 
iter 25: [0.3502656991029084] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.2998114393463231 
Top-2 Accuracy = 0.55 
iter 26: [0.2998114393463231] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.2998114393463231 
Top-2 Accuracy = 0.55 
iter 27: [0.2998114393463231] 
setting: maxabsK|rf 
Top-1 Accuracy = 0.28512656419633164 
Top-2 Accuracy = 0.473 
iter 28: [0.28512656419633164] 
setting: robustC|rf 
Top-1 Accuracy = 0.2998114393463231 
Top-2 Accuracy = 0.55 
iter 29: [0.2998114393463231] 
Run # 12 
======= 
setting: minmaxb|rf 
Top-1 Accuracy = 0.34963716359065194 
Top-2 Accuracy = 0.605 
iter 0: [0.34963716359065194] 
setting: standardizes|rf 
Top-1 Accuracy = 0.34946574481458204 
Top-2 Accuracy = 0.605 
iter 1: [0.34946574481458204] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.2998114393463231 
Top-2 Accuracy = 0.55 
iter 2: [0.2998114393463231] 
setting: standardizef|rf 
Top-1 Accuracy = 0.3502085595108851 
Top-2 Accuracy = 0.605 
iter 3: [0.3502085595108851] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.2998114393463231 
Top-2 Accuracy = 0.55 
iter 4: [0.2998114393463231] 
setting: standardizen|rf 
Top-1 Accuracy = 0.30369693160390837 
Top-2 Accuracy = 0.553 
iter 5: [0.30369693160390837] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.3047825838523513 
Top-2 Accuracy = 0.56 
iter 6: [0.3047825838523513] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.30301125649962857 
Top-2 Accuracy = 0.559 
iter 7: [0.30301125649962857] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.2844980286840752 
Top-2 Accuracy = 0.472 
iter 8: [0.2844980286840752] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.30198274384320895 
Top-2 Accuracy = 0.553 
iter 9: [0.30198274384320895] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.34946574481458204 
Top-2 Accuracy = 0.605 
iter 10: [0.34946574481458204] 
setting: standardizet|rf 
Top-1 Accuracy = 0.2998114393463231 
Top-2 Accuracy = 0.55 
iter 11: [0.2998114393463231] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.2998114393463231 
Top-2 Accuracy = 0.55 
iter 12: [0.2998114393463231] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.30626821324495745 
Top-2 Accuracy = 0.561 
iter 13: [0.30626821324495745] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.30409690874807155 
Top-2 Accuracy = 0.56 
iter 14: [0.30409690874807155] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.27952688417804694 
Top-2 Accuracy = 0.468 
iter 15: [0.27952688417804694] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.28421233072395863 
Top-2 Accuracy = 0.472 
iter 16: [0.28421233072395863] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.30415404834009485 
Top-2 Accuracy = 0.553 
iter 17: [0.30415404834009485] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.29815439117764697 
Top-2 Accuracy = 0.547 
iter 18: [0.29815439117764697] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.28478372664419177 
Top-2 Accuracy = 0.472 
iter 19: [0.28478372664419177] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.29815439117764697 
Top-2 Accuracy = 0.547 
iter 20: [0.29815439117764697] 
setting: robustE|rf 
Top-1 Accuracy = 0.3493514656305354 
Top-2 Accuracy = 0.605 
iter 21: [0.3493514656305354] 
setting: robustg|rf 
Top-1 Accuracy = 0.29815439117764697 
Top-2 Accuracy = 0.547 
iter 22: [0.29815439117764697] 
setting: robustL|rf 
Top-1 Accuracy = 0.3493514656305354 
Top-2 Accuracy = 0.605 
iter 23: [0.3493514656305354] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.3068967487572139 
Top-2 Accuracy = 0.56 
iter 24: [0.3068967487572139] 
setting: robusto|rf 
Top-1 Accuracy = 0.29815439117764697 
Top-2 Accuracy = 0.547 
iter 25: [0.29815439117764697] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.34958002399862864 
Top-2 Accuracy = 0.605 
iter 26: [0.34958002399862864] 
setting: maxabso|rf 
Top-1 Accuracy = 0.29815439117764697 
Top-2 Accuracy = 0.547 
iter 27: [0.29815439117764697] 
setting: normalizee|rf 
Top-1 Accuracy = 0.3004399748585795 
Top-2 Accuracy = 0.551 
iter 28: [0.3004399748585795] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.3004399748585795 
Top-2 Accuracy = 0.551 
iter 29: [0.3004399748585795] 
Run # 13 
======= 
setting: normalizex|rf 
Top-1 Accuracy = 0.3048397234443746 
Top-2 Accuracy = 0.563 
iter 0: [0.3048397234443746] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.30421118793211815 
Top-2 Accuracy = 0.56 
iter 1: [0.30421118793211815] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.2845551682760985 
Top-2 Accuracy = 0.473 
iter 2: [0.2845551682760985] 
setting: robustv|rf 
Top-1 Accuracy = 0.34940860522255873 
Top-2 Accuracy = 0.604 
iter 3: [0.34940860522255873] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.2894691731901034 
Top-2 Accuracy = 0.476 
iter 4: [0.2894691731901034] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.347637277869836 
Top-2 Accuracy = 0.602 
iter 5: [0.347637277869836] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.2976401348494372 
Top-2 Accuracy = 0.551 
iter 6: [0.2976401348494372] 
setting: robustk|rf 
Top-1 Accuracy = 0.30369693160390837 
Top-2 Accuracy = 0.558 
iter 7: [0.30369693160390837] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.2976401348494372 
Top-2 Accuracy = 0.551 
iter 8: [0.2976401348494372] 
setting: robusti|rf 
Top-1 Accuracy = 0.2976401348494372 
Top-2 Accuracy = 0.551 
iter 9: [0.2976401348494372] 
setting: normalizej|rf 
Top-1 Accuracy = 0.3059825152848409 
Top-2 Accuracy = 0.559 
iter 10: [0.3059825152848409] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.34706588194960286 
Top-2 Accuracy = 0.604 
iter 11: [0.34706588194960286] 
setting: robusta|rf 
Top-1 Accuracy = 0.3472373007256728 
Top-2 Accuracy = 0.604 
iter 12: [0.3472373007256728] 
setting: robustx|rf 
Top-1 Accuracy = 0.2868978915490543 
Top-2 Accuracy = 0.476 
iter 13: [0.2868978915490543] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.30163990629106907 
Top-2 Accuracy = 0.553 
iter 14: [0.30163990629106907] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.30198274384320895 
Top-2 Accuracy = 0.556 
iter 15: [0.30198274384320895] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.28261242214730586 
Top-2 Accuracy = 0.471 
iter 16: [0.28261242214730586] 
setting: robustB|rf 
Top-1 Accuracy = 0.34335180846808755 
Top-2 Accuracy = 0.602 
iter 17: [0.34335180846808755] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.34689446317353295 
Top-2 Accuracy = 0.602 
iter 18: [0.34689446317353295] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.3475801382778127 
Top-2 Accuracy = 0.602 
iter 19: [0.3475801382778127] 
setting: normalizec|rf 
Top-1 Accuracy = 0.30552539854865435 
Top-2 Accuracy = 0.56 
iter 20: [0.30552539854865435] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.30203988343523225 
Top-2 Accuracy = 0.551 
iter 21: [0.30203988343523225] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.3487800697103023 
Top-2 Accuracy = 0.601 
iter 22: [0.3487800697103023] 
setting: standardizer|rf 
Top-1 Accuracy = 0.30203988343523225 
Top-2 Accuracy = 0.551 
iter 23: [0.30203988343523225] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.30203988343523225 
Top-2 Accuracy = 0.551 
iter 24: [0.30203988343523225] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.3487800697103023 
Top-2 Accuracy = 0.601 
iter 25: [0.3487800697103023] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.28306953888349234 
Top-2 Accuracy = 0.471 
iter 26: [0.28306953888349234] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.3059825152848409 
Top-2 Accuracy = 0.557 
iter 27: [0.3059825152848409] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.3057539569167476 
Top-2 Accuracy = 0.559 
iter 28: [0.3057539569167476] 
setting: normalizet|rf 
Top-1 Accuracy = 0.2853551225644249 
Top-2 Accuracy = 0.472 
iter 29: [0.2853551225644249] 
Run # 14 
======= 
setting: minmaxn|rf 
Top-1 Accuracy = 0.28741214787726416 
Top-2 Accuracy = 0.475 
iter 0: [0.28741214787726416] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.3043826067081881 
Top-2 Accuracy = 0.557 
iter 1: [0.3043826067081881] 
setting: robustf|rf 
Top-1 Accuracy = 0.30546825895663104 
Top-2 Accuracy = 0.556 
iter 2: [0.30546825895663104] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.29575452831266785 
Top-2 Accuracy = 0.548 
iter 3: [0.29575452831266785] 
setting: robustc|rf 
Top-1 Accuracy = 0.29575452831266785 
Top-2 Accuracy = 0.548 
iter 4: [0.29575452831266785] 
setting: robustv|rf 
Top-1 Accuracy = 0.29575452831266785 
Top-2 Accuracy = 0.548 
iter 5: [0.29575452831266785] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.30272555853951205 
Top-2 Accuracy = 0.56 
iter 6: [0.30272555853951205] 
setting: normalizew|rf 
Top-1 Accuracy = 0.2950117136163648 
Top-2 Accuracy = 0.55 
iter 7: [0.2950117136163648] 
setting: standardizev|rf 
Top-1 Accuracy = 0.3476944174618593 
Top-2 Accuracy = 0.603 
iter 8: [0.3476944174618593] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.30552539854865435 
Top-2 Accuracy = 0.556 
iter 9: [0.30552539854865435] 
setting: robustw|rf 
Top-1 Accuracy = 0.3477515570538826 
Top-2 Accuracy = 0.603 
iter 10: [0.3477515570538826] 
setting: robustN|rf 
Top-1 Accuracy = 0.3477515570538826 
Top-2 Accuracy = 0.603 
iter 11: [0.3477515570538826] 
setting: standardizec|rf 
Top-1 Accuracy = 0.3475229986857894 
Top-2 Accuracy = 0.603 
iter 12: [0.3475229986857894] 
setting: robustK|rf 
Top-1 Accuracy = 0.2836409348037255 
Top-2 Accuracy = 0.471 
iter 13: [0.2836409348037255] 
setting: robustt|rf 
Top-1 Accuracy = 0.28655505399691444 
Top-2 Accuracy = 0.474 
iter 14: [0.28655505399691444] 
setting: robustq|rf 
Top-1 Accuracy = 0.2950117136163648 
Top-2 Accuracy = 0.55 
iter 15: [0.2950117136163648] 
setting: standardizez|rf 
Top-1 Accuracy = 0.3476944174618593 
Top-2 Accuracy = 0.603 
iter 16: [0.3476944174618593] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.2950117136163648 
Top-2 Accuracy = 0.55 
iter 17: [0.2950117136163648] 
setting: robusto|rf 
Top-1 Accuracy = 0.2857550997085881 
Top-2 Accuracy = 0.474 
iter 18: [0.2857550997085881] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.28289812010742243 
Top-2 Accuracy = 0.472 
iter 19: [0.28289812010742243] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.3465516256213931 
Top-2 Accuracy = 0.601 
iter 20: [0.3465516256213931] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.30272555853951205 
Top-2 Accuracy = 0.553 
iter 21: [0.30272555853951205] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.34609450888520654 
Top-2 Accuracy = 0.602 
iter 22: [0.34609450888520654] 
setting: robustD|rf 
Top-1 Accuracy = 0.30861093651791327 
Top-2 Accuracy = 0.559 
iter 23: [0.30861093651791327] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.34586595051711333 
Top-2 Accuracy = 0.602 
iter 24: [0.34586595051711333] 
setting: standardizes|rf 
Top-1 Accuracy = 0.30272555853951205 
Top-2 Accuracy = 0.553 
iter 25: [0.30272555853951205] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.2882121021655905 
Top-2 Accuracy = 0.476 
iter 26: [0.2882121021655905] 
setting: normalizep|rf 
Top-1 Accuracy = 0.30815381978172673 
Top-2 Accuracy = 0.555 
iter 27: [0.30815381978172673] 
setting: standardizen|rf 
Top-1 Accuracy = 0.3034112336437918 
Top-2 Accuracy = 0.555 
iter 28: [0.3034112336437918] 
setting: robustn|rf 
Top-1 Accuracy = 0.2875835666533341 
Top-2 Accuracy = 0.475 
iter 29: [0.2875835666533341] 
Run # 15 
======= 
setting: maxabsT|rf 
Top-1 Accuracy = 0.34592309010913663 
Top-2 Accuracy = 0.601 
iter 0: [0.34592309010913663] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.30203988343523225 
Top-2 Accuracy = 0.554 
iter 1: [0.30203988343523225] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.28655505399691444 
Top-2 Accuracy = 0.473 
iter 2: [0.28655505399691444] 
setting: normalizeO|rf 
Top-1 Accuracy = 0.2836980743957488 
Top-2 Accuracy = 0.473 
iter 3: [0.2836980743957488] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.3004399748585795 
Top-2 Accuracy = 0.549 
iter 4: [0.3004399748585795] 
setting: minmaxz|rf 
Top-1 Accuracy = 0.3480372550139992 
Top-2 Accuracy = 0.603 
iter 5: [0.3480372550139992] 
setting: normalizep|rf 
Top-1 Accuracy = 0.29844008913776354 
Top-2 Accuracy = 0.547 
iter 6: [0.29844008913776354] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.305639677732701 
Top-2 Accuracy = 0.558 
iter 7: [0.305639677732701] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.34820867379006915 
Top-2 Accuracy = 0.604 
iter 8: [0.34820867379006915] 
setting: standardizev|rf 
Top-1 Accuracy = 0.29844008913776354 
Top-2 Accuracy = 0.547 
iter 9: [0.29844008913776354] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.2853551225644249 
Top-2 Accuracy = 0.472 
iter 10: [0.2853551225644249] 
setting: normalizee|rf 
Top-1 Accuracy = 0.28501228501228504 
Top-2 Accuracy = 0.474 
iter 11: [0.28501228501228504] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.30152562710702246 
Top-2 Accuracy = 0.554 
iter 12: [0.30152562710702246] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.30152562710702246 
Top-2 Accuracy = 0.554 
iter 13: [0.30152562710702246] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.30152562710702246 
Top-2 Accuracy = 0.554 
iter 14: [0.30152562710702246] 
setting: standardizec|rf 
Top-1 Accuracy = 0.3463802068453231 
Top-2 Accuracy = 0.601 
iter 15: [0.3463802068453231] 
setting: normalizef|rf 
Top-1 Accuracy = 0.300897091594766 
Top-2 Accuracy = 0.554 
iter 16: [0.300897091594766] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.300897091594766 
Top-2 Accuracy = 0.554 
iter 17: [0.300897091594766] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.300897091594766 
Top-2 Accuracy = 0.554 
iter 18: [0.300897091594766] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.30158276669904577 
Top-2 Accuracy = 0.554 
iter 19: [0.30158276669904577] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.2843837495000286 
Top-2 Accuracy = 0.471 
iter 20: [0.2843837495000286] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.34940860522255873 
Top-2 Accuracy = 0.601 
iter 21: [0.34940860522255873] 
setting: normalizel|rf 
Top-1 Accuracy = 0.3463802068453231 
Top-2 Accuracy = 0.602 
iter 22: [0.3463802068453231] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.28615507685275127 
Top-2 Accuracy = 0.475 
iter 23: [0.28615507685275127] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.3465516256213931 
Top-2 Accuracy = 0.602 
iter 24: [0.3465516256213931] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.3096965887663562 
Top-2 Accuracy = 0.563 
iter 25: [0.3096965887663562] 
setting: standardizej|rf 
Top-1 Accuracy = 0.3013542083309525 
Top-2 Accuracy = 0.554 
iter 26: [0.3013542083309525] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.3463802068453231 
Top-2 Accuracy = 0.601 
iter 27: [0.3463802068453231] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.3038683503799783 
Top-2 Accuracy = 0.561 
iter 28: [0.3038683503799783] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.28518370378835495 
Top-2 Accuracy = 0.473 
iter 29: [0.28518370378835495] 
Run # 16 
======= 
setting: minmaxg|rf 
Top-1 Accuracy = 0.3075252842694703 
Top-2 Accuracy = 0.563 
iter 0: [0.3075252842694703] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.2857550997085881 
Top-2 Accuracy = 0.473 
iter 1: [0.2857550997085881] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.28506942460430834 
Top-2 Accuracy = 0.472 
iter 2: [0.28506942460430834] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.3013542083309525 
Top-2 Accuracy = 0.554 
iter 3: [0.3013542083309525] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.30763956345351695 
Top-2 Accuracy = 0.561 
iter 4: [0.30763956345351695] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.28501228501228504 
Top-2 Accuracy = 0.472 
iter 5: [0.28501228501228504] 
setting: robustJ|rf 
Top-1 Accuracy = 0.34615164847722985 
Top-2 Accuracy = 0.601 
iter 6: [0.34615164847722985] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.2840409119478887 
Top-2 Accuracy = 0.474 
iter 7: [0.2840409119478887] 
setting: robustl|rf 
Top-1 Accuracy = 0.30666819038912063 
Top-2 Accuracy = 0.558 
iter 8: [0.30666819038912063] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.34615164847722985 
Top-2 Accuracy = 0.601 
iter 9: [0.34615164847722985] 
setting: robustt|rf 
Top-1 Accuracy = 0.3079824010056568 
Top-2 Accuracy = 0.562 
iter 10: [0.3079824010056568] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.3069538883492372 
Top-2 Accuracy = 0.554 
iter 11: [0.3069538883492372] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.34609450888520654 
Top-2 Accuracy = 0.601 
iter 12: [0.34609450888520654] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.29844008913776354 
Top-2 Accuracy = 0.543 
iter 13: [0.29844008913776354] 
setting: normalizey|rf 
Top-1 Accuracy = 0.2858122393006114 
Top-2 Accuracy = 0.472 
iter 14: [0.2858122393006114] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.3452945545968802 
Top-2 Accuracy = 0.601 
iter 15: [0.3452945545968802] 
setting: normalizec|rf 
Top-1 Accuracy = 0.2848980058282384 
Top-2 Accuracy = 0.473 
iter 16: [0.2848980058282384] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.3044397463002114 
Top-2 Accuracy = 0.559 
iter 17: [0.3044397463002114] 
setting: robustG|rf 
Top-1 Accuracy = 0.3048968630363979 
Top-2 Accuracy = 0.559 
iter 18: [0.3048968630363979] 
setting: robustQ|rf 
Top-1 Accuracy = 0.30295411690760526 
Top-2 Accuracy = 0.549 
iter 19: [0.30295411690760526] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.3471230215416262 
Top-2 Accuracy = 0.601 
iter 20: [0.3471230215416262] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.30295411690760526 
Top-2 Accuracy = 0.549 
iter 21: [0.30295411690760526] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.34706588194960286 
Top-2 Accuracy = 0.601 
iter 22: [0.34706588194960286] 
setting: robustH|rf 
Top-1 Accuracy = 0.3059825152848409 
Top-2 Accuracy = 0.558 
iter 23: [0.3059825152848409] 
setting: robustD|rf 
Top-1 Accuracy = 0.3471801611336495 
Top-2 Accuracy = 0.601 
iter 24: [0.3471801611336495] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.3039826295640249 
Top-2 Accuracy = 0.553 
iter 25: [0.3039826295640249] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.3472373007256728 
Top-2 Accuracy = 0.601 
iter 26: [0.3472373007256728] 
setting: robustZ|rf 
Top-1 Accuracy = 0.30295411690760526 
Top-2 Accuracy = 0.549 
iter 27: [0.30295411690760526] 
setting: normalizez|rf 
Top-1 Accuracy = 0.287012170733101 
Top-2 Accuracy = 0.473 
iter 28: [0.287012170733101] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.2841551911319353 
Top-2 Accuracy = 0.539 
iter 29: [0.2841551911319353] 
Run # 17 
======= 
setting: normalizel|rf 
Top-1 Accuracy = 0.2834695160276556 
Top-2 Accuracy = 0.471 
iter 0: [0.2834695160276556] 
setting: normalizez|rf 
Top-1 Accuracy = 0.3404948288669219 
Top-2 Accuracy = 0.598 
iter 1: [0.3404948288669219] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.3038683503799783 
Top-2 Accuracy = 0.552 
iter 2: [0.3038683503799783] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.3057539569167476 
Top-2 Accuracy = 0.559 
iter 3: [0.3057539569167476] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.281355351122793 
Top-2 Accuracy = 0.469 
iter 4: [0.281355351122793] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.2911833609508028 
Top-2 Accuracy = 0.543 
iter 5: [0.2911833609508028] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.28306953888349234 
Top-2 Accuracy = 0.47 
iter 6: [0.28306953888349234] 
setting: robusti|rf 
Top-1 Accuracy = 0.30289697731558196 
Top-2 Accuracy = 0.556 
iter 7: [0.30289697731558196] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.3068967487572139 
Top-2 Accuracy = 0.558 
iter 8: [0.3068967487572139] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.3409519456031084 
Top-2 Accuracy = 0.6 
iter 9: [0.3409519456031084] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.3052397005885378 
Top-2 Accuracy = 0.557 
iter 10: [0.3052397005885378] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.2905548254385464 
Top-2 Accuracy = 0.542 
iter 11: [0.2905548254385464] 
setting: robustB|rf 
Top-1 Accuracy = 0.34072338723501516 
Top-2 Accuracy = 0.6 
iter 12: [0.34072338723501516] 
setting: standardizee|rf 
Top-1 Accuracy = 0.28752642706131076 
Top-2 Accuracy = 0.476 
iter 13: [0.28752642706131076] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.30626821324495745 
Top-2 Accuracy = 0.562 
iter 14: [0.30626821324495745] 
setting: robustY|rf 
Top-1 Accuracy = 0.2894691731901034 
Top-2 Accuracy = 0.546 
iter 15: [0.2894691731901034] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.3465516256213931 
Top-2 Accuracy = 0.604 
iter 16: [0.3465516256213931] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.2844980286840752 
Top-2 Accuracy = 0.47 
iter 17: [0.2844980286840752] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.3033540940517685 
Top-2 Accuracy = 0.563 
iter 18: [0.3033540940517685] 
setting: normalizej|rf 
Top-1 Accuracy = 0.29232615279126906 
Top-2 Accuracy = 0.545 
iter 19: [0.29232615279126906] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.30312553568367523 
Top-2 Accuracy = 0.558 
iter 20: [0.30312553568367523] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.3025541397634421 
Top-2 Accuracy = 0.552 
iter 21: [0.3025541397634421] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.2917547568710359 
Top-2 Accuracy = 0.544 
iter 22: [0.2917547568710359] 
setting: normalizes|rf 
Top-1 Accuracy = 0.3049540026284212 
Top-2 Accuracy = 0.558 
iter 23: [0.3049540026284212] 
setting: standardizez|rf 
Top-1 Accuracy = 0.3004399748585795 
Top-2 Accuracy = 0.553 
iter 24: [0.3004399748585795] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.34598022970115994 
Top-2 Accuracy = 0.606 
iter 25: [0.34598022970115994] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.29312610707959547 
Top-2 Accuracy = 0.543 
iter 26: [0.29312610707959547] 
setting: robustZ|rf 
Top-1 Accuracy = 0.304725444260328 
Top-2 Accuracy = 0.56 
iter 27: [0.304725444260328] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.34586595051711333 
Top-2 Accuracy = 0.606 
iter 28: [0.34586595051711333] 
setting: robustx|rf 
Top-1 Accuracy = 0.28426947031598193 
Top-2 Accuracy = 0.473 
iter 29: [0.28426947031598193] 
Run # 18 
======= 
setting: normalizeW|rf 
Top-1 Accuracy = 0.34455173990057714 
Top-2 Accuracy = 0.601 
iter 0: [0.34455173990057714] 
setting: robustY|rf 
Top-1 Accuracy = 0.300897091594766 
Top-2 Accuracy = 0.546 
iter 1: [0.300897091594766] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.300897091594766 
Top-2 Accuracy = 0.546 
iter 2: [0.300897091594766] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.28775498542940403 
Top-2 Accuracy = 0.476 
iter 3: [0.28775498542940403] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.3035826524198617 
Top-2 Accuracy = 0.551 
iter 4: [0.3035826524198617] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.3035826524198617 
Top-2 Accuracy = 0.551 
iter 5: [0.3035826524198617] 
setting: robustK|rf 
Top-1 Accuracy = 0.34472315867664705 
Top-2 Accuracy = 0.599 
iter 6: [0.34472315867664705] 
setting: normalizek|rf 
Top-1 Accuracy = 0.3043826067081881 
Top-2 Accuracy = 0.562 
iter 7: [0.3043826067081881] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.3093537512142163 
Top-2 Accuracy = 0.564 
iter 8: [0.3093537512142163] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.29706873892920405 
Top-2 Accuracy = 0.551 
iter 9: [0.29706873892920405] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.3014113479229758 
Top-2 Accuracy = 0.563 
iter 10: [0.3014113479229758] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.3467801839894863 
Top-2 Accuracy = 0.6 
iter 11: [0.3467801839894863] 
setting: robustQ|rf 
Top-1 Accuracy = 0.34598022970115994 
Top-2 Accuracy = 0.601 
iter 12: [0.34598022970115994] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.3039826295640249 
Top-2 Accuracy = 0.558 
iter 13: [0.3039826295640249] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.29706873892920405 
Top-2 Accuracy = 0.551 
iter 14: [0.29706873892920405] 
setting: normalizen|rf 
Top-1 Accuracy = 0.30638249242900406 
Top-2 Accuracy = 0.562 
iter 15: [0.30638249242900406] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.34615164847722985 
Top-2 Accuracy = 0.599 
iter 16: [0.34615164847722985] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.29266899034340893 
Top-2 Accuracy = 0.547 
iter 17: [0.29266899034340893] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.29346894463173534 
Top-2 Accuracy = 0.547 
iter 18: [0.29346894463173534] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.29346894463173534 
Top-2 Accuracy = 0.547 
iter 19: [0.29346894463173534] 
setting: robustm|rf 
Top-1 Accuracy = 0.2882121021655905 
Top-2 Accuracy = 0.477 
iter 20: [0.2882121021655905] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.3047825838523513 
Top-2 Accuracy = 0.559 
iter 21: [0.3047825838523513] 
setting: robustn|rf 
Top-1 Accuracy = 0.3060396548768642 
Top-2 Accuracy = 0.558 
iter 22: [0.3060396548768642] 
setting: robustT|rf 
Top-1 Accuracy = 0.30158276669904577 
Top-2 Accuracy = 0.561 
iter 23: [0.30158276669904577] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.28169818867493285 
Top-2 Accuracy = 0.472 
iter 24: [0.28169818867493285] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.28992628992628994 
Top-2 Accuracy = 0.477 
iter 25: [0.28992628992628994] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.29346894463173534 
Top-2 Accuracy = 0.547 
iter 26: [0.29346894463173534] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.29346894463173534 
Top-2 Accuracy = 0.547 
iter 27: [0.29346894463173534] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.30415404834009485 
Top-2 Accuracy = 0.556 
iter 28: [0.30415404834009485] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.28289812010742243 
Top-2 Accuracy = 0.47 
iter 29: [0.28289812010742243] 
Run # 19 
======= 
setting: robusto|rf 
Top-1 Accuracy = 0.2903262670704531 
Top-2 Accuracy = 0.477 
iter 0: [0.2903262670704531] 
setting: robustK|rf 
Top-1 Accuracy = 0.3475801382778127 
Top-2 Accuracy = 0.603 
iter 1: [0.3475801382778127] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.29346894463173534 
Top-2 Accuracy = 0.547 
iter 2: [0.29346894463173534] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.3475801382778127 
Top-2 Accuracy = 0.603 
iter 3: [0.3475801382778127] 
setting: robustd|rf 
Top-1 Accuracy = 0.29346894463173534 
Top-2 Accuracy = 0.547 
iter 4: [0.29346894463173534] 
setting: standardizej|rf 
Top-1 Accuracy = 0.2845551682760985 
Top-2 Accuracy = 0.474 
iter 5: [0.2845551682760985] 
setting: standardizea|rf 
Top-1 Accuracy = 0.29346894463173534 
Top-2 Accuracy = 0.547 
iter 6: [0.29346894463173534] 
setting: standardizep|rf 
Top-1 Accuracy = 0.29346894463173534 
Top-2 Accuracy = 0.547 
iter 7: [0.29346894463173534] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.29346894463173534 
Top-2 Accuracy = 0.547 
iter 8: [0.29346894463173534] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.2883263813496372 
Top-2 Accuracy = 0.474 
iter 9: [0.2883263813496372] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.30546825895663104 
Top-2 Accuracy = 0.558 
iter 10: [0.30546825895663104] 
setting: robustN|rf 
Top-1 Accuracy = 0.3472373007256728 
Top-2 Accuracy = 0.603 
iter 11: [0.3472373007256728] 
setting: robusth|rf 
Top-1 Accuracy = 0.30501114222044456 
Top-2 Accuracy = 0.554 
iter 12: [0.30501114222044456] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.34729444031769613 
Top-2 Accuracy = 0.603 
iter 13: [0.34729444031769613] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.34780869664590597 
Top-2 Accuracy = 0.604 
iter 14: [0.34780869664590597] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.3062110736529341 
Top-2 Accuracy = 0.559 
iter 15: [0.3062110736529341] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.28506942460430834 
Top-2 Accuracy = 0.476 
iter 16: [0.28506942460430834] 
setting: standardizee|rf 
Top-1 Accuracy = 0.30152562710702246 
Top-2 Accuracy = 0.551 
iter 17: [0.30152562710702246] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.29346894463173534 
Top-2 Accuracy = 0.547 
iter 18: [0.29346894463173534] 
setting: normalizev|rf 
Top-1 Accuracy = 0.30512542140449117 
Top-2 Accuracy = 0.553 
iter 19: [0.30512542140449117] 
setting: normalizez|rf 
Top-1 Accuracy = 0.2855836809325181 
Top-2 Accuracy = 0.473 
iter 20: [0.2855836809325181] 
setting: minmaxw|rf 
Top-1 Accuracy = 0.3480372550139992 
Top-2 Accuracy = 0.601 
iter 21: [0.3480372550139992] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.28398377235586536 
Top-2 Accuracy = 0.469 
iter 22: [0.28398377235586536] 
setting: robustF|rf 
Top-1 Accuracy = 0.2939832009599451 
Top-2 Accuracy = 0.547 
iter 23: [0.2939832009599451] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.2939832009599451 
Top-2 Accuracy = 0.547 
iter 24: [0.2939832009599451] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.2939832009599451 
Top-2 Accuracy = 0.547 
iter 25: [0.2939832009599451] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.34706588194960286 
Top-2 Accuracy = 0.604 
iter 26: [0.34706588194960286] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.2955831095365979 
Top-2 Accuracy = 0.545 
iter 27: [0.2955831095365979] 
setting: robustE|rf 
Top-1 Accuracy = 0.2955831095365979 
Top-2 Accuracy = 0.545 
iter 28: [0.2955831095365979] 
setting: normalizey|rf 
Top-1 Accuracy = 0.29495457402434144 
Top-2 Accuracy = 0.548 
iter 29: [0.29495457402434144] 
 
Median top-1 = 0.30223987200731384 
Median top-2 = 0.556 
7 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=63), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=10), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=39), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=17), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=10), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=50), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=44), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=59), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=39), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=63), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=10), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=49), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=88), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=52), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=97), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=34), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=21), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=17), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=77), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=58), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=72), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=31), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=66), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=97), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=71), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=77), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=26), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=39), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=71), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=72), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=84), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=62), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=12), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=18), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=20), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=44), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=62), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=31), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=98), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=40), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=15), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=24), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=10), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=43), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: maxabsS|rf 
Top-1 Accuracy = 0.22118736072224443 
Top-2 Accuracy = 0.37 
iter 0: [0.22118736072224443] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.2730701102794126 
Top-2 Accuracy = 0.455 
iter 1: [0.2730701102794126] 
setting: robustL|rf 
Top-1 Accuracy = 0.27312724987143594 
Top-2 Accuracy = 0.455 
iter 2: [0.27312724987143594] 
setting: normalizew|rf 
Top-1 Accuracy = 0.2166733329524027 
Top-2 Accuracy = 0.366 
iter 3: [0.2166733329524027] 
setting: robustx|rf 
Top-1 Accuracy = 0.21415919090337696 
Top-2 Accuracy = 0.365 
iter 4: [0.21415919090337696] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.2166733329524027 
Top-2 Accuracy = 0.366 
iter 5: [0.2166733329524027] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.26278498371521625 
Top-2 Accuracy = 0.434 
iter 6: [0.26278498371521625] 
setting: robustB|rf 
Top-1 Accuracy = 0.19736015084852293 
Top-2 Accuracy = 0.364 
iter 7: [0.19736015084852293] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.2160447974401463 
Top-2 Accuracy = 0.367 
iter 8: [0.2160447974401463] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.21341637620707388 
Top-2 Accuracy = 0.363 
iter 9: [0.21341637620707388] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.27289869150334267 
Top-2 Accuracy = 0.445 
iter 10: [0.27289869150334267] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.2616993314667733 
Top-2 Accuracy = 0.428 
iter 11: [0.2616993314667733] 
setting: standardizea|rf 
Top-1 Accuracy = 0.2616993314667733 
Top-2 Accuracy = 0.428 
iter 12: [0.2616993314667733] 
setting: normalizef|rf 
Top-1 Accuracy = 0.21461630763956346 
Top-2 Accuracy = 0.363 
iter 13: [0.21461630763956346] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.2757556711045083 
Top-2 Accuracy = 0.453 
iter 14: [0.2757556711045083] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.25998514370607395 
Top-2 Accuracy = 0.429 
iter 15: [0.25998514370607395] 
setting: robustT|rf 
Top-1 Accuracy = 0.21455916804754013 
Top-2 Accuracy = 0.365 
iter 16: [0.21455916804754013] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.27581281069653163 
Top-2 Accuracy = 0.453 
iter 17: [0.27581281069653163] 
setting: robusto|rf 
Top-1 Accuracy = 0.21467344723158677 
Top-2 Accuracy = 0.363 
iter 18: [0.21467344723158677] 
setting: robustQ|rf 
Top-1 Accuracy = 0.21044511742186162 
Top-2 Accuracy = 0.361 
iter 19: [0.21044511742186162] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.23878635506542484 
Top-2 Accuracy = 0.419 
iter 20: [0.23878635506542484] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.2748985772241586 
Top-2 Accuracy = 0.452 
iter 21: [0.2748985772241586] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.25998514370607395 
Top-2 Accuracy = 0.429 
iter 22: [0.25998514370607395] 
setting: normalizev|rf 
Top-1 Accuracy = 0.2606136792183304 
Top-2 Accuracy = 0.43 
iter 23: [0.2606136792183304] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.21581623907205302 
Top-2 Accuracy = 0.367 
iter 24: [0.21581623907205302] 
setting: robustr|rf 
Top-1 Accuracy = 0.2750699960002286 
Top-2 Accuracy = 0.453 
iter 25: [0.2750699960002286] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.2606136792183304 
Top-2 Accuracy = 0.43 
iter 26: [0.2606136792183304] 
setting: robusts|rf 
Top-1 Accuracy = 0.23947203016970459 
Top-2 Accuracy = 0.42 
iter 27: [0.23947203016970459] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.2606136792183304 
Top-2 Accuracy = 0.43 
iter 28: [0.2606136792183304] 
setting: robustR|rf 
Top-1 Accuracy = 0.2606136792183304 
Top-2 Accuracy = 0.43 
iter 29: [0.2606136792183304] 
Run # 1 
====== 
setting: maxabsP|rf 
Top-1 Accuracy = 0.2751271355922519 
Top-2 Accuracy = 0.453 
iter 0: [0.2751271355922519] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.23661505056853893 
Top-2 Accuracy = 0.421 
iter 1: [0.23661505056853893] 
setting: robustX|rf 
Top-1 Accuracy = 0.2606136792183304 
Top-2 Accuracy = 0.43 
iter 2: [0.2606136792183304] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.21221644477458432 
Top-2 Accuracy = 0.362 
iter 3: [0.21221644477458432] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.23318667504714016 
Top-2 Accuracy = 0.412 
iter 4: [0.23318667504714016] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.21684475172847265 
Top-2 Accuracy = 0.366 
iter 5: [0.21684475172847265] 
setting: robustn|rf 
Top-1 Accuracy = 0.2751271355922519 
Top-2 Accuracy = 0.453 
iter 6: [0.2751271355922519] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.23587223587223588 
Top-2 Accuracy = 0.419 
iter 7: [0.23587223587223588] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.21644477458430947 
Top-2 Accuracy = 0.366 
iter 8: [0.21644477458430947] 
setting: standardizet|rf 
Top-1 Accuracy = 0.2749557168161819 
Top-2 Accuracy = 0.453 
iter 9: [0.2749557168161819] 
setting: normalizef|rf 
Top-1 Accuracy = 0.21455916804754013 
Top-2 Accuracy = 0.364 
iter 10: [0.21455916804754013] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.23895777384149477 
Top-2 Accuracy = 0.419 
iter 11: [0.23895777384149477] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.2160447974401463 
Top-2 Accuracy = 0.367 
iter 12: [0.2160447974401463] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.23610079424032912 
Top-2 Accuracy = 0.42 
iter 13: [0.23610079424032912] 
setting: robustR|rf 
Top-1 Accuracy = 0.26129935432261014 
Top-2 Accuracy = 0.429 
iter 14: [0.26129935432261014] 
setting: robustr|rf 
Top-1 Accuracy = 0.21410205131135362 
Top-2 Accuracy = 0.366 
iter 15: [0.21410205131135362] 
setting: robustQ|rf 
Top-1 Accuracy = 0.27672704416890465 
Top-2 Accuracy = 0.453 
iter 16: [0.27672704416890465] 
setting: robustj|rf 
Top-1 Accuracy = 0.2135306553911205 
Top-2 Accuracy = 0.364 
iter 17: [0.2135306553911205] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.2333580938232101 
Top-2 Accuracy = 0.408 
iter 18: [0.2333580938232101] 
setting: maxabsK|rf 
Top-1 Accuracy = 0.2143877492714702 
Top-2 Accuracy = 0.363 
iter 19: [0.2143877492714702] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.27672704416890465 
Top-2 Accuracy = 0.453 
iter 20: [0.27672704416890465] 
setting: robustU|rf 
Top-1 Accuracy = 0.23758642363293525 
Top-2 Accuracy = 0.407 
iter 21: [0.23758642363293525] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.26129935432261014 
Top-2 Accuracy = 0.429 
iter 22: [0.26129935432261014] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.260727958402377 
Top-2 Accuracy = 0.425 
iter 23: [0.260727958402377] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.27461287926404204 
Top-2 Accuracy = 0.452 
iter 24: [0.27461287926404204] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.27461287926404204 
Top-2 Accuracy = 0.452 
iter 25: [0.27461287926404204] 
setting: standardizee|rf 
Top-1 Accuracy = 0.23707216730472544 
Top-2 Accuracy = 0.418 
iter 26: [0.23707216730472544] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.23804354036912176 
Top-2 Accuracy = 0.419 
iter 27: [0.23804354036912176] 
setting: robustP|rf 
Top-1 Accuracy = 0.2351294211759328 
Top-2 Accuracy = 0.406 
iter 28: [0.2351294211759328] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.23627221301639906 
Top-2 Accuracy = 0.417 
iter 29: [0.23627221301639906] 
Run # 2 
====== 
setting: maxabsY|rf 
Top-1 Accuracy = 0.2747271584480887 
Top-2 Accuracy = 0.452 
iter 0: [0.2747271584480887] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.260727958402377 
Top-2 Accuracy = 0.425 
iter 1: [0.260727958402377] 
setting: robustt|rf 
Top-1 Accuracy = 0.2161590766241929 
Top-2 Accuracy = 0.367 
iter 2: [0.2161590766241929] 
setting: robustg|rf 
Top-1 Accuracy = 0.2165590537683561 
Top-2 Accuracy = 0.367 
iter 3: [0.2165590537683561] 
setting: normalizer|rf 
Top-1 Accuracy = 0.2736415061996457 
Top-2 Accuracy = 0.451 
iter 4: [0.2736415061996457] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.21318781783898064 
Top-2 Accuracy = 0.363 
iter 5: [0.21318781783898064] 
setting: robustZ|rf 
Top-1 Accuracy = 0.2363293526084224 
Top-2 Accuracy = 0.417 
iter 6: [0.2363293526084224] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.2716987600708531 
Top-2 Accuracy = 0.447 
iter 7: [0.2716987600708531] 
setting: robustO|rf 
Top-1 Accuracy = 0.2735843666076224 
Top-2 Accuracy = 0.447 
iter 8: [0.2735843666076224] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.2575281412490715 
Top-2 Accuracy = 0.425 
iter 9: [0.2575281412490715] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.23432946688760642 
Top-2 Accuracy = 0.41 
iter 10: [0.23432946688760642] 
setting: maxabst|rf 
Top-1 Accuracy = 0.2147877264156334 
Top-2 Accuracy = 0.365 
iter 11: [0.2147877264156334] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.2748414376321353 
Top-2 Accuracy = 0.452 
iter 12: [0.2748414376321353] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.2751271355922519 
Top-2 Accuracy = 0.452 
iter 13: [0.2751271355922519] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.21250214273470086 
Top-2 Accuracy = 0.362 
iter 14: [0.21250214273470086] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.2575281412490715 
Top-2 Accuracy = 0.425 
iter 15: [0.2575281412490715] 
setting: standardizec|rf 
Top-1 Accuracy = 0.2575281412490715 
Top-2 Accuracy = 0.425 
iter 16: [0.2575281412490715] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.2179304039769156 
Top-2 Accuracy = 0.368 
iter 17: [0.2179304039769156] 
setting: robustE|rf 
Top-1 Accuracy = 0.2747271584480887 
Top-2 Accuracy = 0.452 
iter 18: [0.2747271584480887] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.26147077309868005 
Top-2 Accuracy = 0.427 
iter 19: [0.26147077309868005] 
setting: robustJ|rf 
Top-1 Accuracy = 0.26147077309868005 
Top-2 Accuracy = 0.427 
iter 20: [0.26147077309868005] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.2751842751842752 
Top-2 Accuracy = 0.452 
iter 21: [0.2751842751842752] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.2381578195531684 
Top-2 Accuracy = 0.423 
iter 22: [0.2381578195531684] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.27558425232843836 
Top-2 Accuracy = 0.452 
iter 23: [0.27558425232843836] 
setting: normalizel|rf 
Top-1 Accuracy = 0.2156448202959831 
Top-2 Accuracy = 0.365 
iter 24: [0.2156448202959831] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.272955831095366 
Top-2 Accuracy = 0.45 
iter 25: [0.272955831095366] 
setting: standardized|rf 
Top-1 Accuracy = 0.2398720073138678 
Top-2 Accuracy = 0.417 
iter 26: [0.2398720073138678] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.27592708988057824 
Top-2 Accuracy = 0.451 
iter 27: [0.27592708988057824] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.23724358608079538 
Top-2 Accuracy = 0.418 
iter 28: [0.23724358608079538] 
setting: normalizen|rf 
Top-1 Accuracy = 0.27421290211987887 
Top-2 Accuracy = 0.45 
iter 29: [0.27421290211987887] 
Run # 3 
====== 
setting: minmaxy|rf 
Top-1 Accuracy = 0.2598708645220273 
Top-2 Accuracy = 0.426 
iter 0: [0.2598708645220273] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.2363293526084224 
Top-2 Accuracy = 0.41 
iter 1: [0.2363293526084224] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.27564139192046166 
Top-2 Accuracy = 0.453 
iter 2: [0.27564139192046166] 
setting: robustB|rf 
Top-1 Accuracy = 0.2752414147762985 
Top-2 Accuracy = 0.452 
iter 3: [0.2752414147762985] 
setting: robustq|rf 
Top-1 Accuracy = 0.2143306096794469 
Top-2 Accuracy = 0.365 
iter 4: [0.2143306096794469] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.2598708645220273 
Top-2 Accuracy = 0.426 
iter 5: [0.2598708645220273] 
setting: minmaxc|rf 
Top-1 Accuracy = 0.21718758928061255 
Top-2 Accuracy = 0.367 
iter 6: [0.21718758928061255] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.2598708645220273 
Top-2 Accuracy = 0.426 
iter 7: [0.2598708645220273] 
setting: standardized|rf 
Top-1 Accuracy = 0.2355865379121193 
Top-2 Accuracy = 0.418 
iter 8: [0.2355865379121193] 
setting: normalizei|rf 
Top-1 Accuracy = 0.25998514370607395 
Top-2 Accuracy = 0.426 
iter 9: [0.25998514370607395] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.21730186846465915 
Top-2 Accuracy = 0.366 
iter 10: [0.21730186846465915] 
setting: standardizem|rf 
Top-1 Accuracy = 0.25998514370607395 
Top-2 Accuracy = 0.426 
iter 11: [0.25998514370607395] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.2750128564082052 
Top-2 Accuracy = 0.452 
iter 12: [0.2750128564082052] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.25998514370607395 
Top-2 Accuracy = 0.426 
iter 13: [0.25998514370607395] 
setting: robustr|rf 
Top-1 Accuracy = 0.2751271355922519 
Top-2 Accuracy = 0.452 
iter 14: [0.2751271355922519] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.27324152905548255 
Top-2 Accuracy = 0.446 
iter 15: [0.27324152905548255] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.23838637792126163 
Top-2 Accuracy = 0.417 
iter 16: [0.23838637792126163] 
setting: robustV|rf 
Top-1 Accuracy = 0.2135306553911205 
Top-2 Accuracy = 0.363 
iter 17: [0.2135306553911205] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.2730701102794126 
Top-2 Accuracy = 0.446 
iter 18: [0.2730701102794126] 
setting: robustZ|rf 
Top-1 Accuracy = 0.2610707959545169 
Top-2 Accuracy = 0.425 
iter 19: [0.2610707959545169] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.2562710702245586 
Top-2 Accuracy = 0.424 
iter 20: [0.2562710702245586] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.2734700874235758 
Top-2 Accuracy = 0.446 
iter 21: [0.2734700874235758] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.21461630763956346 
Top-2 Accuracy = 0.364 
iter 22: [0.21461630763956346] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.21490200559968 
Top-2 Accuracy = 0.364 
iter 23: [0.21490200559968] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.21587337866407633 
Top-2 Accuracy = 0.366 
iter 24: [0.21587337866407633] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.2562710702245586 
Top-2 Accuracy = 0.424 
iter 25: [0.2562710702245586] 
setting: standardizeh|rf 
Top-1 Accuracy = 0.2562710702245586 
Top-2 Accuracy = 0.424 
iter 26: [0.2562710702245586] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.2346723044397463 
Top-2 Accuracy = 0.41 
iter 27: [0.2346723044397463] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.2315867664704874 
Top-2 Accuracy = 0.405 
iter 28: [0.2315867664704874] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.21581623907205302 
Top-2 Accuracy = 0.366 
iter 29: [0.21581623907205302] 
Run # 4 
====== 
setting: normalizeL|rf 
Top-1 Accuracy = 0.23530083995200274 
Top-2 Accuracy = 0.416 
iter 0: [0.23530083995200274] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.21575909948002972 
Top-2 Accuracy = 0.366 
iter 1: [0.21575909948002972] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.23672932975258557 
Top-2 Accuracy = 0.42 
iter 2: [0.23672932975258557] 
setting: maxabst|rf 
Top-1 Accuracy = 0.25421404491171934 
Top-2 Accuracy = 0.421 
iter 3: [0.25421404491171934] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.27107022455859664 
Top-2 Accuracy = 0.444 
iter 4: [0.27107022455859664] 
setting: robustE|rf 
Top-1 Accuracy = 0.25421404491171934 
Top-2 Accuracy = 0.421 
iter 5: [0.25421404491171934] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.23890063424947147 
Top-2 Accuracy = 0.419 
iter 6: [0.23890063424947147] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.25421404491171934 
Top-2 Accuracy = 0.421 
iter 7: [0.25421404491171934] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.23232958116679048 
Top-2 Accuracy = 0.413 
iter 8: [0.23232958116679048] 
setting: robustX|rf 
Top-1 Accuracy = 0.23404376892748985 
Top-2 Accuracy = 0.407 
iter 9: [0.23404376892748985] 
setting: maxabso|rf 
Top-1 Accuracy = 0.21621621621621623 
Top-2 Accuracy = 0.365 
iter 10: [0.21621621621621623] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.25392834695160277 
Top-2 Accuracy = 0.421 
iter 11: [0.25392834695160277] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.2712416433346666 
Top-2 Accuracy = 0.444 
iter 12: [0.2712416433346666] 
setting: robustT|rf 
Top-1 Accuracy = 0.25392834695160277 
Top-2 Accuracy = 0.421 
iter 13: [0.25392834695160277] 
setting: robustk|rf 
Top-1 Accuracy = 0.25392834695160277 
Top-2 Accuracy = 0.421 
iter 14: [0.25392834695160277] 
setting: standardizem|rf 
Top-1 Accuracy = 0.2712416433346666 
Top-2 Accuracy = 0.445 
iter 15: [0.2712416433346666] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.2722130163990629 
Top-2 Accuracy = 0.449 
iter 16: [0.2722130163990629] 
setting: standardizef|rf 
Top-1 Accuracy = 0.2571281641049083 
Top-2 Accuracy = 0.422 
iter 17: [0.2571281641049083] 
setting: robustf|rf 
Top-1 Accuracy = 0.2722701559910862 
Top-2 Accuracy = 0.449 
iter 18: [0.2722701559910862] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.27055596823038686 
Top-2 Accuracy = 0.446 
iter 19: [0.27055596823038686] 
setting: robustt|rf 
Top-1 Accuracy = 0.2722701559910862 
Top-2 Accuracy = 0.449 
iter 20: [0.2722701559910862] 
setting: robustZ|rf 
Top-1 Accuracy = 0.2722701559910862 
Top-2 Accuracy = 0.449 
iter 21: [0.2722701559910862] 
setting: standardizes|rf 
Top-1 Accuracy = 0.21730186846465915 
Top-2 Accuracy = 0.369 
iter 22: [0.21730186846465915] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.2571281641049083 
Top-2 Accuracy = 0.422 
iter 23: [0.2571281641049083] 
setting: normalizen|rf 
Top-1 Accuracy = 0.27238443517513283 
Top-2 Accuracy = 0.449 
iter 24: [0.27238443517513283] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.2726129935432261 
Top-2 Accuracy = 0.448 
iter 25: [0.2726129935432261] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.21798754356893893 
Top-2 Accuracy = 0.368 
iter 26: [0.21798754356893893] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.27244157476715614 
Top-2 Accuracy = 0.448 
iter 27: [0.27244157476715614] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.2562710702245586 
Top-2 Accuracy = 0.422 
iter 28: [0.2562710702245586] 
setting: robustp|rf 
Top-1 Accuracy = 0.2562710702245586 
Top-2 Accuracy = 0.422 
iter 29: [0.2562710702245586] 
Run # 5 
====== 
setting: minmaxc|rf 
Top-1 Accuracy = 0.237357865264842 
Top-2 Accuracy = 0.418 
iter 0: [0.237357865264842] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.21507342437574994 
Top-2 Accuracy = 0.365 
iter 1: [0.21507342437574994] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.2724987143591795 
Top-2 Accuracy = 0.448 
iter 2: [0.2724987143591795] 
setting: normalizel|rf 
Top-1 Accuracy = 0.21718758928061255 
Top-2 Accuracy = 0.367 
iter 3: [0.21718758928061255] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.2165590537683561 
Top-2 Accuracy = 0.365 
iter 4: [0.2165590537683561] 
setting: standardizen|rf 
Top-1 Accuracy = 0.2560996514484887 
Top-2 Accuracy = 0.423 
iter 5: [0.2560996514484887] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.2716987600708531 
Top-2 Accuracy = 0.449 
iter 6: [0.2716987600708531] 
setting: normalizev|rf 
Top-1 Accuracy = 0.21341637620707388 
Top-2 Accuracy = 0.363 
iter 7: [0.21341637620707388] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.2165590537683561 
Top-2 Accuracy = 0.366 
iter 8: [0.2165590537683561] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.27067024741443346 
Top-2 Accuracy = 0.446 
iter 9: [0.27067024741443346] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.21444488886349353 
Top-2 Accuracy = 0.364 
iter 10: [0.21444488886349353] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.2558710930803954 
Top-2 Accuracy = 0.42 
iter 11: [0.2558710930803954] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.2738129249757157 
Top-2 Accuracy = 0.447 
iter 12: [0.2738129249757157] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.21513056396777328 
Top-2 Accuracy = 0.364 
iter 13: [0.21513056396777328] 
setting: standardizee|rf 
Top-1 Accuracy = 0.2736415061996457 
Top-2 Accuracy = 0.447 
iter 14: [0.2736415061996457] 
setting: normalizez|rf 
Top-1 Accuracy = 0.21495914519170334 
Top-2 Accuracy = 0.366 
iter 15: [0.21495914519170334] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.257985257985258 
Top-2 Accuracy = 0.423 
iter 16: [0.257985257985258] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.23472944403176962 
Top-2 Accuracy = 0.412 
iter 17: [0.23472944403176962] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.273870064567739 
Top-2 Accuracy = 0.447 
iter 18: [0.273870064567739] 
setting: standardized|rf 
Top-1 Accuracy = 0.273870064567739 
Top-2 Accuracy = 0.447 
iter 19: [0.273870064567739] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.2738129249757157 
Top-2 Accuracy = 0.447 
iter 20: [0.2738129249757157] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.2739843437517856 
Top-2 Accuracy = 0.447 
iter 21: [0.2739843437517856] 
setting: robustU|rf 
Top-1 Accuracy = 0.23004399748585794 
Top-2 Accuracy = 0.401 
iter 22: [0.23004399748585794] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.21461630763956346 
Top-2 Accuracy = 0.364 
iter 23: [0.21461630763956346] 
setting: normalizex|rf 
Top-1 Accuracy = 0.2567853265527684 
Top-2 Accuracy = 0.422 
iter 24: [0.2567853265527684] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.2567853265527684 
Top-2 Accuracy = 0.422 
iter 25: [0.2567853265527684] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.27329866864750585 
Top-2 Accuracy = 0.448 
iter 26: [0.27329866864750585] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.23175818524655734 
Top-2 Accuracy = 0.404 
iter 27: [0.23175818524655734] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.21541626192788985 
Top-2 Accuracy = 0.365 
iter 28: [0.21541626192788985] 
setting: robustW|rf 
Top-1 Accuracy = 0.2567853265527684 
Top-2 Accuracy = 0.422 
iter 29: [0.2567853265527684] 
Run # 6 
====== 
setting: minmaxB|rf 
Top-1 Accuracy = 0.2567853265527684 
Top-2 Accuracy = 0.422 
iter 0: [0.2567853265527684] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.2567853265527684 
Top-2 Accuracy = 0.422 
iter 1: [0.2567853265527684] 
setting: robustv|rf 
Top-1 Accuracy = 0.27312724987143594 
Top-2 Accuracy = 0.448 
iter 2: [0.27312724987143594] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.23438660647962972 
Top-2 Accuracy = 0.415 
iter 3: [0.23438660647962972] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.23187246443060397 
Top-2 Accuracy = 0.41 
iter 4: [0.23187246443060397] 
setting: robustm|rf 
Top-1 Accuracy = 0.22992971830181133 
Top-2 Accuracy = 0.406 
iter 5: [0.22992971830181133] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.2174161476487058 
Top-2 Accuracy = 0.367 
iter 6: [0.2174161476487058] 
setting: robustP|rf 
Top-1 Accuracy = 0.26038512085023713 
Top-2 Accuracy = 0.422 
iter 7: [0.26038512085023713] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.23627221301639906 
Top-2 Accuracy = 0.421 
iter 8: [0.23627221301639906] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.26038512085023713 
Top-2 Accuracy = 0.422 
iter 9: [0.26038512085023713] 
setting: robustL|rf 
Top-1 Accuracy = 0.2170733100965659 
Top-2 Accuracy = 0.366 
iter 10: [0.2170733100965659] 
setting: standardizes|rf 
Top-1 Accuracy = 0.26038512085023713 
Top-2 Accuracy = 0.422 
iter 11: [0.26038512085023713] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.21370207416719045 
Top-2 Accuracy = 0.364 
iter 12: [0.21370207416719045] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.2735843666076224 
Top-2 Accuracy = 0.451 
iter 13: [0.2735843666076224] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.25872807268156106 
Top-2 Accuracy = 0.42 
iter 14: [0.25872807268156106] 
setting: standardizee|rf 
Top-1 Accuracy = 0.2736415061996457 
Top-2 Accuracy = 0.451 
iter 15: [0.2736415061996457] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.23478658362379293 
Top-2 Accuracy = 0.413 
iter 16: [0.23478658362379293] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.2735272270155991 
Top-2 Accuracy = 0.45 
iter 17: [0.2735272270155991] 
setting: robusth|rf 
Top-1 Accuracy = 0.2734700874235758 
Top-2 Accuracy = 0.451 
iter 18: [0.2734700874235758] 
setting: robustG|rf 
Top-1 Accuracy = 0.21495914519170334 
Top-2 Accuracy = 0.365 
iter 19: [0.21495914519170334] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.2734700874235758 
Top-2 Accuracy = 0.451 
iter 20: [0.2734700874235758] 
setting: robustq|rf 
Top-1 Accuracy = 0.2735843666076224 
Top-2 Accuracy = 0.451 
iter 21: [0.2735843666076224] 
setting: minmaxw|rf 
Top-1 Accuracy = 0.2337580709673733 
Top-2 Accuracy = 0.414 
iter 22: [0.2337580709673733] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.23524370035997944 
Top-2 Accuracy = 0.416 
iter 23: [0.23524370035997944] 
setting: normalizea|rf 
Top-1 Accuracy = 0.2716416204788298 
Top-2 Accuracy = 0.448 
iter 24: [0.2716416204788298] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.2356436775041426 
Top-2 Accuracy = 0.414 
iter 25: [0.2356436775041426] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.2584995143134678 
Top-2 Accuracy = 0.422 
iter 26: [0.2584995143134678] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.21501628478372664 
Top-2 Accuracy = 0.365 
iter 27: [0.21501628478372664] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.23490086280783956 
Top-2 Accuracy = 0.42 
iter 28: [0.23490086280783956] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.2584423747214445 
Top-2 Accuracy = 0.422 
iter 29: [0.2584423747214445] 
Run # 7 
====== 
setting: robustL|rf 
Top-1 Accuracy = 0.2584423747214445 
Top-2 Accuracy = 0.422 
iter 0: [0.2584423747214445] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.2584423747214445 
Top-2 Accuracy = 0.422 
iter 1: [0.2584423747214445] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.21718758928061255 
Top-2 Accuracy = 0.367 
iter 2: [0.21718758928061255] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.2583280955373979 
Top-2 Accuracy = 0.421 
iter 3: [0.2583280955373979] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.23495800239986286 
Top-2 Accuracy = 0.421 
iter 4: [0.23495800239986286] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.23187246443060397 
Top-2 Accuracy = 0.407 
iter 5: [0.23187246443060397] 
setting: standardizer|rf 
Top-1 Accuracy = 0.2583280955373979 
Top-2 Accuracy = 0.421 
iter 6: [0.2583280955373979] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.2583852351294212 
Top-2 Accuracy = 0.422 
iter 7: [0.2583852351294212] 
setting: normalizer|rf 
Top-1 Accuracy = 0.23358665219130337 
Top-2 Accuracy = 0.412 
iter 8: [0.23358665219130337] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.2583852351294212 
Top-2 Accuracy = 0.422 
iter 9: [0.2583852351294212] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.27289869150334267 
Top-2 Accuracy = 0.45 
iter 10: [0.27289869150334267] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.2583852351294212 
Top-2 Accuracy = 0.422 
iter 11: [0.2583852351294212] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.272955831095366 
Top-2 Accuracy = 0.45 
iter 12: [0.272955831095366] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.27289869150334267 
Top-2 Accuracy = 0.449 
iter 13: [0.27289869150334267] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.21690189132049598 
Top-2 Accuracy = 0.367 
iter 14: [0.21690189132049598] 
setting: robusth|rf 
Top-1 Accuracy = 0.23450088566367636 
Top-2 Accuracy = 0.418 
iter 15: [0.23450088566367636] 
setting: robustM|rf 
Top-1 Accuracy = 0.23610079424032912 
Top-2 Accuracy = 0.417 
iter 16: [0.23610079424032912] 
setting: standardizew|rf 
Top-1 Accuracy = 0.2730129706873893 
Top-2 Accuracy = 0.45 
iter 17: [0.2730129706873893] 
setting: robusti|rf 
Top-1 Accuracy = 0.21387349294326038 
Top-2 Accuracy = 0.363 
iter 18: [0.21387349294326038] 
setting: normalizef|rf 
Top-1 Accuracy = 0.25741386206502487 
Top-2 Accuracy = 0.422 
iter 19: [0.25741386206502487] 
setting: standardizev|rf 
Top-1 Accuracy = 0.27341294783155246 
Top-2 Accuracy = 0.451 
iter 20: [0.27341294783155246] 
setting: robuste|rf 
Top-1 Accuracy = 0.27324152905548255 
Top-2 Accuracy = 0.449 
iter 21: [0.27324152905548255] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.25741386206502487 
Top-2 Accuracy = 0.422 
iter 22: [0.25741386206502487] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.2147877264156334 
Top-2 Accuracy = 0.365 
iter 23: [0.2147877264156334] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.2369007485286555 
Top-2 Accuracy = 0.416 
iter 24: [0.2369007485286555] 
setting: robusty|rf 
Top-1 Accuracy = 0.21450202845551683 
Top-2 Accuracy = 0.365 
iter 25: [0.21450202845551683] 
setting: standardizel|rf 
Top-1 Accuracy = 0.25741386206502487 
Top-2 Accuracy = 0.422 
iter 26: [0.25741386206502487] 
setting: normalizex|rf 
Top-1 Accuracy = 0.21284498028684076 
Top-2 Accuracy = 0.363 
iter 27: [0.21284498028684076] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.2739843437517856 
Top-2 Accuracy = 0.451 
iter 28: [0.2739843437517856] 
setting: maxabss|rf 
Top-1 Accuracy = 0.27324152905548255 
Top-2 Accuracy = 0.451 
iter 29: [0.27324152905548255] 
Run # 8 
====== 
setting: maxabsM|rf 
Top-1 Accuracy = 0.273870064567739 
Top-2 Accuracy = 0.45 
iter 0: [0.273870064567739] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.26004228329809725 
Top-2 Accuracy = 0.424 
iter 1: [0.26004228329809725] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.21238786355065425 
Top-2 Accuracy = 0.364 
iter 2: [0.21238786355065425] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.21370207416719045 
Top-2 Accuracy = 0.364 
iter 3: [0.21370207416719045] 
setting: minmaxw|rf 
Top-1 Accuracy = 0.2134735157990972 
Top-2 Accuracy = 0.364 
iter 4: [0.2134735157990972] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.2582138163533512 
Top-2 Accuracy = 0.422 
iter 5: [0.2582138163533512] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.2735272270155991 
Top-2 Accuracy = 0.451 
iter 6: [0.2735272270155991] 
setting: maxabss|rf 
Top-1 Accuracy = 0.2582138163533512 
Top-2 Accuracy = 0.422 
iter 7: [0.2582138163533512] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.23575795668818925 
Top-2 Accuracy = 0.412 
iter 8: [0.23575795668818925] 
setting: standardizex|rf 
Top-1 Accuracy = 0.2735843666076224 
Top-2 Accuracy = 0.451 
iter 9: [0.2735843666076224] 
setting: normalizej|rf 
Top-1 Accuracy = 0.2583280955373979 
Top-2 Accuracy = 0.422 
iter 10: [0.2583280955373979] 
setting: normalizep|rf 
Top-1 Accuracy = 0.2582709559453745 
Top-2 Accuracy = 0.422 
iter 11: [0.2582709559453745] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.23718644648877207 
Top-2 Accuracy = 0.42 
iter 12: [0.23718644648877207] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.2153019827438432 
Top-2 Accuracy = 0.366 
iter 13: [0.2153019827438432] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.2582709559453745 
Top-2 Accuracy = 0.422 
iter 14: [0.2582709559453745] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.2582709559453745 
Top-2 Accuracy = 0.422 
iter 15: [0.2582709559453745] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.2134735157990972 
Top-2 Accuracy = 0.361 
iter 16: [0.2134735157990972] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.2582709559453745 
Top-2 Accuracy = 0.422 
iter 17: [0.2582709559453745] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.2135877949831438 
Top-2 Accuracy = 0.363 
iter 18: [0.2135877949831438] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.23352951259928004 
Top-2 Accuracy = 0.412 
iter 19: [0.23352951259928004] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.23655791097651563 
Top-2 Accuracy = 0.412 
iter 20: [0.23655791097651563] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.2582709559453745 
Top-2 Accuracy = 0.422 
iter 21: [0.2582709559453745] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.27467001885606535 
Top-2 Accuracy = 0.449 
iter 22: [0.27467001885606535] 
setting: robustY|rf 
Top-1 Accuracy = 0.2747271584480887 
Top-2 Accuracy = 0.449 
iter 23: [0.2747271584480887] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.274784298040112 
Top-2 Accuracy = 0.449 
iter 24: [0.274784298040112] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.2311296497343009 
Top-2 Accuracy = 0.4 
iter 25: [0.2311296497343009] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.25895663104965433 
Top-2 Accuracy = 0.423 
iter 26: [0.25895663104965433] 
setting: robustN|rf 
Top-1 Accuracy = 0.274784298040112 
Top-2 Accuracy = 0.449 
iter 27: [0.274784298040112] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.2747271584480887 
Top-2 Accuracy = 0.449 
iter 28: [0.2747271584480887] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.21684475172847265 
Top-2 Accuracy = 0.367 
iter 29: [0.21684475172847265] 
Run # 9 
====== 
setting: maxabsG|rf 
Top-1 Accuracy = 0.2739843437517856 
Top-2 Accuracy = 0.449 
iter 0: [0.2739843437517856] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.21650191417633277 
Top-2 Accuracy = 0.365 
iter 1: [0.21650191417633277] 
setting: robusti|rf 
Top-1 Accuracy = 0.25895663104965433 
Top-2 Accuracy = 0.423 
iter 2: [0.25895663104965433] 
setting: standardizej|rf 
Top-1 Accuracy = 0.23421518770355979 
Top-2 Accuracy = 0.416 
iter 3: [0.23421518770355979] 
setting: standardizen|rf 
Top-1 Accuracy = 0.23832923832923833 
Top-2 Accuracy = 0.42 
iter 4: [0.23832923832923833] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.25889949145763097 
Top-2 Accuracy = 0.424 
iter 5: [0.25889949145763097] 
setting: robustx|rf 
Top-1 Accuracy = 0.25889949145763097 
Top-2 Accuracy = 0.424 
iter 6: [0.25889949145763097] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.25889949145763097 
Top-2 Accuracy = 0.424 
iter 7: [0.25889949145763097] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.21735900805668248 
Top-2 Accuracy = 0.368 
iter 8: [0.21735900805668248] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.23192960402262727 
Top-2 Accuracy = 0.409 
iter 9: [0.23192960402262727] 
setting: robustQ|rf 
Top-1 Accuracy = 0.2748414376321353 
Top-2 Accuracy = 0.449 
iter 10: [0.2748414376321353] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.25884235186560767 
Top-2 Accuracy = 0.424 
iter 11: [0.25884235186560767] 
setting: robustl|rf 
Top-1 Accuracy = 0.2333009542311868 
Top-2 Accuracy = 0.416 
iter 12: [0.2333009542311868] 
setting: robustr|rf 
Top-1 Accuracy = 0.25884235186560767 
Top-2 Accuracy = 0.424 
iter 13: [0.25884235186560767] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.23655791097651563 
Top-2 Accuracy = 0.417 
iter 14: [0.23655791097651563] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.27467001885606535 
Top-2 Accuracy = 0.449 
iter 15: [0.27467001885606535] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.23850065710530827 
Top-2 Accuracy = 0.42 
iter 16: [0.23850065710530827] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.23575795668818925 
Top-2 Accuracy = 0.419 
iter 17: [0.23575795668818925] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.27455573967201874 
Top-2 Accuracy = 0.449 
iter 18: [0.27455573967201874] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.2126164219187475 
Top-2 Accuracy = 0.362 
iter 19: [0.2126164219187475] 
setting: maxabst|rf 
Top-1 Accuracy = 0.2363864922004457 
Top-2 Accuracy = 0.415 
iter 20: [0.2363864922004457] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.2166161933603794 
Top-2 Accuracy = 0.365 
iter 21: [0.2166161933603794] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.2596994457459574 
Top-2 Accuracy = 0.423 
iter 22: [0.2596994457459574] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.23758642363293525 
Top-2 Accuracy = 0.417 
iter 23: [0.23758642363293525] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.2596994457459574 
Top-2 Accuracy = 0.423 
iter 24: [0.2596994457459574] 
setting: robustS|rf 
Top-1 Accuracy = 0.27438432089594883 
Top-2 Accuracy = 0.448 
iter 25: [0.27438432089594883] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.21581623907205302 
Top-2 Accuracy = 0.366 
iter 26: [0.21581623907205302] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.21227358436660762 
Top-2 Accuracy = 0.361 
iter 27: [0.21227358436660762] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.27409862293583226 
Top-2 Accuracy = 0.447 
iter 28: [0.27409862293583226] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.23667219016056226 
Top-2 Accuracy = 0.419 
iter 29: [0.23667219016056226] 
Run # 10 
======= 
setting: minmaxL|rf 
Top-1 Accuracy = 0.2139306325352837 
Top-2 Accuracy = 0.364 
iter 0: [0.2139306325352837] 
setting: normalizex|rf 
Top-1 Accuracy = 0.25884235186560767 
Top-2 Accuracy = 0.421 
iter 1: [0.25884235186560767] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.21341637620707388 
Top-2 Accuracy = 0.363 
iter 2: [0.21341637620707388] 
setting: robustC|rf 
Top-1 Accuracy = 0.273870064567739 
Top-2 Accuracy = 0.447 
iter 3: [0.273870064567739] 
setting: robustL|rf 
Top-1 Accuracy = 0.273870064567739 
Top-2 Accuracy = 0.447 
iter 4: [0.273870064567739] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.25884235186560767 
Top-2 Accuracy = 0.421 
iter 5: [0.25884235186560767] 
setting: robustH|rf 
Top-1 Accuracy = 0.21221644477458432 
Top-2 Accuracy = 0.361 
iter 6: [0.21221644477458432] 
setting: robusta|rf 
Top-1 Accuracy = 0.273870064567739 
Top-2 Accuracy = 0.447 
iter 7: [0.273870064567739] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.23484372321581623 
Top-2 Accuracy = 0.416 
iter 8: [0.23484372321581623] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.213073538654934 
Top-2 Accuracy = 0.363 
iter 9: [0.213073538654934] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.27181303925489975 
Top-2 Accuracy = 0.445 
iter 10: [0.27181303925489975] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.21404491171933032 
Top-2 Accuracy = 0.363 
iter 11: [0.21404491171933032] 
setting: normalizep|rf 
Top-1 Accuracy = 0.25775669961716474 
Top-2 Accuracy = 0.421 
iter 12: [0.25775669961716474] 
setting: normalizei|rf 
Top-1 Accuracy = 0.23364379178332667 
Top-2 Accuracy = 0.414 
iter 13: [0.23364379178332667] 
setting: robustz|rf 
Top-1 Accuracy = 0.25775669961716474 
Top-2 Accuracy = 0.421 
iter 14: [0.25775669961716474] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.25775669961716474 
Top-2 Accuracy = 0.421 
iter 15: [0.25775669961716474] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.27427004171190217 
Top-2 Accuracy = 0.449 
iter 16: [0.27427004171190217] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.27312724987143594 
Top-2 Accuracy = 0.45 
iter 17: [0.27312724987143594] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.21861607908119535 
Top-2 Accuracy = 0.368 
iter 18: [0.21861607908119535] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.23832923832923833 
Top-2 Accuracy = 0.419 
iter 19: [0.23832923832923833] 
setting: standardizei|rf 
Top-1 Accuracy = 0.23347237300725673 
Top-2 Accuracy = 0.413 
iter 20: [0.23347237300725673] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.25604251185646537 
Top-2 Accuracy = 0.42 
iter 21: [0.25604251185646537] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.23347237300725673 
Top-2 Accuracy = 0.416 
iter 22: [0.23347237300725673] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.25604251185646537 
Top-2 Accuracy = 0.42 
iter 23: [0.25604251185646537] 
setting: standardizex|rf 
Top-1 Accuracy = 0.27318438946345924 
Top-2 Accuracy = 0.45 
iter 24: [0.27318438946345924] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.27318438946345924 
Top-2 Accuracy = 0.45 
iter 25: [0.27318438946345924] 
setting: robustb|rf 
Top-1 Accuracy = 0.23547225872807268 
Top-2 Accuracy = 0.418 
iter 26: [0.23547225872807268] 
setting: robustW|rf 
Top-1 Accuracy = 0.21518770355979658 
Top-2 Accuracy = 0.364 
iter 27: [0.21518770355979658] 
setting: normalizey|rf 
Top-1 Accuracy = 0.21410205131135362 
Top-2 Accuracy = 0.364 
iter 28: [0.21410205131135362] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.25644248900062855 
Top-2 Accuracy = 0.424 
iter 29: [0.25644248900062855] 
Run # 11 
======= 
setting: maxabsT|rf 
Top-1 Accuracy = 0.2730701102794126 
Top-2 Accuracy = 0.449 
iter 0: [0.2730701102794126] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.25644248900062855 
Top-2 Accuracy = 0.424 
iter 1: [0.25644248900062855] 
setting: maxabss|rf 
Top-1 Accuracy = 0.27278441231929607 
Top-2 Accuracy = 0.449 
iter 2: [0.27278441231929607] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.25644248900062855 
Top-2 Accuracy = 0.424 
iter 3: [0.25644248900062855] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.21410205131135362 
Top-2 Accuracy = 0.364 
iter 4: [0.21410205131135362] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.25644248900062855 
Top-2 Accuracy = 0.424 
iter 5: [0.25644248900062855] 
setting: robustr|rf 
Top-1 Accuracy = 0.23712930689674877 
Top-2 Accuracy = 0.419 
iter 6: [0.23712930689674877] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.2148448660076567 
Top-2 Accuracy = 0.365 
iter 7: [0.2148448660076567] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.21575909948002972 
Top-2 Accuracy = 0.364 
iter 8: [0.21575909948002972] 
setting: normalizen|rf 
Top-1 Accuracy = 0.23404376892748985 
Top-2 Accuracy = 0.415 
iter 9: [0.23404376892748985] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.255985372264442 
Top-2 Accuracy = 0.418 
iter 10: [0.255985372264442] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.21187360722244444 
Top-2 Accuracy = 0.364 
iter 11: [0.21187360722244444] 
setting: standardizen|rf 
Top-1 Accuracy = 0.2690703388377807 
Top-2 Accuracy = 0.446 
iter 12: [0.2690703388377807] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.2333009542311868 
Top-2 Accuracy = 0.416 
iter 13: [0.2333009542311868] 
setting: robustv|rf 
Top-1 Accuracy = 0.2690131992457574 
Top-2 Accuracy = 0.447 
iter 14: [0.2690131992457574] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.2689560596537341 
Top-2 Accuracy = 0.447 
iter 15: [0.2689560596537341] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.2334152334152334 
Top-2 Accuracy = 0.418 
iter 16: [0.2334152334152334] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.255985372264442 
Top-2 Accuracy = 0.418 
iter 17: [0.255985372264442] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.255985372264442 
Top-2 Accuracy = 0.418 
iter 18: [0.255985372264442] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.237357865264842 
Top-2 Accuracy = 0.42 
iter 19: [0.237357865264842] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.23592937546425918 
Top-2 Accuracy = 0.418 
iter 20: [0.23592937546425918] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.2568424661447917 
Top-2 Accuracy = 0.424 
iter 21: [0.2568424661447917] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.2568424661447917 
Top-2 Accuracy = 0.424 
iter 22: [0.2568424661447917] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.21770184560882236 
Top-2 Accuracy = 0.369 
iter 23: [0.21770184560882236] 
setting: robustU|rf 
Top-1 Accuracy = 0.23352951259928004 
Top-2 Accuracy = 0.413 
iter 24: [0.23352951259928004] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.27072738700645677 
Top-2 Accuracy = 0.448 
iter 25: [0.27072738700645677] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.2382149591451917 
Top-2 Accuracy = 0.42 
iter 26: [0.2382149591451917] 
setting: robustD|rf 
Top-1 Accuracy = 0.2568424661447917 
Top-2 Accuracy = 0.424 
iter 27: [0.2568424661447917] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.27101308496657334 
Top-2 Accuracy = 0.448 
iter 28: [0.27101308496657334] 
setting: normalizer|rf 
Top-1 Accuracy = 0.2568424661447917 
Top-2 Accuracy = 0.423 
iter 29: [0.2568424661447917] 
Run # 12 
======= 
setting: minmaxU|rf 
Top-1 Accuracy = 0.2704416890463402 
Top-2 Accuracy = 0.448 
iter 0: [0.2704416890463402] 
setting: normalizen|rf 
Top-1 Accuracy = 0.23581509628021255 
Top-2 Accuracy = 0.416 
iter 1: [0.23581509628021255] 
setting: normalizez|rf 
Top-1 Accuracy = 0.2708416661905034 
Top-2 Accuracy = 0.447 
iter 2: [0.2708416661905034] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.27112736415061994 
Top-2 Accuracy = 0.448 
iter 3: [0.27112736415061994] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.23587223587223588 
Top-2 Accuracy = 0.404 
iter 4: [0.23587223587223588] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.27107022455859664 
Top-2 Accuracy = 0.448 
iter 5: [0.27107022455859664] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.27112736415061994 
Top-2 Accuracy = 0.448 
iter 6: [0.27112736415061994] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.23581509628021255 
Top-2 Accuracy = 0.413 
iter 7: [0.23581509628021255] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.27112736415061994 
Top-2 Accuracy = 0.448 
iter 8: [0.27112736415061994] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.25695674532883833 
Top-2 Accuracy = 0.424 
iter 9: [0.25695674532883833] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.21410205131135362 
Top-2 Accuracy = 0.365 
iter 10: [0.21410205131135362] 
setting: robustH|rf 
Top-1 Accuracy = 0.2147877264156334 
Top-2 Accuracy = 0.367 
iter 11: [0.2147877264156334] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.27101308496657334 
Top-2 Accuracy = 0.448 
iter 12: [0.27101308496657334] 
setting: standardizea|rf 
Top-1 Accuracy = 0.21815896234500887 
Top-2 Accuracy = 0.368 
iter 13: [0.21815896234500887] 
setting: robustK|rf 
Top-1 Accuracy = 0.22992971830181133 
Top-2 Accuracy = 0.4 
iter 14: [0.22992971830181133] 
setting: robustI|rf 
Top-1 Accuracy = 0.25695674532883833 
Top-2 Accuracy = 0.424 
iter 15: [0.25695674532883833] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.236443631792469 
Top-2 Accuracy = 0.418 
iter 16: [0.236443631792469] 
setting: standardizeq|rf 
Top-1 Accuracy = 0.27107022455859664 
Top-2 Accuracy = 0.448 
iter 17: [0.27107022455859664] 
setting: robustV|rf 
Top-1 Accuracy = 0.2183875207131021 
Top-2 Accuracy = 0.368 
iter 18: [0.2183875207131021] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.2363293526084224 
Top-2 Accuracy = 0.416 
iter 19: [0.2363293526084224] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.2711845037426433 
Top-2 Accuracy = 0.448 
iter 20: [0.2711845037426433] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.25695674532883833 
Top-2 Accuracy = 0.424 
iter 21: [0.25695674532883833] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.23587223587223588 
Top-2 Accuracy = 0.419 
iter 22: [0.23587223587223588] 
setting: standardizew|rf 
Top-1 Accuracy = 0.23438660647962972 
Top-2 Accuracy = 0.417 
iter 23: [0.23438660647962972] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.2713559225187132 
Top-2 Accuracy = 0.449 
iter 24: [0.2713559225187132] 
setting: standardizer|rf 
Top-1 Accuracy = 0.2575281412490715 
Top-2 Accuracy = 0.42 
iter 25: [0.2575281412490715] 
setting: robustb|rf 
Top-1 Accuracy = 0.21233072395863092 
Top-2 Accuracy = 0.362 
iter 26: [0.21233072395863092] 
setting: normalizej|rf 
Top-1 Accuracy = 0.22958688074967146 
Top-2 Accuracy = 0.404 
iter 27: [0.22958688074967146] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.2328438374950003 
Top-2 Accuracy = 0.42 
iter 28: [0.2328438374950003] 
setting: robusto|rf 
Top-1 Accuracy = 0.25775669961716474 
Top-2 Accuracy = 0.422 
iter 29: [0.25775669961716474] 
Run # 13 
======= 
setting: maxabss|rf 
Top-1 Accuracy = 0.27312724987143594 
Top-2 Accuracy = 0.45 
iter 0: [0.27312724987143594] 
setting: robusth|rf 
Top-1 Accuracy = 0.2170733100965659 
Top-2 Accuracy = 0.368 
iter 1: [0.2170733100965659] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.2351865607679561 
Top-2 Accuracy = 0.419 
iter 2: [0.2351865607679561] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.2582709559453745 
Top-2 Accuracy = 0.422 
iter 3: [0.2582709559453745] 
setting: standardizeA|rf 
Top-1 Accuracy = 0.2582709559453745 
Top-2 Accuracy = 0.422 
iter 4: [0.2582709559453745] 
setting: maxabso|rf 
Top-1 Accuracy = 0.2321010227986972 
Top-2 Accuracy = 0.413 
iter 5: [0.2321010227986972] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.23370093137534997 
Top-2 Accuracy = 0.419 
iter 6: [0.23370093137534997] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.2582709559453745 
Top-2 Accuracy = 0.422 
iter 7: [0.2582709559453745] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.2303296954459745 
Top-2 Accuracy = 0.406 
iter 8: [0.2303296954459745] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.23421518770355979 
Top-2 Accuracy = 0.405 
iter 9: [0.23421518770355979] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.27329866864750585 
Top-2 Accuracy = 0.445 
iter 10: [0.27329866864750585] 
setting: robustE|rf 
Top-1 Accuracy = 0.23415804811153648 
Top-2 Accuracy = 0.417 
iter 11: [0.23415804811153648] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.260727958402377 
Top-2 Accuracy = 0.421 
iter 12: [0.260727958402377] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.260727958402377 
Top-2 Accuracy = 0.421 
iter 13: [0.260727958402377] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.21598765784812296 
Top-2 Accuracy = 0.366 
iter 14: [0.21598765784812296] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.21558768070395978 
Top-2 Accuracy = 0.367 
iter 15: [0.21558768070395978] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.23307239586309353 
Top-2 Accuracy = 0.406 
iter 16: [0.23307239586309353] 
setting: standardizem|rf 
Top-1 Accuracy = 0.217816124792869 
Top-2 Accuracy = 0.367 
iter 17: [0.217816124792869] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.21650191417633277 
Top-2 Accuracy = 0.367 
iter 18: [0.21650191417633277] 
setting: standardizet|rf 
Top-1 Accuracy = 0.2356436775041426 
Top-2 Accuracy = 0.416 
iter 19: [0.2356436775041426] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.25907091023370094 
Top-2 Accuracy = 0.427 
iter 20: [0.25907091023370094] 
setting: standardizez|rf 
Top-1 Accuracy = 0.25907091023370094 
Top-2 Accuracy = 0.427 
iter 21: [0.25907091023370094] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.26964173475801384 
Top-2 Accuracy = 0.449 
iter 22: [0.26964173475801384] 
setting: maxabst|rf 
Top-1 Accuracy = 0.2575852808410948 
Top-2 Accuracy = 0.423 
iter 23: [0.2575852808410948] 
setting: standardizec|rf 
Top-1 Accuracy = 0.21164504885435118 
Top-2 Accuracy = 0.362 
iter 24: [0.21164504885435118] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.26958459516599054 
Top-2 Accuracy = 0.449 
iter 25: [0.26958459516599054] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.21107365293411806 
Top-2 Accuracy = 0.362 
iter 26: [0.21107365293411806] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.2575852808410948 
Top-2 Accuracy = 0.423 
iter 27: [0.2575852808410948] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.2575852808410948 
Top-2 Accuracy = 0.423 
iter 28: [0.2575852808410948] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.23472944403176962 
Top-2 Accuracy = 0.417 
iter 29: [0.23472944403176962] 
Run # 14 
======= 
setting: normalizec|rf 
Top-1 Accuracy = 0.25735672247300156 
Top-2 Accuracy = 0.424 
iter 0: [0.25735672247300156] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.2715273412947832 
Top-2 Accuracy = 0.45 
iter 1: [0.2715273412947832] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.23712930689674877 
Top-2 Accuracy = 0.418 
iter 2: [0.23712930689674877] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.23832923832923833 
Top-2 Accuracy = 0.421 
iter 3: [0.23832923832923833] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.25735672247300156 
Top-2 Accuracy = 0.424 
iter 4: [0.25735672247300156] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.27067024741443346 
Top-2 Accuracy = 0.451 
iter 5: [0.27067024741443346] 
setting: standardizep|rf 
Top-1 Accuracy = 0.2714702017027598 
Top-2 Accuracy = 0.45 
iter 6: [0.2714702017027598] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.25661390777669846 
Top-2 Accuracy = 0.422 
iter 7: [0.25661390777669846] 
setting: robustb|rf 
Top-1 Accuracy = 0.23427232729558312 
Top-2 Accuracy = 0.406 
iter 8: [0.23427232729558312] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.21598765784812296 
Top-2 Accuracy = 0.366 
iter 9: [0.21598765784812296] 
setting: standardizef|rf 
Top-1 Accuracy = 0.27204159762299296 
Top-2 Accuracy = 0.45 
iter 10: [0.27204159762299296] 
setting: robustx|rf 
Top-1 Accuracy = 0.2113022113022113 
Top-2 Accuracy = 0.361 
iter 11: [0.2113022113022113] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.27204159762299296 
Top-2 Accuracy = 0.45 
iter 12: [0.27204159762299296] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.27198445803096966 
Top-2 Accuracy = 0.449 
iter 13: [0.27198445803096966] 
setting: minmaxg|rf 
Top-1 Accuracy = 0.23232958116679048 
Top-2 Accuracy = 0.416 
iter 14: [0.23232958116679048] 
setting: robuste|rf 
Top-1 Accuracy = 0.2721558768070396 
Top-2 Accuracy = 0.45 
iter 15: [0.2721558768070396] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.2148448660076567 
Top-2 Accuracy = 0.365 
iter 16: [0.2148448660076567] 
setting: standardizew|rf 
Top-1 Accuracy = 0.23175818524655734 
Top-2 Accuracy = 0.416 
iter 17: [0.23175818524655734] 
setting: robustK|rf 
Top-1 Accuracy = 0.2143306096794469 
Top-2 Accuracy = 0.365 
iter 18: [0.2143306096794469] 
setting: robustP|rf 
Top-1 Accuracy = 0.27204159762299296 
Top-2 Accuracy = 0.45 
iter 19: [0.27204159762299296] 
setting: minmaxJ|rf 
Top-1 Accuracy = 0.25661390777669846 
Top-2 Accuracy = 0.422 
iter 20: [0.25661390777669846] 
setting: normalizeq|rf 
Top-1 Accuracy = 0.25644248900062855 
Top-2 Accuracy = 0.422 
iter 21: [0.25644248900062855] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.23627221301639906 
Top-2 Accuracy = 0.415 
iter 22: [0.23627221301639906] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.2712416433346666 
Top-2 Accuracy = 0.45 
iter 23: [0.2712416433346666] 
setting: maxabst|rf 
Top-1 Accuracy = 0.21141649048625794 
Top-2 Accuracy = 0.361 
iter 24: [0.21141649048625794] 
setting: standardizes|rf 
Top-1 Accuracy = 0.21364493457516714 
Top-2 Accuracy = 0.363 
iter 25: [0.21364493457516714] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.2560996514484887 
Top-2 Accuracy = 0.421 
iter 26: [0.2560996514484887] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.2717558996628764 
Top-2 Accuracy = 0.45 
iter 27: [0.2717558996628764] 
setting: standardizen|rf 
Top-1 Accuracy = 0.2560996514484887 
Top-2 Accuracy = 0.421 
iter 28: [0.2560996514484887] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.21684475172847265 
Top-2 Accuracy = 0.368 
iter 29: [0.21684475172847265] 
Run # 15 
======= 
setting: robustN|rf 
Top-1 Accuracy = 0.2130163990629107 
Top-2 Accuracy = 0.364 
iter 0: [0.2130163990629107] 
setting: robustp|rf 
Top-1 Accuracy = 0.23747214444888864 
Top-2 Accuracy = 0.419 
iter 1: [0.23747214444888864] 
setting: normalizef|rf 
Top-1 Accuracy = 0.26015656248214386 
Top-2 Accuracy = 0.423 
iter 2: [0.26015656248214386] 
setting: standardizeH|rf 
Top-1 Accuracy = 0.27329866864750585 
Top-2 Accuracy = 0.451 
iter 3: [0.27329866864750585] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.21541626192788985 
Top-2 Accuracy = 0.365 
iter 4: [0.21541626192788985] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.26129935432261014 
Top-2 Accuracy = 0.425 
iter 5: [0.26129935432261014] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.27341294783155246 
Top-2 Accuracy = 0.451 
iter 6: [0.27341294783155246] 
setting: robustC|rf 
Top-1 Accuracy = 0.21221644477458432 
Top-2 Accuracy = 0.362 
iter 7: [0.21221644477458432] 
setting: standardizez|rf 
Top-1 Accuracy = 0.23358665219130337 
Top-2 Accuracy = 0.417 
iter 8: [0.23358665219130337] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.21295925947088737 
Top-2 Accuracy = 0.363 
iter 9: [0.21295925947088737] 
setting: robustc|rf 
Top-1 Accuracy = 0.26129935432261014 
Top-2 Accuracy = 0.425 
iter 10: [0.26129935432261014] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.25792811839323465 
Top-2 Accuracy = 0.422 
iter 11: [0.25792811839323465] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.21507342437574994 
Top-2 Accuracy = 0.367 
iter 12: [0.21507342437574994] 
setting: standardizew|rf 
Top-1 Accuracy = 0.23604365464830582 
Top-2 Accuracy = 0.415 
iter 13: [0.23604365464830582] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.2381006799611451 
Top-2 Accuracy = 0.417 
iter 14: [0.2381006799611451] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.22821553054111193 
Top-2 Accuracy = 0.41 
iter 15: [0.22821553054111193] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.2594137477858408 
Top-2 Accuracy = 0.421 
iter 16: [0.2594137477858408] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.21501628478372664 
Top-2 Accuracy = 0.365 
iter 17: [0.21501628478372664] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.2334152334152334 
Top-2 Accuracy = 0.412 
iter 18: [0.2334152334152334] 
setting: robustd|rf 
Top-1 Accuracy = 0.2571853036969316 
Top-2 Accuracy = 0.42 
iter 19: [0.2571853036969316] 
setting: robustK|rf 
Top-1 Accuracy = 0.27289869150334267 
Top-2 Accuracy = 0.45 
iter 20: [0.27289869150334267] 
setting: robustG|rf 
Top-1 Accuracy = 0.27289869150334267 
Top-2 Accuracy = 0.45 
iter 21: [0.27289869150334267] 
setting: normalizeY|rf 
Top-1 Accuracy = 0.21318781783898064 
Top-2 Accuracy = 0.363 
iter 22: [0.21318781783898064] 
setting: maxabss|rf 
Top-1 Accuracy = 0.25295697388720645 
Top-2 Accuracy = 0.419 
iter 23: [0.25295697388720645] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.21473058682361007 
Top-2 Accuracy = 0.365 
iter 24: [0.21473058682361007] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.25295697388720645 
Top-2 Accuracy = 0.419 
iter 25: [0.25295697388720645] 
setting: robustb|rf 
Top-1 Accuracy = 0.21398777212730702 
Top-2 Accuracy = 0.365 
iter 26: [0.21398777212730702] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.25295697388720645 
Top-2 Accuracy = 0.419 
iter 27: [0.25295697388720645] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.25295697388720645 
Top-2 Accuracy = 0.419 
iter 28: [0.25295697388720645] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.25564253471230214 
Top-2 Accuracy = 0.419 
iter 29: [0.25564253471230214] 
Run # 16 
======= 
setting: robustJ|rf 
Top-1 Accuracy = 0.2108450945660248 
Top-2 Accuracy = 0.36 
iter 0: [0.2108450945660248] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.2333009542311868 
Top-2 Accuracy = 0.41 
iter 1: [0.2333009542311868] 
setting: robustg|rf 
Top-1 Accuracy = 0.2713559225187132 
Top-2 Accuracy = 0.447 
iter 2: [0.2713559225187132] 
setting: standardized|rf 
Top-1 Accuracy = 0.23495800239986286 
Top-2 Accuracy = 0.418 
iter 3: [0.23495800239986286] 
setting: standardizem|rf 
Top-1 Accuracy = 0.2713559225187132 
Top-2 Accuracy = 0.447 
iter 4: [0.2713559225187132] 
setting: normalizet|rf 
Top-1 Accuracy = 0.2603279812582138 
Top-2 Accuracy = 0.427 
iter 5: [0.2603279812582138] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.2134735157990972 
Top-2 Accuracy = 0.363 
iter 6: [0.2134735157990972] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.2603279812582138 
Top-2 Accuracy = 0.427 
iter 7: [0.2603279812582138] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.2603279812582138 
Top-2 Accuracy = 0.427 
iter 8: [0.2603279812582138] 
setting: normalizev|rf 
Top-1 Accuracy = 0.2359865150562825 
Top-2 Accuracy = 0.414 
iter 9: [0.2359865150562825] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.2608422375864236 
Top-2 Accuracy = 0.427 
iter 10: [0.2608422375864236] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.23661505056853893 
Top-2 Accuracy = 0.419 
iter 11: [0.23661505056853893] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.2165590537683561 
Top-2 Accuracy = 0.365 
iter 12: [0.2165590537683561] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.21593051825609966 
Top-2 Accuracy = 0.363 
iter 13: [0.21593051825609966] 
setting: standardizet|rf 
Top-1 Accuracy = 0.2608422375864236 
Top-2 Accuracy = 0.427 
iter 14: [0.2608422375864236] 
setting: standardizec|rf 
Top-1 Accuracy = 0.2608422375864236 
Top-2 Accuracy = 0.427 
iter 15: [0.2608422375864236] 
setting: robustl|rf 
Top-1 Accuracy = 0.23370093137534997 
Top-2 Accuracy = 0.414 
iter 16: [0.23370093137534997] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.2703845494543169 
Top-2 Accuracy = 0.448 
iter 17: [0.2703845494543169] 
setting: robustb|rf 
Top-1 Accuracy = 0.2179304039769156 
Top-2 Accuracy = 0.367 
iter 18: [0.2179304039769156] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.25872807268156106 
Top-2 Accuracy = 0.425 
iter 19: [0.25872807268156106] 
setting: robustP|rf 
Top-1 Accuracy = 0.21010227986972174 
Top-2 Accuracy = 0.36 
iter 20: [0.21010227986972174] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.2704416890463402 
Top-2 Accuracy = 0.448 
iter 21: [0.2704416890463402] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.21318781783898064 
Top-2 Accuracy = 0.364 
iter 22: [0.21318781783898064] 
setting: normalizer|rf 
Top-1 Accuracy = 0.21633049540026283 
Top-2 Accuracy = 0.367 
iter 23: [0.21633049540026283] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.21495914519170334 
Top-2 Accuracy = 0.366 
iter 24: [0.21495914519170334] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.21490200559968 
Top-2 Accuracy = 0.366 
iter 25: [0.21490200559968] 
setting: robustZ|rf 
Top-1 Accuracy = 0.26049940003428373 
Top-2 Accuracy = 0.424 
iter 26: [0.26049940003428373] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.21547340151991315 
Top-2 Accuracy = 0.364 
iter 27: [0.21547340151991315] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.21387349294326038 
Top-2 Accuracy = 0.364 
iter 28: [0.21387349294326038] 
setting: robustT|rf 
Top-1 Accuracy = 0.21238786355065425 
Top-2 Accuracy = 0.361 
iter 29: [0.21238786355065425] 
Run # 17 
======= 
setting: standardizei|rf 
Top-1 Accuracy = 0.23427232729558312 
Top-2 Accuracy = 0.415 
iter 0: [0.23427232729558312] 
setting: normalizek|rf 
Top-1 Accuracy = 0.26164219187475 
Top-2 Accuracy = 0.427 
iter 1: [0.26164219187475] 
setting: normalizem|rf 
Top-1 Accuracy = 0.21238786355065425 
Top-2 Accuracy = 0.363 
iter 2: [0.21238786355065425] 
setting: robustS|rf 
Top-1 Accuracy = 0.26141363350665675 
Top-2 Accuracy = 0.429 
iter 3: [0.26141363350665675] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.2118164676304211 
Top-2 Accuracy = 0.362 
iter 4: [0.2118164676304211] 
setting: standardizez|rf 
Top-1 Accuracy = 0.236443631792469 
Top-2 Accuracy = 0.42 
iter 5: [0.236443631792469] 
setting: minmaxC|rf 
Top-1 Accuracy = 0.26141363350665675 
Top-2 Accuracy = 0.429 
iter 6: [0.26141363350665675] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.26141363350665675 
Top-2 Accuracy = 0.429 
iter 7: [0.26141363350665675] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.2334152334152334 
Top-2 Accuracy = 0.416 
iter 8: [0.2334152334152334] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.2726129935432261 
Top-2 Accuracy = 0.447 
iter 9: [0.2726129935432261] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.27289869150334267 
Top-2 Accuracy = 0.448 
iter 10: [0.27289869150334267] 
setting: robustE|rf 
Top-1 Accuracy = 0.21444488886349353 
Top-2 Accuracy = 0.365 
iter 11: [0.21444488886349353] 
setting: standardizem|rf 
Top-1 Accuracy = 0.21381635335123708 
Top-2 Accuracy = 0.362 
iter 12: [0.21381635335123708] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.23415804811153648 
Top-2 Accuracy = 0.415 
iter 13: [0.23415804811153648] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.27289869150334267 
Top-2 Accuracy = 0.448 
iter 14: [0.27289869150334267] 
setting: maxabso|rf 
Top-1 Accuracy = 0.2130163990629107 
Top-2 Accuracy = 0.363 
iter 15: [0.2130163990629107] 
setting: maxabsj|rf 
Top-1 Accuracy = 0.26015656248214386 
Top-2 Accuracy = 0.426 
iter 16: [0.26015656248214386] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.2726129935432261 
Top-2 Accuracy = 0.447 
iter 17: [0.2726129935432261] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.23701502771270214 
Top-2 Accuracy = 0.416 
iter 18: [0.23701502771270214] 
setting: standardizee|rf 
Top-1 Accuracy = 0.2730701102794126 
Top-2 Accuracy = 0.447 
iter 19: [0.2730701102794126] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.23570081709616594 
Top-2 Accuracy = 0.418 
iter 20: [0.23570081709616594] 
setting: standardizea|rf 
Top-1 Accuracy = 0.23535797954402607 
Top-2 Accuracy = 0.415 
iter 21: [0.23535797954402607] 
setting: normalizea|rf 
Top-1 Accuracy = 0.25912804982572424 
Top-2 Accuracy = 0.424 
iter 22: [0.25912804982572424] 
setting: maxabsX|rf 
Top-1 Accuracy = 0.23752928404091195 
Top-2 Accuracy = 0.42 
iter 23: [0.23752928404091195] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.21238786355065425 
Top-2 Accuracy = 0.362 
iter 24: [0.21238786355065425] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.2730701102794126 
Top-2 Accuracy = 0.448 
iter 25: [0.2730701102794126] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.2730701102794126 
Top-2 Accuracy = 0.448 
iter 26: [0.2730701102794126] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.21398777212730702 
Top-2 Accuracy = 0.364 
iter 27: [0.21398777212730702] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.25912804982572424 
Top-2 Accuracy = 0.424 
iter 28: [0.25912804982572424] 
setting: standardizey|rf 
Top-1 Accuracy = 0.23307239586309353 
Top-2 Accuracy = 0.411 
iter 29: [0.23307239586309353] 
Run # 18 
======= 
setting: minmaxg|rf 
Top-1 Accuracy = 0.23798640077709846 
Top-2 Accuracy = 0.415 
iter 0: [0.23798640077709846] 
setting: maxabsK|rf 
Top-1 Accuracy = 0.2117021884463745 
Top-2 Accuracy = 0.361 
iter 1: [0.2117021884463745] 
setting: standardizel|rf 
Top-1 Accuracy = 0.21673047254442604 
Top-2 Accuracy = 0.367 
iter 2: [0.21673047254442604] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.2712987829266899 
Top-2 Accuracy = 0.448 
iter 3: [0.2712987829266899] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.23581509628021255 
Top-2 Accuracy = 0.415 
iter 4: [0.23581509628021255] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.21153076967030454 
Top-2 Accuracy = 0.361 
iter 5: [0.21153076967030454] 
setting: robusty|rf 
Top-1 Accuracy = 0.23575795668818925 
Top-2 Accuracy = 0.42 
iter 6: [0.23575795668818925] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.23575795668818925 
Top-2 Accuracy = 0.422 
iter 7: [0.23575795668818925] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.27055596823038686 
Top-2 Accuracy = 0.448 
iter 8: [0.27055596823038686] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.21513056396777328 
Top-2 Accuracy = 0.364 
iter 9: [0.21513056396777328] 
setting: normalizei|rf 
Top-1 Accuracy = 0.26347065881949605 
Top-2 Accuracy = 0.439 
iter 10: [0.26347065881949605] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.2118164676304211 
Top-2 Accuracy = 0.361 
iter 11: [0.2118164676304211] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.2708416661905034 
Top-2 Accuracy = 0.45 
iter 12: [0.2708416661905034] 
setting: standardizer|rf 
Top-1 Accuracy = 0.27072738700645677 
Top-2 Accuracy = 0.45 
iter 13: [0.27072738700645677] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.2594708873778641 
Top-2 Accuracy = 0.425 
iter 14: [0.2594708873778641] 
setting: robustA|rf 
Top-1 Accuracy = 0.2594708873778641 
Top-2 Accuracy = 0.425 
iter 15: [0.2594708873778641] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.21244500314267756 
Top-2 Accuracy = 0.364 
iter 16: [0.21244500314267756] 
setting: maxabsu|rf 
Top-1 Accuracy = 0.21295925947088737 
Top-2 Accuracy = 0.363 
iter 17: [0.21295925947088737] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.21633049540026283 
Top-2 Accuracy = 0.365 
iter 18: [0.21633049540026283] 
setting: maxabsN|rf 
Top-1 Accuracy = 0.2594708873778641 
Top-2 Accuracy = 0.425 
iter 19: [0.2594708873778641] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.2594708873778641 
Top-2 Accuracy = 0.425 
iter 20: [0.2594708873778641] 
setting: normalizew|rf 
Top-1 Accuracy = 0.2351865607679561 
Top-2 Accuracy = 0.411 
iter 21: [0.2351865607679561] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.2351865607679561 
Top-2 Accuracy = 0.415 
iter 22: [0.2351865607679561] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.21495914519170334 
Top-2 Accuracy = 0.365 
iter 23: [0.21495914519170334] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.2708416661905034 
Top-2 Accuracy = 0.45 
iter 24: [0.2708416661905034] 
setting: normalizex|rf 
Top-1 Accuracy = 0.2708416661905034 
Top-2 Accuracy = 0.45 
iter 25: [0.2708416661905034] 
setting: robustQ|rf 
Top-1 Accuracy = 0.22901548482943831 
Top-2 Accuracy = 0.406 
iter 26: [0.22901548482943831] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.23712930689674877 
Top-2 Accuracy = 0.419 
iter 27: [0.23712930689674877] 
setting: normalized|rf 
Top-1 Accuracy = 0.23712930689674877 
Top-2 Accuracy = 0.42 
iter 28: [0.23712930689674877] 
setting: minmaxK|rf 
Top-1 Accuracy = 0.268213244957431 
Top-2 Accuracy = 0.446 
iter 29: [0.268213244957431] 
Run # 19 
======= 
setting: maxabso|rf 
Top-1 Accuracy = 0.25604251185646537 
Top-2 Accuracy = 0.424 
iter 0: [0.25604251185646537] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.25604251185646537 
Top-2 Accuracy = 0.424 
iter 1: [0.25604251185646537] 
setting: standardizer|rf 
Top-1 Accuracy = 0.25604251185646537 
Top-2 Accuracy = 0.424 
iter 2: [0.25604251185646537] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.25604251185646537 
Top-2 Accuracy = 0.424 
iter 3: [0.25604251185646537] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.21410205131135362 
Top-2 Accuracy = 0.365 
iter 4: [0.21410205131135362] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.2166733329524027 
Top-2 Accuracy = 0.365 
iter 5: [0.2166733329524027] 
setting: robustr|rf 
Top-1 Accuracy = 0.25604251185646537 
Top-2 Accuracy = 0.424 
iter 6: [0.25604251185646537] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.2550139992000457 
Top-2 Accuracy = 0.415 
iter 7: [0.2550139992000457] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.2721558768070396 
Top-2 Accuracy = 0.446 
iter 8: [0.2721558768070396] 
setting: robustI|rf 
Top-1 Accuracy = 0.21695903091251928 
Top-2 Accuracy = 0.366 
iter 9: [0.21695903091251928] 
setting: normalizel|rf 
Top-1 Accuracy = 0.2593566081938175 
Top-2 Accuracy = 0.423 
iter 10: [0.2593566081938175] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.2726701331352494 
Top-2 Accuracy = 0.451 
iter 11: [0.2726701331352494] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.2593566081938175 
Top-2 Accuracy = 0.423 
iter 12: [0.2593566081938175] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.23804354036912176 
Top-2 Accuracy = 0.417 
iter 13: [0.23804354036912176] 
setting: robustD|rf 
Top-1 Accuracy = 0.2398720073138678 
Top-2 Accuracy = 0.422 
iter 14: [0.2398720073138678] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.21541626192788985 
Top-2 Accuracy = 0.365 
iter 15: [0.21541626192788985] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.23792926118507512 
Top-2 Accuracy = 0.417 
iter 16: [0.23792926118507512] 
setting: normalizef|rf 
Top-1 Accuracy = 0.22958688074967146 
Top-2 Accuracy = 0.406 
iter 17: [0.22958688074967146] 
setting: robustp|rf 
Top-1 Accuracy = 0.27232729558310953 
Top-2 Accuracy = 0.45 
iter 18: [0.27232729558310953] 
setting: robustk|rf 
Top-1 Accuracy = 0.27232729558310953 
Top-2 Accuracy = 0.45 
iter 19: [0.27232729558310953] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.27324152905548255 
Top-2 Accuracy = 0.447 
iter 20: [0.27324152905548255] 
setting: normalizen|rf 
Top-1 Accuracy = 0.2712987829266899 
Top-2 Accuracy = 0.445 
iter 21: [0.2712987829266899] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.27204159762299296 
Top-2 Accuracy = 0.445 
iter 22: [0.27204159762299296] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.2713559225187132 
Top-2 Accuracy = 0.444 
iter 23: [0.2713559225187132] 
setting: robustU|rf 
Top-1 Accuracy = 0.2712987829266899 
Top-2 Accuracy = 0.445 
iter 24: [0.2712987829266899] 
setting: robusta|rf 
Top-1 Accuracy = 0.2712987829266899 
Top-2 Accuracy = 0.445 
iter 25: [0.2712987829266899] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.2160447974401463 
Top-2 Accuracy = 0.366 
iter 26: [0.2160447974401463] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.27284155191131937 
Top-2 Accuracy = 0.446 
iter 27: [0.27284155191131937] 
setting: maxabss|rf 
Top-1 Accuracy = 0.2350722815839095 
Top-2 Accuracy = 0.41 
iter 28: [0.2350722815839095] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.2584995143134678 
Top-2 Accuracy = 0.419 
iter 29: [0.2584995143134678] 
 
Median top-1 = 0.25604251185646537 
Median top-2 = 0.421 
9 classes 
============================== 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=57), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=56), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=37), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=86), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=76), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=76), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=55), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=99), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=79), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=25), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=76), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=40), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=45), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=67), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=30), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=82), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=57), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=22), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=54), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=58), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=93), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=51), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=70), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=65), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=48), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=72), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=76), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=63), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=86), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=79), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=54), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=35), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=75), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=83), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=96), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=67), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=68), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=53), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=44), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=89), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=14), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=10.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=73), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(criterion='entropy', n_estimators=45), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=24), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=0.1, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy', splitter='random'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=19), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=1000.0, solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': DecisionTreeClassifier(criterion='entropy'), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random']}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': RandomForestClassifier(n_estimators=47), 'name': 'rf', 'random': True, 'random_map': {'criterion': ['gini', 'entropy'], 'n_estimators': (10, 100)}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': LogisticRegression(C=100.0, penalty='l1', solver='liblinear'), 'name': 'rf', 'random': True, 'random_map': {'penalty': ['l1', 'l2'], 'C': [0.1, 1.0, 10.0, 100.0, 1000.0]}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
{'hooks': None, 'learner': GaussianNB(), 'name': 'rf', 'random': True, 'random_map': {}, 'x_test': None, 'x_train': None, 'y_test': None, 'y_train': None} 
Run # 0 
====== 
setting: maxabsV|rf 
Top-1 Accuracy = 0.2560996514484887 
Top-2 Accuracy = 0.424 
iter 0: [0.2560996514484887] 
setting: robustS|rf 
Top-1 Accuracy = 0.256156791040512 
Top-2 Accuracy = 0.424 
iter 1: [0.256156791040512] 
setting: standardizej|rf 
Top-1 Accuracy = 0.23855779669733157 
Top-2 Accuracy = 0.402 
iter 2: [0.23855779669733157] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.25889949145763097 
Top-2 Accuracy = 0.425 
iter 3: [0.25889949145763097] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.23964344894577452 
Top-2 Accuracy = 0.404 
iter 4: [0.23964344894577452] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.21090223415804812 
Top-2 Accuracy = 0.363 
iter 5: [0.21090223415804812] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.24158619507456716 
Top-2 Accuracy = 0.408 
iter 6: [0.24158619507456716] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.24158619507456716 
Top-2 Accuracy = 0.408 
iter 7: [0.24158619507456716] 
setting: robustp|rf 
Top-1 Accuracy = 0.20633106679618307 
Top-2 Accuracy = 0.362 
iter 8: [0.20633106679618307] 
setting: standardizep|rf 
Top-1 Accuracy = 0.20753099822867266 
Top-2 Accuracy = 0.355 
iter 9: [0.20753099822867266] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.24158619507456716 
Top-2 Accuracy = 0.408 
iter 10: [0.24158619507456716] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.24158619507456716 
Top-2 Accuracy = 0.408 
iter 11: [0.24158619507456716] 
setting: robustn|rf 
Top-1 Accuracy = 0.18684646591623336 
Top-2 Accuracy = 0.327 
iter 12: [0.18684646591623336] 
setting: normalizei|rf 
Top-1 Accuracy = 0.18604651162790697 
Top-2 Accuracy = 0.327 
iter 13: [0.18604651162790697] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.24444317467573282 
Top-2 Accuracy = 0.404 
iter 14: [0.24444317467573282] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.24444317467573282 
Top-2 Accuracy = 0.404 
iter 15: [0.24444317467573282] 
setting: robustT|rf 
Top-1 Accuracy = 0.21575909948002972 
Top-2 Accuracy = 0.368 
iter 16: [0.21575909948002972] 
setting: robustv|rf 
Top-1 Accuracy = 0.24444317467573282 
Top-2 Accuracy = 0.404 
iter 17: [0.24444317467573282] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.24444317467573282 
Top-2 Accuracy = 0.404 
iter 18: [0.24444317467573282] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.25735672247300156 
Top-2 Accuracy = 0.425 
iter 19: [0.25735672247300156] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.1892463287812125 
Top-2 Accuracy = 0.33 
iter 20: [0.1892463287812125] 
setting: robuste|rf 
Top-1 Accuracy = 0.21404491171933032 
Top-2 Accuracy = 0.362 
iter 21: [0.21404491171933032] 
setting: normalizem|rf 
Top-1 Accuracy = 0.24244328895491687 
Top-2 Accuracy = 0.407 
iter 22: [0.24244328895491687] 
setting: standardizem|rf 
Top-1 Accuracy = 0.1856465344837438 
Top-2 Accuracy = 0.327 
iter 23: [0.1856465344837438] 
setting: standardizeh|rf 
Top-1 Accuracy = 0.24244328895491687 
Top-2 Accuracy = 0.407 
iter 24: [0.24244328895491687] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.24244328895491687 
Top-2 Accuracy = 0.407 
iter 25: [0.24244328895491687] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.21113079252614136 
Top-2 Accuracy = 0.367 
iter 26: [0.21113079252614136] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.257071024512885 
Top-2 Accuracy = 0.425 
iter 27: [0.257071024512885] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.25661390777669846 
Top-2 Accuracy = 0.425 
iter 28: [0.25661390777669846] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.2147877264156334 
Top-2 Accuracy = 0.363 
iter 29: [0.2147877264156334] 
Run # 1 
====== 
setting: minmaxL|rf 
Top-1 Accuracy = 0.21244500314267756 
Top-2 Accuracy = 0.363 
iter 0: [0.21244500314267756] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.18907491000514257 
Top-2 Accuracy = 0.329 
iter 1: [0.18907491000514257] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.23981486772184446 
Top-2 Accuracy = 0.403 
iter 2: [0.23981486772184446] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.23981486772184446 
Top-2 Accuracy = 0.403 
iter 3: [0.23981486772184446] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.18644648877207018 
Top-2 Accuracy = 0.327 
iter 4: [0.18644648877207018] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.23981486772184446 
Top-2 Accuracy = 0.403 
iter 5: [0.23981486772184446] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.25741386206502487 
Top-2 Accuracy = 0.424 
iter 6: [0.25741386206502487] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.21587337866407633 
Top-2 Accuracy = 0.37 
iter 7: [0.21587337866407633] 
setting: maxabse|rf 
Top-1 Accuracy = 0.1862179304039769 
Top-2 Accuracy = 0.325 
iter 8: [0.1862179304039769] 
setting: normalizev|rf 
Top-1 Accuracy = 0.25861379349751445 
Top-2 Accuracy = 0.425 
iter 9: [0.25861379349751445] 
setting: robustb|rf 
Top-1 Accuracy = 0.18907491000514257 
Top-2 Accuracy = 0.33 
iter 10: [0.18907491000514257] 
setting: normalizej|rf 
Top-1 Accuracy = 0.25169990286269356 
Top-2 Accuracy = 0.417 
iter 11: [0.25169990286269356] 
setting: minmaxA|rf 
Top-1 Accuracy = 0.2550139992000457 
Top-2 Accuracy = 0.42 
iter 12: [0.2550139992000457] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.21621621621621623 
Top-2 Accuracy = 0.358 
iter 13: [0.21621621621621623] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.18736072224444317 
Top-2 Accuracy = 0.326 
iter 14: [0.18736072224444317] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.21198788640649105 
Top-2 Accuracy = 0.364 
iter 15: [0.21198788640649105] 
setting: normalizea|rf 
Top-1 Accuracy = 0.23604365464830582 
Top-2 Accuracy = 0.4 
iter 16: [0.23604365464830582] 
setting: robustT|rf 
Top-1 Accuracy = 0.2512427861265071 
Top-2 Accuracy = 0.419 
iter 17: [0.2512427861265071] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.2535855093994629 
Top-2 Accuracy = 0.42 
iter 18: [0.2535855093994629] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.23450088566367636 
Top-2 Accuracy = 0.396 
iter 19: [0.23450088566367636] 
setting: robustP|rf 
Top-1 Accuracy = 0.25438546368778925 
Top-2 Accuracy = 0.42 
iter 20: [0.25438546368778925] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.25427118450374264 
Top-2 Accuracy = 0.42 
iter 21: [0.25427118450374264] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.21415919090337696 
Top-2 Accuracy = 0.364 
iter 22: [0.21415919090337696] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.25398548654362607 
Top-2 Accuracy = 0.419 
iter 23: [0.25398548654362607] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.21210216559053768 
Top-2 Accuracy = 0.361 
iter 24: [0.21210216559053768] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.2536997885835095 
Top-2 Accuracy = 0.42 
iter 25: [0.2536997885835095] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.18650362836409348 
Top-2 Accuracy = 0.327 
iter 26: [0.18650362836409348] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.23832923832923833 
Top-2 Accuracy = 0.402 
iter 27: [0.23832923832923833] 
setting: robustH|rf 
Top-1 Accuracy = 0.25667104736872176 
Top-2 Accuracy = 0.423 
iter 28: [0.25667104736872176] 
setting: standardizea|rf 
Top-1 Accuracy = 0.23832923832923833 
Top-2 Accuracy = 0.402 
iter 29: [0.23832923832923833] 
Run # 2 
====== 
setting: maxabsd|rf 
Top-1 Accuracy = 0.2571281641049083 
Top-2 Accuracy = 0.422 
iter 0: [0.2571281641049083] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.1874750014284898 
Top-2 Accuracy = 0.329 
iter 1: [0.1874750014284898] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.2519284612307868 
Top-2 Accuracy = 0.419 
iter 2: [0.2519284612307868] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.21598765784812296 
Top-2 Accuracy = 0.366 
iter 3: [0.21598765784812296] 
setting: robustF|rf 
Top-1 Accuracy = 0.23770070281698188 
Top-2 Accuracy = 0.398 
iter 4: [0.23770070281698188] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.23770070281698188 
Top-2 Accuracy = 0.398 
iter 5: [0.23770070281698188] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.18558939489172047 
Top-2 Accuracy = 0.326 
iter 6: [0.18558939489172047] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.23770070281698188 
Top-2 Accuracy = 0.398 
iter 7: [0.23770070281698188] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.23770070281698188 
Top-2 Accuracy = 0.398 
iter 8: [0.23770070281698188] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.2524427175589966 
Top-2 Accuracy = 0.421 
iter 9: [0.2524427175589966] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.21204502599851438 
Top-2 Accuracy = 0.356 
iter 10: [0.21204502599851438] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.18736072224444317 
Top-2 Accuracy = 0.331 
iter 11: [0.18736072224444317] 
setting: normalizek|rf 
Top-1 Accuracy = 0.23850065710530827 
Top-2 Accuracy = 0.399 
iter 12: [0.23850065710530827] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.21581623907205302 
Top-2 Accuracy = 0.37 
iter 13: [0.21581623907205302] 
setting: maxabss|rf 
Top-1 Accuracy = 0.18913204959716587 
Top-2 Accuracy = 0.328 
iter 14: [0.18913204959716587] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.21187360722244444 
Top-2 Accuracy = 0.356 
iter 15: [0.21187360722244444] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.18867493286097936 
Top-2 Accuracy = 0.329 
iter 16: [0.18867493286097936] 
setting: standardized|rf 
Top-1 Accuracy = 0.18821781612479288 
Top-2 Accuracy = 0.329 
iter 17: [0.18821781612479288] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.1888463516370493 
Top-2 Accuracy = 0.33 
iter 18: [0.1888463516370493] 
setting: standardizer|rf 
Top-1 Accuracy = 0.18547511570767386 
Top-2 Accuracy = 0.327 
iter 19: [0.18547511570767386] 
setting: robusts|rf 
Top-1 Accuracy = 0.1857608136677904 
Top-2 Accuracy = 0.329 
iter 20: [0.1857608136677904] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.23850065710530827 
Top-2 Accuracy = 0.399 
iter 21: [0.23850065710530827] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.23850065710530827 
Top-2 Accuracy = 0.399 
iter 22: [0.23850065710530827] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.25861379349751445 
Top-2 Accuracy = 0.424 
iter 23: [0.25861379349751445] 
setting: robusti|rf 
Top-1 Accuracy = 0.21678761213644934 
Top-2 Accuracy = 0.366 
iter 24: [0.21678761213644934] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.1874750014284898 
Top-2 Accuracy = 0.33 
iter 25: [0.1874750014284898] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.21375921375921375 
Top-2 Accuracy = 0.366 
iter 26: [0.21375921375921375] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.2174161476487058 
Top-2 Accuracy = 0.368 
iter 27: [0.2174161476487058] 
setting: maxabsm|rf 
Top-1 Accuracy = 0.18496085937946402 
Top-2 Accuracy = 0.324 
iter 28: [0.18496085937946402] 
setting: robustb|rf 
Top-1 Accuracy = 0.25907091023370094 
Top-2 Accuracy = 0.424 
iter 29: [0.25907091023370094] 
Run # 3 
====== 
setting: normalizeT|rf 
Top-1 Accuracy = 0.23941489057768128 
Top-2 Accuracy = 0.4 
iter 0: [0.23941489057768128] 
setting: standardizeL|rf 
Top-1 Accuracy = 0.23941489057768128 
Top-2 Accuracy = 0.4 
iter 1: [0.23941489057768128] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.2567281869607451 
Top-2 Accuracy = 0.424 
iter 2: [0.2567281869607451] 
setting: normalizek|rf 
Top-1 Accuracy = 0.25552825552825553 
Top-2 Accuracy = 0.421 
iter 3: [0.25552825552825553] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.1874178618364665 
Top-2 Accuracy = 0.328 
iter 4: [0.1874178618364665] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.2170733100965659 
Top-2 Accuracy = 0.365 
iter 5: [0.2170733100965659] 
setting: robustr|rf 
Top-1 Accuracy = 0.2369578881206788 
Top-2 Accuracy = 0.397 
iter 6: [0.2369578881206788] 
setting: normalizez|rf 
Top-1 Accuracy = 0.23627221301639906 
Top-2 Accuracy = 0.396 
iter 7: [0.23627221301639906] 
setting: robusth|rf 
Top-1 Accuracy = 0.25655676818467515 
Top-2 Accuracy = 0.421 
iter 8: [0.25655676818467515] 
setting: robustR|rf 
Top-1 Accuracy = 0.1857608136677904 
Top-2 Accuracy = 0.327 
iter 9: [0.1857608136677904] 
setting: robustX|rf 
Top-1 Accuracy = 0.25644248900062855 
Top-2 Accuracy = 0.42 
iter 10: [0.25644248900062855] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.25655676818467515 
Top-2 Accuracy = 0.421 
iter 11: [0.25655676818467515] 
setting: robusti|rf 
Top-1 Accuracy = 0.18718930346837323 
Top-2 Accuracy = 0.328 
iter 12: [0.18718930346837323] 
setting: maxabsB|rf 
Top-1 Accuracy = 0.23627221301639906 
Top-2 Accuracy = 0.396 
iter 13: [0.23627221301639906] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.23627221301639906 
Top-2 Accuracy = 0.396 
iter 14: [0.23627221301639906] 
setting: robustB|rf 
Top-1 Accuracy = 0.18644648877207018 
Top-2 Accuracy = 0.328 
iter 15: [0.18644648877207018] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.21101651334209473 
Top-2 Accuracy = 0.358 
iter 16: [0.21101651334209473] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.2139306325352837 
Top-2 Accuracy = 0.362 
iter 17: [0.2139306325352837] 
setting: standardizem|rf 
Top-1 Accuracy = 0.25638534940860525 
Top-2 Accuracy = 0.421 
iter 18: [0.25638534940860525] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.23627221301639906 
Top-2 Accuracy = 0.396 
iter 19: [0.23627221301639906] 
setting: standardizek|rf 
Top-1 Accuracy = 0.2563282098165819 
Top-2 Accuracy = 0.421 
iter 20: [0.2563282098165819] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.25655676818467515 
Top-2 Accuracy = 0.422 
iter 21: [0.25655676818467515] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.20981658190960517 
Top-2 Accuracy = 0.353 
iter 22: [0.20981658190960517] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.25307125307125306 
Top-2 Accuracy = 0.419 
iter 23: [0.25307125307125306] 
setting: maxabsg|rf 
Top-1 Accuracy = 0.20981658190960517 
Top-2 Accuracy = 0.353 
iter 24: [0.20981658190960517] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.21627335580823953 
Top-2 Accuracy = 0.364 
iter 25: [0.21627335580823953] 
setting: standardizel|rf 
Top-1 Accuracy = 0.18581795325981373 
Top-2 Accuracy = 0.326 
iter 26: [0.18581795325981373] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.21593051825609966 
Top-2 Accuracy = 0.366 
iter 27: [0.21593051825609966] 
setting: robusta|rf 
Top-1 Accuracy = 0.18804639734872294 
Top-2 Accuracy = 0.329 
iter 28: [0.18804639734872294] 
setting: normalizes|rf 
Top-1 Accuracy = 0.21518770355979658 
Top-2 Accuracy = 0.366 
iter 29: [0.21518770355979658] 
Run # 4 
====== 
setting: normalizet|rf 
Top-1 Accuracy = 0.18650362836409348 
Top-2 Accuracy = 0.327 
iter 0: [0.18650362836409348] 
setting: maxabsM|rf 
Top-1 Accuracy = 0.18633220958802355 
Top-2 Accuracy = 0.327 
iter 1: [0.18633220958802355] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.23787212159305182 
Top-2 Accuracy = 0.399 
iter 2: [0.23787212159305182] 
setting: normalizei|rf 
Top-1 Accuracy = 0.2113593508942346 
Top-2 Accuracy = 0.362 
iter 3: [0.2113593508942346] 
setting: normalizea|rf 
Top-1 Accuracy = 0.23347237300725673 
Top-2 Accuracy = 0.396 
iter 4: [0.23347237300725673] 
setting: robustX|rf 
Top-1 Accuracy = 0.21250214273470086 
Top-2 Accuracy = 0.366 
iter 5: [0.21250214273470086] 
setting: minmaxU|rf 
Top-1 Accuracy = 0.21467344723158677 
Top-2 Accuracy = 0.368 
iter 6: [0.21467344723158677] 
setting: standardizek|rf 
Top-1 Accuracy = 0.2152448431518199 
Top-2 Accuracy = 0.368 
iter 7: [0.2152448431518199] 
setting: normalizee|rf 
Top-1 Accuracy = 0.257985257985258 
Top-2 Accuracy = 0.424 
iter 8: [0.257985257985258] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.1852465573395806 
Top-2 Accuracy = 0.326 
iter 9: [0.1852465573395806] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.21147363007828124 
Top-2 Accuracy = 0.353 
iter 10: [0.21147363007828124] 
setting: maxabse|rf 
Top-1 Accuracy = 0.257985257985258 
Top-2 Accuracy = 0.424 
iter 11: [0.257985257985258] 
setting: normalizer|rf 
Top-1 Accuracy = 0.19073195817381863 
Top-2 Accuracy = 0.332 
iter 12: [0.19073195817381863] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.21038797782983829 
Top-2 Accuracy = 0.356 
iter 13: [0.21038797782983829] 
setting: minmaxS|rf 
Top-1 Accuracy = 0.18684646591623336 
Top-2 Accuracy = 0.328 
iter 14: [0.18684646591623336] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.23472944403176962 
Top-2 Accuracy = 0.395 
iter 15: [0.23472944403176962] 
setting: robusti|rf 
Top-1 Accuracy = 0.2575852808410948 
Top-2 Accuracy = 0.423 
iter 16: [0.2575852808410948] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.21444488886349353 
Top-2 Accuracy = 0.366 
iter 17: [0.21444488886349353] 
setting: minmaxs|rf 
Top-1 Accuracy = 0.23718644648877207 
Top-2 Accuracy = 0.395 
iter 18: [0.23718644648877207] 
setting: robustH|rf 
Top-1 Accuracy = 0.21335923661505057 
Top-2 Accuracy = 0.368 
iter 19: [0.21335923661505057] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.2592994686017942 
Top-2 Accuracy = 0.424 
iter 20: [0.2592994686017942] 
setting: maxabsi|rf 
Top-1 Accuracy = 0.25872807268156106 
Top-2 Accuracy = 0.423 
iter 21: [0.25872807268156106] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.23718644648877207 
Top-2 Accuracy = 0.395 
iter 22: [0.23718644648877207] 
setting: maxabsz|rf 
Top-1 Accuracy = 0.23718644648877207 
Top-2 Accuracy = 0.395 
iter 23: [0.23718644648877207] 
setting: robustf|rf 
Top-1 Accuracy = 0.20964516313353523 
Top-2 Accuracy = 0.351 
iter 24: [0.20964516313353523] 
setting: standardizez|rf 
Top-1 Accuracy = 0.23718644648877207 
Top-2 Accuracy = 0.395 
iter 25: [0.23718644648877207] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.23718644648877207 
Top-2 Accuracy = 0.395 
iter 26: [0.23718644648877207] 
setting: robusty|rf 
Top-1 Accuracy = 0.18896063082109593 
Top-2 Accuracy = 0.33 
iter 27: [0.18896063082109593] 
setting: normalizej|rf 
Top-1 Accuracy = 0.2515284840866236 
Top-2 Accuracy = 0.418 
iter 28: [0.2515284840866236] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.19067481858179533 
Top-2 Accuracy = 0.33 
iter 29: [0.19067481858179533] 
Run # 5 
====== 
setting: normalizeK|rf 
Top-1 Accuracy = 0.2536997885835095 
Top-2 Accuracy = 0.42 
iter 0: [0.2536997885835095] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.2374150048568653 
Top-2 Accuracy = 0.4 
iter 1: [0.2374150048568653] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.19021770184560882 
Top-2 Accuracy = 0.331 
iter 2: [0.19021770184560882] 
setting: robustl|rf 
Top-1 Accuracy = 0.2546711616479058 
Top-2 Accuracy = 0.419 
iter 3: [0.2546711616479058] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.25604251185646537 
Top-2 Accuracy = 0.419 
iter 4: [0.25604251185646537] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.21444488886349353 
Top-2 Accuracy = 0.36 
iter 5: [0.21444488886349353] 
setting: standardizeS|rf 
Top-1 Accuracy = 0.2558139534883721 
Top-2 Accuracy = 0.42 
iter 6: [0.2558139534883721] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.23650077138449233 
Top-2 Accuracy = 0.397 
iter 7: [0.23650077138449233] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.2147877264156334 
Top-2 Accuracy = 0.364 
iter 8: [0.2147877264156334] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.1852465573395806 
Top-2 Accuracy = 0.326 
iter 9: [0.1852465573395806] 
setting: robustz|rf 
Top-1 Accuracy = 0.21490200559968 
Top-2 Accuracy = 0.368 
iter 10: [0.21490200559968] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.18473230101137078 
Top-2 Accuracy = 0.326 
iter 11: [0.18473230101137078] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.25769956002514144 
Top-2 Accuracy = 0.422 
iter 12: [0.25769956002514144] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.212159305182561 
Top-2 Accuracy = 0.357 
iter 13: [0.212159305182561] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.18558939489172047 
Top-2 Accuracy = 0.327 
iter 14: [0.18558939489172047] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.1857036740757671 
Top-2 Accuracy = 0.327 
iter 15: [0.1857036740757671] 
setting: robustJ|rf 
Top-1 Accuracy = 0.21090223415804812 
Top-2 Accuracy = 0.354 
iter 16: [0.21090223415804812] 
setting: maxabse|rf 
Top-1 Accuracy = 0.23392948974344324 
Top-2 Accuracy = 0.395 
iter 17: [0.23392948974344324] 
setting: maxabss|rf 
Top-1 Accuracy = 0.20930232558139536 
Top-2 Accuracy = 0.357 
iter 18: [0.20930232558139536] 
setting: robustN|rf 
Top-1 Accuracy = 0.18250385692246157 
Top-2 Accuracy = 0.323 
iter 19: [0.18250385692246157] 
setting: standardizep|rf 
Top-1 Accuracy = 0.2170733100965659 
Top-2 Accuracy = 0.369 
iter 20: [0.2170733100965659] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.23392948974344324 
Top-2 Accuracy = 0.395 
iter 21: [0.23392948974344324] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.19033198102965546 
Top-2 Accuracy = 0.33 
iter 22: [0.19033198102965546] 
setting: normalizea|rf 
Top-1 Accuracy = 0.21541626192788985 
Top-2 Accuracy = 0.366 
iter 23: [0.21541626192788985] 
setting: minmaxi|rf 
Top-1 Accuracy = 0.2595280269698874 
Top-2 Accuracy = 0.423 
iter 24: [0.2595280269698874] 
setting: robustk|rf 
Top-1 Accuracy = 0.23392948974344324 
Top-2 Accuracy = 0.395 
iter 25: [0.23392948974344324] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.2597565853379807 
Top-2 Accuracy = 0.423 
iter 26: [0.2597565853379807] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.2126164219187475 
Top-2 Accuracy = 0.364 
iter 27: [0.2126164219187475] 
setting: robustW|rf 
Top-1 Accuracy = 0.18558939489172047 
Top-2 Accuracy = 0.325 
iter 28: [0.18558939489172047] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.23427232729558312 
Top-2 Accuracy = 0.395 
iter 29: [0.23427232729558312] 
Run # 6 
====== 
setting: robustz|rf 
Top-1 Accuracy = 0.213073538654934 
Top-2 Accuracy = 0.365 
iter 0: [0.213073538654934] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.25569967430432544 
Top-2 Accuracy = 0.421 
iter 1: [0.25569967430432544] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.21193074681446775 
Top-2 Accuracy = 0.362 
iter 2: [0.21193074681446775] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.1874178618364665 
Top-2 Accuracy = 0.329 
iter 3: [0.1874178618364665] 
setting: standardizen|rf 
Top-1 Accuracy = 0.1892463287812125 
Top-2 Accuracy = 0.329 
iter 4: [0.1892463287812125] 
setting: minmaxf|rf 
Top-1 Accuracy = 0.2558139534883721 
Top-2 Accuracy = 0.421 
iter 5: [0.2558139534883721] 
setting: maxabsT|rf 
Top-1 Accuracy = 0.18638934918004685 
Top-2 Accuracy = 0.328 
iter 6: [0.18638934918004685] 
setting: normalizek|rf 
Top-1 Accuracy = 0.18376092794697446 
Top-2 Accuracy = 0.323 
iter 7: [0.18376092794697446] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.25689960573681503 
Top-2 Accuracy = 0.422 
iter 8: [0.25689960573681503] 
setting: standardizeY|rf 
Top-1 Accuracy = 0.21158790926232787 
Top-2 Accuracy = 0.364 
iter 9: [0.21158790926232787] 
setting: robustw|rf 
Top-1 Accuracy = 0.25644248900062855 
Top-2 Accuracy = 0.422 
iter 10: [0.25644248900062855] 
setting: robustB|rf 
Top-1 Accuracy = 0.2575852808410948 
Top-2 Accuracy = 0.422 
iter 11: [0.2575852808410948] 
setting: robustY|rf 
Top-1 Accuracy = 0.18496085937946402 
Top-2 Accuracy = 0.325 
iter 12: [0.18496085937946402] 
setting: standardizem|rf 
Top-1 Accuracy = 0.2408433803782641 
Top-2 Accuracy = 0.402 
iter 13: [0.2408433803782641] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.25769956002514144 
Top-2 Accuracy = 0.422 
iter 14: [0.25769956002514144] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.21695903091251928 
Top-2 Accuracy = 0.367 
iter 15: [0.21695903091251928] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.2143306096794469 
Top-2 Accuracy = 0.366 
iter 16: [0.2143306096794469] 
setting: maxabse|rf 
Top-1 Accuracy = 0.2381578195531684 
Top-2 Accuracy = 0.4 
iter 17: [0.2381578195531684] 
setting: minmaxL|rf 
Top-1 Accuracy = 0.25878521227358436 
Top-2 Accuracy = 0.425 
iter 18: [0.25878521227358436] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.25907091023370094 
Top-2 Accuracy = 0.425 
iter 19: [0.25907091023370094] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.25878521227358436 
Top-2 Accuracy = 0.425 
iter 20: [0.25878521227358436] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.25901377064167763 
Top-2 Accuracy = 0.425 
iter 21: [0.25901377064167763] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.18513227815553396 
Top-2 Accuracy = 0.326 
iter 22: [0.18513227815553396] 
setting: standardizeg|rf 
Top-1 Accuracy = 0.19033198102965546 
Top-2 Accuracy = 0.33 
iter 23: [0.19033198102965546] 
setting: robustr|rf 
Top-1 Accuracy = 0.21387349294326038 
Top-2 Accuracy = 0.363 
iter 24: [0.21387349294326038] 
setting: standardizes|rf 
Top-1 Accuracy = 0.2381578195531684 
Top-2 Accuracy = 0.4 
iter 25: [0.2381578195531684] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.2161019370321696 
Top-2 Accuracy = 0.366 
iter 26: [0.2161019370321696] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.2386149362893549 
Top-2 Accuracy = 0.4 
iter 27: [0.2386149362893549] 
setting: robustQ|rf 
Top-1 Accuracy = 0.25901377064167763 
Top-2 Accuracy = 0.425 
iter 28: [0.25901377064167763] 
setting: robustZ|rf 
Top-1 Accuracy = 0.18673218673218672 
Top-2 Accuracy = 0.327 
iter 29: [0.18673218673218672] 
Run # 7 
====== 
setting: maxabsY|rf 
Top-1 Accuracy = 0.18804639734872294 
Top-2 Accuracy = 0.33 
iter 0: [0.18804639734872294] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.18690360550825666 
Top-2 Accuracy = 0.328 
iter 1: [0.18690360550825666] 
setting: minmaxd|rf 
Top-1 Accuracy = 0.2382149591451917 
Top-2 Accuracy = 0.4 
iter 2: [0.2382149591451917] 
setting: normalizeC|rf 
Top-1 Accuracy = 0.2572995828809782 
Top-2 Accuracy = 0.422 
iter 3: [0.2572995828809782] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.21375921375921375 
Top-2 Accuracy = 0.365 
iter 4: [0.21375921375921375] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.21553054111193645 
Top-2 Accuracy = 0.366 
iter 5: [0.21553054111193645] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.18758928061253644 
Top-2 Accuracy = 0.33 
iter 6: [0.18758928061253644] 
setting: robustx|rf 
Top-1 Accuracy = 0.18673218673218672 
Top-2 Accuracy = 0.329 
iter 7: [0.18673218673218672] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.23770070281698188 
Top-2 Accuracy = 0.397 
iter 8: [0.23770070281698188] 
setting: maxabsI|rf 
Top-1 Accuracy = 0.23770070281698188 
Top-2 Accuracy = 0.397 
iter 9: [0.23770070281698188] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.23770070281698188 
Top-2 Accuracy = 0.397 
iter 10: [0.23770070281698188] 
setting: robustX|rf 
Top-1 Accuracy = 0.23770070281698188 
Top-2 Accuracy = 0.397 
iter 11: [0.23770070281698188] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.23770070281698188 
Top-2 Accuracy = 0.397 
iter 12: [0.23770070281698188] 
setting: robustf|rf 
Top-1 Accuracy = 0.25169990286269356 
Top-2 Accuracy = 0.419 
iter 13: [0.25169990286269356] 
setting: standardizej|rf 
Top-1 Accuracy = 0.18553225529969716 
Top-2 Accuracy = 0.328 
iter 14: [0.18553225529969716] 
setting: robustJ|rf 
Top-1 Accuracy = 0.23770070281698188 
Top-2 Accuracy = 0.397 
iter 15: [0.23770070281698188] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.23770070281698188 
Top-2 Accuracy = 0.397 
iter 16: [0.23770070281698188] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.23770070281698188 
Top-2 Accuracy = 0.397 
iter 17: [0.23770070281698188] 
setting: normalizej|rf 
Top-1 Accuracy = 0.2492429004056911 
Top-2 Accuracy = 0.414 
iter 18: [0.2492429004056911] 
setting: robustR|rf 
Top-1 Accuracy = 0.18410376549911434 
Top-2 Accuracy = 0.324 
iter 19: [0.18410376549911434] 
setting: standardizei|rf 
Top-1 Accuracy = 0.18644648877207018 
Top-2 Accuracy = 0.327 
iter 20: [0.18644648877207018] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.18536083652362723 
Top-2 Accuracy = 0.327 
iter 21: [0.18536083652362723] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.2390720530255414 
Top-2 Accuracy = 0.4 
iter 22: [0.2390720530255414] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.2130163990629107 
Top-2 Accuracy = 0.362 
iter 23: [0.2130163990629107] 
setting: standardizes|rf 
Top-1 Accuracy = 0.24952859836580768 
Top-2 Accuracy = 0.415 
iter 24: [0.24952859836580768] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.25289983429518315 
Top-2 Accuracy = 0.418 
iter 25: [0.25289983429518315] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.1861607908119536 
Top-2 Accuracy = 0.328 
iter 26: [0.1861607908119536] 
setting: normalizew|rf 
Top-1 Accuracy = 0.18410376549911434 
Top-2 Accuracy = 0.327 
iter 27: [0.18410376549911434] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.2547283012399291 
Top-2 Accuracy = 0.419 
iter 28: [0.2547283012399291] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.21233072395863092 
Top-2 Accuracy = 0.361 
iter 29: [0.21233072395863092] 
Run # 8 
====== 
setting: maxabsd|rf 
Top-1 Accuracy = 0.18427518427518427 
Top-2 Accuracy = 0.327 
iter 0: [0.18427518427518427] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.21535912233586652 
Top-2 Accuracy = 0.368 
iter 1: [0.21535912233586652] 
setting: robustG|rf 
Top-1 Accuracy = 0.18844637449288612 
Top-2 Accuracy = 0.33 
iter 2: [0.18844637449288612] 
setting: normalizez|rf 
Top-1 Accuracy = 0.25204274041483343 
Top-2 Accuracy = 0.418 
iter 3: [0.25204274041483343] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.23490086280783956 
Top-2 Accuracy = 0.396 
iter 4: [0.23490086280783956] 
setting: standardizel|rf 
Top-1 Accuracy = 0.25198560082281013 
Top-2 Accuracy = 0.417 
iter 5: [0.25198560082281013] 
setting: standardizet|rf 
Top-1 Accuracy = 0.23490086280783956 
Top-2 Accuracy = 0.396 
iter 6: [0.23490086280783956] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.23712930689674877 
Top-2 Accuracy = 0.397 
iter 7: [0.23712930689674877] 
setting: minmaxu|rf 
Top-1 Accuracy = 0.2562139306325353 
Top-2 Accuracy = 0.421 
iter 8: [0.2562139306325353] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.2583852351294212 
Top-2 Accuracy = 0.422 
iter 9: [0.2583852351294212] 
setting: robustf|rf 
Top-1 Accuracy = 0.21593051825609966 
Top-2 Accuracy = 0.365 
iter 10: [0.21593051825609966] 
setting: robusty|rf 
Top-1 Accuracy = 0.1879892577566996 
Top-2 Accuracy = 0.33 
iter 11: [0.1879892577566996] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.18610365121993028 
Top-2 Accuracy = 0.327 
iter 12: [0.18610365121993028] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.2583852351294212 
Top-2 Accuracy = 0.422 
iter 13: [0.2583852351294212] 
setting: minmaxZ|rf 
Top-1 Accuracy = 0.25564253471230214 
Top-2 Accuracy = 0.421 
iter 14: [0.25564253471230214] 
setting: normalizeR|rf 
Top-1 Accuracy = 0.21244500314267756 
Top-2 Accuracy = 0.361 
iter 15: [0.21244500314267756] 
setting: maxabsY|rf 
Top-1 Accuracy = 0.2568424661447917 
Top-2 Accuracy = 0.421 
iter 16: [0.2568424661447917] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.18861779326895606 
Top-2 Accuracy = 0.329 
iter 17: [0.18861779326895606] 
setting: standardizey|rf 
Top-1 Accuracy = 0.2593566081938175 
Top-2 Accuracy = 0.422 
iter 18: [0.2593566081938175] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.2369007485286555 
Top-2 Accuracy = 0.397 
iter 19: [0.2369007485286555] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.2143877492714702 
Top-2 Accuracy = 0.361 
iter 20: [0.2143877492714702] 
setting: robustB|rf 
Top-1 Accuracy = 0.2369007485286555 
Top-2 Accuracy = 0.397 
iter 21: [0.2369007485286555] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.25912804982572424 
Top-2 Accuracy = 0.422 
iter 22: [0.25912804982572424] 
setting: maxabsH|rf 
Top-1 Accuracy = 0.25924232900977084 
Top-2 Accuracy = 0.423 
iter 23: [0.25924232900977084] 
setting: standardizew|rf 
Top-1 Accuracy = 0.25924232900977084 
Top-2 Accuracy = 0.423 
iter 24: [0.25924232900977084] 
setting: standardizen|rf 
Top-1 Accuracy = 0.2369007485286555 
Top-2 Accuracy = 0.397 
iter 25: [0.2369007485286555] 
setting: normalizen|rf 
Top-1 Accuracy = 0.25912804982572424 
Top-2 Accuracy = 0.421 
iter 26: [0.25912804982572424] 
setting: normalizeN|rf 
Top-1 Accuracy = 0.21090223415804812 
Top-2 Accuracy = 0.355 
iter 27: [0.21090223415804812] 
setting: normalizeH|rf 
Top-1 Accuracy = 0.1879892577566996 
Top-2 Accuracy = 0.329 
iter 28: [0.1879892577566996] 
setting: normalizew|rf 
Top-1 Accuracy = 0.2369007485286555 
Top-2 Accuracy = 0.398 
iter 29: [0.2369007485286555] 
Run # 9 
====== 
setting: maxabso|rf 
Top-1 Accuracy = 0.18593223244386034 
Top-2 Accuracy = 0.328 
iter 0: [0.18593223244386034] 
setting: maxabsw|rf 
Top-1 Accuracy = 0.25889949145763097 
Top-2 Accuracy = 0.422 
iter 1: [0.25889949145763097] 
setting: minmaxF|rf 
Top-1 Accuracy = 0.18993200388549225 
Top-2 Accuracy = 0.332 
iter 2: [0.18993200388549225] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.2369007485286555 
Top-2 Accuracy = 0.398 
iter 3: [0.2369007485286555] 
setting: maxabsF|rf 
Top-1 Accuracy = 0.2369007485286555 
Top-2 Accuracy = 0.398 
iter 4: [0.2369007485286555] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.2369007485286555 
Top-2 Accuracy = 0.398 
iter 5: [0.2369007485286555] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.2363293526084224 
Top-2 Accuracy = 0.398 
iter 6: [0.2363293526084224] 
setting: maxabsn|rf 
Top-1 Accuracy = 0.21090223415804812 
Top-2 Accuracy = 0.354 
iter 7: [0.21090223415804812] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.2363293526084224 
Top-2 Accuracy = 0.398 
iter 8: [0.2363293526084224] 
setting: maxabsK|rf 
Top-1 Accuracy = 0.2580423975772813 
Top-2 Accuracy = 0.423 
iter 9: [0.2580423975772813] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.2580423975772813 
Top-2 Accuracy = 0.422 
iter 10: [0.2580423975772813] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.2580423975772813 
Top-2 Accuracy = 0.423 
iter 11: [0.2580423975772813] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.2581566767613279 
Top-2 Accuracy = 0.421 
iter 12: [0.2581566767613279] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.18673218673218672 
Top-2 Accuracy = 0.327 
iter 13: [0.18673218673218672] 
setting: minmaxE|rf 
Top-1 Accuracy = 0.2363293526084224 
Top-2 Accuracy = 0.398 
iter 14: [0.2363293526084224] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.2580423975772813 
Top-2 Accuracy = 0.423 
iter 15: [0.2580423975772813] 
setting: robustf|rf 
Top-1 Accuracy = 0.2580423975772813 
Top-2 Accuracy = 0.423 
iter 16: [0.2580423975772813] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.2580423975772813 
Top-2 Accuracy = 0.423 
iter 17: [0.2580423975772813] 
setting: robustm|rf 
Top-1 Accuracy = 0.257985257985258 
Top-2 Accuracy = 0.423 
iter 18: [0.257985257985258] 
setting: standardizej|rf 
Top-1 Accuracy = 0.18913204959716587 
Top-2 Accuracy = 0.329 
iter 19: [0.18913204959716587] 
setting: normalizem|rf 
Top-1 Accuracy = 0.25907091023370094 
Top-2 Accuracy = 0.423 
iter 20: [0.25907091023370094] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.18764642020455974 
Top-2 Accuracy = 0.329 
iter 21: [0.18764642020455974] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.18821781612479288 
Top-2 Accuracy = 0.328 
iter 22: [0.18821781612479288] 
setting: robusts|rf 
Top-1 Accuracy = 0.21267356151077083 
Top-2 Accuracy = 0.363 
iter 23: [0.21267356151077083] 
setting: standardizem|rf 
Top-1 Accuracy = 0.18656076795611679 
Top-2 Accuracy = 0.327 
iter 24: [0.18656076795611679] 
setting: robustu|rf 
Top-1 Accuracy = 0.2374150048568653 
Top-2 Accuracy = 0.398 
iter 25: [0.2374150048568653] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.25872807268156106 
Top-2 Accuracy = 0.422 
iter 26: [0.25872807268156106] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.2374150048568653 
Top-2 Accuracy = 0.398 
iter 27: [0.2374150048568653] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.188789212045026 
Top-2 Accuracy = 0.329 
iter 28: [0.188789212045026] 
setting: robustB|rf 
Top-1 Accuracy = 0.25907091023370094 
Top-2 Accuracy = 0.423 
iter 29: [0.25907091023370094] 
Run # 10 
======= 
setting: robusts|rf 
Top-1 Accuracy = 0.2584995143134678 
Top-2 Accuracy = 0.422 
iter 0: [0.2584995143134678] 
setting: normalizeb|rf 
Top-1 Accuracy = 0.23701502771270214 
Top-2 Accuracy = 0.399 
iter 1: [0.23701502771270214] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.1853036969316039 
Top-2 Accuracy = 0.326 
iter 2: [0.1853036969316039] 
setting: robustA|rf 
Top-1 Accuracy = 0.21153076967030454 
Top-2 Accuracy = 0.359 
iter 3: [0.21153076967030454] 
setting: standardizez|rf 
Top-1 Accuracy = 0.18107536712187874 
Top-2 Accuracy = 0.323 
iter 4: [0.18107536712187874] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.2118164676304211 
Top-2 Accuracy = 0.362 
iter 5: [0.2118164676304211] 
setting: maxabsO|rf 
Top-1 Accuracy = 0.25884235186560767 
Top-2 Accuracy = 0.424 
iter 6: [0.25884235186560767] 
setting: standardizex|rf 
Top-1 Accuracy = 0.23701502771270214 
Top-2 Accuracy = 0.399 
iter 7: [0.23701502771270214] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.23701502771270214 
Top-2 Accuracy = 0.399 
iter 8: [0.23701502771270214] 
setting: standardizeQ|rf 
Top-1 Accuracy = 0.25878521227358436 
Top-2 Accuracy = 0.424 
iter 9: [0.25878521227358436] 
setting: normalizef|rf 
Top-1 Accuracy = 0.18787497857265298 
Top-2 Accuracy = 0.328 
iter 10: [0.18787497857265298] 
setting: robustP|rf 
Top-1 Accuracy = 0.23707216730472544 
Top-2 Accuracy = 0.397 
iter 11: [0.23707216730472544] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.23707216730472544 
Top-2 Accuracy = 0.397 
iter 12: [0.23707216730472544] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.21810182275298554 
Top-2 Accuracy = 0.371 
iter 13: [0.21810182275298554] 
setting: normalizeA|rf 
Top-1 Accuracy = 0.18787497857265298 
Top-2 Accuracy = 0.328 
iter 14: [0.18787497857265298] 
setting: robusti|rf 
Top-1 Accuracy = 0.2351865607679561 
Top-2 Accuracy = 0.397 
iter 15: [0.2351865607679561] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.1851894177475573 
Top-2 Accuracy = 0.325 
iter 16: [0.1851894177475573] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.25787097880121135 
Top-2 Accuracy = 0.423 
iter 17: [0.25787097880121135] 
setting: minmaxh|rf 
Top-1 Accuracy = 0.25792811839323465 
Top-2 Accuracy = 0.422 
iter 18: [0.25792811839323465] 
setting: standardizet|rf 
Top-1 Accuracy = 0.2580423975772813 
Top-2 Accuracy = 0.422 
iter 19: [0.2580423975772813] 
setting: standardizec|rf 
Top-1 Accuracy = 0.2580423975772813 
Top-2 Accuracy = 0.422 
iter 20: [0.2580423975772813] 
setting: maxabso|rf 
Top-1 Accuracy = 0.2580995371693046 
Top-2 Accuracy = 0.423 
iter 21: [0.2580995371693046] 
setting: robustm|rf 
Top-1 Accuracy = 0.19027484143763213 
Top-2 Accuracy = 0.332 
iter 22: [0.19027484143763213] 
setting: robustj|rf 
Top-1 Accuracy = 0.2580995371693046 
Top-2 Accuracy = 0.423 
iter 23: [0.2580995371693046] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.21410205131135362 
Top-2 Accuracy = 0.365 
iter 24: [0.21410205131135362] 
setting: robustl|rf 
Top-1 Accuracy = 0.2351865607679561 
Top-2 Accuracy = 0.397 
iter 25: [0.2351865607679561] 
setting: robustd|rf 
Top-1 Accuracy = 0.1870750242843266 
Top-2 Accuracy = 0.327 
iter 26: [0.1870750242843266] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.18901777041311926 
Top-2 Accuracy = 0.329 
iter 27: [0.18901777041311926] 
setting: standardizen|rf 
Top-1 Accuracy = 0.257071024512885 
Top-2 Accuracy = 0.423 
iter 28: [0.257071024512885] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.18844637449288612 
Top-2 Accuracy = 0.33 
iter 29: [0.18844637449288612] 
Run # 11 
======= 
setting: normalizev|rf 
Top-1 Accuracy = 0.2374150048568653 
Top-2 Accuracy = 0.397 
iter 0: [0.2374150048568653] 
setting: normalizes|rf 
Top-1 Accuracy = 0.2374150048568653 
Top-2 Accuracy = 0.397 
iter 1: [0.2374150048568653] 
setting: robustD|rf 
Top-1 Accuracy = 0.20884520884520885 
Top-2 Accuracy = 0.353 
iter 2: [0.20884520884520885] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.25518541797611566 
Top-2 Accuracy = 0.42 
iter 3: [0.25518541797611566] 
setting: standardizep|rf 
Top-1 Accuracy = 0.2134735157990972 
Top-2 Accuracy = 0.366 
iter 4: [0.2134735157990972] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.2567853265527684 
Top-2 Accuracy = 0.42 
iter 5: [0.2567853265527684] 
setting: standardizem|rf 
Top-1 Accuracy = 0.2570138849208617 
Top-2 Accuracy = 0.42 
iter 6: [0.2570138849208617] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.18673218673218672 
Top-2 Accuracy = 0.328 
iter 7: [0.18673218673218672] 
setting: minmaxO|rf 
Top-1 Accuracy = 0.21690189132049598 
Top-2 Accuracy = 0.369 
iter 8: [0.21690189132049598] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.1879892577566996 
Top-2 Accuracy = 0.329 
iter 9: [0.1879892577566996] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.18901777041311926 
Top-2 Accuracy = 0.33 
iter 10: [0.18901777041311926] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.23530083995200274 
Top-2 Accuracy = 0.398 
iter 11: [0.23530083995200274] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.2571281641049083 
Top-2 Accuracy = 0.421 
iter 12: [0.2571281641049083] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.18627506999600024 
Top-2 Accuracy = 0.328 
iter 13: [0.18627506999600024] 
setting: normalizey|rf 
Top-1 Accuracy = 0.2355865379121193 
Top-2 Accuracy = 0.398 
iter 14: [0.2355865379121193] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.2570138849208617 
Top-2 Accuracy = 0.42 
iter 15: [0.2570138849208617] 
setting: minmaxo|rf 
Top-1 Accuracy = 0.25689960573681503 
Top-2 Accuracy = 0.42 
iter 16: [0.25689960573681503] 
setting: minmaxV|rf 
Top-1 Accuracy = 0.25564253471230214 
Top-2 Accuracy = 0.42 
iter 17: [0.25564253471230214] 
setting: robustG|rf 
Top-1 Accuracy = 0.2570138849208617 
Top-2 Accuracy = 0.42 
iter 18: [0.2570138849208617] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.2351294211759328 
Top-2 Accuracy = 0.398 
iter 19: [0.2351294211759328] 
setting: standardizey|rf 
Top-1 Accuracy = 0.2351294211759328 
Top-2 Accuracy = 0.398 
iter 20: [0.2351294211759328] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.2351294211759328 
Top-2 Accuracy = 0.398 
iter 21: [0.2351294211759328] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.2351294211759328 
Top-2 Accuracy = 0.397 
iter 22: [0.2351294211759328] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.2571281641049083 
Top-2 Accuracy = 0.421 
iter 23: [0.2571281641049083] 
setting: normalizep|rf 
Top-1 Accuracy = 0.21290211987886407 
Top-2 Accuracy = 0.356 
iter 24: [0.21290211987886407] 
setting: robustK|rf 
Top-1 Accuracy = 0.25689960573681503 
Top-2 Accuracy = 0.42 
iter 25: [0.25689960573681503] 
setting: robustn|rf 
Top-1 Accuracy = 0.23575795668818925 
Top-2 Accuracy = 0.397 
iter 26: [0.23575795668818925] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.18827495571681618 
Top-2 Accuracy = 0.33 
iter 27: [0.18827495571681618] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.2568424661447917 
Top-2 Accuracy = 0.42 
iter 28: [0.2568424661447917] 
setting: minmaxv|rf 
Top-1 Accuracy = 0.23575795668818925 
Top-2 Accuracy = 0.397 
iter 29: [0.23575795668818925] 
Run # 12 
======= 
setting: normalizep|rf 
Top-1 Accuracy = 0.1870750242843266 
Top-2 Accuracy = 0.329 
iter 0: [0.1870750242843266] 
setting: minmaxG|rf 
Top-1 Accuracy = 0.2571853036969316 
Top-2 Accuracy = 0.421 
iter 1: [0.2571853036969316] 
setting: normalizer|rf 
Top-1 Accuracy = 0.2567853265527684 
Top-2 Accuracy = 0.421 
iter 2: [0.2567853265527684] 
setting: standardizef|rf 
Top-1 Accuracy = 0.21330209702302724 
Top-2 Accuracy = 0.363 
iter 3: [0.21330209702302724] 
setting: standardizer|rf 
Top-1 Accuracy = 0.2570138849208617 
Top-2 Accuracy = 0.421 
iter 4: [0.2570138849208617] 
setting: robustj|rf 
Top-1 Accuracy = 0.18696074510028 
Top-2 Accuracy = 0.329 
iter 5: [0.18696074510028] 
setting: robustM|rf 
Top-1 Accuracy = 0.23530083995200274 
Top-2 Accuracy = 0.398 
iter 6: [0.23530083995200274] 
setting: minmaxW|rf 
Top-1 Accuracy = 0.1887320724530027 
Top-2 Accuracy = 0.329 
iter 7: [0.1887320724530027] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.23530083995200274 
Top-2 Accuracy = 0.398 
iter 8: [0.23530083995200274] 
setting: robustX|rf 
Top-1 Accuracy = 0.19033198102965546 
Top-2 Accuracy = 0.331 
iter 9: [0.19033198102965546] 
setting: standardizet|rf 
Top-1 Accuracy = 0.23530083995200274 
Top-2 Accuracy = 0.398 
iter 10: [0.23530083995200274] 
setting: normalizee|rf 
Top-1 Accuracy = 0.23581509628021255 
Top-2 Accuracy = 0.398 
iter 11: [0.23581509628021255] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.23484372321581623 
Top-2 Accuracy = 0.397 
iter 12: [0.23484372321581623] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.25867093308953776 
Top-2 Accuracy = 0.423 
iter 13: [0.25867093308953776] 
setting: maxabsf|rf 
Top-1 Accuracy = 0.25781383920918804 
Top-2 Accuracy = 0.421 
iter 14: [0.25781383920918804] 
setting: normalizel|rf 
Top-1 Accuracy = 0.23627221301639906 
Top-2 Accuracy = 0.396 
iter 15: [0.23627221301639906] 
setting: robustQ|rf 
Top-1 Accuracy = 0.18644648877207018 
Top-2 Accuracy = 0.327 
iter 16: [0.18644648877207018] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.2526141363350666 
Top-2 Accuracy = 0.417 
iter 17: [0.2526141363350666] 
setting: standardizeM|rf 
Top-1 Accuracy = 0.21193074681446775 
Top-2 Accuracy = 0.36 
iter 18: [0.21193074681446775] 
setting: standardizec|rf 
Top-1 Accuracy = 0.21490200559968 
Top-2 Accuracy = 0.366 
iter 19: [0.21490200559968] 
setting: standardizez|rf 
Top-1 Accuracy = 0.23450088566367636 
Top-2 Accuracy = 0.395 
iter 20: [0.23450088566367636] 
setting: minmaxw|rf 
Top-1 Accuracy = 0.23450088566367636 
Top-2 Accuracy = 0.395 
iter 21: [0.23450088566367636] 
setting: standardizep|rf 
Top-1 Accuracy = 0.18507513856351065 
Top-2 Accuracy = 0.328 
iter 22: [0.18507513856351065] 
setting: normalizex|rf 
Top-1 Accuracy = 0.23535797954402607 
Top-2 Accuracy = 0.397 
iter 23: [0.23535797954402607] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.23535797954402607 
Top-2 Accuracy = 0.397 
iter 24: [0.23535797954402607] 
setting: robustd|rf 
Top-1 Accuracy = 0.23535797954402607 
Top-2 Accuracy = 0.397 
iter 25: [0.23535797954402607] 
setting: normalizej|rf 
Top-1 Accuracy = 0.20713102108450945 
Top-2 Accuracy = 0.355 
iter 26: [0.20713102108450945] 
setting: robustF|rf 
Top-1 Accuracy = 0.24970001714187762 
Top-2 Accuracy = 0.417 
iter 27: [0.24970001714187762] 
setting: standardizem|rf 
Top-1 Accuracy = 0.2492429004056911 
Top-2 Accuracy = 0.418 
iter 28: [0.2492429004056911] 
setting: standardized|rf 
Top-1 Accuracy = 0.212159305182561 
Top-2 Accuracy = 0.363 
iter 29: [0.212159305182561] 
Run # 13 
======= 
setting: maxabsi|rf 
Top-1 Accuracy = 0.24970001714187762 
Top-2 Accuracy = 0.416 
iter 0: [0.24970001714187762] 
setting: standardizei|rf 
Top-1 Accuracy = 0.21198788640649105 
Top-2 Accuracy = 0.363 
iter 1: [0.21198788640649105] 
setting: normalizeE|rf 
Top-1 Accuracy = 0.18976058510942231 
Top-2 Accuracy = 0.331 
iter 2: [0.18976058510942231] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.18781783898062968 
Top-2 Accuracy = 0.329 
iter 3: [0.18781783898062968] 
setting: standardizeo|rf 
Top-1 Accuracy = 0.18896063082109593 
Top-2 Accuracy = 0.331 
iter 4: [0.18896063082109593] 
setting: minmaxM|rf 
Top-1 Accuracy = 0.23655791097651563 
Top-2 Accuracy = 0.394 
iter 5: [0.23655791097651563] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.23655791097651563 
Top-2 Accuracy = 0.394 
iter 6: [0.23655791097651563] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.1856465344837438 
Top-2 Accuracy = 0.326 
iter 7: [0.1856465344837438] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.23655791097651563 
Top-2 Accuracy = 0.394 
iter 8: [0.23655791097651563] 
setting: robustj|rf 
Top-1 Accuracy = 0.1905605393977487 
Top-2 Accuracy = 0.33 
iter 9: [0.1905605393977487] 
setting: minmaxe|rf 
Top-1 Accuracy = 0.21495914519170334 
Top-2 Accuracy = 0.365 
iter 10: [0.21495914519170334] 
setting: robuste|rf 
Top-1 Accuracy = 0.21324495743100394 
Top-2 Accuracy = 0.361 
iter 11: [0.21324495743100394] 
setting: maxabsk|rf 
Top-1 Accuracy = 0.23655791097651563 
Top-2 Accuracy = 0.394 
iter 12: [0.23655791097651563] 
setting: standardizel|rf 
Top-1 Accuracy = 0.2143877492714702 
Top-2 Accuracy = 0.365 
iter 13: [0.2143877492714702] 
setting: normalizeB|rf 
Top-1 Accuracy = 0.18598937203588367 
Top-2 Accuracy = 0.326 
iter 14: [0.18598937203588367] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.1887320724530027 
Top-2 Accuracy = 0.329 
iter 15: [0.1887320724530027] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.23587223587223588 
Top-2 Accuracy = 0.394 
iter 16: [0.23587223587223588] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.18536083652362723 
Top-2 Accuracy = 0.326 
iter 17: [0.18536083652362723] 
setting: standardizeN|rf 
Top-1 Accuracy = 0.25529969716016226 
Top-2 Accuracy = 0.419 
iter 18: [0.25529969716016226] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.2559282326724187 
Top-2 Accuracy = 0.42 
iter 19: [0.2559282326724187] 
setting: maxabsJ|rf 
Top-1 Accuracy = 0.21490200559968 
Top-2 Accuracy = 0.366 
iter 20: [0.21490200559968] 
setting: normalizea|rf 
Top-1 Accuracy = 0.21627335580823953 
Top-2 Accuracy = 0.366 
iter 21: [0.21627335580823953] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.21335923661505057 
Top-2 Accuracy = 0.355 
iter 22: [0.21335923661505057] 
setting: maxabsb|rf 
Top-1 Accuracy = 0.2540426261356494 
Top-2 Accuracy = 0.42 
iter 23: [0.2540426261356494] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.25398548654362607 
Top-2 Accuracy = 0.42 
iter 24: [0.25398548654362607] 
setting: normalizev|rf 
Top-1 Accuracy = 0.1901034226615622 
Top-2 Accuracy = 0.331 
iter 25: [0.1901034226615622] 
setting: standardizez|rf 
Top-1 Accuracy = 0.235529398320096 
Top-2 Accuracy = 0.397 
iter 26: [0.235529398320096] 
setting: maxabso|rf 
Top-1 Accuracy = 0.235529398320096 
Top-2 Accuracy = 0.397 
iter 27: [0.235529398320096] 
setting: normalizew|rf 
Top-1 Accuracy = 0.18593223244386034 
Top-2 Accuracy = 0.327 
iter 28: [0.18593223244386034] 
setting: robustz|rf 
Top-1 Accuracy = 0.23610079424032912 
Top-2 Accuracy = 0.397 
iter 29: [0.23610079424032912] 
Run # 14 
======= 
setting: robustv|rf 
Top-1 Accuracy = 0.23610079424032912 
Top-2 Accuracy = 0.397 
iter 0: [0.23610079424032912] 
setting: normalizeg|rf 
Top-1 Accuracy = 0.2563282098165819 
Top-2 Accuracy = 0.421 
iter 1: [0.2563282098165819] 
setting: robustr|rf 
Top-1 Accuracy = 0.21415919090337696 
Top-2 Accuracy = 0.368 
iter 2: [0.21415919090337696] 
setting: maxabsG|rf 
Top-1 Accuracy = 0.1914747728701217 
Top-2 Accuracy = 0.332 
iter 3: [0.1914747728701217] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.21021655905376835 
Top-2 Accuracy = 0.353 
iter 4: [0.21021655905376835] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.25649962859265185 
Top-2 Accuracy = 0.42 
iter 5: [0.25649962859265185] 
setting: minmaxH|rf 
Top-1 Accuracy = 0.18804639734872294 
Top-2 Accuracy = 0.328 
iter 6: [0.18804639734872294] 
setting: robustZ|rf 
Top-1 Accuracy = 0.18981772470144564 
Top-2 Accuracy = 0.33 
iter 7: [0.18981772470144564] 
setting: minmaxl|rf 
Top-1 Accuracy = 0.2554139763442089 
Top-2 Accuracy = 0.42 
iter 8: [0.2554139763442089] 
setting: minmaxj|rf 
Top-1 Accuracy = 0.23432946688760642 
Top-2 Accuracy = 0.397 
iter 9: [0.23432946688760642] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.25661390777669846 
Top-2 Accuracy = 0.421 
iter 10: [0.25661390777669846] 
setting: standardizeP|rf 
Top-1 Accuracy = 0.2563282098165819 
Top-2 Accuracy = 0.421 
iter 11: [0.2563282098165819] 
setting: normalizeQ|rf 
Top-1 Accuracy = 0.21415919090337696 
Top-2 Accuracy = 0.362 
iter 12: [0.21415919090337696] 
setting: maxabsc|rf 
Top-1 Accuracy = 0.23490086280783956 
Top-2 Accuracy = 0.398 
iter 13: [0.23490086280783956] 
setting: standardizeD|rf 
Top-1 Accuracy = 0.23490086280783956 
Top-2 Accuracy = 0.398 
iter 14: [0.23490086280783956] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.23490086280783956 
Top-2 Accuracy = 0.398 
iter 15: [0.23490086280783956] 
setting: maxabsA|rf 
Top-1 Accuracy = 0.25735672247300156 
Top-2 Accuracy = 0.422 
iter 16: [0.25735672247300156] 
setting: normalizeT|rf 
Top-1 Accuracy = 0.25872807268156106 
Top-2 Accuracy = 0.422 
iter 17: [0.25872807268156106] 
setting: robustV|rf 
Top-1 Accuracy = 0.23524370035997944 
Top-2 Accuracy = 0.395 
iter 18: [0.23524370035997944] 
setting: normalizeo|rf 
Top-1 Accuracy = 0.21678761213644934 
Top-2 Accuracy = 0.368 
iter 19: [0.21678761213644934] 
setting: normalizel|rf 
Top-1 Accuracy = 0.21461630763956346 
Top-2 Accuracy = 0.362 
iter 20: [0.21461630763956346] 
setting: normalizeU|rf 
Top-1 Accuracy = 0.21324495743100394 
Top-2 Accuracy = 0.364 
iter 21: [0.21324495743100394] 
setting: robustR|rf 
Top-1 Accuracy = 0.2560996514484887 
Top-2 Accuracy = 0.42 
iter 22: [0.2560996514484887] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.18547511570767386 
Top-2 Accuracy = 0.326 
iter 23: [0.18547511570767386] 
setting: robustl|rf 
Top-1 Accuracy = 0.2135306553911205 
Top-2 Accuracy = 0.365 
iter 24: [0.2135306553911205] 
setting: maxabsC|rf 
Top-1 Accuracy = 0.25535683675218557 
Top-2 Accuracy = 0.42 
iter 25: [0.25535683675218557] 
setting: standardized|rf 
Top-1 Accuracy = 0.1862179304039769 
Top-2 Accuracy = 0.328 
iter 26: [0.1862179304039769] 
setting: maxabsx|rf 
Top-1 Accuracy = 0.25604251185646537 
Top-2 Accuracy = 0.42 
iter 27: [0.25604251185646537] 
setting: maxabss|rf 
Top-1 Accuracy = 0.2108450945660248 
Top-2 Accuracy = 0.362 
iter 28: [0.2108450945660248] 
setting: standardizeG|rf 
Top-1 Accuracy = 0.21267356151077083 
Top-2 Accuracy = 0.366 
iter 29: [0.21267356151077083] 
Run # 15 
======= 
setting: robustW|rf 
Top-1 Accuracy = 0.2562139306325353 
Top-2 Accuracy = 0.42 
iter 0: [0.2562139306325353] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.21267356151077083 
Top-2 Accuracy = 0.357 
iter 1: [0.21267356151077083] 
setting: standardizez|rf 
Top-1 Accuracy = 0.256156791040512 
Top-2 Accuracy = 0.42 
iter 2: [0.256156791040512] 
setting: standardizeU|rf 
Top-1 Accuracy = 0.2099308610936518 
Top-2 Accuracy = 0.365 
iter 3: [0.2099308610936518] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.23655791097651563 
Top-2 Accuracy = 0.394 
iter 4: [0.23655791097651563] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.256156791040512 
Top-2 Accuracy = 0.42 
iter 5: [0.256156791040512] 
setting: normalizeS|rf 
Top-1 Accuracy = 0.23610079424032912 
Top-2 Accuracy = 0.393 
iter 6: [0.23610079424032912] 
setting: robustu|rf 
Top-1 Accuracy = 0.23610079424032912 
Top-2 Accuracy = 0.393 
iter 7: [0.23610079424032912] 
setting: maxabsQ|rf 
Top-1 Accuracy = 0.23610079424032912 
Top-2 Accuracy = 0.393 
iter 8: [0.23610079424032912] 
setting: normalizeZ|rf 
Top-1 Accuracy = 0.25878521227358436 
Top-2 Accuracy = 0.422 
iter 9: [0.25878521227358436] 
setting: robustE|rf 
Top-1 Accuracy = 0.21341637620707388 
Top-2 Accuracy = 0.363 
iter 10: [0.21341637620707388] 
setting: standardizeb|rf 
Top-1 Accuracy = 0.1901034226615622 
Top-2 Accuracy = 0.332 
iter 11: [0.1901034226615622] 
setting: normalizeJ|rf 
Top-1 Accuracy = 0.2351865607679561 
Top-2 Accuracy = 0.397 
iter 12: [0.2351865607679561] 
setting: standardizeC|rf 
Top-1 Accuracy = 0.1879321181646763 
Top-2 Accuracy = 0.328 
iter 13: [0.1879321181646763] 
setting: standardizeX|rf 
Top-1 Accuracy = 0.2139306325352837 
Top-2 Accuracy = 0.369 
iter 14: [0.2139306325352837] 
setting: standardizeh|rf 
Top-1 Accuracy = 0.21461630763956346 
Top-2 Accuracy = 0.365 
iter 15: [0.21461630763956346] 
setting: normalizeX|rf 
Top-1 Accuracy = 0.21444488886349353 
Top-2 Accuracy = 0.367 
iter 16: [0.21444488886349353] 
setting: robustX|rf 
Top-1 Accuracy = 0.1834752299868579 
Top-2 Accuracy = 0.325 
iter 17: [0.1834752299868579] 
setting: minmaxx|rf 
Top-1 Accuracy = 0.2576424204331181 
Top-2 Accuracy = 0.421 
iter 18: [0.2576424204331181] 
setting: robusts|rf 
Top-1 Accuracy = 0.2580995371693046 
Top-2 Accuracy = 0.421 
iter 19: [0.2580995371693046] 
setting: minmaxr|rf 
Top-1 Accuracy = 0.21598765784812296 
Top-2 Accuracy = 0.366 
iter 20: [0.21598765784812296] 
setting: minmaxt|rf 
Top-1 Accuracy = 0.18541797611565053 
Top-2 Accuracy = 0.329 
iter 21: [0.18541797611565053] 
setting: normalizeM|rf 
Top-1 Accuracy = 0.25387120735957946 
Top-2 Accuracy = 0.416 
iter 22: [0.25387120735957946] 
setting: standardizeT|rf 
Top-1 Accuracy = 0.25787097880121135 
Top-2 Accuracy = 0.421 
iter 23: [0.25787097880121135] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.23530083995200274 
Top-2 Accuracy = 0.396 
iter 24: [0.23530083995200274] 
setting: robustG|rf 
Top-1 Accuracy = 0.25769956002514144 
Top-2 Accuracy = 0.421 
iter 25: [0.25769956002514144] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.23484372321581623 
Top-2 Accuracy = 0.396 
iter 26: [0.23484372321581623] 
setting: minmaxm|rf 
Top-1 Accuracy = 0.25924232900977084 
Top-2 Accuracy = 0.424 
iter 27: [0.25924232900977084] 
setting: normalizel|rf 
Top-1 Accuracy = 0.2333580938232101 
Top-2 Accuracy = 0.396 
iter 28: [0.2333580938232101] 
setting: robustw|rf 
Top-1 Accuracy = 0.2582709559453745 
Top-2 Accuracy = 0.422 
iter 29: [0.2582709559453745] 
Run # 16 
======= 
setting: normalizeV|rf 
Top-1 Accuracy = 0.25747100165704817 
Top-2 Accuracy = 0.421 
iter 0: [0.25747100165704817] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.1857036740757671 
Top-2 Accuracy = 0.327 
iter 1: [0.1857036740757671] 
setting: minmaxy|rf 
Top-1 Accuracy = 0.1856465344837438 
Top-2 Accuracy = 0.324 
iter 2: [0.1856465344837438] 
setting: robusth|rf 
Top-1 Accuracy = 0.23432946688760642 
Top-2 Accuracy = 0.398 
iter 3: [0.23432946688760642] 
setting: maxabsp|rf 
Top-1 Accuracy = 0.23432946688760642 
Top-2 Accuracy = 0.398 
iter 4: [0.23432946688760642] 
setting: standardizex|rf 
Top-1 Accuracy = 0.25747100165704817 
Top-2 Accuracy = 0.421 
iter 5: [0.25747100165704817] 
setting: normalizeP|rf 
Top-1 Accuracy = 0.18581795325981373 
Top-2 Accuracy = 0.327 
iter 6: [0.18581795325981373] 
setting: standardizeW|rf 
Top-1 Accuracy = 0.23227244157476715 
Top-2 Accuracy = 0.395 
iter 7: [0.23227244157476715] 
setting: robustY|rf 
Top-1 Accuracy = 0.2135306553911205 
Top-2 Accuracy = 0.367 
iter 8: [0.2135306553911205] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.18558939489172047 
Top-2 Accuracy = 0.327 
iter 9: [0.18558939489172047] 
setting: robustX|rf 
Top-1 Accuracy = 0.2572424432889549 
Top-2 Accuracy = 0.422 
iter 10: [0.2572424432889549] 
setting: maxabsS|rf 
Top-1 Accuracy = 0.18718930346837323 
Top-2 Accuracy = 0.329 
iter 11: [0.18718930346837323] 
setting: robustJ|rf 
Top-1 Accuracy = 0.2572995828809782 
Top-2 Accuracy = 0.422 
iter 12: [0.2572995828809782] 
setting: normalizev|rf 
Top-1 Accuracy = 0.20747385863664933 
Top-2 Accuracy = 0.353 
iter 13: [0.20747385863664933] 
setting: minmaxN|rf 
Top-1 Accuracy = 0.2369007485286555 
Top-2 Accuracy = 0.397 
iter 14: [0.2369007485286555] 
setting: normalizef|rf 
Top-1 Accuracy = 0.21490200559968 
Top-2 Accuracy = 0.365 
iter 15: [0.21490200559968] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.18553225529969716 
Top-2 Accuracy = 0.328 
iter 16: [0.18553225529969716] 
setting: standardizeZ|rf 
Top-1 Accuracy = 0.25158562367864695 
Top-2 Accuracy = 0.416 
iter 17: [0.25158562367864695] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.2515284840866236 
Top-2 Accuracy = 0.416 
iter 18: [0.2515284840866236] 
setting: standardizeE|rf 
Top-1 Accuracy = 0.25181418204674016 
Top-2 Accuracy = 0.416 
iter 19: [0.25181418204674016] 
setting: normalizeW|rf 
Top-1 Accuracy = 0.18844637449288612 
Top-2 Accuracy = 0.329 
iter 20: [0.18844637449288612] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.21204502599851438 
Top-2 Accuracy = 0.366 
iter 21: [0.21204502599851438] 
setting: maxabsP|rf 
Top-1 Accuracy = 0.25438546368778925 
Top-2 Accuracy = 0.419 
iter 22: [0.25438546368778925] 
setting: maxabsZ|rf 
Top-1 Accuracy = 0.18673218673218672 
Top-2 Accuracy = 0.328 
iter 23: [0.18673218673218672] 
setting: robustt|rf 
Top-1 Accuracy = 0.21581623907205302 
Top-2 Accuracy = 0.366 
iter 24: [0.21581623907205302] 
setting: minmaxP|rf 
Top-1 Accuracy = 0.23501514199188617 
Top-2 Accuracy = 0.397 
iter 25: [0.23501514199188617] 
setting: normalizez|rf 
Top-1 Accuracy = 0.2351865607679561 
Top-2 Accuracy = 0.397 
iter 26: [0.2351865607679561] 
setting: normalizeI|rf 
Top-1 Accuracy = 0.21158790926232787 
Top-2 Accuracy = 0.361 
iter 27: [0.21158790926232787] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.23570081709616594 
Top-2 Accuracy = 0.397 
iter 28: [0.23570081709616594] 
setting: normalizep|rf 
Top-1 Accuracy = 0.21633049540026283 
Top-2 Accuracy = 0.367 
iter 29: [0.21633049540026283] 
Run # 17 
======= 
setting: robustM|rf 
Top-1 Accuracy = 0.21415919090337696 
Top-2 Accuracy = 0.367 
iter 0: [0.21415919090337696] 
setting: standardizeJ|rf 
Top-1 Accuracy = 0.18850351408490942 
Top-2 Accuracy = 0.328 
iter 1: [0.18850351408490942] 
setting: standardizeu|rf 
Top-1 Accuracy = 0.21541626192788985 
Top-2 Accuracy = 0.367 
iter 2: [0.21541626192788985] 
setting: maxabsr|rf 
Top-1 Accuracy = 0.21558768070395978 
Top-2 Accuracy = 0.365 
iter 3: [0.21558768070395978] 
setting: minmaxB|rf 
Top-1 Accuracy = 0.18673218673218672 
Top-2 Accuracy = 0.329 
iter 4: [0.18673218673218672] 
setting: minmaxD|rf 
Top-1 Accuracy = 0.23570081709616594 
Top-2 Accuracy = 0.397 
iter 5: [0.23570081709616594] 
setting: robustm|rf 
Top-1 Accuracy = 0.18284669447460145 
Top-2 Accuracy = 0.326 
iter 6: [0.18284669447460145] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.21015941946174505 
Top-2 Accuracy = 0.357 
iter 7: [0.21015941946174505] 
setting: robustx|rf 
Top-1 Accuracy = 0.2549568596080224 
Top-2 Accuracy = 0.42 
iter 8: [0.2549568596080224] 
setting: robustu|rf 
Top-1 Accuracy = 0.23570081709616594 
Top-2 Accuracy = 0.397 
iter 9: [0.23570081709616594] 
setting: normalizev|rf 
Top-1 Accuracy = 0.18976058510942231 
Top-2 Accuracy = 0.33 
iter 10: [0.18976058510942231] 
setting: maxabsD|rf 
Top-1 Accuracy = 0.2338723501514199 
Top-2 Accuracy = 0.397 
iter 11: [0.2338723501514199] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.2576424204331181 
Top-2 Accuracy = 0.423 
iter 12: [0.2576424204331181] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.18633220958802355 
Top-2 Accuracy = 0.329 
iter 13: [0.18633220958802355] 
setting: robustz|rf 
Top-1 Accuracy = 0.23410090851951318 
Top-2 Accuracy = 0.396 
iter 14: [0.23410090851951318] 
setting: maxabsd|rf 
Top-1 Accuracy = 0.23410090851951318 
Top-2 Accuracy = 0.396 
iter 15: [0.23410090851951318] 
setting: minmaxb|rf 
Top-1 Accuracy = 0.21387349294326038 
Top-2 Accuracy = 0.363 
iter 16: [0.21387349294326038] 
setting: minmaxY|rf 
Top-1 Accuracy = 0.2576424204331181 
Top-2 Accuracy = 0.423 
iter 17: [0.2576424204331181] 
setting: robustJ|rf 
Top-1 Accuracy = 0.21467344723158677 
Top-2 Accuracy = 0.366 
iter 18: [0.21467344723158677] 
setting: standardizel|rf 
Top-1 Accuracy = 0.1835323695788812 
Top-2 Accuracy = 0.324 
iter 19: [0.1835323695788812] 
setting: maxabsv|rf 
Top-1 Accuracy = 0.18827495571681618 
Top-2 Accuracy = 0.329 
iter 20: [0.18827495571681618] 
setting: robustE|rf 
Top-1 Accuracy = 0.21450202845551683 
Top-2 Accuracy = 0.369 
iter 21: [0.21450202845551683] 
setting: robustv|rf 
Top-1 Accuracy = 0.18644648877207018 
Top-2 Accuracy = 0.327 
iter 22: [0.18644648877207018] 
setting: robustU|rf 
Top-1 Accuracy = 0.23410090851951318 
Top-2 Accuracy = 0.396 
iter 23: [0.23410090851951318] 
setting: robustS|rf 
Top-1 Accuracy = 0.2118164676304211 
Top-2 Accuracy = 0.364 
iter 24: [0.2118164676304211] 
setting: robusth|rf 
Top-1 Accuracy = 0.21198788640649105 
Top-2 Accuracy = 0.364 
iter 25: [0.21198788640649105] 
setting: maxabsV|rf 
Top-1 Accuracy = 0.21427347008742356 
Top-2 Accuracy = 0.369 
iter 26: [0.21427347008742356] 
setting: normalizeL|rf 
Top-1 Accuracy = 0.256156791040512 
Top-2 Accuracy = 0.422 
iter 27: [0.256156791040512] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.25735672247300156 
Top-2 Accuracy = 0.423 
iter 28: [0.25735672247300156] 
setting: maxabsR|rf 
Top-1 Accuracy = 0.23427232729558312 
Top-2 Accuracy = 0.396 
iter 29: [0.23427232729558312] 
Run # 18 
======= 
setting: minmaxV|rf 
Top-1 Accuracy = 0.21330209702302724 
Top-2 Accuracy = 0.36 
iter 0: [0.21330209702302724] 
setting: minmaxX|rf 
Top-1 Accuracy = 0.23427232729558312 
Top-2 Accuracy = 0.396 
iter 1: [0.23427232729558312] 
setting: minmaxR|rf 
Top-1 Accuracy = 0.2575852808410948 
Top-2 Accuracy = 0.423 
iter 2: [0.2575852808410948] 
setting: standardizer|rf 
Top-1 Accuracy = 0.18547511570767386 
Top-2 Accuracy = 0.327 
iter 3: [0.18547511570767386] 
setting: minmaxp|rf 
Top-1 Accuracy = 0.25741386206502487 
Top-2 Accuracy = 0.423 
iter 4: [0.25741386206502487] 
setting: robustL|rf 
Top-1 Accuracy = 0.23427232729558312 
Top-2 Accuracy = 0.396 
iter 5: [0.23427232729558312] 
setting: normalizek|rf 
Top-1 Accuracy = 0.2571853036969316 
Top-2 Accuracy = 0.422 
iter 6: [0.2571853036969316] 
setting: standardizex|rf 
Top-1 Accuracy = 0.1875321410205131 
Top-2 Accuracy = 0.329 
iter 7: [0.1875321410205131] 
setting: robustU|rf 
Top-1 Accuracy = 0.25735672247300156 
Top-2 Accuracy = 0.422 
iter 8: [0.25735672247300156] 
setting: maxabsU|rf 
Top-1 Accuracy = 0.2567853265527684 
Top-2 Accuracy = 0.423 
iter 9: [0.2567853265527684] 
setting: normalizeK|rf 
Top-1 Accuracy = 0.25735672247300156 
Top-2 Accuracy = 0.422 
iter 10: [0.25735672247300156] 
setting: normalizeD|rf 
Top-1 Accuracy = 0.21370207416719045 
Top-2 Accuracy = 0.365 
iter 11: [0.21370207416719045] 
setting: normalizeF|rf 
Top-1 Accuracy = 0.2571853036969316 
Top-2 Accuracy = 0.422 
iter 12: [0.2571853036969316] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.23358665219130337 
Top-2 Accuracy = 0.396 
iter 13: [0.23358665219130337] 
setting: minmaxa|rf 
Top-1 Accuracy = 0.23358665219130337 
Top-2 Accuracy = 0.396 
iter 14: [0.23358665219130337] 
setting: maxabsq|rf 
Top-1 Accuracy = 0.23358665219130337 
Top-2 Accuracy = 0.396 
iter 15: [0.23358665219130337] 
setting: maxabsa|rf 
Top-1 Accuracy = 0.19016056225358552 
Top-2 Accuracy = 0.33 
iter 16: [0.19016056225358552] 
setting: robustm|rf 
Top-1 Accuracy = 0.25787097880121135 
Top-2 Accuracy = 0.422 
iter 17: [0.25787097880121135] 
setting: standardizeF|rf 
Top-1 Accuracy = 0.2139306325352837 
Top-2 Accuracy = 0.361 
iter 18: [0.2139306325352837] 
setting: maxabsW|rf 
Top-1 Accuracy = 0.25735672247300156 
Top-2 Accuracy = 0.422 
iter 19: [0.25735672247300156] 
setting: standardizeO|rf 
Top-1 Accuracy = 0.21210216559053768 
Top-2 Accuracy = 0.362 
iter 20: [0.21210216559053768] 
setting: robustz|rf 
Top-1 Accuracy = 0.2572995828809782 
Top-2 Accuracy = 0.422 
iter 21: [0.2572995828809782] 
setting: maxabsL|rf 
Top-1 Accuracy = 0.21021655905376835 
Top-2 Accuracy = 0.354 
iter 22: [0.21021655905376835] 
setting: maxabsy|rf 
Top-1 Accuracy = 0.18758928061253644 
Top-2 Accuracy = 0.329 
iter 23: [0.18758928061253644] 
setting: standardizeK|rf 
Top-1 Accuracy = 0.2567853265527684 
Top-2 Accuracy = 0.422 
iter 24: [0.2567853265527684] 
setting: standardizes|rf 
Top-1 Accuracy = 0.19124621450202844 
Top-2 Accuracy = 0.332 
iter 25: [0.19124621450202844] 
setting: standardizeR|rf 
Top-1 Accuracy = 0.25735672247300156 
Top-2 Accuracy = 0.422 
iter 26: [0.25735672247300156] 
setting: robusty|rf 
Top-1 Accuracy = 0.21324495743100394 
Top-2 Accuracy = 0.362 
iter 27: [0.21324495743100394] 
setting: minmaxT|rf 
Top-1 Accuracy = 0.23358665219130337 
Top-2 Accuracy = 0.396 
iter 28: [0.23358665219130337] 
setting: normalizeh|rf 
Top-1 Accuracy = 0.1851894177475573 
Top-2 Accuracy = 0.328 
iter 29: [0.1851894177475573] 
Run # 19 
======= 
setting: normalizeq|rf 
Top-1 Accuracy = 0.18656076795611679 
Top-2 Accuracy = 0.327 
iter 0: [0.18656076795611679] 
setting: robustF|rf 
Top-1 Accuracy = 0.23427232729558312 
Top-2 Accuracy = 0.396 
iter 1: [0.23427232729558312] 
setting: maxabss|rf 
Top-1 Accuracy = 0.23427232729558312 
Top-2 Accuracy = 0.396 
iter 2: [0.23427232729558312] 
setting: minmaxn|rf 
Top-1 Accuracy = 0.1853036969316039 
Top-2 Accuracy = 0.327 
iter 3: [0.1853036969316039] 
setting: standardizeV|rf 
Top-1 Accuracy = 0.25735672247300156 
Top-2 Accuracy = 0.421 
iter 4: [0.25735672247300156] 
setting: maxabso|rf 
Top-1 Accuracy = 0.23427232729558312 
Top-2 Accuracy = 0.396 
iter 5: [0.23427232729558312] 
setting: normalizez|rf 
Top-1 Accuracy = 0.2333009542311868 
Top-2 Accuracy = 0.395 
iter 6: [0.2333009542311868] 
setting: robustM|rf 
Top-1 Accuracy = 0.2333009542311868 
Top-2 Accuracy = 0.395 
iter 7: [0.2333009542311868] 
setting: robustf|rf 
Top-1 Accuracy = 0.2333009542311868 
Top-2 Accuracy = 0.395 
iter 8: [0.2333009542311868] 
setting: minmaxk|rf 
Top-1 Accuracy = 0.2134735157990972 
Top-2 Accuracy = 0.366 
iter 9: [0.2134735157990972] 
setting: normalizec|rf 
Top-1 Accuracy = 0.18770355979658304 
Top-2 Accuracy = 0.328 
iter 10: [0.18770355979658304] 
setting: robustL|rf 
Top-1 Accuracy = 0.257985257985258 
Top-2 Accuracy = 0.422 
iter 11: [0.257985257985258] 
setting: normalizeV|rf 
Top-1 Accuracy = 0.18890349122907263 
Top-2 Accuracy = 0.329 
iter 12: [0.18890349122907263] 
setting: maxabsE|rf 
Top-1 Accuracy = 0.25204274041483343 
Top-2 Accuracy = 0.417 
iter 13: [0.25204274041483343] 
setting: minmaxI|rf 
Top-1 Accuracy = 0.21644477458430947 
Top-2 Accuracy = 0.371 
iter 14: [0.21644477458430947] 
setting: maxabsh|rf 
Top-1 Accuracy = 0.25249985715101997 
Top-2 Accuracy = 0.417 
iter 15: [0.25249985715101997] 
setting: normalizea|rf 
Top-1 Accuracy = 0.21141649048625794 
Top-2 Accuracy = 0.362 
iter 16: [0.21141649048625794] 
setting: standardizeB|rf 
Top-1 Accuracy = 0.2558139534883721 
Top-2 Accuracy = 0.419 
iter 17: [0.2558139534883721] 
setting: normalizev|rf 
Top-1 Accuracy = 0.18696074510028 
Top-2 Accuracy = 0.326 
iter 18: [0.18696074510028] 
setting: normalizeG|rf 
Top-1 Accuracy = 0.21690189132049598 
Top-2 Accuracy = 0.368 
iter 19: [0.21690189132049598] 
setting: maxabsl|rf 
Top-1 Accuracy = 0.18690360550825666 
Top-2 Accuracy = 0.327 
iter 20: [0.18690360550825666] 
setting: robustC|rf 
Top-1 Accuracy = 0.18684646591623336 
Top-2 Accuracy = 0.329 
iter 21: [0.18684646591623336] 
setting: minmaxq|rf 
Top-1 Accuracy = 0.18610365121993028 
Top-2 Accuracy = 0.327 
iter 22: [0.18610365121993028] 
setting: normalizeu|rf 
Top-1 Accuracy = 0.23501514199188617 
Top-2 Accuracy = 0.393 
iter 23: [0.23501514199188617] 
setting: robustN|rf 
Top-1 Accuracy = 0.21404491171933032 
Top-2 Accuracy = 0.367 
iter 24: [0.21404491171933032] 
setting: minmaxQ|rf 
Top-1 Accuracy = 0.2117021884463745 
Top-2 Accuracy = 0.362 
iter 25: [0.2117021884463745] 
setting: robustV|rf 
Top-1 Accuracy = 0.23501514199188617 
Top-2 Accuracy = 0.393 
iter 26: [0.23501514199188617] 
setting: robustZ|rf 
Top-1 Accuracy = 0.18490371978744072 
Top-2 Accuracy = 0.326 
iter 27: [0.18490371978744072] 
setting: standardizeI|rf 
Top-1 Accuracy = 0.18496085937946402 
Top-2 Accuracy = 0.327 
iter 28: [0.18496085937946402] 
setting: standardizef|rf 
Top-1 Accuracy = 0.23501514199188617 
Top-2 Accuracy = 0.393 
iter 29: [0.23501514199188617] 
 
Median top-1 = 0.23432946688760642 
Median top-2 = 0.395 
ryedida@dl-cpu-vm:~$  
